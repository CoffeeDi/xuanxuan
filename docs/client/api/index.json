[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "app/.external-ecmascript.js",
    "static": true,
    "longname": "app/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "app/assets/pace/pace.min.js",
    "content": "/*! pace 1.0.0 */\n(function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X=[].slice,Y={}.hasOwnProperty,Z=function(a,b){function c(){this.constructor=a}for(var d in b)Y.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},$=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};for(u={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:\"body\",elements:{checkInterval:100,selectors:[\"body\"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:[\"GET\"],trackWebSockets:!0,ignoreURLs:[]}},C=function(){var a;return null!=(a=\"undefined\"!=typeof performance&&null!==performance&&\"function\"==typeof performance.now?performance.now():void 0)?a:+new Date},E=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,t=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==E&&(E=function(a){return setTimeout(a,50)},t=function(a){return clearTimeout(a)}),G=function(a){var b,c;return b=C(),(c=function(){var d;return d=C()-b,d>=33?(b=C(),a(d,function(){return E(c)})):setTimeout(c,33-d)})()},F=function(){var a,b,c;return c=arguments[0],b=arguments[1],a=3<=arguments.length?X.call(arguments,2):[],\"function\"==typeof c[b]?c[b].apply(c,a):c[b]},v=function(){var a,b,c,d,e,f,g;for(b=arguments[0],d=2<=arguments.length?X.call(arguments,1):[],f=0,g=d.length;g>f;f++)if(c=d[f])for(a in c)Y.call(c,a)&&(e=c[a],null!=b[a]&&\"object\"==typeof b[a]&&null!=e&&\"object\"==typeof e?v(b[a],e):b[a]=e);return b},q=function(a){var b,c,d,e,f;for(c=b=0,e=0,f=a.length;f>e;e++)d=a[e],c+=Math.abs(d),b++;return c/b},x=function(a,b){var c,d,e;if(null==a&&(a=\"options\"),null==b&&(b=!0),e=document.querySelector(\"[data-pace-\"+a+\"]\")){if(c=e.getAttribute(\"data-pace-\"+a),!b)return c;try{return JSON.parse(c)}catch(f){return d=f,\"undefined\"!=typeof console&&null!==console?console.error(\"Error parsing inline pace options\",d):void 0}}},g=function(){function a(){}return a.prototype.on=function(a,b,c,d){var e;return null==d&&(d=!1),null==this.bindings&&(this.bindings={}),null==(e=this.bindings)[a]&&(e[a]=[]),this.bindings[a].push({handler:b,ctx:c,once:d})},a.prototype.once=function(a,b,c){return this.on(a,b,c,!0)},a.prototype.off=function(a,b){var c,d,e;if(null!=(null!=(d=this.bindings)?d[a]:void 0)){if(null==b)return delete this.bindings[a];for(c=0,e=[];c<this.bindings[a].length;)e.push(this.bindings[a][c].handler===b?this.bindings[a].splice(c,1):c++);return e}},a.prototype.trigger=function(){var a,b,c,d,e,f,g,h,i;if(c=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],null!=(g=this.bindings)?g[c]:void 0){for(e=0,i=[];e<this.bindings[c].length;)h=this.bindings[c][e],d=h.handler,b=h.ctx,f=h.once,d.apply(null!=b?b:this,a),i.push(f?this.bindings[c].splice(e,1):e++);return i}},a}(),j=window.Pace||{},window.Pace=j,v(j,g.prototype),D=j.options=v({},u,window.paceOptions,x()),U=[\"ajax\",\"document\",\"eventLag\",\"elements\"],Q=0,S=U.length;S>Q;Q++)K=U[Q],D[K]===!0&&(D[K]=u[K]);i=function(a){function b(){return V=b.__super__.constructor.apply(this,arguments)}return Z(b,a),b}(Error),b=function(){function a(){this.progress=0}return a.prototype.getElement=function(){var a;if(null==this.el){if(a=document.querySelector(D.target),!a)throw new i;this.el=document.createElement(\"div\"),this.el.className=\"pace pace-active\",document.body.className=document.body.className.replace(/pace-done/g,\"\"),document.body.className+=\" pace-running\",this.el.innerHTML='<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>',null!=a.firstChild?a.insertBefore(this.el,a.firstChild):a.appendChild(this.el)}return this.el},a.prototype.finish=function(){var a;return a=this.getElement(),a.className=a.className.replace(\"pace-active\",\"\"),a.className+=\" pace-inactive\",document.body.className=document.body.className.replace(\"pace-running\",\"\"),document.body.className+=\" pace-done\"},a.prototype.update=function(a){return this.progress=a,this.render()},a.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(a){i=a}return this.el=void 0},a.prototype.render=function(){var a,b,c,d,e,f,g;if(null==document.querySelector(D.target))return!1;for(a=this.getElement(),d=\"translate3d(\"+this.progress+\"%, 0, 0)\",g=[\"webkitTransform\",\"msTransform\",\"transform\"],e=0,f=g.length;f>e;e++)b=g[e],a.children[0].style[b]=d;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(a.children[0].setAttribute(\"data-progress-text\",\"\"+(0|this.progress)+\"%\"),this.progress>=100?c=\"99\":(c=this.progress<10?\"0\":\"\",c+=0|this.progress),a.children[0].setAttribute(\"data-progress\",\"\"+c)),this.lastRenderedProgress=this.progress},a.prototype.done=function(){return this.progress>=100},a}(),h=function(){function a(){this.bindings={}}return a.prototype.trigger=function(a,b){var c,d,e,f,g;if(null!=this.bindings[a]){for(f=this.bindings[a],g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(c.call(this,b));return g}},a.prototype.on=function(a,b){var c;return null==(c=this.bindings)[a]&&(c[a]=[]),this.bindings[a].push(b)},a}(),P=window.XMLHttpRequest,O=window.XDomainRequest,N=window.WebSocket,w=function(a,b){var c,d,e,f;f=[];for(d in b.prototype)try{e=b.prototype[d],f.push(null==a[d]&&\"function\"!=typeof e?a[d]=e:void 0)}catch(g){c=g}return f},A=[],j.ignore=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift(\"ignore\"),c=b.apply(null,a),A.shift(),c},j.track=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift(\"track\"),c=b.apply(null,a),A.shift(),c},J=function(a){var b;if(null==a&&(a=\"GET\"),\"track\"===A[0])return\"force\";if(!A.length&&D.ajax){if(\"socket\"===a&&D.ajax.trackWebSockets)return!0;if(b=a.toUpperCase(),$.call(D.ajax.trackMethods,b)>=0)return!0}return!1},k=function(a){function b(){var a,c=this;b.__super__.constructor.apply(this,arguments),a=function(a){var b;return b=a.open,a.open=function(d,e){return J(d)&&c.trigger(\"request\",{type:d,url:e,request:a}),b.apply(a,arguments)}},window.XMLHttpRequest=function(b){var c;return c=new P(b),a(c),c};try{w(window.XMLHttpRequest,P)}catch(d){}if(null!=O){window.XDomainRequest=function(){var b;return b=new O,a(b),b};try{w(window.XDomainRequest,O)}catch(d){}}if(null!=N&&D.ajax.trackWebSockets){window.WebSocket=function(a,b){var d;return d=null!=b?new N(a,b):new N(a),J(\"socket\")&&c.trigger(\"request\",{type:\"socket\",url:a,protocols:b,request:d}),d};try{w(window.WebSocket,N)}catch(d){}}}return Z(b,a),b}(h),R=null,y=function(){return null==R&&(R=new k),R},I=function(a){var b,c,d,e;for(e=D.ajax.ignoreURLs,c=0,d=e.length;d>c;c++)if(b=e[c],\"string\"==typeof b){if(-1!==a.indexOf(b))return!0}else if(b.test(a))return!0;return!1},y().on(\"request\",function(b){var c,d,e,f,g;return f=b.type,e=b.request,g=b.url,I(g)?void 0:j.running||D.restartOnRequestAfter===!1&&\"force\"!==J(f)?void 0:(d=arguments,c=D.restartOnRequestAfter||0,\"boolean\"==typeof c&&(c=0),setTimeout(function(){var b,c,g,h,i,k;if(b=\"socket\"===f?e.readyState<2:0<(h=e.readyState)&&4>h){for(j.restart(),i=j.sources,k=[],c=0,g=i.length;g>c;c++){if(K=i[c],K instanceof a){K.watch.apply(K,d);break}k.push(void 0)}return k}},c))}),a=function(){function a(){var a=this;this.elements=[],y().on(\"request\",function(){return a.watch.apply(a,arguments)})}return a.prototype.watch=function(a){var b,c,d,e;return d=a.type,b=a.request,e=a.url,I(e)?void 0:(c=\"socket\"===d?new n(b):new o(b),this.elements.push(c))},a}(),o=function(){function a(a){var b,c,d,e,f,g,h=this;if(this.progress=0,null!=window.ProgressEvent)for(c=null,a.addEventListener(\"progress\",function(a){return h.progress=a.lengthComputable?100*a.loaded/a.total:h.progress+(100-h.progress)/2},!1),g=[\"load\",\"abort\",\"timeout\",\"error\"],d=0,e=g.length;e>d;d++)b=g[d],a.addEventListener(b,function(){return h.progress=100},!1);else f=a.onreadystatechange,a.onreadystatechange=function(){var b;return 0===(b=a.readyState)||4===b?h.progress=100:3===a.readyState&&(h.progress=50),\"function\"==typeof f?f.apply(null,arguments):void 0}}return a}(),n=function(){function a(a){var b,c,d,e,f=this;for(this.progress=0,e=[\"error\",\"open\"],c=0,d=e.length;d>c;c++)b=e[c],a.addEventListener(b,function(){return f.progress=100},!1)}return a}(),d=function(){function a(a){var b,c,d,f;for(null==a&&(a={}),this.elements=[],null==a.selectors&&(a.selectors=[]),f=a.selectors,c=0,d=f.length;d>c;c++)b=f[c],this.elements.push(new e(b))}return a}(),e=function(){function a(a){this.selector=a,this.progress=0,this.check()}return a.prototype.check=function(){var a=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return a.check()},D.elements.checkInterval)},a.prototype.done=function(){return this.progress=100},a}(),c=function(){function a(){var a,b,c=this;this.progress=null!=(b=this.states[document.readyState])?b:100,a=document.onreadystatechange,document.onreadystatechange=function(){return null!=c.states[document.readyState]&&(c.progress=c.states[document.readyState]),\"function\"==typeof a?a.apply(null,arguments):void 0}}return a.prototype.states={loading:0,interactive:50,complete:100},a}(),f=function(){function a(){var a,b,c,d,e,f=this;this.progress=0,a=0,e=[],d=0,c=C(),b=setInterval(function(){var g;return g=C()-c-50,c=C(),e.push(g),e.length>D.eventLag.sampleCount&&e.shift(),a=q(e),++d>=D.eventLag.minSamples&&a<D.eventLag.lagThreshold?(f.progress=100,clearInterval(b)):f.progress=100*(3/(a+3))},50)}return a}(),m=function(){function a(a){this.source=a,this.last=this.sinceLastUpdate=0,this.rate=D.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=F(this.source,\"progress\"))}return a.prototype.tick=function(a,b){var c;return null==b&&(b=F(this.source,\"progress\")),b>=100&&(this.done=!0),b===this.last?this.sinceLastUpdate+=a:(this.sinceLastUpdate&&(this.rate=(b-this.last)/this.sinceLastUpdate),this.catchup=(b-this.progress)/D.catchupTime,this.sinceLastUpdate=0,this.last=b),b>this.progress&&(this.progress+=this.catchup*a),c=1-Math.pow(this.progress/100,D.easeFactor),this.progress+=c*this.rate*a,this.progress=Math.min(this.lastProgress+D.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},a}(),L=null,H=null,r=null,M=null,p=null,s=null,j.running=!1,z=function(){return D.restartOnPushState?j.restart():void 0},null!=window.history.pushState&&(T=window.history.pushState,window.history.pushState=function(){return z(),T.apply(window.history,arguments)}),null!=window.history.replaceState&&(W=window.history.replaceState,window.history.replaceState=function(){return z(),W.apply(window.history,arguments)}),l={ajax:a,elements:d,document:c,eventLag:f},(B=function(){var a,c,d,e,f,g,h,i;for(j.sources=L=[],g=[\"ajax\",\"elements\",\"document\",\"eventLag\"],c=0,e=g.length;e>c;c++)a=g[c],D[a]!==!1&&L.push(new l[a](D[a]));for(i=null!=(h=D.extraSources)?h:[],d=0,f=i.length;f>d;d++)K=i[d],L.push(new K(D));return j.bar=r=new b,H=[],M=new m})(),j.stop=function(){return j.trigger(\"stop\"),j.running=!1,r.destroy(),s=!0,null!=p&&(\"function\"==typeof t&&t(p),p=null),B()},j.restart=function(){return j.trigger(\"restart\"),j.stop(),j.start()},j.go=function(){var a;return j.running=!0,r.render(),a=C(),s=!1,p=G(function(b,c){var d,e,f,g,h,i,k,l,n,o,p,q,t,u,v,w;for(l=100-r.progress,e=p=0,f=!0,i=q=0,u=L.length;u>q;i=++q)for(K=L[i],o=null!=H[i]?H[i]:H[i]=[],h=null!=(w=K.elements)?w:[K],k=t=0,v=h.length;v>t;k=++t)g=h[k],n=null!=o[k]?o[k]:o[k]=new m(g),f&=n.done,n.done||(e++,p+=n.tick(b));return d=p/e,r.update(M.tick(b,d)),r.done()||f||s?(r.update(100),j.trigger(\"done\"),setTimeout(function(){return r.finish(),j.running=!1,j.trigger(\"hide\")},Math.max(D.ghostTime,Math.max(D.minTime-(C()-a),0)))):c()})},j.start=function(a){v(D,a),j.running=!0;try{r.render()}catch(b){i=b}return document.querySelector(\".pace\")?(j.trigger(\"start\"),j.go()):setTimeout(j.start,50)},\"function\"==typeof define&&define.amd?define(function(){return j}):\"object\"==typeof exports?module.exports=j:D.startOnPageLoad&&j.start()}).call(this);\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/assets/pace/pace.min.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "app/components/app-avatar.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../utils/html-helper';\nimport Avatar from './avatar';\n\n/**\n* AppAvatar 组件 ，显示一个应用图标\n* @class AppAvatar\n* @see https://react.docschina.org/docs/components-and-props.html\n* @extends {PureComponent}\n* @example <caption>导入组件</caption>\n* import AppAvatar from './components/app-avatar';\n* @example\n* <AppAvatar />\n* @reactProps {string|Object|ReactNode} avatar 头像或者用于创建头像的值\n* @reactProps {string|ReactNode} label 应用名称\n* @reactProps {string} className CSS 类名\n* @reactProps {string} children 子组件\n*/\nexport default class AppAvatar extends PureComponent {\n    /**\n    * React 组件属性类型检查\n    * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n    * @static\n    * @memberof AppAvatar\n    * @return {Object}\n    */\n    static propTypes = {\n        avatar: PropTypes.any,\n        label: PropTypes.any,\n        className: PropTypes.string,\n        children: PropTypes.any\n    }\n\n    /**\n    * React 组件默认属性\n    * @see https://react.docschina.org/docs/react-component.html#defaultprops\n    * @type {object}\n    * @memberof AppAvatar\n    * @static\n    */\n    static defaultProps = {\n        avatar: null,\n        label: null,\n        className: null,\n        children: null,\n    }\n\n    /**\n    * React 组件生命周期函数：Render\n    * @private\n    * @see https://doc.react-china.org/docs/react-component.html#render\n    * @see https://doc.react-china.org/docs/rendering-elements.html\n    * @memberof AppAvatar\n    * @return {ReactNode}\n    */\n    render() {\n        const {\n            avatar,\n            label,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        let avatarView = null;\n        if (React.isValidElement(avatar)) {\n            avatarView = avatar;\n        } else if (typeof avatar === 'object') {\n            avatarView = <Avatar {...avatar} />;\n        } else {\n            avatarView = <Avatar auto={avatar} />;\n        }\n\n        let labelView = null;\n        if (React.isValidElement(label)) {\n            labelView = label;\n        } else {\n            labelView = <div className=\"text\">{label}</div>;\n        }\n\n        return (\n            <a\n                className={classes('app-avatar', className)}\n                {...other}\n            >\n                {avatarView}\n                {labelView}\n                {children}\n            </a>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/app-avatar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "AppAvatar",
    "memberof": "app/components/app-avatar.js",
    "static": true,
    "longname": "app/components/app-avatar.js~AppAvatar",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/app-avatar.js",
    "importStyle": "AppAvatar",
    "description": "AppAvatar 组件 ，显示一个应用图标",
    "examples": [
      "<caption>导入组件</caption>\nimport AppAvatar from './components/app-avatar';",
      "<AppAvatar />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AppAvatar"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{string|Object|ReactNode} avatar 头像或者用于创建头像的值"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{string|ReactNode} label 应用名称"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{string} className CSS 类名"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{string} children 子组件"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/app-avatar.js~AppAvatar",
    "static": true,
    "longname": "app/components/app-avatar.js~AppAvatar.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/app-avatar.js~AppAvatar",
    "static": true,
    "longname": "app/components/app-avatar.js~AppAvatar.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/app-avatar.js~AppAvatar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/app-avatar.js~AppAvatar#render",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "app/components/area-selector.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * 判定一个点是否在矩形区域内\n *\n * @private\n * @param {{left: number, top: number}} point 要判定的点位置\n * @param {{left: number, top: number, width: number, height: number}} rect 要判定对矩形区域\n * @return {boolean} 如果在矩形区域内则返回 <code>true</code> 否则 返回 <code>false</code>\n */\nconst isPiontInRect = (point, rect) => (\n    rect.width > 0 && rect.height > 0\n        && point.left >= rect.left\n        && point.left <= (rect.left + rect.width)\n        && point.top >= rect.top\n        && point.top <= (rect.top + rect.height)\n);\n\n/**\n * 判定一个点在矩形区域的方位\n *\n * @private\n * @param {{left: number, top: number}} pos\n * @param {{left: number, top: number, width: number, height: number}} rect 要判定对矩形区域\n * @return {string}\n */\nconst caculatePosition = (pos, area) => {\n    const halfHotSize = 5;\n    const hotSize = halfHotSize + halfHotSize;\n    if (isPiontInRect(pos, {\n        left: area.left + halfHotSize,\n        top: area.top + halfHotSize,\n        width: area.width - hotSize,\n        height: area.height - hotSize\n    })) {\n        return 'center';\n    }\n    if (isPiontInRect(pos, {\n        left: area.left - halfHotSize,\n        top: area.top + halfHotSize,\n        width: hotSize,\n        height: area.height - hotSize\n    })) {\n        return 'left';\n    }\n    if (isPiontInRect(pos, {\n        left: (area.left + area.width) - halfHotSize,\n        top: area.top + halfHotSize,\n        width: hotSize,\n        height: area.height - hotSize\n    })) {\n        return 'right';\n    }\n    if (isPiontInRect(pos, {\n        left: area.left + halfHotSize,\n        top: area.top - halfHotSize,\n        width: area.width - hotSize,\n        height: hotSize\n    })) {\n        return 'top';\n    }\n    if (isPiontInRect(pos, {\n        left: area.left + halfHotSize,\n        top: (area.top + area.height) - halfHotSize,\n        width: area.width - hotSize,\n        height: hotSize\n    })) {\n        return 'bottom';\n    }\n    if (isPiontInRect(pos, {\n        left: area.left - halfHotSize,\n        top: area.top - halfHotSize,\n        width: hotSize,\n        height: hotSize\n    })) {\n        return 'top-left';\n    }\n    if (isPiontInRect(pos, {\n        left: (area.left + area.width) - halfHotSize,\n        top: area.top - halfHotSize,\n        width: hotSize,\n        height: hotSize\n    })) {\n        return 'top-right';\n    }\n    if (isPiontInRect(pos, {\n        left: area.left - halfHotSize,\n        top: (area.top + area.height) - halfHotSize,\n        width: hotSize,\n        height: hotSize\n    })) {\n        return 'bottom-left';\n    }\n    if (isPiontInRect(pos, {\n        left: (area.left + area.width) - halfHotSize,\n        top: (area.top + area.height) - halfHotSize,\n        width: hotSize,\n        height: hotSize\n    })) {\n        return 'bottom-right';\n    }\n    return null;\n};\n\n/**\n* AreaSelector 组件 ，显示一个AreaSelector\n* @class AreaSelector\n* @see https://react.docschina.org/docs/components-and-props.html\n* @extends {Component}\n* @example\n* <AreaSelector />\n*/\nexport default class AreaSelector extends Component {\n    /**\n    * React 组件属性类型检查\n    * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n    * @static\n    * @memberof AreaSelector\n    * @return {Object}\n    */\n    static propTypes = {\n        onSelectArea: PropTypes.func,\n        toolbarStyle: PropTypes.object,\n        toolbarHeight: PropTypes.number,\n        style: PropTypes.object,\n        toolbar: PropTypes.any,\n        img: PropTypes.string\n    };\n\n    /**\n    * React 组件默认属性\n    * @see https://react.docschina.org/docs/react-component.html#defaultprops\n    * @type {object}\n    * @memberof AreaSelector\n    * @static\n    */\n    static defaultProps = {\n        onSelectArea: null,\n        toolbarStyle: null,\n        toolbarHeight: 40,\n        style: null,\n        toolbar: null,\n        img: null\n    };\n\n    /**\n    * React 组件构造函数，创建一个 AreaSelector 组件实例，会在装配之前被调用。\n    * @see https://react.docschina.org/docs/react-component.html#constructor\n    * @param {Object?} props 组件属性对象\n    * @constructor\n    */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            select: null,\n            resizeable: false,\n        };\n    }\n\n    /**\n     * Set select range\n     * 设置选择的范围\n     *\n     * @param {{left: number, top: number, width: number, height: number}} select 选择对范围对象\n     * @returns {Void}\n     * @memberof AreaSelector\n     */\n    setSelect(select) {\n        if (select) {\n            select.height = Math.max(0, Math.min(this.contianer.clientHeight, select.height));\n            select.width = Math.max(0, Math.min(this.contianer.clientWidth, select.width));\n\n            select.top = Math.max(0, Math.min(this.contianer.clientHeight - select.height, select.top));\n            select.left = Math.max(0, Math.min(this.contianer.clientWidth - select.width, select.left));\n        }\n\n        const {onSelectArea} = this.props;\n\n        if (!this.state.select || (this.state.select && (this.state.select.left !== select.left || this.state.select.top !== select.top || this.state.select.width !== select.width || this.state.select.height !== select.height))) {\n            select.x = select.left;\n            select.y = select.top;\n            this.setState({select});\n            return onSelectArea && onSelectArea(select);\n        }\n    }\n\n    /**\n    * 处理鼠标点击按下事件\n    * @param {Event} e 事件对象\n    * @memberof AreaSelector\n    * @private\n    * @return {void}\n    */\n    handleMouseDown = e => {\n        this.mouseDownPos = {left: e.clientX, top: e.clientY};\n        this.mouseDownSelect = Object.assign({}, this.state.select);\n        if (this.state.resizeable) {\n            this.mouseActionPosition = caculatePosition(this.mouseDownPos, this.mouseDownSelect);\n        }\n    }\n\n    /**\n    * 处理鼠标移动事件\n    * @param {Event} e 事件对象\n    * @memberof AreaSelector\n    * @private\n    * @return {void}\n    */\n    handleMouseMove = e => {\n        if (this.mouseDownPos) {\n            this.mouseMovePos = {left: e.clientX, top: e.clientY};\n            if (!this.state.resizeable) {\n                this.setSelect({\n                    left: Math.min(this.mouseDownPos.left, this.mouseMovePos.left),\n                    top: Math.min(this.mouseDownPos.top, this.mouseMovePos.top),\n                    width: Math.abs(this.mouseMovePos.left - this.mouseDownPos.left),\n                    height: Math.abs(this.mouseMovePos.top - this.mouseDownPos.top),\n                });\n            } else {\n                const select = this.state.select;\n                if (select) {\n                    const position = this.mouseActionPosition;\n                    const deltaX = this.mouseMovePos.left - this.mouseDownPos.left;\n                    const deltaY = this.mouseMovePos.top - this.mouseDownPos.top;\n                    let newSelect = null;\n\n                    switch (position) {\n                    case 'center':\n                        newSelect = {\n                            top: this.mouseDownSelect.top + deltaY,\n                            left: this.mouseDownSelect.left + deltaX,\n                            width: select.width,\n                            height: select.height\n                        };\n                        break;\n                    case 'left':\n                        newSelect = {\n                            top: select.top,\n                            left: this.mouseDownSelect.left + deltaX,\n                            width: this.mouseDownSelect.width - deltaX,\n                            height: select.height\n                        };\n                        break;\n                    case 'right':\n                        newSelect = {\n                            top: select.top,\n                            left: select.left,\n                            width: this.mouseDownSelect.width + deltaX,\n                            height: select.height\n                        };\n                        break;\n                    case 'top':\n                        newSelect = {\n                            top: this.mouseDownSelect.top + deltaY,\n                            left: select.left,\n                            width: select.width,\n                            height: this.mouseDownSelect.height - deltaY\n                        };\n                        break;\n                    case 'bottom':\n                        newSelect = {\n                            top: select.top,\n                            left: select.left,\n                            width: select.width,\n                            height: this.mouseDownSelect.height + deltaY\n                        };\n                        break;\n                    case 'top-left':\n                        newSelect = {\n                            top: this.mouseDownSelect.top + deltaY,\n                            left: this.mouseDownSelect.left + deltaX,\n                            width: this.mouseDownSelect.width - deltaX,\n                            height: this.mouseDownSelect.height - deltaY\n                        };\n                        break;\n                    case 'top-right':\n                        newSelect = {\n                            top: this.mouseDownSelect.top + deltaY,\n                            left: select.left,\n                            width: this.mouseDownSelect.width + deltaX,\n                            height: this.mouseDownSelect.height - deltaY\n                        };\n                        break;\n                    case 'bottom-left':\n                        newSelect = {\n                            top: select.top,\n                            left: this.mouseDownSelect.left + deltaX,\n                            width: this.mouseDownSelect.width - deltaX,\n                            height: this.mouseDownSelect.height + deltaY\n                        };\n                        break;\n                    case 'bottom-right':\n                        newSelect = {\n                            top: select.top,\n                            left: select.left,\n                            width: this.mouseDownSelect.width + deltaX,\n                            height: this.mouseDownSelect.height + deltaY\n                        };\n                        break;\n                    }\n                    if (newSelect) {\n                        this.setSelect(newSelect);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n    * 处理鼠标点击弹起事件\n    * @param {Event} event 事件对象\n    * @memberof AreaSelector\n    * @private\n    * @return {void}\n    */\n    handleMouseUp = event => {\n        this.mouseDownPos = null;\n        if (!this.state.resizeable && this.state.select) {\n            this.setState({resizeable: true});\n        }\n    }\n\n    /**\n    * React 组件生命周期函数：Render\n    * @private\n    * @see https://doc.react-china.org/docs/react-component.html#render\n    * @see https://doc.react-china.org/docs/rendering-elements.html\n    * @memberof AreaSelector\n    * @return {ReactNode}\n    */\n    render() {\n        const STYLE = {\n            main: {\n                backgroundColor: 'rgba(0,0,0,0.2)',\n            },\n            controller: {\n                position: 'absolute',\n                backgroundColor: 'rgba(255,255,255,0.4)',\n                cursor: 'move',\n                boxSizing: 'border-box',\n                backgroundRepeat: 'none'\n            },\n            controlBase: {\n                position: 'absolute',\n                width: 6,\n                height: 6,\n                border: '1px solid #fff',\n                borderRadius: 1,\n                background: 'rgba(0, 0, 0, 0.6)',\n            },\n            controls: {\n                left: {\n                    left: -4,\n                    top: '50%',\n                    marginTop: -3,\n                    cursor: 'w-resize',\n                },\n                top: {\n                    top: -4,\n                    left: '50%',\n                    marginLeft: -3,\n                    cursor: 'n-resize',\n                },\n                right: {\n                    right: -4,\n                    top: '50%',\n                    marginTop: -3,\n                    cursor: 'e-resize',\n                },\n                bottom: {\n                    bottom: -4,\n                    left: '50%',\n                    marginLeft: -3,\n                    cursor: 's-resize',\n                },\n                'top-left': {\n                    left: -4,\n                    top: -4,\n                    cursor: 'nw-resize',\n                },\n                'top-right': {\n                    right: -4,\n                    top: -4,\n                    cursor: 'ne-resize',\n                },\n                'bottom-left': {\n                    left: -4,\n                    bottom: -4,\n                    cursor: 'sw-resize',\n                },\n                'bottom-right': {\n                    right: -4,\n                    bottom: -4,\n                    cursor: 'se-resize',\n                },\n            }\n        };\n\n        let {\n            toolbar,\n            toolbarHeight,\n            style,\n            toolbarStyle,\n            img,\n            onSelectArea,\n            ...other\n        } = this.props;\n\n        style = Object.assign({}, STYLE.main, style);\n        if (!this.state.resizeable) {\n            Object.assign(style, {cursor: 'crosshair'});\n        }\n\n        const controllerStyle = Object.assign({backgroundImage: img ? (`url(\"${img}\")`) : 'none'}, STYLE.controller);\n        if (this.state.select) {\n            Object.assign(controllerStyle, {left: this.state.select.left, top: this.state.select.top, width: this.state.select.width, height: this.state.select.height, backgroundPositionX: -this.state.select.left - 1, backgroundPositionY: -this.state.select.top - 1});\n        } else {\n            Object.assign(controllerStyle, {display: 'none'});\n        }\n\n        let controls = null;\n        if (this.state.resizeable && this.state.select) {\n            controls = Object.keys(STYLE.controls).map(key => {\n                const controlStyle = Object.assign({}, STYLE.controlBase, STYLE.controls[key]);\n                return <div key={key} style={controlStyle} />;\n            });\n        }\n\n        toolbarStyle = Object.assign({position: 'absolute', right: 0}, toolbarStyle);\n        if (this.state.select && this.contianer && (this.state.select.top + this.state.select.height + toolbarHeight) < this.contianer.clientHeight) {\n            toolbarStyle.top = '100%';\n        } else {\n            toolbarStyle.bottom = 0;\n        }\n\n        return (<div\n            {...other}\n            ref={e => {this.contianer = e;}}\n            style={style}\n            onMouseUp={this.handleMouseUp}\n            onMouseDown={this.handleMouseDown}\n            onMouseMove={this.handleMouseMove}\n        >\n            <div style={controllerStyle} className=\"ants-border\">\n                {controls}\n                <div style={toolbarStyle}>{toolbar}</div>\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/area-selector.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "isPiontInRect",
    "memberof": "app/components/area-selector.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/area-selector.js~isPiontInRect",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/components/area-selector.js",
    "importStyle": null,
    "description": "判定一个点是否在矩形区域内",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "{left: number, top: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "要判定的点位置"
      },
      {
        "nullable": null,
        "types": [
          "{left: number, top: number, width: number, height: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "rect",
        "description": "要判定对矩形区域"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果在矩形区域内则返回 <code>true</code> 否则 返回 <code>false</code>"
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "caculatePosition",
    "memberof": "app/components/area-selector.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/area-selector.js~caculatePosition",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/components/area-selector.js",
    "importStyle": null,
    "description": "判定一个点在矩形区域的方位",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "{left: number, top: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{left: number, top: number, width: number, height: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "rect",
        "description": "要判定对矩形区域"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "AreaSelector",
    "memberof": "app/components/area-selector.js",
    "static": true,
    "longname": "app/components/area-selector.js~AreaSelector",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/area-selector.js",
    "importStyle": "AreaSelector",
    "description": "AreaSelector 组件 ，显示一个AreaSelector",
    "examples": [
      "<AreaSelector />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AreaSelector"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "static": true,
    "longname": "app/components/area-selector.js~AreaSelector.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 122,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "static": true,
    "longname": "app/components/area-selector.js~AreaSelector.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 138,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/area-selector.js~AreaSelector#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 AreaSelector 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "state",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "static": false,
    "longname": "app/components/area-selector.js~AreaSelector#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 161,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "setSelect",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/area-selector.js~AreaSelector#setSelect",
    "access": "public",
    "description": "Set select range\n设置选择的范围",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{left: number, top: number, width: number, height: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "select",
        "description": "选择对范围对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "handleMouseDown",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "static": false,
    "longname": "app/components/area-selector.js~AreaSelector#handleMouseDown",
    "access": "private",
    "description": "处理鼠标点击按下事件",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "mouseDownPos",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "longname": "app/components/area-selector.js~AreaSelector#mouseDownPos",
    "access": "public",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "type": {
      "types": [
        "{\"left\": *, \"top\": *}"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "mouseDownSelect",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "longname": "app/components/area-selector.js~AreaSelector#mouseDownSelect",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "mouseActionPosition",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "longname": "app/components/area-selector.js~AreaSelector#mouseActionPosition",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "handleMouseMove",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "static": false,
    "longname": "app/components/area-selector.js~AreaSelector#handleMouseMove",
    "access": "private",
    "description": "处理鼠标移动事件",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "mouseMovePos",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "longname": "app/components/area-selector.js~AreaSelector#mouseMovePos",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "type": {
      "types": [
        "{\"left\": *, \"top\": *}"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "handleMouseUp",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "static": false,
    "longname": "app/components/area-selector.js~AreaSelector#handleMouseUp",
    "access": "private",
    "description": "处理鼠标点击弹起事件",
    "lineNumber": 323,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/area-selector.js~AreaSelector#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 338,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "contianer",
    "memberof": "app/components/area-selector.js~AreaSelector",
    "static": false,
    "longname": "app/components/area-selector.js~AreaSelector#contianer",
    "access": "public",
    "description": null,
    "lineNumber": 445,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "app/components/avatar.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {rem, classes} from '../utils/html-helper';\nimport Skin from '../utils/skin';\nimport Icon from './icon';\n\n/**\n * Avatar 组件 ，显示一个头像\n * @class Avatar\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example <caption>使用图片创建头像</caption>\n * <Avatar image=\"http://example.com/user-avatar.png\" />\n *\n * @example <caption>使用文本创建头像</caption>\n * <Avatar label=\"福\" />\n *\n * @example <caption>应用 skin 外观</caption>\n * <Avatar label=\"福\" skin=\"23\" />\n *\n * @example <caption>应用尺寸</caption>\n * <Avatar label=\"福\" size=\"48\" />\n */\nexport default class Avatar extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Avatar\n     * @type {Object}\n     */\n    static propTypes = {\n        auto: PropTypes.any,\n        skin: PropTypes.any,\n        image: PropTypes.any,\n        icon: PropTypes.any,\n        label: PropTypes.any,\n        size: PropTypes.number,\n        iconSize: PropTypes.number,\n        className: PropTypes.string,\n        foreColor: PropTypes.string,\n        imageClassName: PropTypes.string,\n        iconClassName: PropTypes.string,\n        style: PropTypes.object,\n        children: PropTypes.any\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Avatar\n     * @static\n     */\n    static defaultProps = {\n        skin: null,\n        image: null,\n        icon: null,\n        label: null,\n        size: null,\n        iconSize: null,\n        foreColor: null,\n        className: null,\n        imageClassName: null,\n        iconClassName: null,\n        style: null,\n        children: null,\n        auto: null,\n    }\n\n    /**\n     * 创建一个头像组件\n     * @param {any} avatar 头像内容\n     * @param {any} iconView 图标内容\n     * @return {ReactNode}\n     * @memberof Avatar\n     */\n    static render(avatar, iconView) {\n        let avatarView = null;\n        if (avatar) {\n            if (avatar === true && iconView) {\n                avatarView = <Avatar icon={iconView} />;\n            } else if (React.isValidElement(avatar)) {\n                avatarView = avatar;\n            } else if (typeof avatar === 'object') {\n                avatarView = <Avatar {...avatar} />;\n            } else if (avatar) {\n                avatarView = <Avatar auto={avatar} />;\n            }\n        }\n        return avatarView;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Avatar\n     * @return {ReactNode}\n     */\n    render() {\n        let {\n            auto,\n            skin,\n            image,\n            icon,\n            label,\n            size,\n            className,\n            foreColor,\n            imageClassName,\n            iconClassName,\n            children,\n            style,\n            iconSize,\n            ...other\n        } = this.props;\n\n        style = Object.assign(skin ? Skin.style(skin) : {}, style);\n        if (size) {\n            style.width = rem(size);\n            style.height = style.width;\n\n            if (!iconSize) {\n                iconSize = Math.floor(size * 0.5);\n            }\n        }\n\n        if (foreColor) {\n            style.color = foreColor;\n        }\n\n        if (auto) {\n            if (typeof auto === 'string') {\n                if (auto.startsWith('mdi-') || auto.startsWith('icon-')) {\n                    icon = auto;\n                } else if (auto.length === 1) {\n                    label = auto;\n                } else {\n                    image = auto;\n                }\n            } else {\n                icon = auto;\n            }\n        }\n\n        let imageView = null;\n        if (image) {\n            if (React.isValidElement(image)) {\n                imageView = image;\n            } else {\n                imageView = <img alt={image} src={image} className={imageClassName} />;\n            }\n        }\n        let iconView = null;\n        if (!image && icon) {\n            if (React.isValidElement(icon)) {\n                iconView = icon;\n            } else {\n                iconView = <Icon className={iconClassName} name={icon} size={iconSize} />;\n            }\n        }\n        let labelView = null;\n        if (!image && !icon && label) {\n            if (React.isValidElement(label)) {\n                labelView = label;\n            } else {\n                labelView = <span className=\"text\">{label}</span>;\n            }\n        }\n\n        return (\n            <div className={classes('avatar', className)} {...other} style={style}>\n                {imageView}\n                {iconView}\n                {labelView}\n                {children}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/avatar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "class",
    "name": "Avatar",
    "memberof": "app/components/avatar.js",
    "static": true,
    "longname": "app/components/avatar.js~Avatar",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/avatar.js",
    "importStyle": "Avatar",
    "description": "Avatar 组件 ，显示一个头像",
    "examples": [
      "<caption>使用图片创建头像</caption>\n<Avatar image=\"http://example.com/user-avatar.png\" />",
      "<caption>使用文本创建头像</caption>\n<Avatar label=\"福\" />",
      "<caption>应用 skin 外观</caption>\n<Avatar label=\"福\" skin=\"23\" />",
      "<caption>应用尺寸</caption>\n<Avatar label=\"福\" size=\"48\" />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Avatar"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/avatar.js~Avatar",
    "static": true,
    "longname": "app/components/avatar.js~Avatar.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/avatar.js~Avatar",
    "static": true,
    "longname": "app/components/avatar.js~Avatar.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/avatar.js~Avatar",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/avatar.js~Avatar.render",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "avatar",
        "types": [
          "*"
        ]
      },
      {
        "name": "iconView",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/avatar.js~Avatar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/avatar.js~Avatar#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 102,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "app/components/button.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../utils/html-helper';\nimport Skin from '../utils/skin';\nimport Icon from './icon';\n\n/**\n * Button 组件 ，显示一个按钮\n * @class Button\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <Button />\n */\nexport default class Button extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Button\n     * @type {Object}\n     */\n    static propTypes = {\n        skin: PropTypes.any,\n        icon: PropTypes.string,\n        label: PropTypes.any,\n        className: PropTypes.string,\n        style: PropTypes.object,\n        children: PropTypes.any,\n        btnClass: PropTypes.string,\n        type: PropTypes.string\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Button\n     * @static\n     */\n    static defaultProps = {\n        skin: null,\n        icon: null,\n        label: null,\n        className: null,\n        style: null,\n        children: null,\n        btnClass: 'btn',\n        type: 'button',\n    }\n\n    /**\n    * React 组件生命周期函数：Render\n    * @private\n    * @see https://doc.react-china.org/docs/react-component.html#render\n    * @see https://doc.react-china.org/docs/rendering-elements.html\n    * @memberof Button\n    * @return {ReactNode}\n    */\n    render() {\n        const {\n            skin,\n            icon,\n            label,\n            className,\n            children,\n            style,\n            type,\n            btnClass,\n            ...other\n        } = this.props;\n\n        let iconView = null;\n        if (icon) {\n            if (typeof icon === 'string') {\n                iconView = <Icon name={icon} />;\n            } else if (typeof icon === 'object' && React.isValidElement(icon)) {\n                iconView = <Icon {...icon} />;\n            } else {\n                iconView = icon;\n            }\n        }\n\n        let labelView = null;\n        if (label) {\n            labelView = typeof lable !== 'object' ? <span className=\"text\">{label}</span> : label;\n        }\n\n        const buttonStyle = Object.assign(skin ? Skin.style(skin) : {}, style);\n\n        if (type === 'a') {\n            return <a {...other} className={classes(btnClass, className, {'btn-icon': !labelView && !children})} style={buttonStyle}>{iconView}{labelView}{children}</a>;\n        }\n        return <button {...other} type={type} className={classes('btn', className, {'btn-icon': !labelView && !children})} style={buttonStyle}>{iconView}{labelView}{children}</button>;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/button.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "Button",
    "memberof": "app/components/button.js",
    "static": true,
    "longname": "app/components/button.js~Button",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/button.js",
    "importStyle": "Button",
    "description": "Button 组件 ，显示一个按钮",
    "examples": [
      "<Button />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Button"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/button.js~Button",
    "static": true,
    "longname": "app/components/button.js~Button.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/button.js~Button",
    "static": true,
    "longname": "app/components/button.js~Button.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/button.js~Button",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/button.js~Button#render",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "app/components/checkbox.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../utils/html-helper';\nimport timeSequence from '../utils/time-sequence';\n\n/**\n * Checkbox 组件 ，显示一个复选框\n * @class Checkbox\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <Checkbox />\n */\nexport default class Checkbox extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Checkbox\n     * @type {object}\n     */\n    static propTypes = {\n        checked: PropTypes.bool,\n        label: PropTypes.string,\n        className: PropTypes.string,\n        inputProps: PropTypes.object,\n        onChange: PropTypes.func,\n        children: PropTypes.any,\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Checkbox\n     * @static\n     */\n    static defaultProps = {\n        checked: false,\n        label: null,\n        className: null,\n        inputProps: null,\n        onChange: null,\n        children: null,\n    }\n\n    /**\n     * React 组件构造函数，创建一个 Checkbox 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * 控件 ID\n         * @private\n         * @type {string}\n         */\n        this._controlId = `checkbox-${timeSequence()}`;\n    }\n\n    /**\n     * 处理复选框选中变更事件\n     * @param {Event} e 事件对象\n     * @memberof Checkbox\n     * @private\n     * @return {void}\n     */\n    handleCheckboxChange = e => {\n        const {onChange} = this.props;\n        if (onChange) {\n            onChange(e.target.checked, e);\n        }\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Checkbox\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            checked,\n            label,\n            children,\n            className,\n            inputProps,\n            onChange,\n            ...other\n        } = this.props;\n\n        return (\n            <div className={classes('checkbox', className, {checked})} {...other}>\n                <input id={this._controlId} checked={checked} type=\"checkbox\" onChange={this.handleCheckboxChange} {...inputProps} />\n                {label && <label htmlFor={this.controlId}>{label}</label>}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/checkbox.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "Checkbox",
    "memberof": "app/components/checkbox.js",
    "static": true,
    "longname": "app/components/checkbox.js~Checkbox",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/checkbox.js",
    "importStyle": "Checkbox",
    "description": "Checkbox 组件 ，显示一个复选框",
    "examples": [
      "<Checkbox />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Checkbox"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/checkbox.js~Checkbox",
    "static": true,
    "longname": "app/components/checkbox.js~Checkbox.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/checkbox.js~Checkbox",
    "static": true,
    "longname": "app/components/checkbox.js~Checkbox.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/checkbox.js~Checkbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/checkbox.js~Checkbox#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "_controlId",
    "memberof": "app/components/checkbox.js~Checkbox",
    "static": false,
    "longname": "app/components/checkbox.js~Checkbox#_controlId",
    "access": "private",
    "description": "控件 ID",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "handleCheckboxChange",
    "memberof": "app/components/checkbox.js~Checkbox",
    "static": false,
    "longname": "app/components/checkbox.js~Checkbox#handleCheckboxChange",
    "access": "private",
    "description": "处理复选框选中变更事件",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/checkbox.js~Checkbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/checkbox.js~Checkbox#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "app/components/click-outside-wrapper.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * ClickOutsideWrapper 组件 ，显示一个ClickOutsideWrapper（允许监听元素外点击事件的容器元素，可以很方便的使用此组件制作点击外部即关闭的弹出层）\n * @class ClickOutsideWrapper\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example <caption>制作一个点击外部即关闭的对话框</caption>\n * let isDialogOpen = true;\n * const renderDialog = props => {\n *     return isDialogOpen ? (<ClickOutsideWrapper\n *         onClickOutside={e => {\n *              isDialogOpen = false;\n *         }}\n *     >\n *          <h1>Dialog heading</h1>\n *          <div>dialog content...</div>\n *     </ClickOutsideWrapper>) : null;\n * };\n */\nexport default class ClickOutsideWrapper extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ClickOutsideWrapper\n     * @type {Object}\n     */\n    static propTypes = {\n        onClickOutside: PropTypes.func,\n        children: PropTypes.any\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ClickOutsideWrapper\n     * @static\n     */\n    static defaultProps = {\n        onClickOutside: null,\n        children: null\n    }\n\n    /**\n    * React 组件生命周期函数：`componentDidMount`\n    * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n    *\n    * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n    * @private\n    * @memberof ClickOutsideWrapper\n    * @return {void}\n    */\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    /**\n    * React 组件生命周期函数：`componentWillUnmount`\n    * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n    *\n    * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n    * @private\n    * @memberof ClickOutsideWrapper\n    * @return {void}\n    */\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    /**\n     * 处理鼠标点击外部区域事件\n     * @param {Event} event 事件对象\n     * @memberof ClickOutsideWrapper\n     * @private\n     * @return {void}\n     */\n    handleClickOutside = event => {\n        const {onClickOutside} = this.props;\n        if (onClickOutside && this._wrapper && !this._wrapper.contains(event.target)) {\n            onClickOutside(event, this);\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ClickOutsideWrapper\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            onClickOutside,\n            children,\n            ...other\n        } = this.props;\n\n        return (\n            <div ref={e => {this._wrapper = e;}} {...other}>\n                {children}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/click-outside-wrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "class",
    "name": "ClickOutsideWrapper",
    "memberof": "app/components/click-outside-wrapper.js",
    "static": true,
    "longname": "app/components/click-outside-wrapper.js~ClickOutsideWrapper",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/click-outside-wrapper.js",
    "importStyle": "ClickOutsideWrapper",
    "description": "ClickOutsideWrapper 组件 ，显示一个ClickOutsideWrapper（允许监听元素外点击事件的容器元素，可以很方便的使用此组件制作点击外部即关闭的弹出层）",
    "examples": [
      "<caption>制作一个点击外部即关闭的对话框</caption>\nlet isDialogOpen = true;\nconst renderDialog = props => {\n    return isDialogOpen ? (<ClickOutsideWrapper\n        onClickOutside={e => {\n             isDialogOpen = false;\n        }}\n    >\n         <h1>Dialog heading</h1>\n         <div>dialog content...</div>\n    </ClickOutsideWrapper>) : null;\n};"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ClickOutsideWrapper"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/click-outside-wrapper.js~ClickOutsideWrapper",
    "static": true,
    "longname": "app/components/click-outside-wrapper.js~ClickOutsideWrapper.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/click-outside-wrapper.js~ClickOutsideWrapper",
    "static": true,
    "longname": "app/components/click-outside-wrapper.js~ClickOutsideWrapper.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/components/click-outside-wrapper.js~ClickOutsideWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/click-outside-wrapper.js~ClickOutsideWrapper#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/components/click-outside-wrapper.js~ClickOutsideWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/click-outside-wrapper.js~ClickOutsideWrapper#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 71,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "handleClickOutside",
    "memberof": "app/components/click-outside-wrapper.js~ClickOutsideWrapper",
    "static": false,
    "longname": "app/components/click-outside-wrapper.js~ClickOutsideWrapper#handleClickOutside",
    "access": "private",
    "description": "处理鼠标点击外部区域事件",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/click-outside-wrapper.js~ClickOutsideWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/click-outside-wrapper.js~ClickOutsideWrapper#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "_wrapper",
    "memberof": "app/components/click-outside-wrapper.js~ClickOutsideWrapper",
    "static": false,
    "longname": "app/components/click-outside-wrapper.js~ClickOutsideWrapper#_wrapper",
    "access": "private",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "app/components/context-menu.js",
    "content": "import React from 'react';\nimport Display from './display';\nimport {classes} from '../utils/html-helper';\nimport Icon from './icon';\nimport timeSequence from '../utils/time-sequence';\n\n/** @module context-menu */\n\n/**\n * 显示上下文菜单\n * @param {{x: Number, y: Number}} position 菜单显示位置，需要提供 X 和 Y 轴坐标\n * @param {!Object[]} menus 菜单项列表\n * @param {?Object} props DisplayLayer 组件属性\n * @param {?function} callback 操作完成时的回调函数\n * @return {DisplayLayer}\n * @function\n */\nexport const showContextMenu = (position, menus, props = {}, callback = null) => {\n    let {\n        className,\n        onItemClick,\n        menuClassName,\n        itemClassName,\n        content,\n        style,\n    } = props;\n\n    if (!position) {\n        if (DEBUG) {\n            throw new Error('Position is not defined to show the popover.');\n        }\n    }\n\n    if (!props.id) {\n        props.id = timeSequence();\n    }\n\n    const handleItemClick = (item, idx, e) => {\n        let clickResult = null;\n        if (onItemClick) {\n            clickResult = onItemClick(item, idx, e);\n        }\n        if (item.click) {\n            clickResult = item.click(item, idx, e);\n        }\n        if (clickResult !== false) {\n            Display.remove(props.id);\n        }\n    };\n    let hasIconLeft = false;\n    const itemsView = menus.map((item, idx) => {\n        if (typeof item === 'string') {\n            if (item === '-' || item === 'divider' || item === 'separator') {\n                item = {type: 'divider'};\n            } else {\n                item = {label: item};\n            }\n        }\n        const {\n            id,\n            className,\n            hidden,\n            click,\n            url,\n            render,\n            type,\n            disabled,\n            data,\n            ...other\n        } = item;\n        if (hidden) {\n            return null;\n        }\n        if (render) {\n            return render(item);\n        } else if (type === 'divider' || type === 'separator') {\n            return <div key={id || idx} className={classes('divider', className)} {...other} />;\n        }\n        const iconView = item.icon && Icon.render(item.icon, {className: 'item-left-icon'});\n        if (iconView) {\n            hasIconLeft = true;\n        }\n        return (<a href={url} onClick={handleItemClick.bind(null, item, idx)} key={id || idx} className={classes('item', itemClassName, className, {disabled})} {...other}>\n            {iconView}\n            {item.label && <span className=\"title\">{item.label}</span>}\n            {item.checked && <Icon name=\"check\" />}\n        </a>);\n    });\n    content = (<div className={classes('list dropdown-menu', menuClassName, {'has-icon-left': hasIconLeft})}>\n        {itemsView}\n        {content}\n    </div>);\n\n    const x = position.x || 0;\n    const y = position.y || 0;\n    style = Object.assign({maxWidth: window.innerWidth, maxHeight: window.innerHeight, left: x, top: y}, style);\n\n    className = classes('contextmenu layer', className);\n\n    props = Object.assign({backdropClassName: 'clean', animation: false}, props, {className, style, content, plugName: 'contextmenu'});\n    delete props.menuClassName;\n    delete props.itemClassName;\n    delete props.onItemClick;\n\n    return Display.show(props, display => {\n        const ele = display.displayElement;\n        let newX = x;\n        let newY = y;\n        const eleWidth = ele.clientWidth;\n        const eleHeight = ele.clientHeight;\n\n        if (position.direction) {\n            switch (position.direction) {\n            case 'top':\n                newX -= eleWidth / 2;\n                newY -= eleHeight;\n                break;\n            case 'top-left':\n                newX -= eleWidth;\n                newY -= eleHeight;\n                break;\n            case 'top-right':\n                newY -= eleHeight;\n                break;\n            case 'left':\n                newX -= eleWidth / 2;\n                newY -= eleHeight / 2;\n                break;\n            case 'right':\n                newY -= eleHeight / 2;\n                break;\n            case 'bottom':\n                newX -= eleWidth / 2;\n                break;\n            case 'bottom-left':\n                newX -= eleWidth;\n                break;\n            }\n        }\n        if (position.offsetX) {\n            newX += position.offsetX;\n        }\n        if (position.offsetY) {\n            newY += position.offsetY;\n        }\n        newX = Math.floor(Math.max(0, Math.min(window.innerWidth - eleWidth, newX)));\n        newY = Math.floor(Math.max(0, Math.min(window.innerHeight - eleHeight, newY)));\n        if (newX !== x || newY !== y) {\n            display.setStyle({top: newY, left: newX, opacity: 1});\n        } else {\n            display.setStyle({opacity: 1});\n        }\n    }, callback);\n};\n\nexport default {\n    show: showContextMenu,\n    hide: Display.hide,\n    remove: Display.remove\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/context-menu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "showContextMenu",
    "memberof": "app/components/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/context-menu.js~showContextMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/context-menu.js",
    "importStyle": "{showContextMenu}",
    "description": "显示上下文菜单",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{x: Number, y: Number}"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "菜单显示位置，需要提供 X 和 Y 轴坐标"
      },
      {
        "nullable": false,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "menus",
        "description": "菜单项列表"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "DisplayLayer 组件属性"
      },
      {
        "nullable": true,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "app/components/display-container.js",
    "content": "import React, {Component} from 'react';\nimport timeSequence from '../utils/time-sequence';\nimport DisplayLayer from './display-layer';\n\n/**\n * DisplayContainer 组件 ，显示一个弹出层容器组件，用于管理界面上一个或多个弹出层\n * @class DisplayContainer\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * <DisplayContainer />\n */\nexport default class DisplayContainer extends Component {\n    /**\n     * React 组件构造函数，创建一个 DisplayContainer 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            all: {}\n        };\n    }\n\n    /**\n     * 根据 ID 获取弹出层组件实例\n     *\n     * @param {string} id 弹出层 ID\n     * @return {DisplayLayer}\n     * @memberof DisplayContainer\n     */\n    getItem(id) {\n        return this.state.all[id];\n    }\n\n    /**\n     * 显示一个弹出层，如果属性中弹出层 ID 已经存在，则显示之前的弹出层，否则根据属性创建一个新的弹出层\n     *\n     * @param {Object} props 弹出层配置\n     * @param {?Function} callback 完成时的回调函数\n     * @return {DisplayLayer}\n     * @memberof DisplayContainer\n     */\n    show(props, callback) {\n        const all = this.state.all;\n        if (typeof props !== 'object') {\n            props = {id: props};\n        }\n        if (!props.id) {\n            props.id = timeSequence();\n        }\n        const {id} = props;\n        const item = all[id];\n        if (!item) {\n            if (!props.cache) {\n                const userOnHidden = props.onHidden;\n                props.onHidden = (ref) => {\n                    if (userOnHidden) {\n                        userOnHidden(ref);\n                    }\n                    delete all[id];\n                    this.setState({all});\n                };\n            }\n            const userOnShow = props.onShown;\n            props.onShown = (ref) => {\n                if (userOnShow) {\n                    userOnShow(ref);\n                }\n                if (callback) {\n                    callback(ref);\n                }\n            };\n            all[id] = {props};\n            this.setState({all});\n        } else {\n            const {style, cache} = props;\n            if (cache && style) {\n                item.ref.setStyle(style);\n            }\n            item.ref.show(callback);\n            return item.ref;\n        }\n    }\n\n    /**\n     * 隐藏弹出层\n     *\n     * @param {string} id 要隐藏的弹出层 ID\n     * @param {any} callback 操作完成时的回调函数\n     * @param {string|Bool} [remove='auto'] 是否在隐藏后移除界面上的元素\n     * @return {DisplayLayer}\n     * @memberof DisplayContainer\n     */\n    hide(id, callback, remove = 'auto') {\n        const {all} = this.state;\n        const item = all[id];\n        if (!item) {\n            if (DEBUG) {\n                console.warn(`Cannot find display layer with id ${id}.`);\n            }\n            if (callback) {\n                callback(false);\n            }\n            return;\n        }\n        if (remove === 'auto') {\n            remove = !item.props.cache;\n        }\n        item.ref.hide(() => {\n            if (remove) {\n                delete all[id];\n                this.setState({all});\n            }\n            if (callback) {\n                callback();\n            }\n        });\n        return item.ref;\n    }\n\n    /**\n     * 隐藏并从界面上移除弹出层\n     *\n     * @param {string} id 弹出层 ID\n     * @param {?Function} callback 操作完成时的回调函数\n     * @return {DisplayLayer}\n     * @memberof DisplayContainer\n     */\n    remove(id, callback) {\n        return this.hide(id, callback, true);\n    }\n\n    /**\n     * 在指定 ID 的弹出层上加载新的内容\n     *\n     * @param {string} id 弹出层 ID\n     * @param {String|ReactNode|Function} newContent 弹出层新的内容\n     * @param {?Function} callback 操作完成时的回调函数\n     * @return {DisplayLayer}\n     * @memberof DisplayContainer\n     */\n    load(id, newContent, callback) {\n        const {all} = this.state;\n        const item = all[id];\n        if (!item) {\n            if (DEBUG) {\n                console.error(`Cannot find display layer with id ${id}.`);\n            }\n            return;\n        }\n        item.ref.loadContent(newContent, callback);\n        return item.ref;\n    }\n\n    /**\n     * 为指定 ID 的弹出层设置新的 CSS 样式\n     *\n     * @param {string} id 弹出层 ID\n     * @param {object} newStyle CSS 样式对象\n     * @param {?Function} callback 操作完成时的回调函数\n     * @return {DisplayLayer}\n     * @memberof DisplayContainer\n     */\n    setStyle(id, newStyle, callback) {\n        const {all} = this.state;\n        const item = all[id];\n        if (!item) {\n            if (DEBUG) {\n                console.error(`Cannot find display layer with id ${id}.`);\n            }\n            return;\n        }\n        item.ref.setStyle(newStyle, callback);\n        return item.ref;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof DisplayContainer\n     * @return {ReactNode}\n     */\n    render() {\n        const {all} = this.state;\n        return (\n            <div className=\"display-container dock\">\n                {\n                    Object.keys(all).map(itemId => {\n                        const item = all[itemId];\n                        const {props} = item;\n                        return <DisplayLayer key={itemId} ref={e => {item.ref = e;}} {...props} />;\n                    })\n                }\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/display-container.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "DisplayContainer",
    "memberof": "app/components/display-container.js",
    "static": true,
    "longname": "app/components/display-container.js~DisplayContainer",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/display-container.js",
    "importStyle": "DisplayContainer",
    "description": "DisplayContainer 组件 ，显示一个弹出层容器组件，用于管理界面上一个或多个弹出层",
    "examples": [
      "<DisplayContainer />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DisplayContainer"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 105,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/display-container.js~DisplayContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-container.js~DisplayContainer#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 DisplayContainer 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "state",
    "memberof": "app/components/display-container.js~DisplayContainer",
    "static": false,
    "longname": "app/components/display-container.js~DisplayContainer#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "getItem",
    "memberof": "app/components/display-container.js~DisplayContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-container.js~DisplayContainer#getItem",
    "access": "public",
    "description": "根据 ID 获取弹出层组件实例",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "弹出层 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "show",
    "memberof": "app/components/display-container.js~DisplayContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-container.js~DisplayContainer#show",
    "access": "public",
    "description": "显示一个弹出层，如果属性中弹出层 ID 已经存在，则显示之前的弹出层，否则根据属性创建一个新的弹出层",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "弹出层配置"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "hide",
    "memberof": "app/components/display-container.js~DisplayContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-container.js~DisplayContainer#hide",
    "access": "public",
    "description": "隐藏弹出层",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "要隐藏的弹出层 ID"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'auto'",
        "defaultRaw": "'auto'",
        "name": "remove",
        "description": "是否在隐藏后移除界面上的元素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "remove",
    "memberof": "app/components/display-container.js~DisplayContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-container.js~DisplayContainer#remove",
    "access": "public",
    "description": "隐藏并从界面上移除弹出层",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "弹出层 ID"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "load",
    "memberof": "app/components/display-container.js~DisplayContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-container.js~DisplayContainer#load",
    "access": "public",
    "description": "在指定 ID 的弹出层上加载新的内容",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "弹出层 ID"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "ReactNode",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "newContent",
        "description": "弹出层新的内容"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "setStyle",
    "memberof": "app/components/display-container.js~DisplayContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-container.js~DisplayContainer#setStyle",
    "access": "public",
    "description": "为指定 ID 的弹出层设置新的 CSS 样式",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "弹出层 ID"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "newStyle",
        "description": "CSS 样式对象"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/display-container.js~DisplayContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-container.js~DisplayContainer#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 193,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "app/components/display-layer.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from './spinner';\nimport {classes} from '../utils/html-helper';\nimport timeSequence from '../utils/time-sequence';\nimport Status from '../utils/status';\n\n/**\n * Display 状态\n * @type {Status}\n * @private\n */\nconst STAGE = new Status({\n    init: 0,\n    ready: 1,\n    shown: 2,\n    hidden: 3\n}, 0);\n\n/**\n * z-index 序号\n * @type {number}\n * @private\n */\nlet zIndexSeed = 1100;\n\n/**\n * 获取一个递增的 z-index 序号\n * @return {number}\n * @private\n */\nconst newZIndex = () => {\n    zIndexSeed += 1;\n    return zIndexSeed;\n};\n\n/**\n * DisplayLayer 组件 ，显示一个弹出层\n * 所有可用的动画名称包括：\n * - scale-from-top\n * - scale-from-bottom\n * - scale-from-left\n * - scale-from-right\n * - scale-from-center\n * - enter-from-top\n * - enter-from-bottom\n * - enter-from-left\n * - enter-from-right\n * - enter-from-center\n *\n * @class DisplayLayer\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <DisplayLayer />\n * @property {string} plugName 组件名称，会影响 CSS 类名\n * @property {string} animation 动画效果类型\n * @property {boolean} [modal=false] 是否以模态形式显示，如果设置为 true，点击背景层不会自动隐藏\n * @property {boolean} [show=true] 是否在初始化之后立即显示\n * @property {String|ReactNode|function} content 内容，可以为一个函数返回一个 Promise 来实现内容的懒加载\n */\nexport default class DisplayLayer extends PureComponent {\n    /**\n     * DisplayLayer 显示状态\n     * 共 4 个状态\n     * - init，需要初始化\n     * - ready，准备好进行显示\n     * - shown，已经显示\n     * - hidden，已经隐藏\n     * @static\n     * @memberof DisplayLayer\n     * @type {Status}\n     */\n    static STAGE = STAGE;\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof DisplayLayer\n     * @type {Object}\n     */\n    static propTypes = {\n        content: PropTypes.any,\n        contentLoadFail: PropTypes.any,\n        id: PropTypes.any,\n        animation: PropTypes.any,\n        onShown: PropTypes.func,\n        onHidden: PropTypes.func,\n        onLoad: PropTypes.func,\n        show: PropTypes.bool,\n        hotkey: PropTypes.bool,\n        cache: PropTypes.bool,\n        loadingContent: PropTypes.bool,\n        rootClassName: PropTypes.string,\n        className: PropTypes.string,\n        backdrop: PropTypes.bool,\n        backdropClassName: PropTypes.string,\n        contentClassName: PropTypes.string,\n        footer: PropTypes.any,\n        header: PropTypes.any,\n        plugName: PropTypes.string,\n        modal: PropTypes.bool,\n        children: PropTypes.any,\n        style: PropTypes.object,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof DisplayLayer\n     * @static\n     */\n    static defaultProps = {\n        plugName: null,\n        animation: 'scale-from-top',\n        modal: false,\n        show: true,\n        content: '',\n        contentLoadFail: null,\n        contentClassName: '',\n        header: null,\n        footer: null,\n        onShown: null,\n        onHidden: null,\n        onLoad: null,\n        hotkey: true,\n        className: 'layer',\n        rootClassName: '',\n        backdrop: true,\n        backdropClassName: '',\n        loadingContent: true,\n        cache: false,\n        id: null,\n        children: null,\n        style: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 DisplayLayer 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            stage: STAGE.init,\n            loading: true,\n            content: null,\n            style: null,\n            zIndex: newZIndex()\n        };\n        if (typeof props.content !== 'function') {\n            this.state.content = props.content;\n            this.state.loading = false;\n        }\n\n        /**\n         * 控件 ID\n         * @type {string}\n         */\n        this.id = props.id || `display-${timeSequence()}`;\n\n        /**\n         * 显示动画计时器任务 ID\n         * @private\n         * @type {number}\n         */\n        this.showTimerTask = null;\n    }\n\n    /**\n    * React 组件生命周期函数：`componentDidMount`\n    * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n    *\n    * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n    * @private\n    * @memberof DisplayLayer\n    * @return {void}\n    */\n    componentDidMount() {\n        const {show, hotkey} = this.props;\n        if (show) {\n            this.show();\n            this.loadContent();\n        }\n\n        if (hotkey) {\n            window.addEventListener('keyup', this.handleWindowKeyup);\n        }\n    }\n\n    /**\n    * React 组件生命周期函数：`componentWillUnmount`\n    * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n    *\n    * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n    * @private\n    * @memberof DisplayLayer\n    * @return {void}\n    */\n    componentWillUnmount() {\n        const {hotkey} = this.props;\n        if (hotkey) {\n            window.removeEventListener('keyup', this.handleWindowKeyup);\n        }\n        clearTimeout(this.showTimerTask);\n    }\n\n    /**\n     * 获取组件名称\n     * @type {string}\n     * @memberof DisplayLayer\n     */\n    get stageName() {\n        const {stage} = this.state;\n        return STAGE.getName(stage);\n    }\n\n    /**\n     * 检查组件是否显示\n     * @type {boolean}\n     * @memberof DisplayLayer\n     */\n    get isShow() {\n        return this.isStage(STAGE.shown);\n    }\n\n    /**\n     * 检查组件是否隐藏\n     * @type {boolean}\n     * @memberof DisplayLayer\n     */\n    get isHide() {\n        return this.isStage(STAGE.hidden);\n    }\n\n    /**\n     * 检查当前状态是否为指定的状态\n     *\n     * @param {String|Number} stage 要检查的状态序号或者名称\n     * @return {boolean}\n     * @memberof DisplayLayer\n     */\n    isStage(stage) {\n        return STAGE.isSame(stage, this.state.stage);\n    }\n\n    /**\n     * 变更状态\n     *\n     * @param {String|Number} stage 要变更的状态\n     * @memberof DisplayLayer\n     * @return {void}\n     */\n    changeStage(stage) {\n        const newState = {stage: STAGE.getValue(stage)};\n        if (STAGE.isSame(stage, STAGE.shown)) {\n            newState.zIndex = newZIndex();\n        }\n        this.setState(newState);\n    }\n\n    /**\n     * 设置界面元素上的样式\n     *\n     * @param {Object} style 要设置的样式对象\n     * @param {?Function} callback 设置完成后的回调函数\n     * @memberof DisplayLayer\n     * @return {void}\n     */\n    setStyle(style, callback) {\n        this.setState({style}, callback);\n    }\n\n    /**\n     * 显示 DisplayLayer\n     *\n     * @param {?Function} callback 完成后的回调函数\n     * @memberof DisplayLayer\n     * @return {void}\n     */\n    show(callback) {\n        if (this.state.stage === STAGE.init) {\n            this.changeStage(STAGE.ready);\n            this.showTimerTask = setTimeout(() => {\n                this.show(callback);\n            }, 50);\n        } else {\n            this.changeStage(STAGE.shown);\n            const afterShow = () => {\n                if (this.props.onShown) {\n                    this.props.onShown(this);\n                }\n                if (callback) {\n                    callback(this);\n                }\n            };\n            if (this.props.animation) {\n                setTimeout(afterShow, 400);\n            } else {\n                afterShow();\n            }\n        }\n    }\n\n    /**\n     * 隐藏 DisplayLayer\n     *\n     * @param {?Function} callback 完成后的回调函数\n     * @memberof DisplayLayer\n     * @return {void}\n     */\n    hide(callback) {\n        this.changeStage(STAGE.hidden);\n        const afterHidden = () => {\n            const {cache, onHidden} = this.props;\n            if (cache) {\n                this.reset();\n            }\n            if (onHidden) {\n                onHidden(this);\n            }\n            if (callback) {\n                callback(this);\n            }\n        };\n        const {animation} = this.props;\n        if (animation) {\n            setTimeout(afterHidden, 400);\n        } else {\n            afterHidden();\n        }\n    }\n\n    /**\n     * 在弹出层上加载新的内容\n     * @param {String|ReactNode|Function} newContent 新的内容\n     * @param {?Function} callback 完成后的回调函数\n     * @memberof DisplayLayer\n     * @return {void}\n     */\n    loadContent(newContent, callback) {\n        let {content, contentLoadFail, onLoad} = this.props;\n        if (newContent !== undefined) {\n            content = newContent;\n        }\n        if (typeof content === 'function') {\n            const contentResult = content();\n            const afterLoad = () => {\n                if (onLoad) {\n                    onLoad(true, this.state.content, this);\n                }\n                if (callback) {\n                    callback(true, this.state.content, this);\n                }\n            };\n            if (contentResult instanceof Promise) {\n                this.setState({loading: true, content: null});\n                contentResult.then(result => {\n                    this.setState({content: result, loading: false}, afterLoad);\n                }).catch(() => {\n                    this.setState({content: contentLoadFail, loading: false}, afterLoad);\n                });\n            } else {\n                this.setState({content: contentResult, loading: false}, afterLoad);\n            }\n        }\n    }\n\n    /**\n     * 处理界面按键事件\n     * @param {Event} e 事件对象\n     * @memberof DisplayLayer\n     * @private\n     * @return {void}\n     */\n    handeWindowKeyup(e) {\n        const {hotkey} = this.props;\n        if (e.keyCode === 27 && !this.props.modal) { // ESC key code: 27\n            this.hide();\n        } else if (typeof hotkey === 'function') {\n            hotkey(e, this);\n        }\n    }\n\n    /**\n     * 重置状态为 init（需要初始化）\n     * @memberof DisplayLayer\n     * @return {void}\n     */\n    reset() {\n        this.setState({stage: STAGE.init});\n    }\n\n    /**\n     * 处理背景遮罩层点击事件\n     * @param {Event} event 事件对象\n     * @memberof DisplayLayer\n     * @private\n     * @return {void}\n     */\n    handleBackdropClick = event => {\n        if (!this.props.modal) {\n            this.hide();\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof DisplayLayer\n     * @return {ReactNode}\n     */\n    render() {\n        let {\n            plugName,\n            className,\n            rootClassName,\n            backdrop,\n            backdropClassName,\n            animation,\n            modal,\n            show,\n            content,\n            onShown,\n            onHidden,\n            header,\n            footer,\n            hotkey,\n            cache,\n            loadingContent,\n            contentClassName,\n            contentLoadFail,\n            children,\n            style,\n            id,\n            ...other\n        } = this.props;\n\n        if (loadingContent === true) {\n            loadingContent = <Spinner />;\n        }\n\n        rootClassName = classes(\n            'display-layer',\n            rootClassName,\n            `display-stage-${this.stageName}`,\n            plugName ? `display-layer-${plugName}` : null,\n            {'has-animation': animation}\n        );\n\n        return (\n            <div onKeyUp={this.handeWindowKeyup.bind(this)} className={rootClassName} style={{zIndex: this.state.zIndex}}>\n                {backdrop && <div onClick={this.handleBackdropClick} className={classes('display-backdrop', backdropClassName)} />}\n                <div id={this.id} className={classes('display', animation, className, {in: this.isStage(STAGE.shown)})} {...other} style={Object.assign({}, style, this.state.style)} ref={e => {this.displayElement = e;}}>\n                    {header}\n                    <div className={classes('content', contentClassName)}>{this.state.loading ? loadingContent : this.state.content}</div>\n                    {children}\n                    {footer}\n                </div>\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/display-layer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "STAGE",
    "memberof": "app/components/display-layer.js",
    "static": true,
    "longname": "app/components/display-layer.js~STAGE",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/components/display-layer.js",
    "importStyle": null,
    "description": "Display 状态",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "zIndexSeed",
    "memberof": "app/components/display-layer.js",
    "static": true,
    "longname": "app/components/display-layer.js~zIndexSeed",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/components/display-layer.js",
    "importStyle": null,
    "description": "z-index 序号",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "newZIndex",
    "memberof": "app/components/display-layer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/display-layer.js~newZIndex",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/components/display-layer.js",
    "importStyle": null,
    "description": "获取一个递增的 z-index 序号",
    "lineNumber": 32,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 118,
    "kind": "class",
    "name": "DisplayLayer",
    "memberof": "app/components/display-layer.js",
    "static": true,
    "longname": "app/components/display-layer.js~DisplayLayer",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/display-layer.js",
    "importStyle": "DisplayLayer",
    "description": "DisplayLayer 组件 ，显示一个弹出层\n所有可用的动画名称包括：\n- scale-from-top\n- scale-from-bottom\n- scale-from-left\n- scale-from-right\n- scale-from-center\n- enter-from-top\n- enter-from-bottom\n- enter-from-left\n- enter-from-right\n- enter-from-center",
    "examples": [
      "<DisplayLayer />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DisplayLayer"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "plugName",
        "description": "组件名称，会影响 CSS 类名"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "animation",
        "description": "动画效果类型"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "modal",
        "description": "是否以模态形式显示，如果设置为 true，点击背景层不会自动隐藏"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "show",
        "description": "是否在初始化之后立即显示"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "ReactNode",
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "内容，可以为一个函数返回一个 Promise 来实现内容的懒加载"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "STAGE",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "static": true,
    "longname": "app/components/display-layer.js~DisplayLayer.STAGE",
    "access": "public",
    "description": "DisplayLayer 显示状态\n共 4 个状态\n- init，需要初始化\n- ready，准备好进行显示\n- shown，已经显示\n- hidden，已经隐藏",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "static": true,
    "longname": "app/components/display-layer.js~DisplayLayer.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "static": true,
    "longname": "app/components/display-layer.js~DisplayLayer.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 DisplayLayer 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "state",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 154,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "id",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#id",
    "access": "public",
    "description": "控件 ID",
    "lineNumber": 170,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "showTimerTask",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#showTimerTask",
    "access": "private",
    "description": "显示动画计时器任务 ID",
    "lineNumber": 177,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 190,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 212,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 128,
    "kind": "get",
    "name": "stageName",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#stageName",
    "access": "public",
    "description": "获取组件名称",
    "lineNumber": 225,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "get",
    "name": "isShow",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#isShow",
    "access": "public",
    "description": "检查组件是否显示",
    "lineNumber": 235,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "get",
    "name": "isHide",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#isHide",
    "access": "public",
    "description": "检查组件是否隐藏",
    "lineNumber": 244,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "isStage",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#isStage",
    "access": "public",
    "description": "检查当前状态是否为指定的状态",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "要检查的状态序号或者名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "changeStage",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#changeStage",
    "access": "public",
    "description": "变更状态",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "要变更的状态"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "setStyle",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#setStyle",
    "access": "public",
    "description": "设置界面元素上的样式",
    "lineNumber": 282,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "要设置的样式对象"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "设置完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "show",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#show",
    "access": "public",
    "description": "显示 DisplayLayer",
    "lineNumber": 293,
    "params": [
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "hide",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#hide",
    "access": "public",
    "description": "隐藏 DisplayLayer",
    "lineNumber": 324,
    "params": [
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "loadContent",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#loadContent",
    "access": "public",
    "description": "在弹出层上加载新的内容",
    "lineNumber": 353,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "ReactNode",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "newContent",
        "description": "新的内容"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "handeWindowKeyup",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#handeWindowKeyup",
    "access": "private",
    "description": "处理界面按键事件",
    "lineNumber": 388,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "reset",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#reset",
    "access": "public",
    "description": "重置状态为 init（需要初始化）",
    "lineNumber": 402,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "handleBackdropClick",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#handleBackdropClick",
    "access": "private",
    "description": "处理背景遮罩层点击事件",
    "lineNumber": 413,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 427,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "displayElement",
    "memberof": "app/components/display-layer.js~DisplayLayer",
    "static": false,
    "longname": "app/components/display-layer.js~DisplayLayer#displayElement",
    "access": "public",
    "description": null,
    "lineNumber": 468,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "app/components/display.js",
    "content": "/** @module display */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport DisplayContainer from './display-container';\n\n/**\n * 弹出层管理组件 ID\n * @private\n * @type {string}\n */\nconst containerId = 'display-container';\n/**\n * 弹出层管理组件渲染元素\n * @private\n * @type {Element}\n */\nlet container = document.getElementById(containerId);\nif (!container) {\n    container = document.createElement('div');\n    container.id = containerId;\n    container.classList.add('affix');\n    document.body.appendChild(container);\n}\n\n/**\n * 用于存储弹出层管理组件实例\n * @type {DisplayContainer}\n * @private\n */\nlet displayContainer = null;\nReactDOM.render(<DisplayContainer ref={e => {displayContainer = e;}} />, container);\n\n/**\n * 显示弹出层\n * @param {Object} props 弹出层初始化对象\n * @param {?Function} callback 操作完成后的回调函数\n * @return {DisplayLayer}\n * @function\n */\nexport const displayShow = (props, callback) => (displayContainer && displayContainer.show(props, callback));\n\n/**\n * 隐藏指定 ID 的弹出层\n * @param {string} id 弹出层 ID\n * @param {?Function} callback 操作完成后的回调函数\n * @param {?boolean} remove 是否在隐藏后从界面上移除元素\n * @return {DisplayLayer}\n * @function\n */\nexport const displayHide = (id, callback, remove) => (displayContainer && displayContainer.hide(id, callback, remove));\n\n/**\n * 隐藏并从界面上移除指定 ID 的弹出层\n * @param {string} id 弹出层 ID\n * @param {?Function} callback 操作完成后的回调函数\n * @return {DisplayLayer}\n * @function\n */\nexport const displayRemove = (id, callback) => (displayContainer && displayContainer.remove(id, callback));\n\n/**\n * 获取指定 ID 的弹出层组件实例\n * @param {string} id 弹出层 ID\n * @return {DisplayLayer}\n * @function\n */\nexport const displayGetRef = id => {\n    const item = displayContainer && displayContainer.getItem(id);\n    return item && item.ref;\n};\n\n/**\n * 设置指定 ID 弹出层界面元素上的样式\n * @param {string} id 弹出层 ID\n * @param {Object} newStyle CSS 样式对象\n * @param {?Function} callback 操作完成后的回调函数\n * @return {DisplayLayer}\n * @function\n */\nexport const displaySetStyle = (id, newStyle, callback) => (displayContainer && displayContainer.setStyle(id, newStyle, callback));\n\nexport default {\n    show: displayShow,\n    hide: displayHide,\n    remove: displayRemove,\n    getRef: displayGetRef,\n    setStyle: displaySetStyle,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/display.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "containerId",
    "memberof": "app/components/display.js",
    "static": true,
    "longname": "app/components/display.js~containerId",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/components/display.js",
    "importStyle": null,
    "description": "弹出层管理组件 ID",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "container",
    "memberof": "app/components/display.js",
    "static": true,
    "longname": "app/components/display.js~container",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/components/display.js",
    "importStyle": null,
    "description": "弹出层管理组件渲染元素",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "displayContainer",
    "memberof": "app/components/display.js",
    "static": true,
    "longname": "app/components/display.js~displayContainer",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/components/display.js",
    "importStyle": null,
    "description": "用于存储弹出层管理组件实例",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "DisplayContainer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "displayShow",
    "memberof": "app/components/display.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/display.js~displayShow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/display.js",
    "importStyle": "{displayShow}",
    "description": "显示弹出层",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "弹出层初始化对象"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "displayHide",
    "memberof": "app/components/display.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/display.js~displayHide",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/display.js",
    "importStyle": "{displayHide}",
    "description": "隐藏指定 ID 的弹出层",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "弹出层 ID"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成后的回调函数"
      },
      {
        "nullable": true,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "remove",
        "description": "是否在隐藏后从界面上移除元素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "displayRemove",
    "memberof": "app/components/display.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/display.js~displayRemove",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/display.js",
    "importStyle": "{displayRemove}",
    "description": "隐藏并从界面上移除指定 ID 的弹出层",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "弹出层 ID"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "displayGetRef",
    "memberof": "app/components/display.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/display.js~displayGetRef",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/display.js",
    "importStyle": "{displayGetRef}",
    "description": "获取指定 ID 的弹出层组件实例",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "弹出层 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "displaySetStyle",
    "memberof": "app/components/display.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/display.js~displaySetStyle",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/display.js",
    "importStyle": "{displaySetStyle}",
    "description": "设置指定 ID 弹出层界面元素上的样式",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "弹出层 ID"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newStyle",
        "description": "CSS 样式对象"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "app/components/emojione.js",
    "content": "import Emojione from 'emojione';\nimport Config from '../config';\n\n/**\n * 设置 Emojione 图片资源路径\n */\nEmojione.imagePathPNG = Config.media['emojione.imagePathPNG'];\n\n/**\n * 设置 Emojione 图片资源类型\n */\nEmojione.imageType = Config.media['emojione.imageType'];\n\n/**\n * Emojione 模块\n * @name Emojione\n * @static\n * @see https://github.com/emojione/emojione\n */\nexport default Emojione;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/emojione.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "app/components/group-list.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../utils/html-helper';\nimport Icon from './icon';\nimport Heading from './heading';\nimport ListItem from './list-item';\nimport Lang from '../lang';\nimport Config from '../config';\n\n/**\n * GroupList 组件 ，显示一个分组列表\n * @class GroupList\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <GroupList />\n */\nexport default class GroupList extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof GroupList\n     * @type {Object}\n     */\n    static propTypes = {\n        headingCreator: PropTypes.func,\n        checkIsGroup: PropTypes.func,\n        itemCreator: PropTypes.func,\n        onExpandChange: PropTypes.func,\n        group: PropTypes.object,\n        className: PropTypes.string,\n        children: PropTypes.any,\n        defaultExpand: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n        toggleWithHeading: PropTypes.bool,\n        forceCollapse: PropTypes.bool,\n        hideEmptyGroup: PropTypes.bool,\n        collapseIcon: PropTypes.string,\n        expandIcon: PropTypes.string,\n        startPageSize: PropTypes.number,\n        morePageSize: PropTypes.number,\n        defaultPage: PropTypes.number,\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof GroupList\n     * @static\n     */\n    static defaultProps = {\n        headingCreator: null,\n        itemCreator: null,\n        group: null,\n        className: null,\n        children: null,\n        defaultExpand: true,\n        toggleWithHeading: true,\n        collapseIcon: 'chevron-right',\n        expandIcon: 'chevron-down',\n        hideEmptyGroup: true,\n        checkIsGroup: null,\n        onExpandChange: null,\n        forceCollapse: false,\n        startPageSize: Config.ui['page.start.size'] || 20,\n        morePageSize: Config.ui['page.more.size'] || 20,\n        defaultPage: 1\n    }\n\n    /**\n     * 渲染一个分组列表\n     * @param {Array.<Object>} list 列表项配置列表\n     * @param {Object} props 组件属性\n     * @param {number} page 页码\n     * @param {Function?} onRequestMore 当点击更多时的回调函数\n     * @return {ReactNode}\n     * @static\n     * @memberof GroupList\n     */\n    static render(list, props, page = 0, onRequestMore = null) {\n        const listViews = [];\n        props = Object.assign({}, GroupList.defaultProps, props);\n        const maxIndex = page ? Math.min(list.length, props.startPageSize + (page > 1 ? (page - 1) * props.morePageSize : 0)) : list.length;\n        for (let i = 0; i < maxIndex; ++i) {\n            const item = list[i];\n            if ((props.checkIsGroup && props.checkIsGroup(item)) || (!props.checkIsGroup && (item.type === 'group' || item.list))) {\n                if (props.hideEmptyGroup && (!item.list || !item.list.length)) {\n                    continue;\n                }\n                listViews.push(<GroupList\n                    key={item.key || item.id || i}\n                    group={(props && props.listConverter) ? props.listConverter(item) : item}\n                    itemCreator={props && props.itemCreator}\n                    toggleWithHeading={props && props.toggleWithHeading}\n                    headingCreator={props && props.headingCreator}\n                    defaultExpand={props && props.defaultExpand}\n                    expandIcon={props && props.expandIcon}\n                    collapseIcon={props && props.collapseIcon}\n                    hideEmptyGroup={props && props.hideEmptyGroup}\n                    checkIsGroup={props && props.checkIsGroup}\n                    forceCollapse={props && props.forceCollapse}\n                    onExpandChange={props && props.onExpandChange}\n                    startPageSize={props && props.startPageSize}\n                    morePageSize={props && props.morePageSize}\n                    defaultPage={props && props.defaultPage}\n                />);\n            } else if (props && props.itemCreator) {\n                listViews.push(props.itemCreator(item, i));\n            } else {\n                listViews.push(<ListItem key={item.key || item.id || i} {...item} />);\n            }\n        }\n        const notShowCount = list.length - maxIndex;\n        if (notShowCount) {\n            listViews.push(<ListItem key=\"showMore\" icon=\"chevron-double-down\" className=\"flex-middle item muted\" title={<span className=\"title small\">{Lang.format('common.clickShowMoreFormat', notShowCount)}</span>} onClick={onRequestMore} />);\n        }\n        return listViews;\n    }\n\n    /**\n     * React 组件构造函数，创建一个 GroupList 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        let {defaultExpand} = props;\n        if (typeof defaultExpand === 'function') {\n            defaultExpand = defaultExpand(props.group, this);\n        }\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            expand: defaultExpand,\n            page: props.defaultPage\n        };\n    }\n\n    /**\n     * 切换展开或折叠分组\n     * @param {?bool} expand 如果设置为 true，则展开分组，如果为 false，则折叠分组，否则自动切换\n     * @param {?Function} callback 操作完成时的回调函数\n     * @memberof GroupList\n     * @return {void}\n     */\n    toggle(expand, callback) {\n        if (expand === undefined) {\n            expand = !this.state.expand;\n        }\n        this.setState({expand}, () => {\n            const {onExpandChange, group} = this.props;\n            if (onExpandChange) {\n                onExpandChange(expand, group);\n            }\n            if (callback) {\n                callback(expand, group);\n            }\n        });\n    }\n\n    /**\n     * 展开分组\n     * @param {?Function} callback 操作完成时的回调函数\n     * @memberof GroupList\n     * @return {void}\n     */\n    expand(callback) {\n        this.toggle(true, callback);\n    }\n\n    /**\n     * 折叠分组\n     * @param {?Function} callback 操作完成时的回调函数\n     * @memberof GroupList\n     * @return {void}\n     */\n    collapse(callback) {\n        this.toggle(false, callback);\n    }\n\n    /**\n     * 处理分组标题点击事件\n     * @param {Event} e 事件对象\n     * @memberof GroupList\n     * @private\n     * @return {void}\n     */\n    handleHeadingClick = e => {\n        this.toggle();\n    }\n\n    /**\n     * 检查是否展开\n     * @type {boolean}\n     * @memberof GroupList\n     */\n    get isExpand() {\n        return !this.props.forceCollapse && this.state.expand;\n    }\n\n    /**\n     * 处理请求显示更多列表项事件\n     * @memberof GroupList\n     * @private\n     * @return {void}\n     */\n    handleRequestMorePage = () => {\n        this.setState({page: this.state.page + 1});\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof GroupList\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            forceCollapse,\n            headingCreator,\n            hideEmptyGroup,\n            checkIsGroup,\n            itemCreator,\n            group,\n            toggleWithHeading,\n            defaultExpand,\n            expandIcon,\n            collapseIcon,\n            onExpandChange,\n            className,\n            children,\n            startPageSize,\n            morePageSize,\n            defaultPage,\n            ...other\n        } = this.props;\n\n        const {\n            title,\n            list,\n            root,\n        } = group;\n\n        if (root) {\n            return (\n                <div className={classes('app-group-list-root list', className)} {...other}>\n                    {GroupList.render(list, this.props, this.state.page, this.handleRequestMorePage)}\n                </div>\n            );\n        }\n\n        const expand = this.isExpand;\n\n        let headingView = null;\n        if (headingCreator) {\n            headingView = headingCreator(group, this);\n        } else if (title) {\n            if (React.isValidElement(title)) {\n                headingView = title;\n            } else if (typeof title === 'object') {\n                headingView = <Heading {...title} />;\n            } else if (title) {\n                const icon = expand ? expandIcon : collapseIcon;\n                let iconView = null;\n                if (icon) {\n                    if (React.isValidElement(icon)) {\n                        iconView = icon;\n                    } else if (typeof icon === 'object') {\n                        iconView = <Icon {...icon} />;\n                    } else {\n                        iconView = <Icon name={icon} />;\n                    }\n                }\n                headingView = (\n                    <header onClick={toggleWithHeading ? this.handleHeadingClick : null} className=\"heading\">\n                        {iconView}\n                        <div className=\"title\">{title}</div>\n                    </header>\n                );\n            }\n        }\n\n        return (\n            <div\n                className={classes('app-group-list list', className, {'is-expand': expand, 'is-collapse': !expand})}\n                {...other}\n            >\n                {headingView}\n                {expand && list && GroupList.render(list, this.props, this.state.page, this.handleRequestMorePage)}\n                {children}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/group-list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "GroupList",
    "memberof": "app/components/group-list.js",
    "static": true,
    "longname": "app/components/group-list.js~GroupList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/group-list.js",
    "importStyle": "GroupList",
    "description": "GroupList 组件 ，显示一个分组列表",
    "examples": [
      "<GroupList />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "GroupList"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/group-list.js~GroupList",
    "static": true,
    "longname": "app/components/group-list.js~GroupList.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/group-list.js~GroupList",
    "static": true,
    "longname": "app/components/group-list.js~GroupList.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/group-list.js~GroupList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/group-list.js~GroupList.render",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      },
      {
        "name": "props",
        "types": [
          "*"
        ]
      },
      {
        "name": "page",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "onRequestMore",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/group-list.js~GroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/group-list.js~GroupList#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 GroupList 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "state",
    "memberof": "app/components/group-list.js~GroupList",
    "static": false,
    "longname": "app/components/group-list.js~GroupList#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 138,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "toggle",
    "memberof": "app/components/group-list.js~GroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/group-list.js~GroupList#toggle",
    "access": "public",
    "description": "切换展开或折叠分组",
    "lineNumber": 151,
    "params": [
      {
        "nullable": true,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "expand",
        "description": "如果设置为 true，则展开分组，如果为 false，则折叠分组，否则自动切换"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "expand",
    "memberof": "app/components/group-list.js~GroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/group-list.js~GroupList#expand",
    "access": "public",
    "description": "展开分组",
    "lineNumber": 172,
    "params": [
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "collapse",
    "memberof": "app/components/group-list.js~GroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/group-list.js~GroupList#collapse",
    "access": "public",
    "description": "折叠分组",
    "lineNumber": 182,
    "params": [
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "handleHeadingClick",
    "memberof": "app/components/group-list.js~GroupList",
    "static": false,
    "longname": "app/components/group-list.js~GroupList#handleHeadingClick",
    "access": "private",
    "description": "处理分组标题点击事件",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "get",
    "name": "isExpand",
    "memberof": "app/components/group-list.js~GroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/group-list.js~GroupList#isExpand",
    "access": "public",
    "description": "检查是否展开",
    "lineNumber": 202,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "handleRequestMorePage",
    "memberof": "app/components/group-list.js~GroupList",
    "static": false,
    "longname": "app/components/group-list.js~GroupList#handleRequestMorePage",
    "access": "private",
    "description": "处理请求显示更多列表项事件",
    "lineNumber": 212,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/group-list.js~GroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/group-list.js~GroupList#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 224,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 167,
    "kind": "file",
    "name": "app/components/heading.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../utils/html-helper';\nimport Icon from './icon';\nimport Avatar from './avatar';\n\n/**\n * Heading 组件 ，显示一个支持带头像或操作的标题\n * @class Heading\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <Heading />\n */\nexport default class Heading extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Heading\n     * @type {Object}\n     */\n    static propTypes = {\n        avatar: PropTypes.any,\n        icon: PropTypes.any,\n        title: PropTypes.any,\n        children: PropTypes.any,\n        nav: PropTypes.any,\n        className: PropTypes.string,\n        type: PropTypes.string\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Heading\n     * @static\n     */\n    static defaultProps = {\n        avatar: null,\n        icon: null,\n        title: null,\n        children: null,\n        nav: null,\n        className: null,\n        type: 'a',\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Heading\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            type,\n            nav,\n            avatar,\n            icon,\n            title,\n            children,\n            className,\n            ...other\n        } = this.props;\n\n        let iconView = null;\n        if (icon) {\n            if (React.isValidElement(icon)) {\n                iconView = icon;\n            } else if (typeof icon === 'object') {\n                iconView = <Icon {...icon} />;\n            } else if (icon) {\n                iconView = <Icon name={icon} />;\n            }\n        }\n\n        let avatarView = null;\n        if (avatar) {\n            if (avatar === true && iconView) {\n                avatarView = <Avatar icon={icon} />;\n            } else if (React.isValidElement(avatar)) {\n                avatarView = avatar;\n            } else if (typeof avatar === 'object') {\n                avatarView = <Avatar {...avatar} />;\n            } else if (avatar) {\n                avatarView = <Avatar auto={avatar} />;\n            }\n        }\n\n        let titleView = null;\n        if (title) {\n            if (React.isValidElement(title)) {\n                titleView = title;\n            } else if (title) {\n                titleView = <div className=\"title\">{title}</div>;\n            }\n        }\n\n        return React.createElement(type, {\n            className: classes(\n                'app-heading',\n                className,\n            ),\n            ...other\n        }, avatarView, iconView, titleView, nav, children);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/heading.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "Heading",
    "memberof": "app/components/heading.js",
    "static": true,
    "longname": "app/components/heading.js~Heading",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/heading.js",
    "importStyle": "Heading",
    "description": "Heading 组件 ，显示一个支持带头像或操作的标题",
    "examples": [
      "<Heading />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Heading"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/heading.js~Heading",
    "static": true,
    "longname": "app/components/heading.js~Heading.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/heading.js~Heading",
    "static": true,
    "longname": "app/components/heading.js~Heading.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/heading.js~Heading",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/heading.js~Heading#render",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "app/components/hotkey-input-control.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport InputControl from './input-control';\nimport {classes} from '../utils/html-helper';\nimport {getKeyDecoration, formatKeyDecoration, isOnlyModifyKeys} from '../utils/shortcut';\nimport Lang from '../lang';\n\n/**\n * HotkeyInputControl 组件 ，显示一个快捷键输入框\n * @class HotkeyInputControl\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * <HotkeyInputControl />\n */\nexport default class HotkeyInputControl extends Component {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof HotkeyInputControl\n     * @type {Object}\n     */\n    static propTypes = {\n        defaultValue: PropTypes.string,\n        className: PropTypes.string,\n        onChange: PropTypes.func,\n        inputProps: PropTypes.object,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof HotkeyInputControl\n     * @static\n     */\n    static defaultProps = {\n        defaultValue: '',\n        onChange: null,\n        inputProps: null,\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 HotkeyInputControl 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            value: formatKeyDecoration(props.defaultValue),\n            error: null\n        };\n    }\n\n    /**\n     * 更改输入框内的值\n     * @param {string} value 输入框内的值\n     * @param {String|ReactNode} error 设置错误提示\n     * @memberof HotkeyInputControl\n     * @return {void}\n     */\n    changeValue(value, error = null) {\n        const {onChange} = this.props;\n        if (onChange) {\n            onChange(value);\n        }\n        this.setState({value, error});\n    }\n\n    /**\n     * 处理键盘按键事件\n     * @param {Event} e 事件对象\n     * @memberof HotkeyInputControl\n     * @private\n     * @return {void}\n     */\n    handleKeyDownEvent = e => {\n        if (e.keyCode === 8 || e.cod === 'Backspace') {\n            this.changeValue('');\n            return;\n        }\n        const shortcut = getKeyDecoration(e);\n        if (isOnlyModifyKeys(shortcut)) {\n            this.changeValue(shortcut, Lang.string('setting.hotkeys.cantSetOnlyMotifyKeys'));\n        } else {\n            this.changeValue(shortcut);\n        }\n        e.preventDefault();\n        e.stopPropagation();\n    };\n\n    /**\n     * 处理失去焦点事件\n     * @param {Event} e 事件对象\n     * @memberof HotkeyInputControl\n     * @private\n     * @return {void}\n     */\n    handleBlurEvent = e => {\n        if (isOnlyModifyKeys(this.state.value)) {\n            this.changeValue('', Lang.string('setting.hotkeys.cantSetOnlyMotifyKeys'));\n        }\n    };\n\n    /**\n     * 获取输入框内的值\n     * @memberof HotkeyInputControl\n     * @return {string}\n     */\n    getValue() {\n        return this.state.value;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof HotkeyInputControl\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            onChange,\n            defaultValue,\n            className,\n            inputProps,\n            ...other\n        } = this.props;\n\n        const {error, value} = this.state;\n\n        return (\n            <InputControl\n                {...other}\n                placeholder={defaultValue}\n                className={classes(className, {'has-error': !!error})}\n                helpText={error}\n                ref={e => {this.inputControl = e;}}\n                value={value}\n                inputProps={Object.assign({onKeyDown: this.handleKeyDownEvent, onBlur: this.handleBlurEvent}, inputProps)}\n            />\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/hotkey-input-control.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "HotkeyInputControl",
    "memberof": "app/components/hotkey-input-control.js",
    "static": true,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/hotkey-input-control.js",
    "importStyle": "HotkeyInputControl",
    "description": "HotkeyInputControl 组件 ，显示一个快捷键输入框",
    "examples": [
      "<HotkeyInputControl />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "HotkeyInputControl"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "static": true,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "static": true,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 HotkeyInputControl 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "state",
    "memberof": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "static": false,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "changeValue",
    "memberof": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl#changeValue",
    "access": "public",
    "description": "更改输入框内的值",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "输入框内的值"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "ReactNode"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "设置错误提示"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "handleKeyDownEvent",
    "memberof": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "static": false,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl#handleKeyDownEvent",
    "access": "private",
    "description": "处理键盘按键事件",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "handleBlurEvent",
    "memberof": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "static": false,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl#handleBlurEvent",
    "access": "private",
    "description": "处理失去焦点事件",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "getValue",
    "memberof": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl#getValue",
    "access": "public",
    "description": "获取输入框内的值",
    "lineNumber": 120,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 132,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "inputControl",
    "memberof": "app/components/hotkey-input-control.js~HotkeyInputControl",
    "static": false,
    "longname": "app/components/hotkey-input-control.js~HotkeyInputControl#inputControl",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "app/components/icon.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes, rem} from '../utils/html-helper';\n\n/**\n * Icon 组件 ，显示一个图标，目前支持 materialdesign 内的所有图标\n * 所有可用的图标参见 https://materialdesignicons.com/\n * @class Icon\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example <caption>创建一个星星图标</caption>\n * <MDIcon name=\"star\" />\n */\nexport default class MDIcon extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Icon\n     * @type {Object}\n     */\n    static propTypes = {\n        size: PropTypes.number,\n        style: PropTypes.object,\n        square: PropTypes.bool,\n        className: PropTypes.string,\n        color: PropTypes.string,\n        name: PropTypes.string,\n        children: PropTypes.any\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Icon\n     * @static\n     */\n    static defaultProps = {\n        size: 0,\n        name: '',\n        color: '',\n        className: '',\n        square: true,\n        style: null,\n        children: null\n    };\n\n    /**\n     * 创建一个图标组件\n     * @param {String|ReactNode|Object} icon 图标名称或者图标组件属性配置\n     * @param {Object?} props 图标组件属性配置\n     * @return {ReactNode.<MDIcon>}\n     * @static\n     * @memberof Icon\n     * @example <caption>创建一个星星图标</caption>\n     * const icon = MDIcon.render('star');\n     */\n    static render(icon, props) {\n        let iconView = null;\n        if (icon) {\n            if (React.isValidElement(icon)) {\n                iconView = icon;\n            } else if (typeof icon === 'object') {\n                iconView = <MDIcon {...icon} {...props} />;\n            } else if (icon) {\n                iconView = <MDIcon name={icon} {...props} />;\n            }\n        }\n        return iconView;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Icon\n     * @return {ReactNode}\n     */\n    render() {\n        let {\n            square,\n            size,\n            color,\n            name,\n            style,\n            children,\n            className,\n            ...other\n        } = this.props;\n        style = Object.assign({}, style);\n        if (size) {\n            if (size < 12) size *= 12;\n            style.fontSize = rem(size);\n        }\n        if (color) {\n            style.color = color;\n        }\n        if (square && size) {\n            style.lineHeight = style.fontSize;\n            style.height = style.fontSize;\n            style.width = style.fontSize;\n        }\n        let iconName = '';\n        if (name.startsWith('mdi-')) {\n            iconName = `mdi ${name}`;\n        } else if (name.startsWith('icon-')) {\n            iconName = name;\n        } else {\n            iconName = `mdi mdi-${name}`;\n        }\n        return <i style={style} {...other} className={classes(`icon ${iconName}`, className)}>{children}</i>;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/icon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "MDIcon",
    "memberof": "app/components/icon.js",
    "static": true,
    "longname": "app/components/icon.js~MDIcon",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/icon.js",
    "importStyle": "MDIcon",
    "description": "Icon 组件 ，显示一个图标，目前支持 materialdesign 内的所有图标\n所有可用的图标参见 https://materialdesignicons.com/",
    "examples": [
      "<caption>创建一个星星图标</caption>\n<MDIcon name=\"star\" />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Icon"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/icon.js~MDIcon",
    "static": true,
    "longname": "app/components/icon.js~MDIcon.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/icon.js~MDIcon",
    "static": true,
    "longname": "app/components/icon.js~MDIcon.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/icon.js~MDIcon",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/icon.js~MDIcon.render",
    "access": "public",
    "description": "创建一个图标组件",
    "examples": [
      "<caption>创建一个星星图标</caption>\nconst icon = MDIcon.render('star');"
    ],
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "ReactNode",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "icon",
        "description": "图标名称或者图标组件属性配置"
      },
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "图标组件属性配置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode.<MDIcon>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/icon.js~MDIcon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/icon.js~MDIcon#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 81,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "app/components/image-cutter.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport hotkeys from 'hotkeys-js';\nimport AreaSelector from './area-selector';\nimport Icon from './icon';\nimport Avatar from './avatar';\nimport timeSequence from '../utils/time-sequence';\nimport ImageHelper from '../utils/image';\n\n/**\n * ImageCutter 组件 ，显示一个图片剪切控件\n * @class ImageCutter\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * <ImageCutter />\n */\nexport default class ImageCutter extends Component {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ImageCutter\n     * @type {Object}\n     */\n    static propTypes = {\n        sourceImage: PropTypes.string,\n        style: PropTypes.object,\n        onFinish: PropTypes.func,\n        onCancel: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ImageCutter\n     * @static\n     */\n    static defaultProps = {\n        sourceImage: null,\n        style: null,\n        onFinish: null,\n        onCancel: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ImageCutter 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            hover: true,\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ImageCutter\n     * @return {void}\n     */\n    componentDidMount() {\n        this.HotkeysScope = timeSequence();\n        hotkeys.setScope(this.HotkeysScope);\n        hotkeys('esc', this.HotkeysScope, () => {\n            this.handleCloseButtonClick();\n        });\n        hotkeys('enter', this.HotkeysScope, () => {\n            this.handleOkButtonClick();\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ImageCutter\n     * @return {void}\n     */\n    componentWillUnmount() {\n        hotkeys.deleteScope(this.HotkeysScope);\n    }\n\n    /**\n     * 处理确认按钮点击事件\n     * @param {Event} event 事件对象\n     * @memberof ImageCutter\n     * @private\n     * @return {void}\n     */\n    handleOkButtonClick = event => {\n        if (this.select) {\n            ImageHelper.cutImage(this.props.sourceImage, this.select).then(image => {\n                if (this.props.onFinish) {\n                    this.props.onFinish(image);\n                }\n            }).catch(err => {\n                if (DEBUG) {\n                    console.warn('Cut image error', err);\n                }\n            });\n        } else if (this.props.onFinish) {\n            this.props.onFinish(null);\n        }\n    }\n\n    /**\n     * 处理确认按钮点击事件\n     * @memberof ImageCutter\n     * @private\n     * @return {void}\n     */\n    handleCloseButtonClick = () => {\n        if (this.props.onFinish) {\n            this.props.onFinish(null);\n        }\n    }\n\n    /**\n     * 处理设置选择区域事件\n     * @param {Object} select 新选择的区域\n     * @memberof ImageCutter\n     * @private\n     * @return {void}\n     */\n    handleSelectArea = (select) => {\n        this.select = select;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ImageCutter\n     * @return {ReactNode}\n     */\n    render() {\n        let {\n            sourceImage,\n            style,\n            onFinish,\n            onCancel,\n            ...other\n        } = this.props;\n\n        const imageUrl = `file://${sourceImage.replace(/\\\\/g, '/')}`;\n\n        style = Object({\n            backgroundRepeat: 'no-repeat',\n            backgroundImage: `url(\"${imageUrl}\")`,\n            backgroundPosition: 'center',\n            backgroundSize: 'contain'\n        }, style);\n\n        const toolbar = (<nav\n            className=\"layer nav primary-pale\"\n            style={{marginTop: 2, marginBottom: 2}}\n        >\n            <a onClick={this.handleCloseButtonClick}><Icon name=\"close icon-2x text-danger\" /></a>\n            <a onClick={this.handleOkButtonClick}><Icon name=\"check icon-2x text-success\" /></a>\n        </nav>);\n\n        return (<div\n            {...other}\n            className=\"dock user-app-no-dragable\"\n            style={style}\n            onMouseEnter={() => {this.setState({hover: true});}}\n            onMouseLeave={() => {this.setState({hover: false});}}\n        >\n            <AreaSelector\n                onSelectArea={this.handleSelectArea}\n                style={{zIndex: 2, display: this.state.hover ? 'block' : 'block'}}\n                className=\"dock\"\n                img={imageUrl}\n                toolbarHeight={50}\n                toolbar={toolbar}\n            />\n            <Avatar className=\"state darken dock dock-right dock-top\" icon=\"close icon-2x\" onClick={this.handleCloseButtonClick} />\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/image-cutter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "ImageCutter",
    "memberof": "app/components/image-cutter.js",
    "static": true,
    "longname": "app/components/image-cutter.js~ImageCutter",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/image-cutter.js",
    "importStyle": "ImageCutter",
    "description": "ImageCutter 组件 ，显示一个图片剪切控件",
    "examples": [
      "<ImageCutter />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ImageCutter"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "static": true,
    "longname": "app/components/image-cutter.js~ImageCutter.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "static": true,
    "longname": "app/components/image-cutter.js~ImageCutter.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 194,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/image-cutter.js~ImageCutter#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ImageCutter 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "state",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "static": false,
    "longname": "app/components/image-cutter.js~ImageCutter#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/image-cutter.js~ImageCutter#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 76,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "HotkeysScope",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "static": false,
    "longname": "app/components/image-cutter.js~ImageCutter#HotkeysScope",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/image-cutter.js~ImageCutter#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "handleOkButtonClick",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "static": false,
    "longname": "app/components/image-cutter.js~ImageCutter#handleOkButtonClick",
    "access": "private",
    "description": "处理确认按钮点击事件",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "handleCloseButtonClick",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "static": false,
    "longname": "app/components/image-cutter.js~ImageCutter#handleCloseButtonClick",
    "access": "private",
    "description": "处理确认按钮点击事件",
    "lineNumber": 130,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "handleSelectArea",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "static": false,
    "longname": "app/components/image-cutter.js~ImageCutter#handleSelectArea",
    "access": "private",
    "description": "处理设置选择区域事件",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "select",
        "description": "新选择的区域"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "select",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "longname": "app/components/image-cutter.js~ImageCutter#select",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/image-cutter.js~ImageCutter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/image-cutter.js~ImageCutter#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 155,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "app/components/image-holder.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from './icon';\nimport Avatar from './avatar';\nimport Lang from '../lang';\nimport {classes} from '../utils/html-helper';\n\n/**\n * ImageHolder 组件 ，显示一个图片占位元素\n * @class ImageHolder\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <ImageHolder />\n */\nexport default class ImageHolder extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ImageHolder\n     * @type {Object}\n     */\n    static propTypes = {\n        style: PropTypes.object,\n        source: PropTypes.string,\n        thumbnail: PropTypes.string,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        progress: PropTypes.number,\n        status: PropTypes.string,\n        alt: PropTypes.string,\n        className: PropTypes.string,\n        loadingText: PropTypes.string,\n        previewUrl: PropTypes.string,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ImageHolder\n     * @static\n     */\n    static defaultProps = {\n        style: null,\n        source: null,\n        thumbnail: null,\n        width: 0,\n        height: 0,\n        alt: '',\n        status: 'ok', // 'loading', 'ok', 'broken',\n        progress: 0,\n        className: '',\n        loadingText: '',\n        previewUrl: null,\n        children: null,\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ImageHolder\n     * @return {ReactNode}\n     */\n    render() {\n        let {\n            style,\n            source,\n            thumbnail,\n            width,\n            height,\n            status,\n            progress,\n            alt,\n            className,\n            loadingText,\n            previewUrl,\n            children,\n            ...other\n        } = this.props;\n\n        style = Object({\n            maxWidth: width || 'initial',\n        }, style);\n\n        const innerStyle = {\n            paddingBottom: width ? `${(100 * height) / width}%` : 0,\n            backgroundColor: width && status !== 'ok' ? '#f1f1f1' : 'transparent',\n        };\n\n        const imgStyle = {\n            position: width ? 'absolute' : 'static',\n            top: 0,\n            left: 0,\n            margin: 0\n        };\n\n        if (status === 'broken') {\n            return <Avatar className=\"avatar-xl warning-pale text-warning app-message-image-placeholder\" icon=\"image-broken\" title={Lang.string('file.uploadFailed')} />;\n        }\n\n        let imgView = null;\n        if (source) {\n            imgView = <img src={source} style={imgStyle} alt={alt || source} data-fail={Lang.string('file.downloadFailed')} onError={e => e.target.classList.add('broken')} />;\n        } else if (thumbnail) {\n            imgView = <img src={thumbnail} style={imgStyle} alt={alt || thumbnail} />;\n        } else if (status === 'broken') {\n            imgView = <div className=\"dock center-content\"><Icon name=\"image-broken\" className=\"muted icon-5x\" /></div>;\n        } else if (status === 'loading') {\n            if (previewUrl) {\n                innerStyle.backgroundImage = `url('${previewUrl}')`;\n                innerStyle.backgroundRepeat = 'no-repeat';\n                innerStyle.backgroundSize = 'contain';\n                innerStyle.backgroundPosition = 'center';\n            }\n            imgView = <div className={`img-hold-progress${!progress ? ' img-hold-waiting' : ''}`}><div className=\"dock center-content\">{previewUrl ? null : <Icon name=\"image-filter-hdr\" className=\"muted icon-5x\" />}</div><div className=\"text flex flex-middle\"><Icon name=\"loading\" className=\"inline-block spin inline-block text-shadow-white\" /> &nbsp; {loadingText}{progress ? `${Math.floor(progress)}%` : ''}</div><div className=\"progress\"><div className=\"bar\" style={{width: progress ? `${progress}%` : '100%'}} /></div></div>;\n        }\n\n        return (<div\n            className={classes('img-holder', className)}\n            style={style}\n            {...other}\n        >\n            <div className=\"img-hold-box\" style={innerStyle}>\n                {imgView}\n            </div>\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/image-holder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "class",
    "name": "ImageHolder",
    "memberof": "app/components/image-holder.js",
    "static": true,
    "longname": "app/components/image-holder.js~ImageHolder",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/image-holder.js",
    "importStyle": "ImageHolder",
    "description": "ImageHolder 组件 ，显示一个图片占位元素",
    "examples": [
      "<ImageHolder />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ImageHolder"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/image-holder.js~ImageHolder",
    "static": true,
    "longname": "app/components/image-holder.js~ImageHolder.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/image-holder.js~ImageHolder",
    "static": true,
    "longname": "app/components/image-holder.js~ImageHolder.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/image-holder.js~ImageHolder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/image-holder.js~ImageHolder#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 69,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "app/components/image-viewer.js",
    "content": "import React from 'react';\nimport Modal from './modal';\nimport timeSequence from '../utils/time-sequence';\n\n/** @module image-viewer */\n\n/**\n * 显示一个图片预览弹出层\n * @param {string} imageSrc 图片地址\n * @param {Object} props DisplayLayer 组件属性\n * @param {?Function} callback 操作完成时的回调函数\n * @return {DisplayLayer}\n * @function\n */\nexport const showImageViewer = (imageSrc, props, callback) => {\n    const modalId = `layer-image-viewer-${timeSequence()}`;\n    return Modal.show(Object.assign({\n        closeButton: true,\n        actions: false,\n        className: 'layer-image-viewer',\n        onClick: () => {\n            Modal.hide(modalId);\n        },\n        content: <img src={imageSrc} alt={imageSrc} />\n    }, props, {\n        id: modalId\n    }), callback);\n};\n\nexport default {\n    show: showImageViewer,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/image-viewer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "showImageViewer",
    "memberof": "app/components/image-viewer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/image-viewer.js~showImageViewer",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/image-viewer.js",
    "importStyle": "{showImageViewer}",
    "description": "显示一个图片预览弹出层",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imageSrc",
        "description": "图片地址"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "DisplayLayer 组件属性"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "app/components/index.js",
    "content": "import AppAvatar from './app-avatar';\nimport Display from './display';\nimport Modal from './modal';\nimport AreaSelector from './area-selector';\nimport Emojione from './emojione';\nimport Pager from './pager';\nimport Avatar from './avatar';\nimport HotkeyInputControl from './hotkey-input-control';\nimport Popover from './popover';\nimport Button from './button';\nimport Icon from './icon';\nimport SearchControl from './search-control';\nimport Checkbox from './checkbox';\nimport ImageCutter from './image-cutter';\nimport SelectBox from './select-box';\nimport ClickOutsideWrapper from './click-outside-wrapper';\nimport ImageViewer from './image-viewer';\nimport Spinner from './spinner';\nimport ContextMenu from './context-menu';\nimport TabPane from './tab-pane';\nimport DisplayContainer from './display-container';\nimport InputControl from './input-control';\nimport Tabs from './tabs';\nimport DisplayLayer from './display-layer';\nimport Messager from './messager';\n\nexport default {\n    AppAvatar,\n    Display,\n    Modal,\n    AreaSelector,\n    Emojione,\n    Pager,\n    Avatar,\n    HotkeyInputControl,\n    Popover,\n    Button,\n    Icon,\n    SearchControl,\n    Checkbox,\n    ImageCutter,\n    SelectBox,\n    ClickOutsideWrapper,\n    ImageViewer,\n    Spinner,\n    ContextMenu,\n    TabPane,\n    DisplayContainer,\n    InputControl,\n    Tabs,\n    DisplayLayer,\n    Messager,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "app/components/input-control.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport hotkeys from 'hotkeys-js';\nimport {classes} from '../utils/html-helper';\nimport timeSequence from '../utils/time-sequence';\n\n// 设置输入框快捷键事件\nhotkeys.filter = event => {\n    const target = (event.target || event.srcElement);\n    const tagName = target.tagName;\n    if (/^(INPUT|TEXTAREA|SELECT)$/.test(tagName)) {\n        const scopeAttr = target.attributes['data-hotkey-scope'];\n        const scope = scopeAttr && scopeAttr.value;\n        if (scope) {\n            hotkeys.setScope(scope);\n            return true;\n        }\n        return false;\n    }\n    return true;\n};\n\n/**\n * InputControl 组件 ，显示一个输入框控件\n * @class InputControl\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <InputControl />\n */\nexport default class InputControl extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof InputControl\n     * @type {Object}\n     */\n    static propTypes = {\n        value: PropTypes.string,\n        defaultValue: PropTypes.string,\n        label: PropTypes.any,\n        className: PropTypes.string,\n        placeholder: PropTypes.string,\n        autoFocus: PropTypes.bool,\n        style: PropTypes.object,\n        labelStyle: PropTypes.object,\n        inputType: PropTypes.string,\n        inputStyle: PropTypes.object,\n        inputProps: PropTypes.object,\n        helpText: PropTypes.string,\n        onChange: PropTypes.func,\n        disabled: PropTypes.bool,\n        inputClassName: PropTypes.string,\n        children: PropTypes.any,\n        name: PropTypes.string,\n        hotkeyScope: PropTypes.string,\n        hotKeys: PropTypes.object,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof InputControl\n     * @static\n     */\n    static defaultProps = {\n        label: ' ',\n        className: '',\n        placeholder: '',\n        autoFocus: false,\n        style: null,\n        inputType: 'text',\n        value: '',\n        helpText: null,\n        onChange: null,\n        disabled: false,\n        inputClassName: 'rounded',\n        name: '',\n        labelStyle: null,\n        inputStyle: null,\n        inputProps: null,\n        children: null,\n        defaultValue: undefined,\n        hotkeyScope: null,\n        hotKeys: null\n    };\n\n    /**\n     * React 组件构造函数，创建一个 InputControl 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        const {\n            defaultValue, name, hotkeyScope, hotKeys\n        } = props;\n\n        /**\n         * 是否没有设置默认值，并由组件自身管理值\n         * @type {boolean}\n         */\n        this.controled = defaultValue === undefined;\n\n        /**\n         * 控件名称\n         * @type {string}\n         */\n        this.controlName = name || `inputControl-${timeSequence()}`;\n\n        /**\n         * 快捷键范围名称\n         * @type {string}\n         */\n        this.hotkeyScope = (hotkeyScope || hotKeys) ? (hotkeyScope || this.controlName) : '';\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof InputControl\n     * @return {void}\n     */\n    componentDidMount() {\n        const {autoFocus, hotKeys} = this.props;\n\n        if (autoFocus) {\n            this.autoFocusTask = setTimeout(() => {\n                this.focus();\n                this.autoFocusTask = null;\n            }, 100);\n        }\n\n        if (hotKeys) {\n            Object.keys(hotkeys).forEach(key => {\n                hotkeys(key, this.hotkeysScope, hotkeys[key]);\n            });\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof InputControl\n     * @return {void}\n     */\n    componentWillUnmount() {\n        if (this.autoFocusTask) {\n            clearTimeout(this.autoFocusTask);\n            this.autoFocusTask = null;\n        }\n\n        if (this.hotkeyScope) {\n            hotkeys.deleteScope(this.hotkeysScope);\n        }\n    }\n\n    /**\n     * 处理文本输入事件\n     * @param {Event} event 事件对象\n     * @memberof InputControl\n     * @private\n     * @return {void}\n     */\n    handleChange = (event) => {\n        const value = this.input.value;\n        if (this.props.onChange) {\n            this.props.onChange(value, event);\n        }\n    }\n\n    /**\n     * 获取文本框值\n     * @type {string}\n     * @memberof InputControl\n     */\n    get value() {\n        return this.input.value;\n    }\n\n    /**\n     * 激活输入框\n     * @memberof InputControl\n     * @return {void}\n     */\n    focus() {\n        this.input.focus();\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof InputControl\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            name,\n            label,\n            labelStyle,\n            placeholder,\n            autoFocus,\n            inputType,\n            inputStyle,\n            inputProps,\n            value,\n            helpText,\n            onChange,\n            className,\n            inputClassName,\n            defaultValue,\n            disabled,\n            children,\n            hotkeyScope,\n            hotKeys,\n            ...other\n        } = this.props;\n\n        return (\n            <div className={classes('control', className, {disabled})} {...other}>\n                {label !== false && <label htmlFor={this.controlName} style={labelStyle}>{label}</label>}\n                <input\n                    data-hotkey-scope={this.hotkeyScope}\n                    disabled={!!disabled}\n                    ref={e => {this.input = e;}}\n                    value={this.controled ? value : undefined}\n                    defaultValue={defaultValue}\n                    id={this.controlName}\n                    type={inputType}\n                    className={classes('input', inputClassName)}\n                    placeholder={placeholder}\n                    onChange={this.handleChange}\n                    style={inputStyle}\n                    {...inputProps}\n                />\n                {helpText ? <p className=\"help-text\">{helpText}</p> : null}\n                {children}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/input-control.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "InputControl",
    "memberof": "app/components/input-control.js",
    "static": true,
    "longname": "app/components/input-control.js~InputControl",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/input-control.js",
    "importStyle": "InputControl",
    "description": "InputControl 组件 ，显示一个输入框控件",
    "examples": [
      "<InputControl />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "InputControl"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/input-control.js~InputControl",
    "static": true,
    "longname": "app/components/input-control.js~InputControl.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/input-control.js~InputControl",
    "static": true,
    "longname": "app/components/input-control.js~InputControl.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/input-control.js~InputControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/input-control.js~InputControl#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 InputControl 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "controled",
    "memberof": "app/components/input-control.js~InputControl",
    "static": false,
    "longname": "app/components/input-control.js~InputControl#controled",
    "access": "public",
    "description": "是否没有设置默认值，并由组件自身管理值",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "controlName",
    "memberof": "app/components/input-control.js~InputControl",
    "static": false,
    "longname": "app/components/input-control.js~InputControl#controlName",
    "access": "public",
    "description": "控件名称",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "hotkeyScope",
    "memberof": "app/components/input-control.js~InputControl",
    "static": false,
    "longname": "app/components/input-control.js~InputControl#hotkeyScope",
    "access": "public",
    "description": "快捷键范围名称",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/components/input-control.js~InputControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/input-control.js~InputControl#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 131,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "autoFocusTask",
    "memberof": "app/components/input-control.js~InputControl",
    "static": false,
    "longname": "app/components/input-control.js~InputControl#autoFocusTask",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/components/input-control.js~InputControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/input-control.js~InputControl#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 158,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "handleChange",
    "memberof": "app/components/input-control.js~InputControl",
    "static": false,
    "longname": "app/components/input-control.js~InputControl#handleChange",
    "access": "private",
    "description": "处理文本输入事件",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "get",
    "name": "value",
    "memberof": "app/components/input-control.js~InputControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/input-control.js~InputControl#value",
    "access": "public",
    "description": "获取文本框值",
    "lineNumber": 188,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "focus",
    "memberof": "app/components/input-control.js~InputControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/input-control.js~InputControl#focus",
    "access": "public",
    "description": "激活输入框",
    "lineNumber": 197,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/input-control.js~InputControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/input-control.js~InputControl#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 209,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "input",
    "memberof": "app/components/input-control.js~InputControl",
    "static": false,
    "longname": "app/components/input-control.js~InputControl#input",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "app/components/list-item.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../utils/html-helper';\nimport Icon from './icon';\nimport Avatar from './avatar';\n\n/**\n * ListItem 组件 ，显示一个列表项\n * @class ListItem\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <ListItem />\n */\nexport default class ListItem extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ListItem\n     * @type {Object}\n     */\n    static propTypes = {\n        type: PropTypes.string,\n        avatar: PropTypes.any,\n        icon: PropTypes.any,\n        title: PropTypes.any,\n        subtitle: PropTypes.any,\n        children: PropTypes.any,\n        actions: PropTypes.any,\n        className: PropTypes.string,\n        divider: PropTypes.bool,\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ListItem\n     * @static\n     */\n    static defaultProps = {\n        avatar: null,\n        icon: null,\n        title: null,\n        subtitle: null,\n        children: null,\n        actions: null,\n        className: null,\n        divider: false,\n        type: 'a'\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ListItem\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            type,\n            avatar,\n            icon,\n            title,\n            subtitle,\n            children,\n            actions,\n            divider,\n            className,\n            ...other\n        } = this.props;\n\n        const iconView = Icon.render(icon);\n        const avatarView = Avatar.render(avatar, iconView);\n\n        let titleView = null;\n        if (title) {\n            if (React.isValidElement(title)) {\n                titleView = title;\n            } else if (title) {\n                titleView = <div className=\"title\">{title}</div>;\n            }\n        }\n        let subtitleView = null;\n        if (subtitle) {\n            if (React.isValidElement(subtitle)) {\n                subtitleView = subtitle;\n            } else if (subtitle) {\n                subtitleView = <div className=\"subtitle\">{subtitle}</div>;\n            }\n        }\n        let contentView = null;\n        const multiLines = subtitleView || children;\n        if (multiLines) {\n            contentView = (<div className=\"content\">\n                {titleView}\n                {subtitleView}\n                {children}\n            </div>);\n        } else {\n            contentView = titleView;\n        }\n\n        return React.createElement(type, {\n            className: HTML.classes(\n                'app-list-item',\n                className,\n                {divider, 'with-avatar': !!avatarView, 'multi-lines': multiLines}\n            ),\n            ...other\n        }, avatarView, iconView, contentView, actions);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/list-item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "class",
    "name": "ListItem",
    "memberof": "app/components/list-item.js",
    "static": true,
    "longname": "app/components/list-item.js~ListItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/list-item.js",
    "importStyle": "ListItem",
    "description": "ListItem 组件 ，显示一个列表项",
    "examples": [
      "<ListItem />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ListItem"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/list-item.js~ListItem",
    "static": true,
    "longname": "app/components/list-item.js~ListItem.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/list-item.js~ListItem",
    "static": true,
    "longname": "app/components/list-item.js~ListItem.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/list-item.js~ListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/list-item.js~ListItem#render",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "app/components/messager.js",
    "content": "import React from 'react';\nimport Display from './display';\nimport HTML from '../utils/html-helper';\nimport Icon from './icon';\nimport timeSequence from '../utils/time-sequence';\n\n/** @module messager */\n\n/**\n * 显示浮动的提示消息\n * @param {String|ReactNode} message 消息内容\n * @param {?Object} props DisplayLayer 组件属性\n * @param {?Function} callback 操作完成时的回调函数\n * @return {DisplayLayer}\n */\nexport const showMessager = (message, props = {}, callback = null) => {\n    let {\n        icon,\n        type,\n        content,\n        autoHide,\n        closeButton,\n        actions,\n        onAction,\n        className,\n        rootClassName,\n        position,\n    } = props;\n\n    if (!props.id) {\n        props.id = timeSequence();\n    }\n\n    if (closeButton === undefined) {\n        closeButton = true;\n    }\n\n    if (position === undefined) {\n        position = 'top';\n    }\n\n    if (!type) {\n        type = 'info';\n    }\n    rootClassName = HTML.classes(rootClassName, `position-${position}`);\n    className = HTML.classes('messager layer', className || 'rounded', type);\n\n    content = (content || icon) ? (<div className=\"row single flex-middle\">\n        {icon ? (typeof icon === 'string' ? <Icon className=\"flex-auto messager-icon\" name={icon} /> : <div className=\"flex-none messager-icon\">{icon}</div>) : null}\n        {content ? <div className=\"flex-auto messager-content\">\n            <h5 className=\"messager-title\">{message}</h5>\n            <div>{content}</div>\n        </div> : <div className=\"flex-auto messager-content\">{message}</div>}\n    </div>) : message;\n\n    if (!actions) {\n        actions = [];\n    }\n    if (closeButton) {\n        actions.push({\n            icon: 'close',\n            click: () => {\n                Display.hide(props.id);\n            }\n        });\n    }\n    let footer = null;\n    if (actions && actions.length) {\n        const handleActionClick = (action, e) => {\n            let actionResult = null;\n            if (onAction) {\n                actionResult = onAction(action, e);\n            }\n            if (action.click) {\n                actionResult = action.click(action, e);\n            }\n            if (actionResult !== false) {\n                Display.hide(props.id);\n            }\n        };\n\n        footer = (<nav className=\"nav\">\n            {\n                actions.map((action, actionIndex) => {\n                    return (<a onClick={handleActionClick.bind(null, action)} key={action.name || actionIndex} title={action.label}>{action.icon ? <Icon name={action.icon} /> : action.label}</a>);\n                })\n            }\n        </nav>);\n    }\n\n    if (autoHide) {\n        if (typeof autoHide !== 'number') {\n            autoHide = 5000;\n        }\n        setTimeout(() => {\n            Display.hide(props.id);\n        }, autoHide);\n    }\n\n    props = Object.assign({backdropClassName: 'clean'}, props, {rootClassName, className, content, footer, closeButton, plugName: 'messager'});\n    delete props.type;\n    delete props.autoHide;\n    delete props.closeButton;\n    delete props.actions;\n    delete props.position;\n    delete props.onAction;\n\n    return Display.show(props, callback);\n};\n\nexport default {\n    show: showMessager,\n    hide: Display.hide,\n    remove: Display.remove\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/messager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "showMessager",
    "memberof": "app/components/messager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/messager.js~showMessager",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/messager.js",
    "importStyle": "{showMessager}",
    "description": "显示浮动的提示消息",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "ReactNode"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "消息内容"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "DisplayLayer 组件属性"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "app/components/modal.js",
    "content": "import React, {Component} from 'react';\nimport Display from './display';\nimport HTML from '../utils/html-helper';\nimport Icon from './icon';\nimport timeSequence from '../utils/time-sequence';\nimport Lang from '../lang';\nimport InputControl from './input-control';\n\n/** @module modal */\n\n/**\n * 检查应用运行的操作系统类型是否是 Windows\n * @type {boolean}\n * @private\n * @constant\n */\nconst isWindowsOS = window.navigator.userAgent.includes('Windows');\n\n/**\n * 默认按钮类名\n * @type {Object}\n * @private\n */\nconst DEFAULT_CLASS_NAMES = {\n    submit: 'primary',\n    primary: 'primary',\n    secondary: 'text-red red-pale',\n    cancel: 'primary-pale text-primary'\n};\n\n/**\n * 显示对话框\n * @param {?Object} props DisplayLayer 组件属性\n * @param {?Function} callback 操作完成时的回调函数\n * @return {DisplayLayer}\n * @function\n */\nexport const showModal = (props = {}, callback = null) => {\n    let {\n        title,\n        closeButton,\n        actions,\n        onAction,\n        onSubmit,\n        onCancel,\n        className,\n        headingClassName,\n    } = props;\n\n    if (closeButton === undefined) {\n        closeButton = true;\n    }\n\n    if (!props.id) {\n        props.id = timeSequence();\n    }\n\n    className = HTML.classes('modal layer rounded', className || '');\n\n    if (actions === undefined) {\n        actions = true;\n    }\n    if (actions === true) {\n        actions = [{type: 'submit'}, {type: 'cancel'}];\n    } else if (actions === 'submit') {\n        actions = [{type: 'submit'}];\n    } else if (actions === 'cancel') {\n        actions = [{type: 'cancel'}];\n    }\n    let footer = null;\n    if (actions && actions.length) {\n        actions = actions.map((act, idx) => {\n            if (!act.order) {\n                act.order = idx;\n                switch (act.type) {\n                case 'submit':\n                    act.order += isWindowsOS ? (-9000) : 9000;\n                    break;\n                case 'primary':\n                    act.order += isWindowsOS ? (-8000) : 8000;\n                    break;\n                case 'secondary':\n                    act.order += isWindowsOS ? (-7000) : 7000;\n                    break;\n                case 'cancel':\n                    act.order += isWindowsOS ? (9000) : -9000;\n                    break;\n                }\n            }\n            if (act.type && !act.className) {\n                act.className = DEFAULT_CLASS_NAMES[act.type];\n            }\n            if (!act.label && act.type) {\n                act.label = act.type === 'submit' ? Lang.string('common.confirm') : act.type === 'cancel' ? Lang.string('common.cancel') : act.type.toUpperCase();\n            }\n            return act;\n        });\n\n        actions = actions.sort((act1, act2) => {\n            return act1.order - act2.order;\n        });\n\n        const handleActionClick = (action, e) => {\n            let actionResult = null;\n            if (onAction) {\n                actionResult = onAction(action, e);\n            }\n            if (onSubmit && action.type === 'submit') {\n                actionResult = onSubmit(action, e);\n            }\n            if (onCancel && action.type === 'cancel') {\n                actionResult = onCancel(action, e);\n            }\n            if (action.click) {\n                actionResult = action.click(action, e);\n            }\n            if (actionResult !== false) {\n                Display.hide(props.id);\n            }\n        };\n\n        footer = (<footer className=\"footer toolbar\">\n            {\n                actions.map((action, actionIndex) => {\n                    return <button className={HTML.classes('btn', action.className, action.type ? `action-${action.type}` : null)} type=\"button\" onClick={handleActionClick.bind(null, action)} key={action.id || actionIndex} title={action.label}>{action.label}</button>;\n                })\n            }\n        </footer>);\n    }\n\n    const header = (title || closeButton) ? (<header className={HTML.classes('heading', headingClassName)}>\n        <div className=\"title\">{title}</div>\n        {closeButton && <nav style={{overflow: 'visible'}} data-hint={Lang.string('common.close')} className=\"nav hint--bottom\"><a className=\"close\" onClick={() => (Display.remove(props.id))}><Icon name=\"close\" /></a></nav>}\n    </header>) : null;\n\n    props = Object.assign({}, props, {className, header, footer, closeButton, plugName: 'modal'});\n    delete props.title;\n    delete props.closeButton;\n    delete props.actions;\n    delete props.onAction;\n    delete props.onSubmit;\n    delete props.onCancel;\n    delete props.headingClassName;\n\n    return Display.show(props, callback);\n};\n\n/**\n * 显示警告对话框\n * @param {String|ReactNode|Function} content 对话框内容\n * @param {?Object} props DisplayLayer 组件属性\n * @param {?Function} callback 操作完成时的回调函数\n * @return {DisplayLayer}\n * @function\n */\nexport const showAlert = (content, props, callback) => {\n    return showModal(Object.assign({\n        modal: true,\n        content,\n        actions: 'submit'\n    }, props), callback);\n};\n\n/**\n * 显示确认对话框\n * @param {String|ReactNode|Function} content 对话框内容\n * @param {?Object} props DisplayLayer 组件属性\n * @param {?Function} callback 操作完成时的回调函数\n * @return {DisplayLayer}\n * @function\n */\nexport const showConfirm = (content, props, callback) => {\n    return new Promise(resolve => {\n        let resolved = false;\n        showModal(Object.assign({\n            closeButton: false,\n            modal: true,\n            content,\n            actions: true,\n            onAction: action => {\n                if (!resolved) {\n                    resolved = true;\n                    resolve(action.type === 'submit');\n                }\n            },\n            onHidden: () => {\n                if (!resolved) {\n                    resolve(false);\n                }\n            }\n        }, props), callback);\n    });\n};\n\n/**\n * 显示询问用户输入值的对话框\n * @param {String|ReactNode|Function} title 标题\n * @param {string} defaultValue 默认值\n * @param {?Object} props DisplayLayer 组件属性\n * @param {?Function} callback 操作完成时的回调函数\n * @return {DisplayLayer}\n * @function\n */\nexport const showPrompt = (title, defaultValue, props, callback) => {\n    const inputProps = props && props.inputProps;\n    const onSubmit = props && props.onSubmit;\n    if (inputProps) {\n        delete props.inputProps;\n    }\n    if (onSubmit) {\n        delete props.onSubmit;\n    }\n    return new Promise(resolve => {\n        let resolved = false;\n        let value = defaultValue;\n        showModal(Object.assign({\n            closeButton: false,\n            modal: true,\n            title,\n            content: <InputControl\n                autoFocus\n                defaultValue={defaultValue}\n                onChange={newValue => {\n                    value = newValue;\n                }}\n                {...inputProps}\n            />,\n            actions: true,\n            onAction: action => {\n                if (action.type === 'submit') {\n                    if (onSubmit && onSubmit(value) === false) {\n                        return false;\n                    }\n                    resolved = true;\n                    resolve(value);\n                }\n            },\n            onHidden: () => {\n                if (!resolved) {\n                    resolve(defaultValue);\n                }\n            }\n        }, props), callback);\n    });\n};\n\nexport default {\n    show: showModal,\n    alert: showAlert,\n    confirm: showConfirm,\n    prompt: showPrompt,\n    hide: Display.hide,\n    remove: Display.remove\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/modal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "name": "isWindowsOS",
    "memberof": "app/components/modal.js",
    "static": true,
    "longname": "app/components/modal.js~isWindowsOS",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/components/modal.js",
    "importStyle": null,
    "description": "检查应用运行的操作系统类型是否是 Windows",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "name": "DEFAULT_CLASS_NAMES",
    "memberof": "app/components/modal.js",
    "static": true,
    "longname": "app/components/modal.js~DEFAULT_CLASS_NAMES",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/components/modal.js",
    "importStyle": null,
    "description": "默认按钮类名",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "showModal",
    "memberof": "app/components/modal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/modal.js~showModal",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/modal.js",
    "importStyle": "{showModal}",
    "description": "显示对话框",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "DisplayLayer 组件属性"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "showAlert",
    "memberof": "app/components/modal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/modal.js~showAlert",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/modal.js",
    "importStyle": "{showAlert}",
    "description": "显示警告对话框",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "ReactNode",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "对话框内容"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "DisplayLayer 组件属性"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "showConfirm",
    "memberof": "app/components/modal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/modal.js~showConfirm",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/modal.js",
    "importStyle": "{showConfirm}",
    "description": "显示确认对话框",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "ReactNode",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "对话框内容"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "DisplayLayer 组件属性"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "showPrompt",
    "memberof": "app/components/modal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/modal.js~showPrompt",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/modal.js",
    "importStyle": "{showPrompt}",
    "description": "显示询问用户输入值的对话框",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "ReactNode",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "标题"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "默认值"
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "DisplayLayer 组件属性"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "app/components/pager.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../utils/html-helper';\nimport Icon from './icon';\nimport Lang from '../lang';\n\n/**\n * Pager 组件 ，显示一个分页控件\n * @class Pager\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <Pager />\n */\nexport default class Pager extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Pager\n     * @type {Object}\n     */\n    static propTypes = {\n        page: PropTypes.number,\n        recTotal: PropTypes.number,\n        recPerPage: PropTypes.number,\n        pageRecCount: PropTypes.number,\n        className: PropTypes.string,\n        onPageChange: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Pager\n     * @static\n     */\n    static defaultProps = {\n        page: 1,\n        recTotal: 0,\n        recPerPage: 20,\n        onPageChange: null,\n        className: null,\n        pageRecCount: 0,\n    };\n\n    /**\n     * 处理上一页按钮点击事件\n     * @param {Event} event 事件对象\n     * @memberof Pager\n     * @private\n     * @return {void}\n     */\n    handlePrevBtnClick = event => {\n        if (this.props.page > 1) {\n            this.props.onPageChange(this.props.page - 1);\n        }\n    }\n\n    /**\n     * 处理下一页按钮点击事件\n     * @param {Event} event 事件对象\n     * @memberof Pager\n     * @private\n     * @return {void}\n     */\n    handleNextBtnClick = event => {\n        if (this.props.page < this.totalPage) {\n            this.props.onPageChange(this.props.page + 1);\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Pager\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            page,\n            className,\n            recTotal,\n            pageRecCount,\n            recPerPage,\n            onPageChange,\n            ...other\n        } = this.props;\n\n        this.totalPage = Math.ceil(recTotal / recPerPage);\n\n        return (<div {...other} className={HTML.classes('pager flex flex-middle', className)}>\n            <div className=\"hint--bottom\" data-hint={Lang.string('pager.prev')}>\n                <button disabled={page <= 1} type=\"button\" className=\"iconbutton btn rounded\" onClick={this.handlePrevBtnClick}><Icon name=\"chevron-left\" /></button>\n            </div>\n            {recTotal ? <div className=\"hint--bottom\" data-hint={((page - 1) * recPerPage + 1) + ' ~ ' + Math.min(recTotal, (page - 1) * recPerPage + pageRecCount) + ' / ' + recTotal}><strong>{page}</strong> / <strong>{this.totalPage}</strong></div> : null}\n            <div className=\"hint--bottom\" data-hint={Lang.string('pager.next')}>\n                <button disabled={page >= this.totalPage} type=\"button\" className=\"iconbutton btn rounded\" onClick={this.handleNextBtnClick}><Icon name=\"chevron-right\" /></button>\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/pager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "class",
    "name": "Pager",
    "memberof": "app/components/pager.js",
    "static": true,
    "longname": "app/components/pager.js~Pager",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/pager.js",
    "importStyle": "Pager",
    "description": "Pager 组件 ，显示一个分页控件",
    "examples": [
      "<Pager />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Pager"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/pager.js~Pager",
    "static": true,
    "longname": "app/components/pager.js~Pager.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/pager.js~Pager",
    "static": true,
    "longname": "app/components/pager.js~Pager.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "handlePrevBtnClick",
    "memberof": "app/components/pager.js~Pager",
    "static": false,
    "longname": "app/components/pager.js~Pager#handlePrevBtnClick",
    "access": "private",
    "description": "处理上一页按钮点击事件",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "handleNextBtnClick",
    "memberof": "app/components/pager.js~Pager",
    "static": false,
    "longname": "app/components/pager.js~Pager#handleNextBtnClick",
    "access": "private",
    "description": "处理下一页按钮点击事件",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/pager.js~Pager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/pager.js~Pager#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "totalPage",
    "memberof": "app/components/pager.js~Pager",
    "static": false,
    "longname": "app/components/pager.js~Pager#totalPage",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "app/components/popover.js",
    "content": "import React from 'react';\nimport Display from './display';\nimport {classes} from '../utils/html-helper';\nimport timeSequence from '../utils/time-sequence';\n\n/** @module popover */\n\n/**\n * 显示一个提示面板\n * @param {{x: Number, y: Number}} position 提示面板显示位置，需要提供 X 和 Y 轴坐标\n * @param {String|ReactNode|Function} content 提示面板内容\n * @param {Object} props DisplayLayer 组件属性\n * @param {?Function} callback 操作完成时的回调函数\n * @return {DisplayLayer}\n * @function\n */\nexport const showPopover = (position, content, props = {}, callback = null) => {\n    let {\n        className,\n        arrow,\n        arrowSize,\n        width,\n        height,\n        style,\n        offset,\n    } = props;\n\n    if (!position) {\n        if (DEBUG) {\n            throw new Error('Position is not defined to show the popover.');\n        }\n    }\n\n    if (!props.id) {\n        props.id = timeSequence();\n    }\n\n    if (arrow === undefined) {\n        arrow = true;\n    }\n\n    if (arrow) {\n        if (!arrowSize) {\n            arrowSize = {width: 20, height: 10};\n        } else if (typeof arrowSize === 'number') {\n            arrowSize = {width: arrowSize, height: arrowSize / 2};\n        }\n    } else {\n        arrowSize = {width: 0, height: 0};\n    }\n\n    width = width || 200;\n    height = height || 100;\n    const windowHeight = window.innerHeight;\n    const windowWidth = window.innerWidth;\n    const target = position.target;\n    let x = position.x === undefined ? (position.pageX || 0) : position.x;\n    let y = position.y === undefined ? (position.pageY || 0) : position.y;\n    let placement = position.placement || 'auto';\n    const align = position.align || 'center';\n    if (placement === 'auto') {\n        const sideSize = [\n            {name: 'top', size: y},\n            {name: 'right', size: windowWidth - x},\n            {name: 'bottom', size: windowHeight - y},\n            {name: 'left', size: x}\n        ];\n        let maxSize = 0;\n        let bestSide = 'top';\n        for (const side of sideSize) {\n            if (maxSize < side.size) {\n                maxSize = side.size;\n                bestSide = side.name;\n            }\n        }\n        placement = bestSide;\n    }\n    if (target && target.getBoundingClientRect) {\n        const bounds = target.getBoundingClientRect();\n        switch (placement) {\n        case 'top':\n            x = bounds.left + Math.floor(bounds.width / 2);\n            y = bounds.top;\n            break;\n        case 'right':\n            x = bounds.left + bounds.width;\n            y = bounds.top + Math.floor(bounds.height / 2);\n            break;\n        case 'bottom':\n            x = bounds.left + Math.floor(bounds.width / 2);\n            y = bounds.top + bounds.height;\n            break;\n        case 'left':\n            x = bounds.left;\n            y = bounds.top + Math.floor(bounds.height / 2);\n            break;\n        }\n    }\n    let left = 0;\n    let top = 0;\n    const arrowStyle = {};\n    switch (placement) {\n    case 'top':\n        top = Math.max(0, Math.min(windowHeight - height, y - height - arrowSize.height));\n        if (align === 'start') {\n            left = Math.floor(Math.max(0, Math.min(windowWidth - width, x - arrow.width / 2)));\n        } else if (align === 'end') {\n            left = Math.floor(Math.max(0, Math.min(windowWidth - width, x - width + arrow.width / 2)));\n        } else {\n            left = Math.floor(Math.max(0, Math.min(windowWidth - width, x - width / 2)));\n        }\n        arrowStyle.left = Math.max(left + arrowSize.width / 2, Math.min(left + width - arrowSize.width / 2, x));\n        break;\n    case 'right':\n        left = Math.floor(Math.max(0, Math.min(windowWidth - width, x + arrowSize.height)));\n        if (align === 'start') {\n            top = Math.max(0, Math.min(windowHeight - height, y - arrow.width / 2));\n        } else if (align === 'end') {\n            top = Math.max(0, Math.min(windowHeight - height, y - height + arrow.width / 2));\n        } else {\n            top = Math.max(0, Math.min(windowHeight - height, y - height / 2));\n        }\n        arrowStyle.top = Math.max(top + arrowSize.height / 2, Math.min(top + height - arrowSize.height / 2, y));\n        break;\n    case 'bottom':\n        top = Math.max(0, Math.min(windowHeight - height, y + arrowSize.height));\n        if (align === 'start') {\n            left = Math.floor(Math.max(0, Math.min(windowWidth - width, x - arrow.width / 2)));\n        } else if (align === 'end') {\n            left = Math.floor(Math.max(0, Math.min(windowWidth - width, x - width + arrow.width / 2)));\n        } else {\n            left = Math.floor(Math.max(0, Math.min(windowWidth - width, x - width / 2)));\n        }\n        arrowStyle.left = Math.max(left + arrowSize.width / 2, Math.min(left + width - arrowSize.width / 2, x));\n        break;\n    case 'left':\n        left = Math.floor(Math.max(0, Math.min(windowWidth - width, x - width - arrowSize.height)));\n        if (align === 'start') {\n            top = Math.max(0, Math.min(windowHeight - height, y - arrow.width / 2));\n        } else if (align === 'end') {\n            top = Math.max(0, Math.min(windowHeight - height, y - height + arrow.width / 2));\n        } else {\n            top = Math.max(0, Math.min(windowHeight - height, y - height / 2));\n        }\n        arrowStyle.top = Math.max(top + arrowSize.height / 2, Math.min(top + height - arrowSize.height / 2, y));\n        break;\n    }\n    if (offset) {\n        if (offset.left) left += offset.left;\n        if (offset.top) top += offset.top;\n    }\n\n    style = Object.assign({width, height, top, left}, style);\n\n    className = classes('popover layer', className, `placement-${placement}`);\n    const arrowPlacementMap = {left: 'right', right: 'left', top: 'bottom', bottom: 'top'};\n    const footer = arrow ? (<div style={arrowStyle} className={`display-arrow arrow-${arrowPlacementMap[placement]}`} />) : null;\n    props = Object.assign({backdropClassName: 'clean', animation: `scale-from-${arrowPlacementMap[placement]}`}, props, {className, style, content, footer, plugName: 'popover'});\n    delete props.width;\n    delete props.height;\n    delete props.arrow;\n    delete props.arrowSize;\n    delete props.offset;\n\n    return Display.show(props, callback);\n};\n\nexport default {\n    show: showPopover,\n    hide: Display.hide,\n    remove: Display.remove\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/popover.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "showPopover",
    "memberof": "app/components/popover.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/components/popover.js~showPopover",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/popover.js",
    "importStyle": "{showPopover}",
    "description": "显示一个提示面板",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{x: Number, y: Number}"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "提示面板显示位置，需要提供 X 和 Y 轴坐标"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "ReactNode",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "提示面板内容"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "DisplayLayer 组件属性"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DisplayLayer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "app/components/radio-group.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../utils/html-helper';\nimport timeSequence from '../utils/time-sequence';\nimport Radio from './radio';\n\n/**\n * RadioGroup 组件 ，显示一个单选组\n * @class RadioGroup\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <RadioGroup />\n */\nexport default class RadioGroup extends PureComponent {\n    /**\n     * 单选组件\n     * @type {Radio}\n     */\n    static Radio = Radio;\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof RadioGroup\n     * @type {Object}\n     */\n    static propTypes = {\n        checked: PropTypes.bool,\n        items: PropTypes.array,\n        name: PropTypes.string,\n        className: PropTypes.string,\n        radioProps: PropTypes.object,\n        onChange: PropTypes.func,\n        children: PropTypes.any,\n        label: PropTypes.any,\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof RadioGroup\n     * @static\n     */\n    static defaultProps = {\n        checked: false,\n        label: null,\n        className: null,\n        radioProps: null,\n        onChange: null,\n        children: null,\n        items: null,\n        name: null,\n    }\n\n    /**\n     * 处理值变更事件\n     * @param {Event} e 事件对象\n     * @memberof RadioGroup\n     * @private\n     * @return {void}\n     */\n    handeOnChange = e => {\n        const {onChange} = this.props;\n        if (onChange) {\n            onChange(e.target.value, e);\n        }\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof RadioGroup\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            name,\n            items,\n            checked,\n            children,\n            className,\n            radioProps,\n            onChange,\n            ...other\n        } = this.props;\n\n        const groupName = name || `radioGroup-${timeSequence()}`;\n\n        return (<div className={HTML.classes('radio-group', className)} {...other} onChange={this.handeOnChange}>\n            {\n                items && items.map(item => {\n                    const {\n                        label,\n                        value,\n                        ...itemOther\n                    } = item;\n                    return <Radio name={groupName} label={label} {...itemOther} checked={checked === value} value={value} {...radioProps} />;\n                })\n            }\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/radio-group.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "class",
    "name": "RadioGroup",
    "memberof": "app/components/radio-group.js",
    "static": true,
    "longname": "app/components/radio-group.js~RadioGroup",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/radio-group.js",
    "importStyle": "RadioGroup",
    "description": "RadioGroup 组件 ，显示一个单选组",
    "examples": [
      "<RadioGroup />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "RadioGroup"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "Radio",
    "memberof": "app/components/radio-group.js~RadioGroup",
    "static": true,
    "longname": "app/components/radio-group.js~RadioGroup.Radio",
    "access": "public",
    "description": "单选组件",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Radio"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/radio-group.js~RadioGroup",
    "static": true,
    "longname": "app/components/radio-group.js~RadioGroup.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/radio-group.js~RadioGroup",
    "static": true,
    "longname": "app/components/radio-group.js~RadioGroup.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "handeOnChange",
    "memberof": "app/components/radio-group.js~RadioGroup",
    "static": false,
    "longname": "app/components/radio-group.js~RadioGroup#handeOnChange",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/radio-group.js~RadioGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/radio-group.js~RadioGroup#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "app/components/radio.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../utils/html-helper';\nimport timeSequence from '../utils/time-sequence';\n\n/**\n * Radio 组件 ，显示一个单选控件\n * @class Radio\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * <Radio />\n */\nexport default class Radio extends Component {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Radio\n     * @type {Object}\n     */\n    static propTypes = {\n        checked: PropTypes.bool,\n        disabled: PropTypes.bool,\n        label: PropTypes.any,\n        className: PropTypes.string,\n        inputProps: PropTypes.object,\n        onChange: PropTypes.func,\n        children: PropTypes.any,\n        name: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired,\n        innerView: PropTypes.any,\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Radio\n     * @static\n     */\n    static defaultProps = {\n        checked: false,\n        label: null,\n        className: null,\n        inputProps: null,\n        onChange: null,\n        children: null,\n        innerView: null,\n        disabled: false,\n    }\n\n    /**\n     * React 组件构造函数，创建一个 Radio 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * 控件 ID\n         * @private\n         * @type {string}\n         */\n        this._controlId = `radio-${timeSequence()}`;\n    }\n\n    /**\n     * 处理值变更事件\n     * @param {Event} e 事件对象\n     * @memberof Radio\n     * @private\n     * @return {void}\n     */\n    handleRadioChange = e => {\n        const {onChange, name, value} = this.props;\n        if (onChange) {\n            onChange(name, value, e.target.checked, e);\n        }\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Radio\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            name,\n            value,\n            checked,\n            disabled,\n            label,\n            innerView,\n            children,\n            className,\n            inputProps,\n            onChange,\n            ...other\n        } = this.props;\n\n        return (<div className={HTML.classes('radio', className, {checked, disabled})} {...other}>\n            <input disabled={disabled} name={name} id={this._controlId} checked={checked} type=\"radio\" onChange={this.handleRadioChange} value={value} {...inputProps} />\n            {label && <label htmlFor={this.controlId}>{label}</label>}\n            {innerView}\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/radio.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "class",
    "name": "Radio",
    "memberof": "app/components/radio.js",
    "static": true,
    "longname": "app/components/radio.js~Radio",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/radio.js",
    "importStyle": "Radio",
    "description": "Radio 组件 ，显示一个单选控件",
    "examples": [
      "<Radio />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Radio"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/radio.js~Radio",
    "static": true,
    "longname": "app/components/radio.js~Radio.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/radio.js~Radio",
    "static": true,
    "longname": "app/components/radio.js~Radio.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/radio.js~Radio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/radio.js~Radio#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "_controlId",
    "memberof": "app/components/radio.js~Radio",
    "static": false,
    "longname": "app/components/radio.js~Radio#_controlId",
    "access": "private",
    "description": "控件 ID",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "handleRadioChange",
    "memberof": "app/components/radio.js~Radio",
    "static": false,
    "longname": "app/components/radio.js~Radio#handleRadioChange",
    "access": "private",
    "description": "处理值变更事件",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/radio.js~Radio",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/radio.js~Radio#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 92,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "app/components/search-control.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../utils/html-helper';\nimport InputControl from './input-control';\nimport Icon from './icon';\nimport StringHelper from '../utils/string-helper';\nimport DelayAction from '../utils/delay-action';\nimport Lang from '../lang';\n\n/**\n * SearchControl 组件 ，显示一个搜索框\n * @class SearchControl\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <SearchControl />\n */\nexport default class SearchControl extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof SearchControl\n     * @type {Object}\n     */\n    static propTypes = {\n        placeholder: PropTypes.any,\n        changeDelay: PropTypes.number,\n        onSearchChange: PropTypes.func,\n        onBlur: PropTypes.func,\n        onFocus: PropTypes.func,\n        onFocusChange: PropTypes.func,\n        defaultValue: PropTypes.any,\n        children: PropTypes.any,\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof SearchControl\n     * @static\n     */\n    static defaultProps = {\n        placeholder: Lang.string('common.search'),\n        changeDelay: 100,\n        onSearchChange: null,\n        onFocusChange: null,\n        onBlur: null,\n        onFocus: null,\n        defaultValue: '',\n        className: null,\n        children: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 SearchControl 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            value: props.defaultValue,\n            focus: false,\n            empty: StringHelper.isEmpty(props.defaultValue)\n        };\n\n        const {onSearchChange, changeDelay} = this.props;\n        if (onSearchChange) {\n            this.delaySearchChangeTask = new DelayAction((searchValue) => {\n                onSearchChange(searchValue);\n            }, changeDelay);\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof SearchControl\n     * @return {void}\n     */\n    componentWillUnmount() {\n        if (this.delaySearchChangeTask) {\n            this.delaySearchChangeTask.destroy();\n        }\n    }\n\n    /**\n     * 获取输入的值\n     * @memberof SearchControl\n     * @return {string}\n     */\n    getValue() {\n        return this.state.value;\n    }\n\n    /**\n     * 检查搜索框是否为空\n     * @memberof SearchControl\n     * @return {boolean}\n     */\n    isEmpty() {\n        return this.state.empty;\n    }\n\n    /**\n     * 处理搜索框获得焦点事件\n     * @param {Event} e 事件对象\n     * @memberof SearchControl\n     * @private\n     * @return {void}\n     */\n    handleOnInputFocus = e => {\n        this.setState({focus: true});\n        if (this.props.onFocus) {\n            this.props.onFocus(e);\n        }\n        if (this.props.onFocusChange) {\n            this.props.onFocusChange(true, e);\n        }\n    };\n\n    /**\n     * 处理搜索框失去焦点事件\n     * @param {Event} e 事件对象\n     * @memberof SearchControl\n     * @private\n     * @return {void}\n     */\n    handleOnInputBlur = e => {\n        this.setState({focus: false});\n        if (this.props.onBlur) {\n            this.props.onBlur(e);\n        }\n        if (this.props.onFocusChange) {\n            this.props.onFocusChange(false, e);\n        }\n    };\n\n    /**\n     * 设置搜索框值\n     * @param {string} value 输入框值\n     * @param {?Function} callback 操作完成时的回调函数\n     * @memberof SearchControl\n     * @return {void}\n     */\n    setValue(value, callback) {\n        this.setState({empty: StringHelper.isEmpty(value), value}, () => {\n            if (this.delaySearchChangeTask) {\n                this.delaySearchChangeTask.do(value);\n            }\n            if (callback) {\n                callback(value);\n            }\n        });\n    }\n\n    /**\n     * 处理搜索框值变更事件\n     * @param {string} value 搜索框内的文本值\n     * @memberof SearchControl\n     * @private\n     * @return {void}\n     */\n    handleOnInputChange = value => {\n        value = typeof value === 'string' ? value.trim() : '';\n        this.setValue(value);\n    }\n\n    /**\n     * 处理清除按钮点击事件\n     * @param {Event} event 事件对象\n     * @memberof SearchControl\n     * @private\n     * @return {void}\n     */\n    handleOnClearBtnClick = event => {\n        this.setValue('', () => {\n            this.inputControl.focus();\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof SearchControl\n     * @return {ReactNode}\n     */\n    render() {\n        let {\n            className,\n            children,\n            onSearchChange,\n            changeDelay,\n            onFocus,\n            onFocusChange,\n            onBlur,\n            defaultValue,\n            ...other\n        } = this.props;\n\n        delete other.value;\n\n        return (<InputControl\n            className={HTML.classes('search', className, {\n                focus: this.state.focus,\n                empty: this.state.empty,\n                normal: !this.state.focus\n            })}\n            value={this.state.value}\n            label={<Icon name=\"magnify\" />}\n            onFocus={this.handleOnInputFocus}\n            onBlur={this.handleOnInputBlur}\n            onChange={this.handleOnInputChange}\n            ref={e => {this.inputControl = e;}}\n            {...other}\n        >\n            <Icon name=\"close\" onClick={this.handleOnClearBtnClick} className=\"close state\" />\n            {children}\n        </InputControl>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/search-control.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "class",
    "name": "SearchControl",
    "memberof": "app/components/search-control.js",
    "static": true,
    "longname": "app/components/search-control.js~SearchControl",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/search-control.js",
    "importStyle": "SearchControl",
    "description": "SearchControl 组件 ，显示一个搜索框",
    "examples": [
      "<SearchControl />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "SearchControl"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/search-control.js~SearchControl",
    "static": true,
    "longname": "app/components/search-control.js~SearchControl.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/search-control.js~SearchControl",
    "static": true,
    "longname": "app/components/search-control.js~SearchControl.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 273,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/search-control.js~SearchControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 SearchControl 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "state",
    "memberof": "app/components/search-control.js~SearchControl",
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "delaySearchChangeTask",
    "memberof": "app/components/search-control.js~SearchControl",
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#delaySearchChangeTask",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/components/search-control.js~SearchControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 95,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "getValue",
    "memberof": "app/components/search-control.js~SearchControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#getValue",
    "access": "public",
    "description": "获取输入的值",
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "isEmpty",
    "memberof": "app/components/search-control.js~SearchControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#isEmpty",
    "access": "public",
    "description": "检查搜索框是否为空",
    "lineNumber": 115,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "handleOnInputFocus",
    "memberof": "app/components/search-control.js~SearchControl",
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#handleOnInputFocus",
    "access": "private",
    "description": "处理搜索框获得焦点事件",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "handleOnInputBlur",
    "memberof": "app/components/search-control.js~SearchControl",
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#handleOnInputBlur",
    "access": "private",
    "description": "处理搜索框失去焦点事件",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "setValue",
    "memberof": "app/components/search-control.js~SearchControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#setValue",
    "access": "public",
    "description": "设置搜索框值",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "输入框值"
      },
      {
        "nullable": true,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "handleOnInputChange",
    "memberof": "app/components/search-control.js~SearchControl",
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#handleOnInputChange",
    "access": "private",
    "description": "处理搜索框值变更事件",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "搜索框内的文本值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "handleOnClearBtnClick",
    "memberof": "app/components/search-control.js~SearchControl",
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#handleOnClearBtnClick",
    "access": "private",
    "description": "处理清除按钮点击事件",
    "lineNumber": 190,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/search-control.js~SearchControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 204,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "inputControl",
    "memberof": "app/components/search-control.js~SearchControl",
    "static": false,
    "longname": "app/components/search-control.js~SearchControl#inputControl",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "file",
    "name": "app/components/select-box.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../utils/html-helper';\nimport StringHelper from '../utils/string-helper';\n\n/**\n * SelectBox 组件 ，显示一个选择框\n * @class SelectBox\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * <SelectBox />\n */\nexport default class Selectbox extends Component {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof SelectBox\n     * @type {Object}\n     */\n    static propTypes = {\n        value: PropTypes.any,\n        onChange: PropTypes.func,\n        onFocus: PropTypes.func,\n        onBlur: PropTypes.func,\n        children: PropTypes.any,\n        selectProps: PropTypes.object,\n        className: PropTypes.string,\n        selectClassName: PropTypes.string,\n        options: PropTypes.array,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof SelectBox\n     * @static\n     */\n    static defaultProps = {\n        value: '',\n        onChange: null,\n        onFocus: null,\n        onBlur: null,\n        children: null,\n        className: null,\n        selectClassName: null,\n        selectProps: null,\n        options: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 SelectBox 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            focus: false,\n            empty: StringHelper.isEmpty(this.props.value)\n        };\n    }\n\n    /**\n     * 处理选择框值变更事件\n     * @param {Event} e 事件对象\n     * @memberof SelectBox\n     * @private\n     * @return {void}\n     */\n    handleSelectChange = e => {\n        const value = e.target.value;\n        this.setState({empty: StringHelper.isEmpty(value)});\n        if (this.props.onChange) {\n            this.props.onChange(value, e);\n        }\n    };\n\n    /**\n     * 处理获得焦点事件\n     * @param {Event} e 事件对象\n     * @memberof SelectBox\n     * @private\n     * @return {void}\n     */\n    handleOnSelectFocus = e => {\n        this.setState({focus: true});\n        if (this.props.onFocus) {\n            this.props.onFocus(e);\n        }\n    }\n\n    /**\n     * 处理失去焦点事件\n     * @param {Event} e 事件对象\n     * @memberof SelectBox\n     * @private\n     * @return {void}\n     */\n    handleOnSelectBlur = e => {\n        this.setState({focus: false});\n        if (this.props.onBlur) {\n            this.props.onBlur(e);\n        }\n    }\n\n    /**\n     * 使选择框获得焦点\n     * @memberof SelectBox\n     * @return {void}\n     */\n    focus() {\n        this.selectBox.focus();\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof SelectBox\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            value,\n            children,\n            className,\n            selectProps,\n            selectClassName,\n            options,\n            onChange,\n            ...other\n        } = this.props;\n\n        return (\n            <div\n                className={classes('select', className, {\n                    focus: this.state.focus,\n                    empty: this.state.empty,\n                    normal: !this.state.focus\n                })}\n                {...other}\n            >\n                <select\n                    ref={e => {this.selectBox = e;}}\n                    className={selectClassName}\n                    value={value}\n                    onChange={this.handleSelectChange}\n                    {...selectProps}\n                    onFocus={this.handleOnSelectFocus}\n                    onBlur={this.handleOnSelectBlur}\n                >\n                    {\n                        options && options.map(option => {\n                            if (!option) {\n                                return null;\n                            }\n                            if (typeof option !== 'object') {\n                                option = {value: option, label: option};\n                            }\n                            return <option key={option.value} value={option.value}>{option.label}</option>;\n                        })\n                    }\n                    {children}\n                </select>\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/select-box.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "class",
    "name": "Selectbox",
    "memberof": "app/components/select-box.js",
    "static": true,
    "longname": "app/components/select-box.js~Selectbox",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/select-box.js",
    "importStyle": "Selectbox",
    "description": "SelectBox 组件 ，显示一个选择框",
    "examples": [
      "<SelectBox />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "SelectBox"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/select-box.js~Selectbox",
    "static": true,
    "longname": "app/components/select-box.js~Selectbox.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/select-box.js~Selectbox",
    "static": true,
    "longname": "app/components/select-box.js~Selectbox.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/select-box.js~Selectbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/select-box.js~Selectbox#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 SelectBox 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "state",
    "memberof": "app/components/select-box.js~Selectbox",
    "static": false,
    "longname": "app/components/select-box.js~Selectbox#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "handleSelectChange",
    "memberof": "app/components/select-box.js~Selectbox",
    "static": false,
    "longname": "app/components/select-box.js~Selectbox#handleSelectChange",
    "access": "private",
    "description": "处理选择框值变更事件",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "handleOnSelectFocus",
    "memberof": "app/components/select-box.js~Selectbox",
    "static": false,
    "longname": "app/components/select-box.js~Selectbox#handleOnSelectFocus",
    "access": "private",
    "description": "处理获得焦点事件",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "handleOnSelectBlur",
    "memberof": "app/components/select-box.js~Selectbox",
    "static": false,
    "longname": "app/components/select-box.js~Selectbox#handleOnSelectBlur",
    "access": "private",
    "description": "处理失去焦点事件",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "focus",
    "memberof": "app/components/select-box.js~Selectbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/select-box.js~Selectbox#focus",
    "access": "public",
    "description": "使选择框获得焦点",
    "lineNumber": 121,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/select-box.js~Selectbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/select-box.js~Selectbox#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 133,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "selectBox",
    "memberof": "app/components/select-box.js~Selectbox",
    "static": false,
    "longname": "app/components/select-box.js~Selectbox#selectBox",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "app/components/spinner.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../utils/html-helper';\nimport Icon from './icon';\n\n/**\n * Spinner 组件 ，显示一个用于“正在加载中”图标\n * @class Spinner\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <Spinner />\n */\nexport default class Spinner extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Spinner\n     * @type {Object}\n     */\n    static propTypes = {\n        iconSize: PropTypes.number,\n        iconClassName: PropTypes.string,\n        iconName: PropTypes.string,\n        label: PropTypes.any,\n        className: PropTypes.string,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Spinner\n     * @static\n     */\n    static defaultProps = {\n        iconSize: 24,\n        iconClassName: 'spin text-gray inline-block',\n        iconName: 'loading',\n        label: '',\n        className: '',\n        children: null,\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Spinner\n     * @return {ReactNode}\n     */\n    render() {\n        let {\n            iconSize,\n            iconName,\n            iconClassName,\n            label,\n            children,\n            className,\n            ...other\n        } = this.props;\n\n        return (\n            <div className={classes('spinner text-center', className)} {...other}>\n                <Icon name={iconName} className={iconClassName} size={iconSize} />\n                {label && <div className=\"muted small title\">{label}</div>}\n                {children}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/spinner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "class",
    "name": "Spinner",
    "memberof": "app/components/spinner.js",
    "static": true,
    "longname": "app/components/spinner.js~Spinner",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/spinner.js",
    "importStyle": "Spinner",
    "description": "Spinner 组件 ，显示一个用于“正在加载中”图标",
    "examples": [
      "<Spinner />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Spinner"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/spinner.js~Spinner",
    "static": true,
    "longname": "app/components/spinner.js~Spinner.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/spinner.js~Spinner",
    "static": true,
    "longname": "app/components/spinner.js~Spinner.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/spinner.js~Spinner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/spinner.js~Spinner#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 55,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 303,
    "kind": "file",
    "name": "app/components/tab-pane.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * TabPane 组件 ，显示一个标签页内容控件\n * @class TabPane\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * <TabPane />\n */\nexport default class TabPane extends PureComponent {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof TabPane\n     * @type {Object}\n     */\n    static propTypes = {\n        label: PropTypes.any,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof TabPane\n     * @static\n     */\n    static defaultProps = {\n        label: 'tab',\n        children: null,\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof TabPane\n     * @return {ReactNode}\n     */\n    render() {\n        const {\n            label,\n            children,\n            ...other\n        } = this.props;\n\n        return <div {...other}>{children}</div>;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/tab-pane.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 304,
    "kind": "class",
    "name": "TabPane",
    "memberof": "app/components/tab-pane.js",
    "static": true,
    "longname": "app/components/tab-pane.js~TabPane",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/tab-pane.js",
    "importStyle": "TabPane",
    "description": "TabPane 组件 ，显示一个标签页内容控件",
    "examples": [
      "<TabPane />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "TabPane"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/tab-pane.js~TabPane",
    "static": true,
    "longname": "app/components/tab-pane.js~TabPane.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/tab-pane.js~TabPane",
    "static": true,
    "longname": "app/components/tab-pane.js~TabPane.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/tab-pane.js~TabPane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/tab-pane.js~TabPane#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 45,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "app/components/tabs.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../utils/html-helper';\nimport TabPane from './tab-pane';\n\n/**\n * Tabs 组件 ，显示一个标签页控件\n * @class Tabs\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @property {string}  navClassName 导航类名\n * @example\n * <Tabs />\n */\nexport default class Tabs extends PureComponent {\n    /**\n     * 标签页面板组件\n     * @constructor TabPane\n     * @static\n     * @memberof Tabs\n     */\n    static TabPane = TabPane;\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Tabs\n     * @type {Object}\n     */\n    static propTypes = {\n        navClassName: PropTypes.string,\n        activeClassName: PropTypes.string,\n        tabPaneClass: PropTypes.string,\n        contentClassName: PropTypes.string,\n        className: PropTypes.string,\n        children: PropTypes.any,\n        cache: PropTypes.bool,\n        defaultActivePaneKey: PropTypes.any,\n        onPaneChange: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Tabs\n     * @static\n     */\n    static defaultProps = {\n        navClassName: '',\n        activeClassName: 'active',\n        contentClassName: 'active',\n        tabPaneClass: '',\n        className: '',\n        cache: false,\n        defaultActivePaneKey: null,\n        onPaneChange: null,\n        children: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 Tabs 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @member {object}\n         */\n        this.state = {\n            activePaneKey: props.defaultActivePaneKey\n        };\n    }\n\n    /**\n     * 处理导航变更事件\n     * @param {string} key 变更后的当前标签页 Key 值\n     * @memberof Tabs\n     * @private\n     * @return {void}\n     */\n    handleNavClick(key) {\n        const {activePaneKey} = this.state;\n        if (key !== activePaneKey) {\n            const oldKey = activePaneKey;\n            this.setState({activePaneKey: key}, () => {\n                const {onPaneChange} = this.props;\n                if (onPaneChange) {\n                    onPaneChange(key, oldKey);\n                }\n            });\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Tabs\n     * @return {ReactNode}\n     */\n    render() {\n        let {\n            defaultActivePaneKey,\n            cache,\n            navClassName,\n            tabPaneClass,\n            activeClassName,\n            contentClassName,\n            onPaneChange,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const {activePaneKey} = this.state;\n\n        if (!Array.isArray(children)) {\n            children = [children];\n        }\n\n        return (\n            <div className={classes('tabs', className)} {...other}>\n                <nav className={classes('nav', navClassName)}>\n                    {\n                        children.map(item => {\n                            return <a key={item.key} className={item.key === activePaneKey ? activeClassName : ''} onClick={this.handleNavClick.bind(this, item.key)}>{item.props.label}</a>;\n                        })\n                    }\n                </nav>\n                <div className={classes('content', contentClassName)}>\n                    {\n                        children.map(item => {\n                            if (item.key === activePaneKey) {\n                                return <div key={item.key} className={classes('tab-pane active', tabPaneClass)}>{item}</div>;\n                            }\n                            if (cache) {\n                                return <div key={item.key} className={classes('tab-pane hidden', tabPaneClass)}>{item}</div>;\n                            }\n                            return null;\n                        })\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport {TabPane, Tabs};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/components/tabs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "class",
    "name": "Tabs",
    "memberof": "app/components/tabs.js",
    "static": true,
    "longname": "app/components/tabs.js~Tabs",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/components/tabs.js",
    "importStyle": "Tabs",
    "description": "Tabs 组件 ，显示一个标签页控件",
    "examples": [
      "<Tabs />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Tabs"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "navClassName",
        "description": "导航类名"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "TabPane",
    "memberof": "app/components/tabs.js~Tabs",
    "static": true,
    "longname": "app/components/tabs.js~Tabs.TabPane",
    "access": "public",
    "description": "标签页面板组件",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": "TabPane"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/components/tabs.js~Tabs",
    "static": true,
    "longname": "app/components/tabs.js~Tabs.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/components/tabs.js~Tabs",
    "static": true,
    "longname": "app/components/tabs.js~Tabs.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 313,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/components/tabs.js~Tabs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/tabs.js~Tabs#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 Tabs 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "state",
    "memberof": "app/components/tabs.js~Tabs",
    "static": false,
    "longname": "app/components/tabs.js~Tabs#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 76,
    "type": {
      "types": [
        "{\"activePaneKey\": *}"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "handleNavClick",
    "memberof": "app/components/tabs.js~Tabs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/tabs.js~Tabs#handleNavClick",
    "access": "private",
    "description": "处理导航变更事件",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "变更后的当前标签页 Key 值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "render",
    "memberof": "app/components/tabs.js~Tabs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/components/tabs.js~Tabs#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 109,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 317,
    "kind": "file",
    "name": "app/config/index.js",
    "content": "import system from 'Config/system.json';\nimport media from 'Config/media.json';\nimport ui from 'Config/ui.json';\nimport lang from 'Config/lang.json';\nimport pkg from '../package.json';\nimport Lang from '../lang';\n\n/**\n * 应用运行时配置\n * @type {Object}\n */\nconst config = {\n    system,\n    media,\n    ui,\n    pkg,\n    exts: {},\n    lang,\n};\n\n/**\n * 更新应用运行时配置\n * @param {Object} newConfig 新的配置项\n * @return {Object} 应用运行时配置\n */\nexport const updateConfig = (newConfig) => {\n    Object.keys(newConfig).forEach(key => {\n        Object.assign(config[key], newConfig[key]);\n    });\n    return config;\n};\n\nconst {configurations} = pkg;\nif (configurations) {\n    updateConfig(configurations);\n}\n\nconst langInConfig = config.lang && config.lang[Lang.name];\nif (langInConfig) {\n    Lang.update(langInConfig);\n}\n\nexport default config;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/config/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "function",
    "name": "updateConfig",
    "memberof": "app/config/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/config/index.js~updateConfig",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/config/index.js",
    "importStyle": "{updateConfig}",
    "description": "更新应用运行时配置",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newConfig",
        "description": "新的配置项"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "应用运行时配置"
    }
  },
  {
    "__docId__": 319,
    "kind": "variable",
    "name": "configurations",
    "memberof": "app/config/index.js",
    "static": true,
    "longname": "app/config/index.js~configurations",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/config/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "variable",
    "name": "langInConfig",
    "memberof": "app/config/index.js",
    "static": true,
    "longname": "app/config/index.js~langInConfig",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/config/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "variable",
    "name": "config",
    "memberof": "app/config/index.js",
    "static": true,
    "longname": "app/config/index.js~config",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/config/index.js",
    "importStyle": "config",
    "description": "应用运行时配置",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 322,
    "kind": "file",
    "name": "app/core/commander.js",
    "content": "import {getSearchParam} from '../utils/html-helper';\n\n/**\n * 用于保存命令的公共上下文参数数据\n * (Save current shared context)\n *\n * @ignore\n * @private\n */\nconst context = {};\n\n/**\n * 用于保存注册的命令\n * (Save registered commands)\n *\n * @ignore\n * @private\n */\nconst commands = {};\n\n/**\n * 设置当前命令上下文参数\n * (Set Command context data)\n *\n * @param {any} data 上下文参数 (Command context data)\n * @return {void}\n */\nexport const setCommandContext = (data) => {\n    if (data) {\n        if (typeof data !== 'object') {\n            data = {data};\n        }\n        Object.assign(context, data);\n    }\n};\n\n/**\n * 获取当前命令上下文参数\n * (Get current command context data)\n *\n * @param {?Object} [newContext=null] 新的上下文参数 (New command context)\n * @return {Object}\n */\nexport const getCommandContext = (newContext) => {\n    return Object.assign({}, context, newContext);\n};\n\n/**\n * 执行命令\n * (Execute command)\n *\n * @param {string|Object} command 命令名称或命令对象 (Command name or command object)\n * @param {...string} params 命令参数 (Command params)\n * @return {Promise<any, Error>} 通过 Promise 返回命令执行结果 (Return result with Promise)\n */\nexport const executeCommand = (command, ...params) => {\n    let commandName = null;\n    if (typeof command !== 'object') {\n        commandName = command;\n        command = commands[commandName];\n    } else {\n        commandName = command && command.name;\n    }\n    if (command) {\n        if (!command.func) {\n            if (DEBUG) {\n                console.collapse('Command.execute', 'redBg', commandName, 'redPale', 'command func not found', 'redBg');\n                console.log('command', command);\n                console.log('params', params);\n                console.groupEnd();\n            }\n            return;\n        }\n\n        let searchOptions = null;\n        if (params && params.length && params[params.length - 1][0] === '?') {\n            searchOptions = getSearchParam(null, params[params.length - 1]);\n        }\n        const commandContext = getCommandContext(searchOptions ? {options: searchOptions} : null);\n        if (command.context) {\n            const typeOfCommandContext = typeof command.context;\n            if (typeOfCommandContext === 'function') {\n                Object.assign(commandContext, command.context(commandContext, ...params));\n            } else if (typeOfCommandContext === 'object') {\n                Object.assign(commandContext, command.context);\n            } else {\n                Object.assign(commandContext, {data: command.context});\n            }\n        }\n\n        const result = command.func(commandContext, ...params);\n\n        if (DEBUG) {\n            console.collapse('Command.execute', 'redBg', commandName, 'redPale');\n            console.log('context', commandContext);\n            console.log('command', command);\n            console.log('params', params);\n            console.log('result', result);\n            console.log('searchOptions', searchOptions);\n            console.groupEnd();\n        }\n\n        if (result instanceof Promise) {\n            return result;\n        }\n        if (result instanceof Error) {\n            return Promise.reject(result);\n        }\n        return Promise.resolve(result);\n    }\n    return Promise.reject(new Error(`Unknown command '${commandName}'.`));\n};\n\n/**\n * 根据命令文本字符串执行命令\n * (Execute command from command text string)\n *\n * @param {string} commandLine 命令文本字符串 (Command text string)\n * @param {object} [commandContext=null] 命令上下文参数 (Command context data)\n * @return {Promise<any, Error>} 通过 Promise 返回命令执行结果 (Return result with Promise)\n */\nexport const executeCommandLine = (commandLine, commandContext = null) => {\n    setCommandContext(commandContext);\n    const params = commandLine.split('/');\n    return execute(...params.map((p, idx) => {\n        if (p[0] === '?' && idx === (params.length - 1)) {\n            return p;\n        }\n        return decodeURIComponent(p);\n    }));\n};\n\n/**\n * 创建命令对象\n * (Register a command)\n *\n * @param {string|object} name 命令名称或者命令配置对象 (Command name or command config object)\n * @param {?function(context: object, params: any)} [func=null] 命令操作函数 (Command function)\n * @param {?(object|function(context: object, params: any))} [commandContext=null] 命令上下文参数 (Command context data)\n * @return {{name: string, func: function, context: ?object}} 返回创建的命令对象\n */\nexport const createCommandObject = (name, func = null, commandContext = null) => {\n    const command = typeof name === 'object' ? Object.assign({}, name) : {name};\n    if (typeof func === 'function') {\n        command.func = func;\n    }\n    if (commandContext) {\n        command.context = commandContext;\n    }\n    return command;\n};\n\n/**\n * 注册命令\n * (Register a command)\n *\n * @param {string|object} name 命令名称或者命令配置对象 (Command name or command config object)\n * @param {?function(context: object, params: any)} [func=null] 命令操作函数 (Command function)\n * @param {?object|function(context: object, params: any)} [commandContext=null] 命令上下文参数 (Command context data)\n * @return {boolean} 如果为 true，则命令注册成功；否则注册失败，通常失败的原因是已有相同名称的命令注册过 (If return true, then register success, else fail)\n */\nexport const registerCommand = (name, func = null, commandContext = null) => {\n    const command = createCommandObject(name, func, commandContext);\n    if (commands[command.name]) {\n        if (DEBUG) {\n            console.wran(`Command register failed, because the command '${command.name}' is already registered.`);\n        }\n        return false;\n    }\n    commands[command.name] = command;\n    return true;\n};\n\n/**\n * 取消注册命令\n * (Unregister command)\n *\n * @param {string} name 命令名称 (Command name)\n * @return {boolean} 如果为 true，表示成功取消注册命令；否则取消注册失败，通常失败的原因是该名称的命令从没有注册过，或者已经被取消 (If return true, then unregister success，else fail)\n */\nexport const unregisterCommand = name => {\n    if (commands[name]) {\n        delete commands[name];\n        return true;\n    }\n    return false;\n};\n\nexport default {\n    executeCommand,\n    executeCommandLine,\n    setCommandContext,\n    registerCommand,\n    unregisterCommand\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/commander.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "variable",
    "name": "context",
    "memberof": "app/core/commander.js",
    "static": true,
    "longname": "app/core/commander.js~context",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/commander.js",
    "importStyle": null,
    "description": "用于保存命令的公共上下文参数数据\n(Save current shared context)",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "variable",
    "name": "commands",
    "memberof": "app/core/commander.js",
    "static": true,
    "longname": "app/core/commander.js~commands",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/commander.js",
    "importStyle": null,
    "description": "用于保存注册的命令\n(Save registered commands)",
    "lineNumber": 19,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "function",
    "name": "setCommandContext",
    "memberof": "app/core/commander.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/commander.js~setCommandContext",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/commander.js",
    "importStyle": "{setCommandContext}",
    "description": "设置当前命令上下文参数\n(Set Command context data)",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "上下文参数 (Command context data)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 326,
    "kind": "function",
    "name": "getCommandContext",
    "memberof": "app/core/commander.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/commander.js~getCommandContext",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/commander.js",
    "importStyle": "{getCommandContext}",
    "description": "获取当前命令上下文参数\n(Get current command context data)",
    "lineNumber": 44,
    "params": [
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "newContext",
        "description": "新的上下文参数 (New command context)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "executeCommand",
    "memberof": "app/core/commander.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/commander.js~executeCommand",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/commander.js",
    "importStyle": "{executeCommand}",
    "description": "执行命令\n(Execute command)",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "命令名称或命令对象 (Command name or command object)"
      },
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "params",
        "description": "命令参数 (Command params)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any, Error>"
      ],
      "spread": false,
      "description": "通过 Promise 返回命令执行结果 (Return result with Promise)"
    }
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "executeCommandLine",
    "memberof": "app/core/commander.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/commander.js~executeCommandLine",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/commander.js",
    "importStyle": "{executeCommandLine}",
    "description": "根据命令文本字符串执行命令\n(Execute command from command text string)",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "commandLine",
        "description": "命令文本字符串 (Command text string)"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "commandContext",
        "description": "命令上下文参数 (Command context data)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any, Error>"
      ],
      "spread": false,
      "description": "通过 Promise 返回命令执行结果 (Return result with Promise)"
    }
  },
  {
    "__docId__": 329,
    "kind": "function",
    "name": "createCommandObject",
    "memberof": "app/core/commander.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/commander.js~createCommandObject",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/commander.js",
    "importStyle": "{createCommandObject}",
    "description": "创建命令对象\n(Register a command)",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "命令名称或者命令配置对象 (Command name or command config object)"
      },
      {
        "nullable": true,
        "types": [
          "function(context: object, params: any)"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "func",
        "description": "命令操作函数 (Command function)"
      },
      {
        "nullable": true,
        "types": [
          "object",
          "function(context: object, params: any)"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "commandContext",
        "description": "命令上下文参数 (Command context data)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{name: string, func: function, context: ?object}"
      ],
      "spread": false,
      "description": "返回创建的命令对象"
    }
  },
  {
    "__docId__": 330,
    "kind": "function",
    "name": "registerCommand",
    "memberof": "app/core/commander.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/commander.js~registerCommand",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/commander.js",
    "importStyle": "{registerCommand}",
    "description": "注册命令\n(Register a command)",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "命令名称或者命令配置对象 (Command name or command config object)"
      },
      {
        "nullable": true,
        "types": [
          "function(context: object, params: any)"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "func",
        "description": "命令操作函数 (Command function)"
      },
      {
        "nullable": true,
        "types": [
          "object",
          "function(context: object, params: any)"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "commandContext",
        "description": "命令上下文参数 (Command context data)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 true，则命令注册成功；否则注册失败，通常失败的原因是已有相同名称的命令注册过 (If return true, then register success, else fail)"
    }
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "unregisterCommand",
    "memberof": "app/core/commander.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/commander.js~unregisterCommand",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/commander.js",
    "importStyle": "{unregisterCommand}",
    "description": "取消注册命令\n(Unregister command)",
    "lineNumber": 181,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "命令名称 (Command name)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 true，表示成功取消注册命令；否则取消注册失败，通常失败的原因是该名称的命令从没有注册过，或者已经被取消 (If return true, then unregister success，else fail)"
    }
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "app/core/context-menu.js",
    "content": "import Platform from 'Platform'; // eslint-disable-line\nimport ContextMenu from '../components/context-menu';\nimport timeSquence from '../utils/time-sequence';\nimport Lang from '../lang';\nimport {isWebUrl} from '../utils/html-helper';\n\n/**\n * 存储所有上下文菜单生成器\n * @type {Object<string, Object>}\n * @private\n */\nconst contextMenuCreators = {};\n\n/**\n * 判断一个上下文菜单项目是否是分隔线\n * @param {string|Object} item 要判断的上下文菜单项\n * @return {boolean}\n * @private\n */\nconst isDividerItem = item => {\n    return item === 'divider' || item === '-' || item === 'separator' || item.type === 'divider';\n};\n\n/**\n * 判定上下文菜单项列表最后一项是否为分隔线，如果是则移除它\n * @param {Object[]} items 上下文菜单项列表\n * @return {Object[]} 修改后的上下文菜单项列表\n */\nexport const tryRemoveLastDivider = items => {\n    if (items.length && isDividerItem(items[items.length - 1])) {\n        items.pop();\n    }\n    return items;\n};\n\n/**\n * 判定上下文菜单项列表最后一项是否为分隔线，如果不是则添加一个分隔线项目到列表末尾\n * @param {Object[]} items 上下文菜单项列表\n * @return {Object[]} 修改后的上下文菜单项列表\n */\nexport const tryAddDividerItem = items => {\n    if (items.length && !isDividerItem(items[items.length - 1])) {\n        items.push('divider');\n    }\n    return items;\n};\n\n/**\n * 判定给定的上下文菜单生成器是否符合给定的名称\n * @param {Object<string, any>} creator 要判断的上下文菜单生成器\n * @param {?Function(context: Object)} creator.create 生成菜单项列表的回调函数，create 和 items 属性只能设置一个\n * @param {?Object[]} creator.items 固定的菜单项列表，create 和 items 属性只能设置一个\n * @param {?string} creator.id 生成器 ID，如果不指定则自动生成\n * @param {string|string[]} creator.match 匹配的上下文名称，多个上下文名称通过字符串数组或者使用英文逗号拼接为一个字符串\n * @param {?Function(context: Object)} createFunc 生成菜单项列表的回调函数\n * @param {string} contextName 上下文菜单名称\n * @return {boolean}\n */\nexport const isCreatorMatch = (creator, contextName) => {\n    if (typeof creator.match === 'string') {\n        creator.match = creator.match.split(',');\n    }\n    if (Array.isArray(creator.match)) {\n        creator.match = new Set(creator.match);\n    }\n    return creator.match && creator.match.has(contextName);\n};\n\n/**\n * 通过上下文菜单生成器生成菜单项列表\n * @param {Object<string, any>} creator 上下文菜单生成器\n * @param {?Function(context: Object)} creator.create 生成菜单项列表的回调函数，create 和 items 属性只能设置一个\n * @param {?Object[]} creator.items 固定的菜单项列表，create 和 items 属性只能设置一个\n * @param {?string} creator.id 生成器 ID，如果不指定则自动生成\n * @param {string|string[]} creator.match 匹配的上下文名称，多个上下文名称通过字符串数组或者使用英文逗号拼接为一个字符串\n * @param {?Function(context: Object)} createFunc 生成菜单项列表的回调函数\n * @param {Object} context 上下文参数对象\n * @return {Object[]}\n */\nconst getMenuItemsFromCreator = (creator, context) => {\n    const menuItems = creator.items || [];\n    if (creator.create) {\n        const newItems = creator.create(context);\n        if (newItems && newItems.length) {\n            menuItems.push(...newItems);\n        }\n    }\n    return menuItems;\n};\n\n/**\n * 通过内部上下文菜单生成器获取指定上下文名称对应的上下文菜单项列表\n * @param {sring} contextName 上下文名称\n * @param {Object} context 上下文参数对象\n * @return {Object[]}\n */\nconst getInnerMenuItemsForContext = (contextName, context) => {\n    const items = [];\n    Object.keys(contextMenuCreators).forEach(creatorId => {\n        const creator = contextMenuCreators[creatorId];\n        if (isCreatorMatch(creator, contextName)) {\n            const newItems = getMenuItemsFromCreator(creator, context);\n            if (newItems.length) {\n                tryAddDividerItem(items).push(...newItems);\n            }\n        }\n    });\n    return items;\n};\n\n/**\n * 将一个上下文菜单生成器注册到系统\n * @param {Object<string, any>} creator 上下文菜单生成器\n * @param {?Function(context: Object)} creator.create 生成菜单项列表的回调函数，create 和 items 属性只能设置一个\n * @param {?Object[]} creator.items 固定的菜单项列表，create 和 items 属性只能设置一个\n * @param {?string} creator.id 生成器 ID，如果不指定则自动生成\n * @param {string|string[]} creator.match 匹配的上下文名称，多个上下文名称通过字符串数组或者使用英文逗号拼接为一个字符串\n * @param {?Function(context: Object)} createFunc 生成菜单项列表的回调函数\n * @return {string} 生成器 ID\n */\nexport const addContextMenuCreator = (creator, createFunc) => {\n    if (Array.isArray(creator)) {\n        return creator.map(c => addContextMenuCreator(c));\n    }\n    if (typeof creator === 'string' || creator instanceof Set) {\n        creator = {match: creator};\n    }\n    if (typeof createFunc === 'function') {\n        creator.create = createFunc;\n    } else if (Array.isArray(createFunc)) {\n        creator.items = createFunc;\n    }\n    if (!creator.id) {\n        creator.id = timeSquence();\n    }\n    if (typeof creator.match === 'string') {\n        creator.match = creator.match.split(',');\n    }\n    if (Array.isArray(creator.match)) {\n        creator.match = new Set(creator.match);\n    }\n    contextMenuCreators[creator.id] = creator;\n    return creator.id;\n};\n\n/**\n * 从系统移除一个上下文菜单生成器\n * @param {string} creatorId 要移除的上下文生成器 ID\n * @return {boolean}\n */\nexport const removeContextMenuCreator = creatorId => {\n    if (contextMenuCreators[creatorId]) {\n        delete contextMenuCreators[creatorId];\n        return true;\n    }\n    return false;\n};\n\n/**\n * 获取指定上下文名称对应的上下文菜单项列表\n * @param {sring} contextName 上下文名称\n * @param {Object} [context={}] 上下文参数对象\n * @return {Object[]}\n */\nexport const getMenuItemsForContext = (contextName, context = {}) => {\n    const {event, options} = context;\n    const items = [];\n\n    // Get context menu items for link target element\n    let linkItemsCount = 0;\n    if (event && options && options.linkTarget && event.target.tagName === 'A' && contextName !== 'link') {\n        const linkItems = getInnerMenuItemsForContext('link', context);\n        if (linkItems && linkItems.length) {\n            linkItemsCount = linkItems.length;\n            items.push(...linkItems);\n        }\n    }\n\n    // Get context menu items from inner creators\n    const innerItems = getInnerMenuItemsForContext(contextName, context);\n    if (innerItems && innerItems.length) {\n        tryAddDividerItem(items).push(...innerItems);\n    }\n\n    // Get context menu items from extension creators\n    if (global.ExtsRuntime && (!options || options.exts !== false)) {\n        global.ExtsRuntime.exts.forEach(ext => {\n            const extCreators = ext.getContextMenuCreators(context);\n            if (extCreators && extCreators.length) {\n                const extItems = [];\n                extCreators.forEach(creator => {\n                    if (isCreatorMatch(creator, contextName)) {\n                        const newItems = getMenuItemsFromCreator(creator, context);\n                        if (newItems.length) {\n                            extItems.push(...newItems);\n                        }\n                    }\n                });\n                if (extItems.length) {\n                    tryAddDividerItem(items);\n                    extItems.forEach(extItem => {\n                        items.push(ext.formatContextMenuItem(extItem));\n                    });\n                }\n            }\n        });\n    }\n\n    const textSelectItems = [];\n\n    if (options && options.copy && Platform.ui.copySelectText) {\n        let selectedText = document.getSelection().toString().trim();\n        if (selectedText) {\n            const newLinePos = selectedText.indexOf('\\n');\n            if (newLinePos > -1) selectedText = selectedText.substr(0, newLinePos);\n            if (selectedText.length > 20) {\n                selectedText = `${selectedText.substr(0, 20)}...`;\n            }\n            if (linkItemsCount < 3) {\n                textSelectItems.push({\n                    label: Lang.format('menu.copy.format', selectedText),\n                    click: Platform.ui.copySelectText\n                });\n            }\n        }\n    }\n    if (options && options.selectAll && Platform.ui.selectAllText) {\n        textSelectItems.push({\n            label: Lang.string('menu.selectAll'),\n            icon: 'mdi-select-all',\n            click: Platform.ui.selectAllText\n        });\n    }\n    if (textSelectItems.length) {\n        tryAddDividerItem(items).push(...textSelectItems);\n    }\n\n    return items;\n};\n\n/**\n * 在界面上显示上下文菜单\n * @param {string} contextName 上下文名称\n * @param {!Object} context 上下文参数对象\n * @param {!Event} context.event 触发上下文菜单的界面事件（例如用户点击事件）\n * @return {boolean} 如果为 `true` 则成功显示上下文菜单，如果为 `false` 则无法显示上下文菜单\n */\nexport const showContextMenu = (contextName, context) => {\n    if (!context) {\n        throw new Error('Context must be set.');\n    }\n    if (context instanceof Event) {\n        context = {event: context};\n    }\n    const {event, options, callback} = context;\n    if (!event) {\n        throw new Error('Context and context.event must be set.');\n    }\n\n    const items = getMenuItemsForContext(contextName, context);\n\n    if (DEBUG) {\n        console.collapse('ContextMenu', 'greenBgLight', contextName, 'greenPale');\n        console.log('context', context);\n        console.log('items', items);\n        console.log('contextMenuCreators', contextMenuCreators);\n        console.groupEnd();\n    }\n\n    if (items.length) {\n        if (event) {\n            if ((!options || options.preventDefault !== false)) {\n                event.preventDefault();\n            }\n            if ((!options || options.stopPropagation !== false)) {\n                event.stopPropagation();\n            }\n        }\n        if (options) {\n            delete options.selectAll;\n            delete options.copy;\n            delete options.preventDefault;\n            delete options.stopPropagation;\n            delete options.linkTarget;\n        }\n        ContextMenu.show({x: event.clientX, y: event.clientY}, items, options, callback);\n        return true;\n    }\n    return false;\n};\n\n// 添加链接上下文菜单生成器\naddContextMenuCreator('link', context => {\n    const {event, options} = context;\n    const link = options && options.url ? options.url : event.target.href;\n    if (isWebUrl(link)) {\n        let linkText = document.getSelection().toString().trim();\n        if (event && linkText === '') {\n            linkText = event.target.innerText || (event.target.attributes.title ? event.target.attributes.title.value : '');\n        }\n        const items = [{\n            label: Lang.string('common.openLink'),\n            click: () => {\n                Platform.ui.openExternal(link);\n            },\n            icon: 'mdi-open-in-new'\n        }];\n        if (Platform.clipboard && Platform.clipboard.writeText) {\n            items.push({\n                label: Lang.string('common.copyLink'),\n                click: () => {\n                    Platform.clipboard.writeText(link);\n                }\n            });\n\n            if (linkText && linkText !== link && `${linkText}/` !== link) {\n                items.push({\n                    label: Lang.format('common.copyFormat', linkText.length > 25 ? `${linkText.substr(0, 25)}…` : linkText),\n                    click: () => {\n                        Platform.clipboard.writeText(linkText);\n                    }\n                });\n            }\n        }\n        return items;\n    }\n});\n\nif (Platform.clipboard && Platform.clipboard.writeText) {\n    // 添加 Emoji 表情操作上下文菜单\n    addContextMenuCreator('emoji', context => {\n        const {emoji} = context;\n        if (emoji) {\n            return [{\n                label: Lang.string('common.copy'),\n                click: () => {\n                    Platform.clipboard.writeText(emoji);\n                }\n            }];\n        }\n    });\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/context-menu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "variable",
    "name": "contextMenuCreators",
    "memberof": "app/core/context-menu.js",
    "static": true,
    "longname": "app/core/context-menu.js~contextMenuCreators",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": null,
    "description": "存储所有上下文菜单生成器",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 334,
    "kind": "function",
    "name": "isDividerItem",
    "memberof": "app/core/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/context-menu.js~isDividerItem",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": null,
    "description": "判断一个上下文菜单项目是否是分隔线",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "要判断的上下文菜单项"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 335,
    "kind": "function",
    "name": "tryRemoveLastDivider",
    "memberof": "app/core/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/context-menu.js~tryRemoveLastDivider",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": "{tryRemoveLastDivider}",
    "description": "判定上下文菜单项列表最后一项是否为分隔线，如果是则移除它",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "上下文菜单项列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "修改后的上下文菜单项列表"
    }
  },
  {
    "__docId__": 336,
    "kind": "function",
    "name": "tryAddDividerItem",
    "memberof": "app/core/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/context-menu.js~tryAddDividerItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": "{tryAddDividerItem}",
    "description": "判定上下文菜单项列表最后一项是否为分隔线，如果不是则添加一个分隔线项目到列表末尾",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "上下文菜单项列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "修改后的上下文菜单项列表"
    }
  },
  {
    "__docId__": 337,
    "kind": "function",
    "name": "isCreatorMatch",
    "memberof": "app/core/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/context-menu.js~isCreatorMatch",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": "{isCreatorMatch}",
    "description": "判定给定的上下文菜单生成器是否符合给定的名称",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "creator",
        "description": "要判断的上下文菜单生成器"
      },
      {
        "nullable": true,
        "types": [
          "Function(context: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.create",
        "description": "生成菜单项列表的回调函数，create 和 items 属性只能设置一个"
      },
      {
        "nullable": true,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.items",
        "description": "固定的菜单项列表，create 和 items 属性只能设置一个"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.id",
        "description": "生成器 ID，如果不指定则自动生成"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.match",
        "description": "匹配的上下文名称，多个上下文名称通过字符串数组或者使用英文逗号拼接为一个字符串"
      },
      {
        "nullable": true,
        "types": [
          "Function(context: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "createFunc",
        "description": "生成菜单项列表的回调函数"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "contextName",
        "description": "上下文菜单名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 338,
    "kind": "function",
    "name": "getMenuItemsFromCreator",
    "memberof": "app/core/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/context-menu.js~getMenuItemsFromCreator",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": null,
    "description": "通过上下文菜单生成器生成菜单项列表",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "creator",
        "description": "上下文菜单生成器"
      },
      {
        "nullable": true,
        "types": [
          "Function(context: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.create",
        "description": "生成菜单项列表的回调函数，create 和 items 属性只能设置一个"
      },
      {
        "nullable": true,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.items",
        "description": "固定的菜单项列表，create 和 items 属性只能设置一个"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.id",
        "description": "生成器 ID，如果不指定则自动生成"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.match",
        "description": "匹配的上下文名称，多个上下文名称通过字符串数组或者使用英文逗号拼接为一个字符串"
      },
      {
        "nullable": true,
        "types": [
          "Function(context: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "createFunc",
        "description": "生成菜单项列表的回调函数"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "上下文参数对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 339,
    "kind": "function",
    "name": "getInnerMenuItemsForContext",
    "memberof": "app/core/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/context-menu.js~getInnerMenuItemsForContext",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": null,
    "description": "通过内部上下文菜单生成器获取指定上下文名称对应的上下文菜单项列表",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "sring"
        ],
        "spread": false,
        "optional": false,
        "name": "contextName",
        "description": "上下文名称"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "上下文参数对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 340,
    "kind": "function",
    "name": "addContextMenuCreator",
    "memberof": "app/core/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/context-menu.js~addContextMenuCreator",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": "{addContextMenuCreator}",
    "description": "将一个上下文菜单生成器注册到系统",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "creator",
        "description": "上下文菜单生成器"
      },
      {
        "nullable": true,
        "types": [
          "Function(context: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.create",
        "description": "生成菜单项列表的回调函数，create 和 items 属性只能设置一个"
      },
      {
        "nullable": true,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.items",
        "description": "固定的菜单项列表，create 和 items 属性只能设置一个"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.id",
        "description": "生成器 ID，如果不指定则自动生成"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "creator.match",
        "description": "匹配的上下文名称，多个上下文名称通过字符串数组或者使用英文逗号拼接为一个字符串"
      },
      {
        "nullable": true,
        "types": [
          "Function(context: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "createFunc",
        "description": "生成菜单项列表的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "生成器 ID"
    }
  },
  {
    "__docId__": 341,
    "kind": "function",
    "name": "removeContextMenuCreator",
    "memberof": "app/core/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/context-menu.js~removeContextMenuCreator",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": "{removeContextMenuCreator}",
    "description": "从系统移除一个上下文菜单生成器",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "creatorId",
        "description": "要移除的上下文生成器 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 342,
    "kind": "function",
    "name": "getMenuItemsForContext",
    "memberof": "app/core/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/context-menu.js~getMenuItemsForContext",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": "{getMenuItemsForContext}",
    "description": "获取指定上下文名称对应的上下文菜单项列表",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "sring"
        ],
        "spread": false,
        "optional": false,
        "name": "contextName",
        "description": "上下文名称"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "context",
        "description": "上下文参数对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 343,
    "kind": "function",
    "name": "showContextMenu",
    "memberof": "app/core/context-menu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/context-menu.js~showContextMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/context-menu.js",
    "importStyle": "{showContextMenu}",
    "description": "在界面上显示上下文菜单",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "contextName",
        "description": "上下文名称"
      },
      {
        "nullable": false,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "上下文参数对象"
      },
      {
        "nullable": false,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "context.event",
        "description": "触发上下文菜单的界面事件（例如用户点击事件）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则成功显示上下文菜单，如果为 `false` 则无法显示上下文菜单"
    }
  },
  {
    "__docId__": 344,
    "kind": "file",
    "name": "app/core/db/database.js",
    "content": "import Dexie from 'dexie';\nimport Message from '../models/chat-message';\n\n/**\n * 数据库版本\n * @type {number}\n * @private\n */\nconst DB_VERSION = 1;\n\n/**\n * 上次创建的数据库实例\n * @type {Database}\n * @private\n */\nlet lastCreateDb = null;\n\nif (DEBUG) {\n    global.$.Dexie = Dexie;\n}\n\n/**\n * 数据库管理类\n * @class Database\n */\nexport default class Database {\n    /**\n     * 数据库版本\n     *\n     * @static\n     * @memberof Database\n     */\n    static VERSION = DB_VERSION;\n\n    /**\n     * 创建数据库实例\n     *\n     * @static\n     * @param {string} userIdentify 数据库标识\n     * @returns {Database}\n     * @memberof Database\n     */\n    static create(userIdentify) {\n        if (typeof userIdentify === 'object') {\n            userIdentify = userIdentify.identify;\n        }\n        if (!lastCreateDb) {\n            lastCreateDb = new Database(userIdentify);\n        } else if (lastCreateDb.identify !== userIdentify) {\n            lastCreateDb.destroy();\n            lastCreateDb = new Database(userIdentify);\n        }\n        return lastCreateDb;\n    }\n\n    /**\n     * 创建一个数据库管理类实例\n     * @param {string} userIdentify 数据库标识\n     * @constructor\n     * @memberof Database\n     */\n    constructor(userIdentify) {\n        if (typeof userIdentify === 'object') {\n            userIdentify = userIdentify.identify;\n        }\n\n        /**\n         * 数据库标识\n         * @private\n         * @type {string}\n         */\n        this._userIdentify = userIdentify;\n\n        // 判断数据库是否存在\n        Dexie.exists(userIdentify).then(exists => {\n            this._exists = exists;\n            return exists;\n        }).catch(error => {\n            if (DEBUG) {\n                console.warn('Dexie error', error);\n            }\n        });\n\n        /**\n         * 当前数据库实例\n         * @type {Dexie}\n         * @private\n         */\n        this._db = new Dexie(userIdentify);\n        this._db.version(DB_VERSION).stores({\n            // [Entity.NAME]: Entity.SCHEMA.dexieFormat,\n            // [Member.NAME]: Member.SCHEMA.dexieFormat,\n            // [Chat.NAME]: Chat.SCHEMA.dexieFormat,\n            [Message.NAME]: Message.SCHEMA.dexieFormat,\n        });\n    }\n\n    /**\n     * 获取当前数据库是否存在\n     *\n     * @readonly\n     * @memberof Database\n     * @type {boolean}\n     */\n    get isExists() {\n        return this._exists;\n    }\n\n    /**\n     * 获取当前数据库标识\n     *\n     * @readonly\n     * @memberof Database\n     * @type {string}\n     */\n    get identify() {\n        return this._userIdentify;\n    }\n\n    // get members() {\n    //     return this._db[Member.NAME];\n    // }\n\n    // get chats() {\n    //     return this._db[Chat.NAME];\n    // }\n\n    /**\n     * 获取数据库 ChatMessage 表\n     *\n     * @readonly\n     * @memberof Database\n     * @type {Dexie.Table}\n     */\n    get chatMessages() {\n        return this._db[Message.NAME];\n    }\n\n    /**\n     * 获取 Dexie 数据库实例\n     *\n     * @readonly\n     * @memberof Database\n     * @type {Dexie}\n     */\n    get all() {\n        return this._db;\n    }\n\n    /**\n     * 关闭并销毁数据库实例\n     *\n     * @memberof Database\n     * @return {void}\n     */\n    destroy() {\n        this._db.close();\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/db/database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 345,
    "kind": "variable",
    "name": "DB_VERSION",
    "memberof": "app/core/db/database.js",
    "static": true,
    "longname": "app/core/db/database.js~DB_VERSION",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/db/database.js",
    "importStyle": null,
    "description": "数据库版本",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 346,
    "kind": "variable",
    "name": "lastCreateDb",
    "memberof": "app/core/db/database.js",
    "static": true,
    "longname": "app/core/db/database.js~lastCreateDb",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/db/database.js",
    "importStyle": null,
    "description": "上次创建的数据库实例",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "Database",
    "memberof": "app/core/db/database.js",
    "static": true,
    "longname": "app/core/db/database.js~Database",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/db/database.js",
    "importStyle": "Database",
    "description": "数据库管理类",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Database"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "VERSION",
    "memberof": "app/core/db/database.js~Database",
    "static": true,
    "longname": "app/core/db/database.js~Database.VERSION",
    "access": "public",
    "description": "数据库版本",
    "lineNumber": 33,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "create",
    "memberof": "app/core/db/database.js~Database",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/db/database.js~Database.create",
    "access": "public",
    "description": "创建数据库实例",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Database}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userIdentify",
        "description": "数据库标识"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 350,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/db/database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/db/database.js~Database#constructor",
    "access": "public",
    "description": "创建一个数据库管理类实例",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userIdentify",
        "description": "数据库标识"
      }
    ]
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "_userIdentify",
    "memberof": "app/core/db/database.js~Database",
    "static": false,
    "longname": "app/core/db/database.js~Database#_userIdentify",
    "access": "private",
    "description": "数据库标识",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "_exists",
    "memberof": "app/core/db/database.js~Database",
    "static": false,
    "longname": "app/core/db/database.js~Database#_exists",
    "access": "private",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "member",
    "name": "_db",
    "memberof": "app/core/db/database.js~Database",
    "static": false,
    "longname": "app/core/db/database.js~Database#_db",
    "access": "private",
    "description": "当前数据库实例",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "Dexie"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 354,
    "kind": "get",
    "name": "isExists",
    "memberof": "app/core/db/database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/db/database.js~Database#isExists",
    "access": "public",
    "description": "获取当前数据库是否存在",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 355,
    "kind": "get",
    "name": "identify",
    "memberof": "app/core/db/database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/db/database.js~Database#identify",
    "access": "public",
    "description": "获取当前数据库标识",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 356,
    "kind": "get",
    "name": "chatMessages",
    "memberof": "app/core/db/database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/db/database.js~Database#chatMessages",
    "access": "public",
    "description": "获取数据库 ChatMessage 表",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Dexie.Table"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 357,
    "kind": "get",
    "name": "all",
    "memberof": "app/core/db/database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/db/database.js~Database#all",
    "access": "public",
    "description": "获取 Dexie 数据库实例",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Dexie"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "destroy",
    "memberof": "app/core/db/database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/db/database.js~Database#destroy",
    "access": "public",
    "description": "关闭并销毁数据库实例",
    "lineNumber": 156,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 359,
    "kind": "file",
    "name": "app/core/db/index.js",
    "content": "import Database from './database';\nimport profile from '../profile';\n\n/**\n * 当前数据库实例\n * @private\n * @type {Database}\n */\nlet db = null;\n\n// 当登录用户变更时重新创建数据库实例\nprofile.onSwapUser(user => {\n    db = Database.create(user.identify);\n});\n\nexport default {\n    /**\n     * 获取当前数据库实例\n     * @type {Database}\n     */\n    get database() {\n        return db;\n    }\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/db/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 360,
    "kind": "variable",
    "name": "db",
    "memberof": "app/core/db/index.js",
    "static": true,
    "longname": "app/core/db/index.js~db",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/db/index.js",
    "importStyle": null,
    "description": "当前数据库实例",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Database"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 361,
    "kind": "file",
    "name": "app/core/events.js",
    "content": "import {EventEmitter} from 'Platform';\n\n/**\n * 事件名称表\n * @type {Object<string, string>}\n * @const\n * @private\n */\nexport const EVENT = {\n    data_change: 'data.change',\n};\n\n/**\n * 事件 `data_change` 触发延迟，单位毫秒\n * @type {number}\n * @const\n * @private\n */\nconst DATA_CHANGE_DELAY = 110;\n\n/**\n * 事件触发器类\n * （能够同时在 Electron 主进程和渲染进程中工作）\n *\n * @class Events\n * @extends {EventEmitter}\n */\nexport class Events extends EventEmitter {\n    /**\n     * 事件名称表\n     * @type {Object<string, string>}\n     * @const\n     * @static\n     */\n    static EVENT = EVENT;\n\n    /**\n     * 创建一个事件触发器类实例\n     * @constructor\n     */\n    constructor() {\n        super();\n        this.eventsMap = {};\n        this.isMainProcess = !process.browser && process.type !== 'renderer';\n        if (this.setMaxListeners) {\n            this.setMaxListeners(0);\n        }\n    }\n\n    /**\n     * 绑定事件并返回一个 {Sysmbo} 作为事件绑定 ID 用于取消事件\n     * @param  {string} event 事件名称\n     * @param  {Function} listener 事件回调函数\n     * @return {Symbol} 事件绑定 ID\n     * @memberof Events\n     */\n    on(event, listener) {\n        super.on(event, listener);\n        const name = Symbol(event);\n        this.eventsMap[name] = {listener, name: event};\n        if (DEBUG) {\n            if (this.isMainProcess) {\n                console.log('\\n>> ON EVENT', event);\n            } else {\n                console.collapse('ON EVENT', 'orangeBg', event, 'orangePale');\n                console.trace('event', this.eventsMap[name]);\n                console.groupEnd();\n            }\n        }\n        return name;\n    }\n\n    /**\n     * 绑定一个一次性事件，触发后会自动取消绑定，只会触发一次\n     * @param  {string} event 事件名称\n     * @param  {Function} listener 事件回调函数\n     * @return {Symbol} 事件绑定 ID\n     * @memberof Events\n     */\n    once(event, listener) {\n        const name = Symbol(event);\n        const listenerBinder = (...args) => {\n            this.off(name);\n            listener(...args);\n        };\n        super.once(event, listenerBinder);\n        this.eventsMap[name] = {listener: listenerBinder, name: event};\n        if (DEBUG) {\n            if (this.isMainProcess) {\n                console.log('\\n>> ON ONCE EVENT', event);\n            } else {\n                console.collapse('ON ONCE EVENT', 'orangeBg', event, 'orangePale');\n                console.trace('event', this.eventsMap[name]);\n                console.groupEnd();\n            }\n        }\n        return name;\n    }\n\n    /**\n     * 取消绑定事件\n     * @param  {...Symbol} names 要取消的事件 ID\n     * @return {void}\n     * @memberof Events\n     */\n    off(...names) {\n        if (this.eventsMap) {\n            names.forEach(name => {\n                const event = this.eventsMap[name];\n                if (event) {\n                    this.removeListener(event.name, event.listener);\n                    delete this.eventsMap[name];\n                    if (DEBUG) {\n                        if (this.isMainProcess) {\n                            console.log('OFF EVENT', event.name);\n                        } else {\n                            console.collapse('OFF EVENT', 'orangeBg', event.name, 'orangePale');\n                            console.trace('event', event);\n                            console.groupEnd();\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * 触发一个事件\n     *\n     * @param {string} names 要触发的事件名称\n     * @param {...any} args 事件参数\n     * @memberof Events\n     * @return {void}\n     */\n    emit(names, ...args) {\n        super.emit(names, ...args);\n        if (DEBUG) {\n            if (this.isMainProcess) {\n                console.log('\\n>> EMIT EVENT', names);\n            } else {\n                console.collapse('EMIT EVENT', 'orangeBg', names, 'orangePale');\n                args.forEach((arg, argIdx) => {\n                    console.log(`arg: ${argIdx}`, arg);\n                });\n                console.groupEnd();\n            }\n        }\n    }\n\n    /**\n     * 监听通用数据变更事件\n     *\n     * @param {Function} listener 事件回调函数\n     * @return {Symbol} 事件绑定 ID\n     * @memberof Events\n     */\n    onDataChange(listener) {\n        return this.on(EVENT.data_change, listener);\n    }\n\n    /**\n     * 触发通用数据变更事件\n     *\n     * @param {Object<string, any>} data 变更数据表\n     * @return {void}\n     * @memberof Events\n     */\n    emitDataChange(data, delay = DATA_CHANGE_DELAY) {\n        if (typeof data === 'object') {\n            if (this.delayEmitData && data) {\n                Object.keys(data).forEach(dataKey => {\n                    this.delayEmitData[dataKey] = Object.assign(this.delayEmitData[dataKey] || {}, data[dataKey]);\n                });\n            } else {\n                this.delayEmitData = data;\n            }\n        } else if (DEBUG) {\n            console.warn('Events.emitDataChange error, because the data param is not object.');\n        }\n        if (this.delayEmitDataChangeEventTimer) {\n            clearTimeout(this.delayEmitDataChangeEventTimer);\n        }\n        this.delayEmitDataChangeEventTimer = setTimeout(() => {\n            if (this.delayEmitData && Object.keys(this.delayEmitData).length) {\n                const changedData = Object.assign({}, this.delayEmitData);\n                this.emit(EVENT.data_change, changedData);\n            }\n            this.delayEmitData = null;\n            this.delayEmitDataChangeEventTimer = null;\n        }, delay);\n    }\n}\n\nconst events = new Events();\n\n/**\n * 全局事件触发器\n * @type {Events}\n */\nexport default events;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 362,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/events.js",
    "static": true,
    "longname": "app/core/events.js~EVENT",
    "access": "private",
    "export": true,
    "importPath": "xuanxuan/app/core/events.js",
    "importStyle": "{EVENT}",
    "description": "事件名称表",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 363,
    "kind": "variable",
    "name": "DATA_CHANGE_DELAY",
    "memberof": "app/core/events.js",
    "static": true,
    "longname": "app/core/events.js~DATA_CHANGE_DELAY",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/events.js",
    "importStyle": null,
    "description": "事件 `data_change` 触发延迟，单位毫秒",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 364,
    "kind": "class",
    "name": "Events",
    "memberof": "app/core/events.js",
    "static": true,
    "longname": "app/core/events.js~Events",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/events.js",
    "importStyle": "{Events}",
    "description": "事件触发器类\n（能够同时在 Electron 主进程和渲染进程中工作）",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Events"
      }
    ],
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 365,
    "kind": "member",
    "name": "EVENT",
    "memberof": "app/core/events.js~Events",
    "static": true,
    "longname": "app/core/events.js~Events.EVENT",
    "access": "public",
    "description": "事件名称表",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 366,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/events.js~Events#constructor",
    "access": "public",
    "description": "创建一个事件触发器类实例",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 367,
    "kind": "member",
    "name": "eventsMap",
    "memberof": "app/core/events.js~Events",
    "static": false,
    "longname": "app/core/events.js~Events#eventsMap",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "isMainProcess",
    "memberof": "app/core/events.js~Events",
    "static": false,
    "longname": "app/core/events.js~Events#isMainProcess",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "on",
    "memberof": "app/core/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/events.js~Events#on",
    "access": "public",
    "description": "绑定事件并返回一个 {Sysmbo} 作为事件绑定 ID 用于取消事件",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件名称"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "事件绑定 ID"
    }
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "once",
    "memberof": "app/core/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/events.js~Events#once",
    "access": "public",
    "description": "绑定一个一次性事件，触发后会自动取消绑定，只会触发一次",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件名称"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "事件绑定 ID"
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "off",
    "memberof": "app/core/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/events.js~Events#off",
    "access": "public",
    "description": "取消绑定事件",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Symbol"
        ],
        "spread": true,
        "optional": false,
        "name": "names",
        "description": "要取消的事件 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "emit",
    "memberof": "app/core/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/events.js~Events#emit",
    "access": "public",
    "description": "触发一个事件",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "要触发的事件名称"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "事件参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "onDataChange",
    "memberof": "app/core/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/events.js~Events#onDataChange",
    "access": "public",
    "description": "监听通用数据变更事件",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "事件绑定 ID"
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "emitDataChange",
    "memberof": "app/core/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/events.js~Events#emitDataChange",
    "access": "public",
    "description": "触发通用数据变更事件",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "变更数据表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "delayEmitData",
    "memberof": "app/core/events.js~Events",
    "static": false,
    "longname": "app/core/events.js~Events#delayEmitData",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "delayEmitDataChangeEventTimer",
    "memberof": "app/core/events.js~Events",
    "static": false,
    "longname": "app/core/events.js~Events#delayEmitDataChangeEventTimer",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "variable",
    "name": "events",
    "memberof": "app/core/events.js",
    "static": true,
    "longname": "app/core/events.js~events",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/events.js",
    "importStyle": "events",
    "description": "全局事件触发器",
    "lineNumber": 200,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 380,
    "kind": "file",
    "name": "app/core/im/im-chats.js",
    "content": "import Md5 from 'md5';\nimport Config from '../../config';\nimport Chat from '../models/chat';\nimport ChatMessage from '../models/chat-message';\nimport NotificationMessage from '../models/notification-message';\nimport profile from '../profile';\nimport Events from '../events';\nimport members from '../members';\nimport db from '../db';\nimport StringHelper from '../../utils/string-helper';\nimport {getTimeBeforeDesc} from '../../utils/date-helper';\nimport TaskQueue from '../../utils/task-queue';\nimport timeSequence from '../../utils/time-sequence';\nimport Lang from '../../lang';\nimport Server from '../server';\n\n/**\n * 从运行时配置读取默认每次加载聊天记录条目的数目\n * @type {number}\n * @private\n */\nconst CHATS_LIMIT_DEFAULT = Config.ui['chat.flow.size'];\n\n/**\n * 默认标记为最近聊天最大过去时间，单位毫秒\n * @type {number}\n * @private\n */\nconst MAX_RECENT_TIME = 1000 * 60 * 60 * 24 * 7;\n\n/**\n * 搜索权值计算表\n * @type {Object}\n * @private\n */\nconst SEARCH_SCORE_MAP = {\n    matchAll: 100,\n    matchPrefix: 75,\n    include: 50,\n    similar: 10\n};\n\n/**\n * 事件名称表\n * @type {Object}\n * @private\n */\nconst EVENT = {\n    init: 'chats.init',\n    messages: 'chats.messages',\n    fetchQueueFinish: 'fetch.queue.finish.',\n};\n\n/**\n * 所有聊天实例对象表\n * @type {Object}\n * @private\n */\nlet chats = null;\n\n/**\n * 公开聊天实例对象表\n * @type {Object}\n * @private\n */\nlet publicChats = null;\n\n/**\n * 用于方便获取用户信息的对象\n * @type {Object}\n * @private\n */\nconst app = {\n    members,\n    get user() {\n        return profile.user;\n    }\n};\n\n/**\n * 遍历当前用户的每一个聊天\n * @param {Function(chat: Chat)} callback 遍历回调函数\n * @return {void}\n */\nexport const forEachChat = (callback) => {\n    if (chats) {\n        Object.keys(chats).forEach(gid => {\n            callback(chats[gid]);\n        });\n    }\n};\n\n/**\n * 根据 GID 获取聊天对象\n * @param {string} gid 聊天 GID\n * @return {Chat}\n */\nexport const getChat = (gid) => {\n    if (!chats) {\n        return null;\n    }\n    let chat = chats[gid];\n    if (!chat && gid.includes('&')) {\n        const chatMembers = gid.split('&').map(x => Number.parseInt(x, 10));\n        chat = new Chat({\n            gid,\n            members: chatMembers,\n            createdBy: profile.user.account,\n            type: Chat.TYPES.one2one\n        });\n        chat.updateMembersSet(members);\n        updateChats(chat);\n    }\n    return chat;\n};\n\n/**\n * 创建一个聊天消息实例\n * @param {ChatMessage|Object} message 聊天消息存储对象\n * @return {ChatMessage}\n */\nexport const createChatMessage = message => {\n    if (message instanceof ChatMessage) {\n        return message;\n    }\n    if (message.type === 'notification') {\n        message = NotificationMessage.create(message);\n    } else {\n        message = ChatMessage.create(message);\n    }\n    return message;\n};\n\n/**\n * 获取一对一聊天 GID\n * @param {Set|Array} members 一对一聊天成员 ID 列表\n * @return {string}\n */\nexport const getOne2OneChatGid = members => {\n    if (members instanceof Set) {\n        members = Array.from(members);\n    }\n    if (members.length > 2 || !members.length) {\n        throw new Error(`Cannot build gid for members count with ${members.length}.`);\n    } else if (members.length === 1) {\n        members.push(profile.userId);\n    }\n    return members.map(x => x.id || x).sort().join('&');\n};\n\n/**\n * 获取上次激活的聊天\n * @return {Chat}\n */\nexport const getLastActiveChat = () => {\n    let lastChat = null;\n    forEachChat(chat => {\n        if (!lastChat || lastChat.lastActiveTime < chat.lastActiveTime) {\n            lastChat = chat;\n        }\n    });\n    return lastChat;\n};\n\n/**\n * 保存聊天消息到数据库\n * @param {Array.<ChatMessage>} messages 聊天消息列表\n * @param {?Chat} chat 要保存的聊天对象\n * @return {Promise}\n */\nexport const saveChatMessages = (messages, chat) => {\n    if (!Array.isArray(messages)) {\n        messages = [messages];\n    }\n\n    Events.emit(EVENT.messages, messages);\n    if (chat) {\n        updateChats(chat);\n    }\n\n    // Save messages to database\n    if (messages.length) {\n        return db.database.chatMessages.bulkPut(messages.map(x => x.plain()));\n    }\n    return Promise.resolve(0);\n};\n\n/**\n * 更新缓存中的聊天消息\n * @param {Object[]} messages 聊天消息列表\n * @param {boolean} [muted=false] 是否忽略未读提示\n * @param {boolean} [skipOld=false] 是否跳过已更新的消息\n * @return {Promise}\n */\nexport const updateChatMessages = (messages, muted = false, skipOld = false) => {\n    if (skipOld === true) {\n        skipOld = 60 * 1000 * 60 * 24;\n    }\n    if (!Array.isArray(messages)) {\n        messages = [messages];\n    }\n    const chatsMessages = {};\n    const messagesForUpdate = messages.map(message => {\n        message = createChatMessage(message);\n        if (!chatsMessages[message.cgid]) {\n            chatsMessages[message.cgid] = [message];\n        } else {\n            chatsMessages[message.cgid].push(message);\n        }\n        return message;\n    });\n\n    const updatedChats = {};\n    Object.keys(chatsMessages).forEach(cgid => {\n        const chat = getChat(cgid);\n        if (chat && (chat.id || chat.isRobot) && chat.isMember(profile.userId)) {\n            chat.addMessages(chatsMessages[cgid], profile.userId, muted, skipOld);\n            if (muted) {\n                chat.muteNotice();\n            }\n            updatedChats[cgid] = chat;\n        }\n    });\n\n    updateChats(updatedChats);\n\n    return saveChatMessages(messagesForUpdate);\n};\n\n/**\n * 移除本地（未发送成功）的聊天消息\n * @param {ChatMessage} message 要移除的聊天消息\n * @return {Promise}\n */\nexport const deleteLocalMessage = (message) => {\n    if (message.id) {\n        return Promise.reject(new Error('Cannot delete a remote chat message.'));\n    }\n    const chat = getChat(message.cgid);\n    chat.removeMessage(message.gid);\n    Events.emitDataChange({chats: {[chat.gid]: chat}});\n    return db.database.chatMessages.delete(message.gid);\n};\n\n/**\n * 获取聊天消息数目\n * @param {string} cgid 聊天 GID\n * @param {function(message: ChatMessage)} filter 过滤回调函数\n * @return {Promise<number>}\n */\nexport const countChatMessages = (cgid, filter) => {\n    let collection = db.database.chatMessages.where({cgid});\n    if (filter) {\n        collection = collection.and(filter);\n    }\n    return collection.count();\n};\n\n/**\n * 获取聊天消息\n * @param {Chat} chat 聊天对象\n * @param {function(message: ChatMessage)} queryCondition 查询过滤函数\n * @param {number} [limit=CHATS_LIMIT_DEFAULT] 最多返回数目\n * @param {number} [offset=0] 要略过的数目\n * @param {boolean} [reverse=true] 是否已倒序返回\n * @param {boolean} [skipAdd=true] 是否忽略添加到聊天消息缓存中\n * @param {boolean} [rawData=false] 是否返回原始数据而不是 ChatMessage\n * @param {boolean} [returnCount=false] 是否仅仅返回数目\n * @return {Promise}\n */\nexport const getChatMessages = (chat, queryCondition, limit = CHATS_LIMIT_DEFAULT, offset = 0, reverse = true, skipAdd = true, rawData = false, returnCount = false) => {\n    // console.log('getChatMessages', {chat, queryCondition, limit, offset, reverse, skipAdd, rawData, returnCount});\n    if (!db.database || !db.database.chatMessages) {\n        return Promise.resolve([]);\n    }\n    const cgid = chat ? chat.gid : null;\n    let collection = db.database.chatMessages.orderBy('id').and(x => {\n        return (!cgid || x.cgid === cgid) && (!queryCondition || queryCondition(x));\n    });\n    if (reverse) {\n        collection = collection.reverse();\n    }\n    if (offset) {\n        collection = collection.offset(offset);\n    }\n    if (limit) {\n        collection = collection.limit(limit);\n    }\n    if (returnCount) {\n        return collection.count(count => {\n            return Promise.resolve({gid: cgid, count, chat});\n        });\n    }\n    return collection.toArray(chatMessages => {\n        if (chatMessages && chatMessages.length) {\n            const result = rawData ? chatMessages : chatMessages.map(createChatMessage);\n            if (!skipAdd && cgid) {\n                chat.addMessages(result, profile.userId, true);\n                Events.emitDataChange({chats: {[cgid]: chat}});\n            }\n            return Promise.resolve(result);\n        }\n        return Promise.resolve([]);\n    });\n};\n\n/**\n * 当前聊天消息查询任务队列是否正忙\n * @type {boolean}\n * @private\n */\nlet isGetChatMessagesQueueBusy = false;\n\n/**\n * 当前聊天消息查询队列\n * @type {Array}\n * @private\n */\nconst fetchChatMessagesQueue = [];\n\n/**\n * 监听当指定 ID 的消息查询任务完成事件\n * @param {string} queueId 聊天消息查询任务 ID\n * @param {Function} listener 事件回调函数\n * @return {Symbol}\n */\nexport const onFetchQueueFinish = (queueId, listener) => {\n    return Events.once(`${EVENT.fetchQueueFinish}${queueId}`, listener);\n};\n\n/**\n * 处理聊天消息查询队列任务\n * @private\n * @return {void}\n */\nconst processChatMessageQueue = () => {\n    if (isGetChatMessagesQueueBusy) {\n        return;\n    }\n    if (fetchChatMessagesQueue.length) {\n        isGetChatMessagesQueueBusy = true;\n        const queueData = fetchChatMessagesQueue.pop();\n        const {\n            queueId, chat, queryCondition, limit, offset, reverse, skipAdd, rawData, returnCount,\n        } = queueData;\n        const handleChatMessageQueueResult = result => {\n            Events.emit(`${EVENT.fetchQueueFinish}${queueId}`, result);\n            isGetChatMessagesQueueBusy = false;\n            processChatMessageQueue();\n        };\n        getChatMessages(getChat(chat), queryCondition, limit, offset, reverse, skipAdd, rawData, returnCount).then(handleChatMessageQueueResult).catch(handleChatMessageQueueResult);\n    }\n};\n\n/**\n * 通过消息查询任务队列获取聊天消息\n * @param {Chat} chat 聊天对象\n * @param {function(message: ChatMessage)} queryCondition 查询过滤函数\n * @param {number} [limit=CHATS_LIMIT_DEFAULT] 最多返回数目\n * @param {number} [offset=0] 要略过的数目\n * @param {boolean} [reverse=true] 是否已倒序返回\n * @param {boolean} [skipAdd=true] 是否忽略添加到聊天消息缓存中\n * @param {boolean} [rawData=false] 是否返回原始数据而不是 ChatMessage\n * @param {boolean} [returnCount=false] 是否仅仅返回数目\n * @return {Promise}\n */\nexport const getChatMessagesInQueue = (chat, queryCondition, limit = CHATS_LIMIT_DEFAULT, offset = 0, reverse = true, skipAdd = true, rawData = false, returnCount = false) => {\n    return new Promise((resolve, reject) => {\n        const queueData = {\n            chat: chat.gid, queryCondition, limit, offset, reverse, skipAdd, rawData, returnCount,\n        };\n        const queueId = Md5(JSON.stringify(queueData));\n        queueData.queueId = queueId;\n        if (!isGetChatMessagesQueueBusy || fetchChatMessagesQueue.every(x => x.queueId !== queueId)) {\n            fetchChatMessagesQueue.push(queueData);\n        }\n        onFetchQueueFinish(queueId, result => {\n            if (result instanceof Error) {\n                reject(result);\n            } else {\n                resolve(result);\n            }\n        });\n        processChatMessageQueue();\n    });\n};\n\n/**\n * 加载指定聊天消息\n *\n * @param {Chat} chat 要加载的聊天实例\n * @param {boolean} [inQueue=true] 是否通过任务队列模式\n * @return {Promise}\n */\nexport const loadChatMessages = (chat, inQueue = true) => {\n    let {loadingOffset} = chat;\n    if (loadingOffset === true) {\n        return Promise.reject();\n    }\n    if (!loadingOffset) {\n        loadingOffset = 0;\n    }\n    const limit = loadingOffset ? 20 : CHATS_LIMIT_DEFAULT;\n    return (inQueue ? getChatMessagesInQueue : getChatMessages)(chat, null, limit, loadingOffset, true, false).then(chatMessages => {\n        if (!chatMessages || chatMessages.length < limit) {\n            loadingOffset = true;\n        } else {\n            loadingOffset += limit;\n        }\n        chat.loadingOffset = loadingOffset;\n        return Promise.resolve(chatMessages);\n    });\n};\n\n/**\n * 搜索指定聊天记录\n * @param {Chat} chat 要搜索的聊天实例\n * @param {string} searchKeys 搜索关键词，多个关键字使用空格分隔\n * @param {number} minDate 最小日期时间戳，只搜索此日期之后的聊天记录\n * @param {bool} [returnCount=false] 是否只返回结果数目\n * @return {Promise}\n */\nexport const searchChatMessages = (chat, searchKeys = '', minDate = 0, returnCount = false) => {\n    if (typeof minDate === 'string') {\n        minDate = getTimeBeforeDesc(minDate);\n    }\n    const keys = searchKeys.toLowerCase().split(' ');\n    return getChatMessages(chat, msg => {\n        if (!msg.id || (minDate && msg.date < minDate)) {\n            return false;\n        }\n        for (const key of keys) {\n            if (key === '[image]') {\n                if (msg.contentType !== 'image') {\n                    return false;\n                }\n            } else if (key === '[file]') {\n                if (msg.contentType !== 'file') {\n                    return false;\n                }\n            } else if (msg.contentType === 'text' || msg.content.length < 200) {\n                if (!msg.content || !msg.content.toLowerCase().includes(key)) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }, 0, 0, true, true, false, returnCount);\n};\n\n/**\n * 创建获取消息记录数目队列任务\n * @param {Array.<Chat>} countChats 要获取消息记录数目的聊天对象实例\n * @param {string} searchKeys 搜索关键字\n * @param {number} minDateDesc 最小日期描述\n * @return {TaskQueue}\n */\nexport const createCountMessagesTask = (countChats, searchKeys, minDateDesc = '') => {\n    const minDate = minDateDesc ? getTimeBeforeDesc(minDateDesc) : 0;\n    const taskQueue = new TaskQueue();\n    taskQueue.add(countChats.map(chat => {\n        return {func: searchChatMessages.bind(null, chat, searchKeys, minDate, true), chat};\n    }));\n    return taskQueue;\n};\n\n/**\n * 更新缓存中的聊天对象实例\n * @param {Array.<Chat|Object>} chatArr 要更新的聊天对象\n * @return {void}\n */\nexport const updateChats = (chatArr) => {\n    if (!chatArr) return;\n\n    if (!Array.isArray(chatArr)) {\n        if (chatArr instanceof Chat) {\n            chatArr = [chatArr];\n        }\n    }\n\n    let newchats = null;\n    if (Array.isArray(chatArr) && chatArr.length) {\n        newchats = {};\n        chatArr.forEach(chat => {\n            chat = Chat.create(chat);\n            if (chat.visible) {\n                newchats[chat.gid] = chat;\n            }\n        });\n    } else {\n        newchats = chatArr;\n    }\n\n    if (newchats && Object.keys(newchats).length) {\n        Object.assign(chats, newchats);\n        Events.emitDataChange({chats: newchats});\n    }\n};\n\n/**\n * 初始化缓存中的聊天对象实例\n * @param {Array.<Chat|Object>} chatArr 要更新的聊天对象\n * @param {function(chat: Chat)} eachCallback 遍历每一个被缓存的聊天对象回调函数\n * @return {void}\n */\nexport const initChats = (chatArr, eachCallback) => {\n    publicChats = null;\n    chats = {};\n    if (chatArr && chatArr.length) {\n        chatArr.push({\n            gid: 'littlexx',\n            name: Lang.string('common.littlexx'),\n            type: 'robot',\n            lastActiveTime: new Date().getTime() - Math.floor(MAX_RECENT_TIME / 2),\n            members: [profile.user.id]\n        });\n        updateChats(chatArr);\n        forEachChat(chat => {\n            if (chat.isOne2One) {\n                const member = chat.getTheOtherOne(app);\n                if (member.temp) {\n                    chat.isDeleteOne2One = true;\n                    Server.tryGetTempUserInfo(member.id);\n                }\n            }\n            chat.renewUpdateId();\n            delete chat.loadingOffset;\n            if (eachCallback) {\n                eachCallback(chat);\n            }\n        });\n        Events.emit(EVENT.init, chats);\n    }\n};\n\n/**\n * 获取缓存中所有聊天对象实例\n * @return {Array.<Chat>}\n */\nexport const getAllChats = () => {\n    return chats ? Object.keys(chats).map(x => chats[x]) : [];\n};\n\n/**\n * 从缓存中查询聊天实例\n * @param {Object|Function(chat: Chat)|Array<Function(chat: Chat)>} condition 查询条件\n * @param {*} sortList 是否对结果进行排序\n * @return {Array.<Chat>}\n */\nexport const queryChats = (condition, sortList) => {\n    if (!chats) {\n        return [];\n    }\n    let result = null;\n    if (typeof condition === 'object') {\n        const conditionObj = condition;\n        const conditionKeys = Object.keys(conditionObj);\n        condition = chat => {\n            for (const key of conditionKeys) {\n                if (conditionObj[key] !== chat[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }\n    if (typeof condition === 'function') {\n        result = [];\n        forEachChat(chat => {\n            if (condition(chat)) {\n                result.push(chat);\n            }\n        });\n    } else if (Array.isArray(condition)) {\n        result = [];\n        condition.forEach(x => {\n            const chat = getChat(x);\n            if (chat) {\n                result.push(chat);\n            }\n        });\n    } else {\n        result = getAllChats();\n    }\n    if (sortList && result && result.length) {\n        Chat.sort(result, sortList, app);\n    }\n    return result || [];\n};\n\n/**\n * 获取最近激活的聊天\n * @param {bool} [includeStar=true] 是否包含收藏的聊天\n * @param {boolean|String|Function} sortList 是否排序或者指定排序规则\n * @return {Array.<Chat>}\n */\nexport const getRecentChats = (includeStar = true, sortList = true) => {\n    const all = getAllChats();\n    let recents = null;\n    if (all.length < 4) {\n        recents = all;\n    } else {\n        const now = new Date().getTime();\n        recents = all.filter(chat => {\n            return (chat.noticeCount || (!chat.mute && !chat.hidden)) && !chat.isDeleteOne2One && !chat.isDismissed && (chat.noticeCount || (includeStar && chat.star) || (chat.lastActiveTime && (now - chat.lastActiveTime) <= MAX_RECENT_TIME));\n        });\n        if (!recents.length) {\n            recents = all.filter(chat => chat.isSystem);\n        }\n    }\n    if (sortList) {\n        Chat.sort(recents, sortList, app);\n    }\n    return recents;\n};\n\n/**\n * 获取最近一次激活的聊天\n * @return {Chat}\n */\nexport const getLastRecentChat = () => {\n    let lastActiveTime = 0;\n    let lastRecentChat = null;\n    forEachChat(chat => {\n        if (!chat.isDeleteOne2One && !chat.isDismissed && lastActiveTime < chat.lastActiveTime) {\n            // eslint-disable-next-line prefer-destructuring\n            lastActiveTime = chat.lastActiveTime;\n            lastRecentChat = chat;\n        }\n    });\n    if (!lastRecentChat) {\n        lastRecentChat = getAllChats().find(x => x.isSystem);\n    }\n    return lastRecentChat;\n};\n\n/**\n * 获取与指定联系人关联的一对一聊天\n * @param {Member|Object} member 联系人\n * @return {Chat}\n */\nexport const getContactChat = (member) => {\n    const membersId = [member.id, profile.user.id].sort();\n    const gid = membersId.join('&');\n    return getChat(gid);\n};\n\n/**\n * 获取一对一聊天\n * @param {boolean|String|Function} sortList 是否排序或者指定排序规则\n * @param {boolean} [groupedBy=false] 是否按分组返回结果\n * @return {Object|Array.<Chat>}\n */\nexport const getContactsChats = (sortList = 'onlineFirst', groupedBy = false) => {\n    const {user} = profile;\n    let contactChats = [];\n    if (!user) {\n        return contactChats;\n    }\n\n    const contactChatMap = {};\n    members.forEach(member => {\n        if (member.id !== profile.user.id) {\n            contactChatMap[member.id] = getContactChat(member, true);\n        }\n    });\n\n    queryChats(x => x.isOne2One).forEach(theChat => {\n        if (!contactChatMap[theChat.id]) {\n            const member = theChat.getTheOtherOne(app);\n            contactChatMap[member.id] = theChat;\n        }\n    });\n\n    contactChats = Object.keys(contactChatMap).map(x => contactChatMap[x]);\n\n    if (groupedBy === 'role') {\n        const groupedContactChats = {};\n        contactChats.forEach(chat => {\n            const member = chat.getTheOtherOne(app);\n            const isDeleteOne2One = member.isDeleted;\n            if (isDeleteOne2One) {\n                chat.isDeleteOne2One = isDeleteOne2One;\n            }\n            const isMemberOnline = member.isOnline;\n            const role = member.role || '';\n            const groupName = isDeleteOne2One ? Lang.string('chats.menu.group.deleted') : members.getRoleName(role);\n            const groupId = isDeleteOne2One ? '_delete' : role;\n            if (!groupedContactChats[groupId]) {\n                groupedContactChats[groupId] = {\n                    id: groupId, title: groupName, list: [chat], onlineCount: isMemberOnline ? 1 : 0\n                };\n                if (isDeleteOne2One) {\n                    groupedContactChats[groupId].system = true;\n                }\n            } else {\n                groupedContactChats[groupId].list.push(chat);\n                if (isMemberOnline) {\n                    groupedContactChats[groupId].onlineCount += 1;\n                }\n            }\n        });\n        const orders = profile.user.config.contactsOrderRole;\n        return Object.keys(groupedContactChats).map(role => {\n            const group = groupedContactChats[role];\n            if (sortList) {\n                Chat.sort(group.list, sortList, app);\n            }\n            return group;\n        }).sort((g1, g2) => {\n            let result = (g2.system ? 1 : 0) - (g1.system ? 1 : 0);\n            if (result === 0) {\n                result = (g1.id ? (orders[g1.id] || 1) : 0) - (g2.id ? (orders[g2.id] || 1) : 0);\n            }\n            if (result === 0) {\n                result = g1.id > g2.id ? 1 : 0;\n            }\n            return -result;\n        });\n    }\n    if (groupedBy === 'dept') {\n        const groupsMap = {};\n        Object.keys(members.depts).forEach(deptId => {\n            const dept = members.depts[deptId];\n            groupsMap[deptId] = {\n                id: deptId,\n                title: dept.name,\n                dept,\n                list: [],\n                onlineCount: 0\n            };\n        });\n        contactChats.forEach(chat => {\n            const member = chat.getTheOtherOne(app);\n            const isDeleteOne2One = member.isDeleted;\n            if (isDeleteOne2One) {\n                chat.isDeleteOne2One = isDeleteOne2One;\n            }\n            const isMemberOnline = member.isOnline;\n            const groupId = isDeleteOne2One ? '_delete' : member.dept;\n            if (groupsMap[groupId]) {\n                groupsMap[groupId].list.push(chat);\n                if (isMemberOnline) {\n                    groupsMap[groupId].onlineCount += 1;\n                }\n            } else {\n                const dept = members.getDept(groupId);\n                const groupName = isDeleteOne2One ? Lang.string('chats.menu.group.deleted') : (dept && dept.name);\n                groupsMap[groupId] = {\n                    id: groupId,\n                    title: groupName,\n                    dept,\n                    list: [chat],\n                    onlineCount: isMemberOnline ? 1 : 0\n                };\n                if (isDeleteOne2One) {\n                    groupsMap[groupId].system = true;\n                }\n            }\n        });\n        const groupArr = Object.keys(groupsMap).map(deptId => {\n            const group = groupsMap[deptId];\n            const {dept} = group;\n            if (dept) {\n                if (dept.children) {\n                    group.children = dept.children.map(x => groupsMap[x.id]);\n                }\n                if (dept.parents) {\n                    group.hasParent = true;\n                }\n            }\n            group.type = 'group';\n            group.order = dept && dept.order;\n            if (sortList) {\n                Chat.sort(group.list, sortList, app);\n            }\n            return group;\n        });\n        const deptsSorter = (d1, d2) => {\n            let result = (d1.system ? 1 : 0) - (d2.system ? 1 : 0);\n            if (result === 0) {\n                result = (d2.list && d2.list.length ? 1 : 0) - (d1.list && d1.list.length ? 1 : 0);\n            }\n            if (result === 0) {\n                result = (d2.dept ? 1 : 0) - (d1.dept ? 1 : 0);\n            }\n            return result !== 0 ? result : members.deptsSorter(d1, d2);\n        };\n        return groupArr.map(x => {\n            if (x.children) {\n                x.children.sort(deptsSorter);\n                const list = x.children;\n                if (x.list) {\n                    list.push(...x.list);\n                }\n                x.list = list;\n            }\n            if (x.type === 'group' && x.dept && x.dept.children && x.dept.children.length === x.list.length) {\n                x.onlySubGroup = true;\n            }\n            return x;\n        }).filter(x => !x.hasParent).sort(deptsSorter);\n    }\n    if (groupedBy === 'category') {\n        const groupedChats = {};\n        contactChats.forEach(chat => {\n            const member = chat.getTheOtherOne(app);\n            const isDeleteOne2One = member.isDeleted;\n            if (isDeleteOne2One) {\n                chat.isDeleteOne2One = isDeleteOne2One;\n            }\n            const categoryId = isDeleteOne2One ? '_delete' : (chat.category || '');\n            const categoryName = isDeleteOne2One ? Lang.string('chats.menu.group.deleted') : (categoryId || user.config.contactsDefaultCategoryName);\n            const isMemberOnline = member.isOnline;\n            if (!groupedChats[categoryId]) {\n                groupedChats[categoryId] = {\n                    id: categoryId, title: categoryName || Lang.string('chats.menu.group.default'), list: [chat], onlineCount: isMemberOnline ? 1 : 0,\n                };\n                if (isDeleteOne2One) {\n                    groupedChats[categoryId].system = true;\n                }\n            } else {\n                groupedChats[categoryId].list.push(chat);\n                if (isMemberOnline) {\n                    groupedChats[categoryId].onlineCount += 1;\n                }\n            }\n        });\n        const categories = user.config.contactsCategories;\n        let needSaveOrder = false;\n        const orderedGroups = Object.keys(groupedChats).map(categoryId => {\n            const group = groupedChats[categoryId];\n            let savedCategory = categories[categoryId];\n            if (!savedCategory) {\n                const order = timeSequence();\n                savedCategory = {\n                    order,\n                    key: order\n                };\n                categories[categoryId] = savedCategory;\n                needSaveOrder = true;\n            }\n            Object.assign(group, savedCategory);\n            if (sortList) {\n                Chat.sort(group.list, sortList, app);\n            }\n            return group;\n        }).sort((g1, g2) => {\n            let result = g2.order - g1.order;\n            if (result === 0) {\n                result = g1.id > g2.id ? -1 : 1;\n            }\n            return -result;\n        });\n        if (needSaveOrder) {\n            user.config.contactsCategories = categories;\n        }\n        return orderedGroups;\n    }\n    if (sortList) {\n        Chat.sort(contactChats, sortList, app);\n    }\n    return contactChats;\n};\n\n/**\n * 获取讨论组聊天\n * @param {boolean|String|Function} sortList 是否排序或者指定排序规则\n * @param {boolean} [groupedBy=false] 是否按分组返回结果\n * @return {Object|Array.<Chat>}\n */\nexport const getGroupsChats = (sortList = true, groupedBy = false) => {\n    const {user} = profile;\n    if (!user) {\n        return [];\n    }\n    const groupChats = queryChats(chat => chat.isGroupOrSystem, sortList);\n    if (groupedBy === 'category') {\n        const groupedChats = {};\n        groupChats.forEach(chat => {\n            const {isDismissed} = chat;\n            const isHidden = chat.hide;\n            const categoryId = isDismissed ? '_dismissed' : isHidden ? '_hidden' : (chat.category || '');\n            const categoryName = isDismissed ? Lang.string('chats.menu.group.dismissed') : isHidden ? Lang.string('chats.menu.group.hidden') : (categoryId || user.config.groupsDefaultCategoryName);\n            if (!groupedChats[categoryId]) {\n                groupedChats[categoryId] = {id: categoryId, title: categoryName || Lang.string('chats.menu.group.default'), list: [chat]};\n                if (isDismissed || isHidden) {\n                    groupedChats[categoryId].system = true;\n                }\n            } else {\n                groupedChats[categoryId].list.push(chat);\n            }\n        });\n        const groupKeys = Object.keys(groupedChats);\n        if (groupKeys.length === 1 && !groupKeys[0]) {\n            return groupChats;\n        }\n        const categories = user.config.groupsCategories;\n        let needSaveOrder = false;\n        const orderedGroups = groupKeys.map(categoryId => {\n            const group = groupedChats[categoryId];\n            let savedCategory = categories[categoryId];\n            if (!savedCategory) {\n                const order = categoryId === '_dismissed' ? 999999999999 : timeSequence();\n                savedCategory = {\n                    order,\n                    key: order\n                };\n                categories[categoryId] = savedCategory;\n                needSaveOrder = true;\n            }\n            Object.assign(group, savedCategory);\n            if (sortList) {\n                Chat.sort(group.list, sortList, app);\n            }\n            return group;\n        }).sort((g1, g2) => {\n            let result = g2.order - g1.order;\n            if (result === 0) {\n                result = g1.id > g2.id ? 1 : -1;\n            }\n            return -result;\n        });\n        if (needSaveOrder) {\n            user.config.groupsCategories = categories;\n        }\n        return orderedGroups;\n    }\n    return groupChats;\n};\n\n/**\n * 获取聊天分组信息\n * @param {string} type 类型，包括 contact（联系人），group（讨论组）\n * @return {Array.<Object>}\n */\nexport const getChatCategories = (type = 'contact') => {\n    if (type === 'contact') {\n        return getContactsChats(false, 'category');\n    }\n    if (type === 'group') {\n        const groups = getGroupsChats(false, 'category');\n        if (groups.length && groups[0].entityType === 'Chat') {\n            return [];\n        }\n        return groups;\n    }\n    return [];\n};\n\n/**\n * 搜索聊天\n * @param {string} searchKeys 搜索关键字，多个关键字使用空格分隔\n * @param {string} chatType 聊天类型，包括 contacts（联系人），groups（讨论组）\n * @return {Array.<Chat>}\n */\nexport const searchChats = (searchKeys, chatType) => {\n    if (StringHelper.isEmpty(searchKeys)) {\n        return [];\n    }\n    searchKeys = searchKeys.trim().toLowerCase().split(' ');\n    if (!searchKeys.length) {\n        return [];\n    }\n\n    const isContactsType = chatType === 'contacts';\n    const isGroupsType = chatType === 'groups';\n    const hasChatType = isContactsType || isGroupsType;\n\n    if (!hasChatType || isContactsType) {\n        getContactsChats();\n    }\n\n    const caculateScore = (sKey, findIn) => {\n        if (StringHelper.isEmpty(sKey) || StringHelper.isEmpty(findIn)) {\n            return 0;\n        }\n        if (sKey === findIn) {\n            return SEARCH_SCORE_MAP.matchAll;\n        }\n        const idx = findIn.indexOf(sKey);\n        return idx === 0 ? SEARCH_SCORE_MAP.matchPrefix : (idx > 0 ? SEARCH_SCORE_MAP.include : 0);\n    };\n\n    return queryChats(chat => {\n        const chatGid = chat.gid.toLowerCase();\n        if (hasChatType) {\n            if ((isContactsType && !chat.isOne2One) || (isGroupsType && !chat.isGroupOrSystem)) {\n                return;\n            }\n        }\n\n        // Do not show delete one2one chat in search result\n        if (chat.isDeleteOne2One) {\n            return;\n        }\n\n        let score = 0;\n        const chatName = chat.getDisplayName(app, false).toLowerCase();\n        const pinYin = chat.getPinYin(app);\n        let theOtherOneAccount = '';\n        let theOtherOneContactInfo = '';\n        if (chat.isOne2One) {\n            const theOtherOne = chat.getTheOtherOne(app);\n            if (theOtherOne) {\n                theOtherOneAccount = theOtherOne.account;\n                theOtherOneContactInfo += (theOtherOne.email || '') + (theOtherOne.mobile || '');\n            } else if (DEBUG) {\n                console.warn('Cannot get the other one of chat', chat);\n            }\n        }\n        searchKeys.forEach(s => {\n            if (StringHelper.isEmpty(s)) {\n                return;\n            }\n            if (s.length > 1) {\n                if (s[0] === '#') { // id\n                    s = s.substr(1);\n                    score += 2 * caculateScore(s, chatGid);\n                    if (chat.isSystem || chat.isGroup) {\n                        score += 2 * caculateScore(s, chatName);\n                        if (chat.isSystem) {\n                            score += 2 * caculateScore(s, 'system');\n                        }\n                    }\n                } else if (s[0] === '@') { // account or username\n                    s = s.substr(1);\n                    if (chat.isOne2One) {\n                        score += 2 * caculateScore(s, theOtherOneAccount);\n                    }\n                }\n            }\n            score += caculateScore(s, chatName);\n            score += caculateScore(s, pinYin);\n            if (theOtherOneContactInfo) {\n                score += caculateScore(s, theOtherOneContactInfo);\n            }\n        });\n        chat.score = score;\n        return score > 0;\n    }, ((x, y) => x.score - y.score));\n};\n\n/**\n * 从缓存中移除指定 GID 的聊天\n * @param {string} gid 要移除的聊天 GID\n * @return {boolean} 移除结果\n */\nexport const removeChat = gid => {\n    const removedChat = chats[gid];\n    if (removedChat) {\n        removedChat.delete = true;\n        delete chats[gid];\n        Events.emitDataChange({chats: {[gid]: removedChat}});\n        return true;\n    }\n    return false;\n};\n\n/**\n * 获取指定聊天中发送和接收的文件\n * @param {string} chat 聊天实例\n * @param {bool} [includeFailFile=false] 是否包含发送失败的文件\n * @return {Promise}\n */\nexport const getChatFiles = (chat, includeFailFile = false) => {\n    return getChatMessages(chat, (x => x.contentType === 'file'), 0).then(fileMessages => {\n        let files = null;\n        if (fileMessages && fileMessages.length) {\n            if (includeFailFile) {\n                files = fileMessages.map(fileMessage => fileMessage.fileContent);\n            } else {\n                files = [];\n                fileMessages.forEach(fileMessage => {\n                    const {fileContent} = fileMessage;\n                    if (fileContent.send === true && fileContent.id) {\n                        files.push(fileContent);\n                    }\n                });\n            }\n        }\n        return Promise.resolve(files || []);\n    });\n};\n\n/**\n * 获取缓存中所有公共聊天\n * @return {Array.<chat>}\n */\nexport const getPublicChats = () => (publicChats || []);\n\n/**\n * 更新缓存中的公共聊天\n * @param {Array.<Object>|Object} serverPublicChats 要更新的公共聊天\n * @return {void}\n */\nexport const updatePublicChats = (serverPublicChats) => {\n    publicChats = [];\n    if (serverPublicChats) {\n        if (!Array.isArray(serverPublicChats)) {\n            serverPublicChats = [serverPublicChats];\n        }\n        if (serverPublicChats.length) {\n            serverPublicChats.forEach(chat => {\n                chat = Chat.create(chat);\n                publicChats.push(chat);\n            });\n        }\n    }\n    Events.emitDataChange({publicChats});\n};\n\n/**\n * 监听缓存聊天初始化事件（第一次从服务器获得到聊天列表）\n * @param {Function(chats: Array<Chat>)} listener 事件回调函数\n * @return {Symbol}\n */\nexport const onChatsInit = listener => {\n    return Events.on(EVENT.init, listener);\n};\n\n/**\n * 监听聊天消息变更事件（例如用户收到了新消息）\n * @param {Function(chats: Array<ChatMessage>)} listener 事件回调函数\n * @return {Symbol}\n */\nexport const onChatMessages = listener => {\n    return Events.on(EVENT.messages, listener);\n};\n\n// 监听用户资料变更事件，通常在用户登录之后\nprofile.onSwapUser(user => {\n    // 将上一个用户的聊天缓存数据清空\n    initChats();\n});\n\n// 监听用户成员变更事件\nmembers.onMembersChange(newMembers => {\n    // 遍历每一个聊天，标记聊天已更新\n    forEachChat(chat => {\n        chat._membersSet = null;\n        chat.renewUpdateId();\n    });\n});\n\nexport default {\n    init: initChats,\n    update: updateChats,\n    get: getChat,\n    getAll: getAllChats,\n    getRecents: getRecentChats,\n    forEach: forEachChat,\n    getLastActiveChat,\n    query: queryChats,\n    remove: removeChat,\n    search: searchChats,\n    getChatFiles,\n    deleteLocalMessage,\n    getChatMessages,\n    updateChatMessages,\n    saveChatMessages,\n    getPublicChats,\n    updatePublicChats,\n    getContactsChats,\n    getGroups: getGroupsChats,\n    onChatsInit,\n    onChatMessages,\n    getOne2OneChatGid,\n    countChatMessages,\n    createCountMessagesTask,\n    searchChatMessages,\n    getChatCategories,\n    getLastRecentChat,\n    loadChatMessages,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/im/im-chats.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "name": "CHATS_LIMIT_DEFAULT",
    "memberof": "app/core/im/im-chats.js",
    "static": true,
    "longname": "app/core/im/im-chats.js~CHATS_LIMIT_DEFAULT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": null,
    "description": "从运行时配置读取默认每次加载聊天记录条目的数目",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 382,
    "kind": "variable",
    "name": "MAX_RECENT_TIME",
    "memberof": "app/core/im/im-chats.js",
    "static": true,
    "longname": "app/core/im/im-chats.js~MAX_RECENT_TIME",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": null,
    "description": "默认标记为最近聊天最大过去时间，单位毫秒",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 383,
    "kind": "variable",
    "name": "SEARCH_SCORE_MAP",
    "memberof": "app/core/im/im-chats.js",
    "static": true,
    "longname": "app/core/im/im-chats.js~SEARCH_SCORE_MAP",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": null,
    "description": "搜索权值计算表",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 384,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/im/im-chats.js",
    "static": true,
    "longname": "app/core/im/im-chats.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": null,
    "description": "事件名称表",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 385,
    "kind": "variable",
    "name": "chats",
    "memberof": "app/core/im/im-chats.js",
    "static": true,
    "longname": "app/core/im/im-chats.js~chats",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": null,
    "description": "所有聊天实例对象表",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 386,
    "kind": "variable",
    "name": "publicChats",
    "memberof": "app/core/im/im-chats.js",
    "static": true,
    "longname": "app/core/im/im-chats.js~publicChats",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": null,
    "description": "公开聊天实例对象表",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 387,
    "kind": "variable",
    "name": "app",
    "memberof": "app/core/im/im-chats.js",
    "static": true,
    "longname": "app/core/im/im-chats.js~app",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": null,
    "description": "用于方便获取用户信息的对象",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 388,
    "kind": "function",
    "name": "forEachChat",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~forEachChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{forEachChat}",
    "description": "遍历当前用户的每一个聊天",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function(chat: Chat)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "遍历回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 389,
    "kind": "function",
    "name": "getChat",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getChat}",
    "description": "根据 GID 获取聊天对象",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "gid",
        "description": "聊天 GID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 390,
    "kind": "function",
    "name": "createChatMessage",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~createChatMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{createChatMessage}",
    "description": "创建一个聊天消息实例",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "聊天消息存储对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChatMessage"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 391,
    "kind": "function",
    "name": "getOne2OneChatGid",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getOne2OneChatGid",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getOne2OneChatGid}",
    "description": "获取一对一聊天 GID",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "members",
        "description": "一对一聊天成员 ID 列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 392,
    "kind": "function",
    "name": "getLastActiveChat",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getLastActiveChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getLastActiveChat}",
    "description": "获取上次激活的聊天",
    "lineNumber": 155,
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 393,
    "kind": "function",
    "name": "saveChatMessages",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~saveChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{saveChatMessages}",
    "description": "保存聊天消息到数据库",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<ChatMessage>"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "聊天消息列表"
      },
      {
        "nullable": true,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "要保存的聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 394,
    "kind": "function",
    "name": "updateChatMessages",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~updateChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{updateChatMessages}",
    "description": "更新缓存中的聊天消息",
    "lineNumber": 195,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "聊天消息列表"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "muted",
        "description": "是否忽略未读提示"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "skipOld",
        "description": "是否跳过已更新的消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "deleteLocalMessage",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~deleteLocalMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{deleteLocalMessage}",
    "description": "移除本地（未发送成功）的聊天消息",
    "lineNumber": 235,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "要移除的聊天消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "countChatMessages",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~countChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{countChatMessages}",
    "description": "获取聊天消息数目",
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cgid",
        "description": "聊天 GID"
      },
      {
        "nullable": null,
        "types": [
          "function(message: ChatMessage)"
        ],
        "spread": false,
        "optional": false,
        "name": "filter",
        "description": "过滤回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 397,
    "kind": "function",
    "name": "getChatMessages",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getChatMessages}",
    "description": "获取聊天消息",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      },
      {
        "nullable": null,
        "types": [
          "function(message: ChatMessage)"
        ],
        "spread": false,
        "optional": false,
        "name": "queryCondition",
        "description": "查询过滤函数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "CHATS_LIMIT_DEFAULT",
        "defaultRaw": "CHATS_LIMIT_DEFAULT",
        "name": "limit",
        "description": "最多返回数目"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "offset",
        "description": "要略过的数目"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "reverse",
        "description": "是否已倒序返回"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "skipAdd",
        "description": "是否忽略添加到聊天消息缓存中"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "rawData",
        "description": "是否返回原始数据而不是 ChatMessage"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "returnCount",
        "description": "是否仅仅返回数目"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 398,
    "kind": "variable",
    "name": "isGetChatMessagesQueueBusy",
    "memberof": "app/core/im/im-chats.js",
    "static": true,
    "longname": "app/core/im/im-chats.js~isGetChatMessagesQueueBusy",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": null,
    "description": "当前聊天消息查询任务队列是否正忙",
    "lineNumber": 312,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 399,
    "kind": "variable",
    "name": "fetchChatMessagesQueue",
    "memberof": "app/core/im/im-chats.js",
    "static": true,
    "longname": "app/core/im/im-chats.js~fetchChatMessagesQueue",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": null,
    "description": "当前聊天消息查询队列",
    "lineNumber": 319,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 400,
    "kind": "function",
    "name": "onFetchQueueFinish",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~onFetchQueueFinish",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{onFetchQueueFinish}",
    "description": "监听当指定 ID 的消息查询任务完成事件",
    "lineNumber": 327,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "queueId",
        "description": "聊天消息查询任务 ID"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 401,
    "kind": "function",
    "name": "processChatMessageQueue",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~processChatMessageQueue",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": null,
    "description": "处理聊天消息查询队列任务",
    "lineNumber": 336,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 402,
    "kind": "function",
    "name": "getChatMessagesInQueue",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getChatMessagesInQueue",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getChatMessagesInQueue}",
    "description": "通过消息查询任务队列获取聊天消息",
    "lineNumber": 367,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      },
      {
        "nullable": null,
        "types": [
          "function(message: ChatMessage)"
        ],
        "spread": false,
        "optional": false,
        "name": "queryCondition",
        "description": "查询过滤函数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "CHATS_LIMIT_DEFAULT",
        "defaultRaw": "CHATS_LIMIT_DEFAULT",
        "name": "limit",
        "description": "最多返回数目"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "offset",
        "description": "要略过的数目"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "reverse",
        "description": "是否已倒序返回"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "skipAdd",
        "description": "是否忽略添加到聊天消息缓存中"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "rawData",
        "description": "是否返回原始数据而不是 ChatMessage"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "returnCount",
        "description": "是否仅仅返回数目"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 403,
    "kind": "function",
    "name": "loadChatMessages",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~loadChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{loadChatMessages}",
    "description": "加载指定聊天消息",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "要加载的聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "inQueue",
        "description": "是否通过任务队列模式"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 404,
    "kind": "function",
    "name": "searchChatMessages",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~searchChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{searchChatMessages}",
    "description": "搜索指定聊天记录",
    "lineNumber": 423,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "要搜索的聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchKeys",
        "description": "搜索关键词，多个关键字使用空格分隔"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "minDate",
        "description": "最小日期时间戳，只搜索此日期之后的聊天记录"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "returnCount",
        "description": "是否只返回结果数目"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 405,
    "kind": "function",
    "name": "createCountMessagesTask",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~createCountMessagesTask",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{createCountMessagesTask}",
    "description": "创建获取消息记录数目队列任务",
    "lineNumber": 460,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Chat>"
        ],
        "spread": false,
        "optional": false,
        "name": "countChats",
        "description": "要获取消息记录数目的聊天对象实例"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchKeys",
        "description": "搜索关键字"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "minDateDesc",
        "description": "最小日期描述"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TaskQueue"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 406,
    "kind": "function",
    "name": "updateChats",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~updateChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{updateChats}",
    "description": "更新缓存中的聊天对象实例",
    "lineNumber": 474,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Chat|Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "chatArr",
        "description": "要更新的聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 407,
    "kind": "function",
    "name": "initChats",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~initChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{initChats}",
    "description": "初始化缓存中的聊天对象实例",
    "lineNumber": 508,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Chat|Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "chatArr",
        "description": "要更新的聊天对象"
      },
      {
        "nullable": null,
        "types": [
          "function(chat: Chat)"
        ],
        "spread": false,
        "optional": false,
        "name": "eachCallback",
        "description": "遍历每一个被缓存的聊天对象回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 408,
    "kind": "function",
    "name": "getAllChats",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getAllChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getAllChats}",
    "description": "获取缓存中所有聊天对象实例",
    "lineNumber": 542,
    "return": {
      "nullable": null,
      "types": [
        "Array.<Chat>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 409,
    "kind": "function",
    "name": "queryChats",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~queryChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{queryChats}",
    "description": "从缓存中查询聊天实例",
    "lineNumber": 552,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "Function(chat: Chat)",
          "Array<Function(chat: Chat)>"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "查询条件"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sortList",
        "description": "是否对结果进行排序"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Chat>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 410,
    "kind": "function",
    "name": "getRecentChats",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getRecentChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getRecentChats}",
    "description": "获取最近激活的聊天",
    "lineNumber": 599,
    "params": [
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "includeStar",
        "description": "是否包含收藏的聊天"
      },
      {
        "nullable": null,
        "types": [
          "boolean",
          "String",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "sortList",
        "description": "是否排序或者指定排序规则"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Chat>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 411,
    "kind": "function",
    "name": "getLastRecentChat",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getLastRecentChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getLastRecentChat}",
    "description": "获取最近一次激活的聊天",
    "lineNumber": 623,
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 412,
    "kind": "function",
    "name": "getContactChat",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getContactChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getContactChat}",
    "description": "获取与指定联系人关联的一对一聊天",
    "lineNumber": 644,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "联系人"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 413,
    "kind": "function",
    "name": "getContactsChats",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getContactsChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getContactsChats}",
    "description": "获取一对一聊天",
    "lineNumber": 656,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean",
          "String",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "sortList",
        "description": "是否排序或者指定排序规则"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "groupedBy",
        "description": "是否按分组返回结果"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array.<Chat>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 414,
    "kind": "function",
    "name": "getGroupsChats",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getGroupsChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getGroupsChats}",
    "description": "获取讨论组聊天",
    "lineNumber": 874,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean",
          "String",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "sortList",
        "description": "是否排序或者指定排序规则"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "groupedBy",
        "description": "是否按分组返回结果"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "Array.<Chat>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 415,
    "kind": "function",
    "name": "getChatCategories",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getChatCategories",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getChatCategories}",
    "description": "获取聊天分组信息",
    "lineNumber": 939,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "类型，包括 contact（联系人），group（讨论组）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Object>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 416,
    "kind": "function",
    "name": "searchChats",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~searchChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{searchChats}",
    "description": "搜索聊天",
    "lineNumber": 959,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchKeys",
        "description": "搜索关键字，多个关键字使用空格分隔"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "chatType",
        "description": "聊天类型，包括 contacts（联系人），groups（讨论组）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Chat>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 417,
    "kind": "function",
    "name": "removeChat",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~removeChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{removeChat}",
    "description": "从缓存中移除指定 GID 的聊天",
    "lineNumber": 1051,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "gid",
        "description": "要移除的聊天 GID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "移除结果"
    }
  },
  {
    "__docId__": 418,
    "kind": "function",
    "name": "getChatFiles",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getChatFiles",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getChatFiles}",
    "description": "获取指定聊天中发送和接收的文件",
    "lineNumber": 1068,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "includeFailFile",
        "description": "是否包含发送失败的文件"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 419,
    "kind": "function",
    "name": "getPublicChats",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~getPublicChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{getPublicChats}",
    "description": "获取缓存中所有公共聊天",
    "lineNumber": 1092,
    "return": {
      "nullable": null,
      "types": [
        "Array.<chat>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 420,
    "kind": "function",
    "name": "updatePublicChats",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~updatePublicChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{updatePublicChats}",
    "description": "更新缓存中的公共聊天",
    "lineNumber": 1099,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Object>",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "serverPublicChats",
        "description": "要更新的公共聊天"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 421,
    "kind": "function",
    "name": "onChatsInit",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~onChatsInit",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{onChatsInit}",
    "description": "监听缓存聊天初始化事件（第一次从服务器获得到聊天列表）",
    "lineNumber": 1120,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function(chats: Array<Chat>)"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 422,
    "kind": "function",
    "name": "onChatMessages",
    "memberof": "app/core/im/im-chats.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-chats.js~onChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-chats.js",
    "importStyle": "{onChatMessages}",
    "description": "监听聊天消息变更事件（例如用户收到了新消息）",
    "lineNumber": 1129,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function(chats: Array<ChatMessage>)"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 423,
    "kind": "file",
    "name": "app/core/im/im-files.js",
    "content": "import {getChatMessages} from './im-chats';\nimport profile from '../profile';\nimport API from '../network/api';\nimport FileData from '../models/file-data';\n\n/**\n * 上传下载进度变更通知最小时间间隔，单位毫秒\n * @type {number}\n * @private\n */\nconst MIN_PROGRESS_CHANGE_INTERVAL = 1000;\n\n/**\n * 检查文件大小是否支持上传到当前服务器\n * @param {number} size 文件大小，单位字节\n * @returns {boolean} 如果返回 `true` 则为支持，否则为不支持\n */\nexport const checkUploadFileSize = (size) => {\n    if (typeof size === 'object') {\n        // eslint-disable-next-line prefer-destructuring\n        size = size.size;\n    }\n    const {uploadFileSize} = profile.user;\n    return uploadFileSize && size <= uploadFileSize;\n};\n\n/**\n * 查询指定类型的文件\n * @param {string} category 文件类别，包括 doc（文档），image（图片），program（程序）\n * @param {number} [limit=0] 返回结果的最大数目限制\n * @param {number} [offset=0] 查询时略过的结果数目\n * @param {boolean} [reverse=true] 是否以倒序返回结果\n * @param {boolean} [returnCount=true] 是否仅仅返回结果数目\n * @return {Promise<FileData[]>} 通过 Promise 异步返回查询到的文件对象\n */\nexport const loadFiles = (category = '', limit = 0, offset = 0, reverse = true, returnCount = false) => {\n    category = category ? category.toLowerCase() : false;\n    return getChatMessages(null, x => x.contentType === 'file', limit, offset, reverse, true, true, returnCount).then(data => {\n        if (data && data.length) {\n            const files = data.map(x => FileData.create(JSON.parse(x.content))).filter(x => ((!category || x.category === category) && x.isOK));\n            return Promise.resolve(files);\n        }\n        return Promise.resolve([]);\n    });\n};\n\n/**\n * 搜索文件\n * @param {string} keys 搜索关键字，包括 doc（文档），image（图片），program（程序）\n * @param {string} category 文件类别\n * @return {Promise<FileData[]>} 通过 Promise 异步返回查询到的文件对象\n */\nexport const searchFiles = (keys, category = '') => {\n    return loadFiles(category).then(files => {\n        keys = keys ? keys.trim().toLowerCase().split(' ') : null;\n        if (keys && keys.length) {\n            const result = [];\n            files.forEach(file => {\n                const score = file.getMatchScore(keys);\n                if (score) {\n                    result.push({score, file});\n                }\n            });\n            result.sort((x, y) => y.score - x.score);\n            return Promise.resolve(result.map(x => x.file));\n        }\n        return Promise.resolve(files);\n    });\n};\n\n/**\n * 上传文件\n * @param {Object|FileData} file 要上传的文件对象\n * @param {function(progress: number, file: FileData)} onProgress 文件上传进度变更回调函数\n * @param {boolean} copyCache 是否将文件拷贝到用户缓存目录\n * @return {Promise<Object>} 异步返回上传结果\n */\nexport const uploadFile = (file, onProgress, copyCache) => {\n    file = FileData.create(file);\n    let progressTime = 0;\n    let lastProgress = 0;\n    return API.uploadFile(profile.user, file, progress => {\n        const now = new Date().getTime();\n        if (progress !== lastProgress && (now - progressTime) > MIN_PROGRESS_CHANGE_INTERVAL) {\n            progressTime = now;\n            lastProgress = progress;\n            if (onProgress) {\n                onProgress(progress, file);\n            }\n        }\n    }, copyCache);\n};\n\n/**\n * 上传图片文件\n * @param {Object|FileData} file 要上传的文件对象\n * @param {function(progress: number, file: FileData)} onProgress 文件上传进度变更回调函数\n * @return {Promise<Object>} 异步返回上传结果\n */\nexport const uploadImageFile = (file, onProgress) => {\n    return uploadFile(file, onProgress, true);\n};\n\n/**\n * 下载文件\n * @param {Object|FileData} file 要下载的文件对象\n * @param {function(progress: number, file: FileData)} onProgress 文件下载进度变更回调函数\n * @return {Promise<Object>} 异步返回下载结果\n */\nexport const downloadFile = (file, onProgress) => {\n    file = FileData.create(file);\n    return API.downloadFile(profile.user, file, onProgress);\n};\n\n/**\n * 检查文件是否已缓存\n * @param {Object|FileData} file 要检查的文件对象\n * @return {Promise<boolean>} 异步返回结果\n */\nexport const checkFileCache = file => API.checkFileCache(file, profile.user);\n\nexport default {\n    loadFiles,\n    downloadFile,\n    search: searchFiles,\n    uploadFile,\n    uploadImageFile,\n    checkUploadFileSize,\n    checkCache: checkFileCache\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/im/im-files.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 424,
    "kind": "variable",
    "name": "MIN_PROGRESS_CHANGE_INTERVAL",
    "memberof": "app/core/im/im-files.js",
    "static": true,
    "longname": "app/core/im/im-files.js~MIN_PROGRESS_CHANGE_INTERVAL",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-files.js",
    "importStyle": null,
    "description": "上传下载进度变更通知最小时间间隔，单位毫秒",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 425,
    "kind": "function",
    "name": "checkUploadFileSize",
    "memberof": "app/core/im/im-files.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-files.js~checkUploadFileSize",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-files.js",
    "importStyle": "{checkUploadFileSize}",
    "description": "检查文件大小是否支持上传到当前服务器",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为支持，否则为不支持"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "文件大小，单位字节"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为支持，否则为不支持"
    }
  },
  {
    "__docId__": 426,
    "kind": "function",
    "name": "loadFiles",
    "memberof": "app/core/im/im-files.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-files.js~loadFiles",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-files.js",
    "importStyle": "{loadFiles}",
    "description": "查询指定类型的文件",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "category",
        "description": "文件类别，包括 doc（文档），image（图片），program（程序）"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "limit",
        "description": "返回结果的最大数目限制"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "offset",
        "description": "查询时略过的结果数目"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "reverse",
        "description": "是否以倒序返回结果"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "returnCount",
        "description": "是否仅仅返回结果数目"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<FileData[]>"
      ],
      "spread": false,
      "description": "通过 Promise 异步返回查询到的文件对象"
    }
  },
  {
    "__docId__": 427,
    "kind": "function",
    "name": "searchFiles",
    "memberof": "app/core/im/im-files.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-files.js~searchFiles",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-files.js",
    "importStyle": "{searchFiles}",
    "description": "搜索文件",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "搜索关键字，包括 doc（文档），image（图片），program（程序）"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "category",
        "description": "文件类别"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<FileData[]>"
      ],
      "spread": false,
      "description": "通过 Promise 异步返回查询到的文件对象"
    }
  },
  {
    "__docId__": 428,
    "kind": "function",
    "name": "uploadFile",
    "memberof": "app/core/im/im-files.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-files.js~uploadFile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-files.js",
    "importStyle": "{uploadFile}",
    "description": "上传文件",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "要上传的文件对象"
      },
      {
        "nullable": null,
        "types": [
          "function(progress: number, file: FileData)"
        ],
        "spread": false,
        "optional": false,
        "name": "onProgress",
        "description": "文件上传进度变更回调函数"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "copyCache",
        "description": "是否将文件拷贝到用户缓存目录"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "异步返回上传结果"
    }
  },
  {
    "__docId__": 429,
    "kind": "function",
    "name": "uploadImageFile",
    "memberof": "app/core/im/im-files.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-files.js~uploadImageFile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-files.js",
    "importStyle": "{uploadImageFile}",
    "description": "上传图片文件",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "要上传的文件对象"
      },
      {
        "nullable": null,
        "types": [
          "function(progress: number, file: FileData)"
        ],
        "spread": false,
        "optional": false,
        "name": "onProgress",
        "description": "文件上传进度变更回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "异步返回上传结果"
    }
  },
  {
    "__docId__": 430,
    "kind": "function",
    "name": "downloadFile",
    "memberof": "app/core/im/im-files.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-files.js~downloadFile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-files.js",
    "importStyle": "{downloadFile}",
    "description": "下载文件",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "要下载的文件对象"
      },
      {
        "nullable": null,
        "types": [
          "function(progress: number, file: FileData)"
        ],
        "spread": false,
        "optional": false,
        "name": "onProgress",
        "description": "文件下载进度变更回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "异步返回下载结果"
    }
  },
  {
    "__docId__": 431,
    "kind": "function",
    "name": "checkFileCache",
    "memberof": "app/core/im/im-files.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-files.js~checkFileCache",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-files.js",
    "importStyle": "{checkFileCache}",
    "description": "检查文件是否已缓存",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "要检查的文件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "异步返回结果"
    }
  },
  {
    "__docId__": 432,
    "kind": "file",
    "name": "app/core/im/im-notice.js",
    "content": "import Platform from 'Platform';\nimport {saveChatMessages, onChatMessages, forEachChat} from './im-chats';\nimport ui from './im-ui';\nimport DelayAction from '../../utils/delay-action';\nimport {isMatchWindowCondition, updateNotice} from '../notice';\nimport Lang from '../../lang';\nimport profile from '../profile';\nimport members from '../members';\n\n/**\n * 获取描述聊天消息内容的纯文本形式\n * @param {ChatMessage} chatMessage 聊天消息\n * @param {number} [limitLength=255] 限制内容最大长度\n * @param {booean} [ignoreBreak=true] 是否忽略换行\n * @return {string} 描述聊天消息内容的纯文本形式\n * @private\n */\nconst getPlainTextOfChatMessage = (chatMessage, limitLength = 255, ignoreBreak = true) => {\n    if (chatMessage.isFileContent) {\n        return `[${Lang.format('file.title.format', chatMessage.fileContent.name)}]`;\n    }\n    if (chatMessage.isImageContent) {\n        return `[${Lang.string('file.image.title')}]`;\n    }\n    let plainText = chatMessage.renderedTextContent(ui.renderChatMessageContent).replace(/<(?:.|\\n)*?>/gm, '');\n    if (ignoreBreak) {\n        plainText = plainText.trim().replace(/[\\r\\n]/g, ' ').replace(/\\n[\\s| | ]*\\r/g, '\\n');\n    }\n    if (limitLength && plainText.length > limitLength) {\n        plainText = plainText.substr(0, limitLength);\n    }\n    return plainText;\n};\n\n/**\n * 记录最后一个通知的聊天\n * @private\n * @type {Chat}\n */\nlet lastNoticeChat = null;\n\n/**\n * 记录最后一个通知的聊天通知信息\n * @private\n * @type {Object}\n */\nlet lastNoticeInfo = {};\n\n/**\n * 更新聊天通知延迟操作实例\n * @type {DelayAction}\n * @private\n */\nconst updateChatNoticeTask = new DelayAction(() => {\n    const {userConfig} = profile;\n    if (!userConfig) {\n        return;\n    }\n\n    let total = 0;\n    let lastChatMessage = null;\n    let notMuteCount = 0;\n\n    forEachChat(chat => {\n        if (chat.noticeCount) {\n            const {isWindowFocus} = Platform.ui;\n            const isActiveChat = ui.isActiveChat(chat.gid);\n            if (isWindowFocus && isActiveChat) {\n                const mutedMessages = chat.muteNotice();\n                if (mutedMessages && mutedMessages.length) {\n                    saveChatMessages(chat.messages, chat);\n                }\n            } else {\n                total += chat.noticeCount;\n                const chatLastMessage = chat.lastMessage;\n                if (chatLastMessage && (!lastChatMessage || lastChatMessage.date < chatLastMessage.date)) {\n                    lastChatMessage = chatLastMessage;\n                    if (!chat.isMuteOrHidden) {\n                        lastNoticeChat = chat;\n                    }\n                }\n                if (!chat.isMuteOrHidden) {\n                    notMuteCount += chat.noticeCount;\n                }\n            }\n        }\n    });\n\n    let message = null;\n    if (total && notMuteCount > 0 && lastNoticeInfo.notMuteCount < notMuteCount && lastNoticeInfo.total < total && userConfig.enableWindowNotification && (Platform.type === 'browser' || isMatchWindowCondition(userConfig.windowNotificationCondition))) {\n        message = userConfig.safeWindowNotification ? {\n            title: Lang.format('notification.receviedMessages.format', total),\n        } : {\n            title: lastNoticeChat.isOne2One ? Lang.format('notification.memberSays.format', lastChatMessage.getSender(members).displayName) : Lang.format('notification.memberSaysInGroup.format', lastChatMessage.getSender(members).displayName, lastNoticeChat.getDisplayName({members, user: profile.user})),\n            body: getPlainTextOfChatMessage(lastChatMessage)\n        };\n        if (lastNoticeChat.isOne2One) {\n            const theOtherOne = lastNoticeChat.getTheOtherOne({members, user: profile.user});\n            const avatar = theOtherOne.getAvatar(profile.user && profile.user.server);\n            if (avatar) {\n                message.icon = avatar;\n            }\n        }\n        message.click = () => {\n            window.location.hash = `#/chats/recents/${lastNoticeChat.gid}`;\n            if (Platform.ui.showAndFocusWindow) {\n                Platform.ui.showAndFocusWindow();\n            }\n        };\n    }\n\n    let sound = false;\n    if (\n        total\n        && notMuteCount > 0\n        && lastNoticeInfo.total < total\n        && lastNoticeInfo.notMuteCount < notMuteCount\n        && userConfig.enableSound\n        && (!userConfig.muteOnUserIsBusy || !profile.user.isBusy)\n        && isMatchWindowCondition(userConfig.playSoundCondition)) {\n        sound = true;\n    }\n\n    const tray = {label: total ? Lang.format('notification.receviedMessages.format', total) : ''};\n    if (\n        total\n        && notMuteCount > 0\n        && lastNoticeInfo.notMuteCount < notMuteCount\n        && userConfig.flashTrayIcon\n        && isMatchWindowCondition(userConfig.flashTrayIconCondition)\n    ) {\n        tray.flash = true;\n    }\n\n    lastNoticeInfo = {\n        total, chats: total, message, sound, tray, notMuteCount,\n    };\n    updateNotice(lastNoticeInfo);\n}, 200);\n\n/**\n * 更新聊天通知\n * @return {void}\n */\nexport const updateChatNotice = () => {\n    updateChatNoticeTask.do();\n};\n\n// 监听收到新消息事件，根据新收到的消息决定是否显示通知\nonChatMessages(updateChatNotice);\n\n// 监听界面窗口激活事件\nif (Platform.ui.onWindowFocus) {\n    Platform.ui.onWindowFocus(() => {\n        const activedChat = ui.currentActiveChat;\n        if (activedChat && activedChat.noticeCount) {\n            activedChat.muteNotice();\n            saveChatMessages(activedChat.messages, activedChat);\n        }\n    });\n}\n\n// 监听界面窗口还原事件\nif (Platform.ui.onWindowRestore) {\n    Platform.ui.onWindowRestore(() => {\n        const activedChat = ui.currentActiveChat;\n        if (lastNoticeChat && lastNoticeChat.noticeCount && (!activedChat || (!activedChat.noticeCount && activedChat.gid !== lastNoticeChat.gid))) {\n            window.location.hash = `#/chats/recents/${lastNoticeChat.gid}`;\n        }\n    });\n}\n\nexport default {\n    updateChatNotice: updateChatNoticeTask.do\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/im/im-notice.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 433,
    "kind": "function",
    "name": "getPlainTextOfChatMessage",
    "memberof": "app/core/im/im-notice.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-notice.js~getPlainTextOfChatMessage",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-notice.js",
    "importStyle": null,
    "description": "获取描述聊天消息内容的纯文本形式",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "chatMessage",
        "description": "聊天消息"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "255",
        "defaultRaw": 255,
        "name": "limitLength",
        "description": "限制内容最大长度"
      },
      {
        "nullable": null,
        "types": [
          "booean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "ignoreBreak",
        "description": "是否忽略换行"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "描述聊天消息内容的纯文本形式"
    }
  },
  {
    "__docId__": 434,
    "kind": "variable",
    "name": "lastNoticeChat",
    "memberof": "app/core/im/im-notice.js",
    "static": true,
    "longname": "app/core/im/im-notice.js~lastNoticeChat",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-notice.js",
    "importStyle": null,
    "description": "记录最后一个通知的聊天",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 435,
    "kind": "variable",
    "name": "lastNoticeInfo",
    "memberof": "app/core/im/im-notice.js",
    "static": true,
    "longname": "app/core/im/im-notice.js~lastNoticeInfo",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-notice.js",
    "importStyle": null,
    "description": "记录最后一个通知的聊天通知信息",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 436,
    "kind": "variable",
    "name": "updateChatNoticeTask",
    "memberof": "app/core/im/im-notice.js",
    "static": true,
    "longname": "app/core/im/im-notice.js~updateChatNoticeTask",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-notice.js",
    "importStyle": null,
    "description": "更新聊天通知延迟操作实例",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "DelayAction"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 437,
    "kind": "function",
    "name": "updateChatNotice",
    "memberof": "app/core/im/im-notice.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-notice.js~updateChatNotice",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-notice.js",
    "importStyle": "{updateChatNotice}",
    "description": "更新聊天通知",
    "lineNumber": 145,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 438,
    "kind": "file",
    "name": "app/core/im/im-server-handlers.js",
    "content": "import {\n    updateChatMessages, getChat, updateChats, updatePublicChats, removeChat,\n} from './im-chats';\nimport Chat from '../models/chat';\nimport profile from '../profile';\nimport members from '../members';\nimport imServer from './im-server';\nimport imUI from './im-ui';\n\n/**\n * 处理服务器推送修改聊天名称消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat} 如果处理成功则返回修改名称后的聊天实例\n * @private\n */\nconst chatChangename = (msg, socket) => {\n    if (msg.isSuccess) {\n        const chat = getChat(msg.data.gid);\n        if (chat) {\n            chat.name = msg.data.name;\n            updateChats(chat);\n            return chat;\n        }\n    }\n};\n\n/**\n * 处理服务器推送修改聊天白名单信息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat} 如果处理成功则返回修改后的聊天实例\n * @private\n */\nconst chatSetcomitters = (msg, socket) => {\n    if (msg.isSuccess) {\n        const chat = getChat(msg.data.gid);\n        if (chat) {\n            chat.committers = msg.data.committers;\n            updateChats(chat);\n            return chat;\n        }\n    }\n};\n\n/**\n * 处理服务器推送修改聊天添加成员消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat} 如果处理成功则返回修改后的聊天实例\n * @private\n */\nconst chatAddmember = (msg, socket) => {\n    if (!msg.isSuccess) {\n        return;\n    }\n    let chat = getChat(msg.data.gid);\n    if (chat) {\n        const serverChatMembers = Chat.create(msg.data).members;\n        chat.resetMembers(Array.from(serverChatMembers).map(x => members.get(x)));\n        updateChats(chat);\n        return chat;\n    }\n    chat = new Chat(msg.data);\n    updateChats(chat);\n    return chat;\n};\n\n/**\n * 处理服务器推送聊天列表消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {boolean} 处理结果\n * @private\n */\nconst chatGetlist = (msg, socket) => {\n    if (msg.isSuccess) {\n        let newChats = null;\n        if (typeof msg.data === 'object') {\n            newChats = Object.keys(msg.data).map(x => msg.data[x]);\n        } else {\n            newChats = msg.data;\n        }\n        imServer.handleInitChats(newChats);\n        return true;\n    }\n};\n\n/**\n * 处理服务器推送创建聊天消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat} 如果处理成功则返回创建的聊天实例\n * @private\n */\nconst chatCreate = (msg, socket) => {\n    if (msg.isSuccess) {\n        const chat = new Chat(msg.data);\n        updateChats(chat);\n        return chat;\n    }\n};\n\n/**\n * 处理服务器推送接收到的聊天消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {boolean} 处理结果\n * @private\n */\nconst chatMessage = (msg, socket) => {\n    if (msg.isSuccess) {\n        let messages = msg.data;\n        if (!Array.isArray(messages)) {\n            if (messages.cgid && messages.content) {\n                messages = [messages];\n            } else {\n                messages = Object.keys(messages).map(x => messages[x]);\n            }\n        }\n\n        if (messages && messages.length) {\n            imServer.handleReceiveChatMessages(messages);\n            return true;\n        }\n    }\n};\n\n/**\n * 处理服务器推送修改聊天历史记录消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {boolean} 处理结果\n * @private\n */\nconst chatHistory = (msg, socket) => {\n    if (!msg.isSuccess) {\n        return;\n    }\n    let messages = msg.data;\n    if (!Array.isArray(messages)) {\n        if (messages.cgid && messages.content) {\n            messages = [messages];\n        } else {\n            messages = Object.keys(messages).map(x => messages[x]);\n        }\n    }\n\n    imServer.updateChatHistory((messages && messages.length) ? messages[0].cgid : null, messages, msg.pager, socket);\n    return true;\n};\n\n/**\n * 处理服务器推送收藏聊天消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat} 如果处理成功则返回修改后的聊天实例\n * @private\n */\nconst chatStar = (msg, socket) => {\n    if (msg.isSuccess) {\n        const chat = getChat(msg.data.gid);\n        if (chat) {\n            chat.star = msg.data.star;\n            updateChats(chat);\n            return chat;\n        }\n    }\n};\n\n/**\n * 处理服务器推送设置消息免打扰设置消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat} 如果处理成功则返回修改后的聊天实例\n * @private\n */\nconst chatMute = (msg, socket) => {\n    if (msg.isSuccess) {\n        const chat = getChat(msg.data.gid);\n        if (chat) {\n            chat.mute = msg.data.mute;\n            updateChats(chat);\n            return chat;\n        }\n    }\n};\n\n/**\n * 处理服务器推送修改聊天分组设置消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {boolean} 处理结果\n * @private\n */\nconst chatCategory = (msg, socket) => {\n    if (msg.isSuccess) {\n        const {gids, category} = msg.data;\n        if (gids && gids.length) {\n            const chatsForUpdate = gids.map(gid => {\n                const chat = getChat(gid);\n                chat.category = category;\n                return chat;\n            });\n            updateChats(chatsForUpdate);\n        }\n    }\n};\n\n/**\n * 处理服务器推送加入聊天消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat} 如果处理成功则返回修改后的聊天实例\n * @private\n */\nconst chatJoinchat = (msg, socket) => {\n    if (!msg.isSuccess) {\n        return;\n    }\n    if (msg.data.gid) {\n        let chat = getChat(msg.data.gid);\n        if (chat) {\n            chat.$set(msg.data);\n        } else {\n            chat = new Chat(msg.data);\n        }\n        if (chat.isMember(profile.user.id)) {\n            chat.makeActive();\n            updateChats(chat);\n            if (chat.public && imServer.chatJoinTask) {\n                imUI.activeChat(chat);\n            }\n            return chat;\n        }\n        removeChat(chat.gid);\n        return chat;\n    }\n    imServer.chatJoinTask = false;\n};\n\n/**\n * 处理服务器推送设置消息隐藏操作结果\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat} 如果处理成功则返回修改后的聊天实例\n * @private\n */\nconst chatHide = (msg, socket) => {\n    if (msg.isSuccess) {\n        const chat = getChat(msg.data.gid);\n        if (chat) {\n            chat.hide = msg.data.hide;\n            updateChats(chat);\n            return chat;\n        }\n    }\n};\n\n/**\n * 处理服务器推送解散聊天操作结果\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat} 如果处理成功则返回修改后的聊天实例\n * @private\n */\nconst chatDismiss = (msg, socket) => {\n    if (msg.isSuccess) {\n        const chat = getChat(msg.data.gid);\n        if (chat) {\n            chat.dismissDate = msg.data.dismissDate;\n            updateChats(chat);\n            return chat;\n        }\n    }\n};\n\n/**\n * 处理服务器推送设置聊天是否公开操作结果\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat} 如果处理成功则返回修改后的聊天实例\n * @private\n */\nconst chatChangepublic = (msg, socket) => {\n    if (msg.isSuccess) {\n        const chat = getChat(msg.data.gid);\n        if (chat) {\n            chat.public = msg.data.public;\n            updateChats(chat);\n            return chat;\n        }\n    }\n};\n\n/**\n * 处理服务器推送请求获取公开聊天列表操作结果\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {Chat[]} 如果处理成功则返回获取到的公开聊天列表\n * @private\n */\nconst chatGetpubliclist = (msg, socket) => {\n    let publicChats = [];\n    if (msg.isSuccess) {\n        publicChats = msg.data.map(x => {\n            const chat = new Chat(x);\n            chat.updateMembersSet(members);\n            return chat;\n        });\n    }\n    updatePublicChats(publicChats);\n    return publicChats;\n};\n\n/**\n * 处理服务器推送通知消息操作\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {boolean} 返回操作结果\n * @private\n */\nconst chatNotify = (msg, socket) => {\n    if (msg.isSuccess) {\n        let messages = msg.data;\n        if (!Array.isArray(messages)) {\n            if (messages.cgid) {\n                messages = [messages];\n            } else {\n                messages = Object.keys(messages).map(x => messages[x]);\n            }\n        }\n\n        if (messages && messages.length) {\n            messages.forEach(x => {x.type = 'notification';});\n            updateChatMessages(messages);\n        }\n        return true;\n    }\n};\n\n/**\n * Socket 服务器推送消息处理函数\n * @type {Object<string, Function(msg: SocketMessage, socket: Socket)>}\n */\nexport default {\n    'chat/changename': chatChangename,\n    'chat/setcommitters': chatSetcomitters,\n    'chat/addmember': chatAddmember,\n    'chat/getlist': chatGetlist,\n    'chat/create': chatCreate,\n    'chat/message': chatMessage,\n    'chat/history': chatHistory,\n    'chat/star': chatStar,\n    'chat/mute': chatMute,\n    'chat/category': chatCategory,\n    'chat/joinchat': chatJoinchat,\n    'chat/hide': chatHide,\n    'chat/dismiss': chatDismiss,\n    'chat/changepublic': chatChangepublic,\n    'chat/getpubliclist': chatGetpubliclist,\n    'chat/notify': chatNotify\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/im/im-server-handlers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 439,
    "kind": "function",
    "name": "chatChangename",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatChangename",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送修改聊天名称消息",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "如果处理成功则返回修改名称后的聊天实例"
    }
  },
  {
    "__docId__": 440,
    "kind": "function",
    "name": "chatSetcomitters",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatSetcomitters",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送修改聊天白名单信息",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "如果处理成功则返回修改后的聊天实例"
    }
  },
  {
    "__docId__": 441,
    "kind": "function",
    "name": "chatAddmember",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatAddmember",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送修改聊天添加成员消息",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "如果处理成功则返回修改后的聊天实例"
    }
  },
  {
    "__docId__": 442,
    "kind": "function",
    "name": "chatGetlist",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatGetlist",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送聊天列表消息",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "处理结果"
    }
  },
  {
    "__docId__": 443,
    "kind": "function",
    "name": "chatCreate",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatCreate",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送创建聊天消息",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "如果处理成功则返回创建的聊天实例"
    }
  },
  {
    "__docId__": 444,
    "kind": "function",
    "name": "chatMessage",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatMessage",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送接收到的聊天消息",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "处理结果"
    }
  },
  {
    "__docId__": 445,
    "kind": "function",
    "name": "chatHistory",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatHistory",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送修改聊天历史记录消息",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "处理结果"
    }
  },
  {
    "__docId__": 446,
    "kind": "function",
    "name": "chatStar",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatStar",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送收藏聊天消息",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "如果处理成功则返回修改后的聊天实例"
    }
  },
  {
    "__docId__": 447,
    "kind": "function",
    "name": "chatMute",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatMute",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送设置消息免打扰设置消息",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "如果处理成功则返回修改后的聊天实例"
    }
  },
  {
    "__docId__": 448,
    "kind": "function",
    "name": "chatCategory",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatCategory",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送修改聊天分组设置消息",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "处理结果"
    }
  },
  {
    "__docId__": 449,
    "kind": "function",
    "name": "chatJoinchat",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatJoinchat",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送加入聊天消息",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "如果处理成功则返回修改后的聊天实例"
    }
  },
  {
    "__docId__": 450,
    "kind": "function",
    "name": "chatHide",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatHide",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送设置消息隐藏操作结果",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "如果处理成功则返回修改后的聊天实例"
    }
  },
  {
    "__docId__": 451,
    "kind": "function",
    "name": "chatDismiss",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatDismiss",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送解散聊天操作结果",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "如果处理成功则返回修改后的聊天实例"
    }
  },
  {
    "__docId__": 452,
    "kind": "function",
    "name": "chatChangepublic",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatChangepublic",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送设置聊天是否公开操作结果",
    "lineNumber": 285,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "如果处理成功则返回修改后的聊天实例"
    }
  },
  {
    "__docId__": 453,
    "kind": "function",
    "name": "chatGetpubliclist",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatGetpubliclist",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送请求获取公开聊天列表操作结果",
    "lineNumber": 303,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat[]"
      ],
      "spread": false,
      "description": "如果处理成功则返回获取到的公开聊天列表"
    }
  },
  {
    "__docId__": 454,
    "kind": "function",
    "name": "chatNotify",
    "memberof": "app/core/im/im-server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server-handlers.js~chatNotify",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送通知消息操作",
    "lineNumber": 323,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "返回操作结果"
    }
  },
  {
    "__docId__": 455,
    "kind": "file",
    "name": "app/core/im/im-server.js",
    "content": "import Platform from 'Platform'; // eslint-disable-line\nimport Config from '../../config'; // eslint-disable-line\nimport {socket} from '../server';\nimport imServerHandlers from './im-server-handlers';\nimport events from '../events';\nimport profile from '../profile';\nimport members from '../members';\nimport PKG from '../../package.json';\nimport Chat from '../models/chat';\nimport Messager from '../../components/messager';\nimport {formatBytes} from '../../utils/string-helper';\nimport {createPhpTimestramp} from '../../utils/date-helper';\nimport ChatMessage from '../models/chat-message';\nimport Lang from '../../lang';\nimport {getImageInfo} from '../../utils/image';\nimport FileData from '../models/file-data';\nimport {checkUploadFileSize, uploadFile} from './im-files';\nimport {isWebUrl} from '../../utils/html-helper';\nimport {\n    updateChatMessages, getChat, queryChats, initChats,\n} from './im-chats';\n\n/**\n * 适合使用 Base64 格式发送图片的最大文件大小\n * @type {number}\n * @private\n */\nconst MAX_BASE64_IMAGE_SIZE = 1024 * 10;\n\n/**\n * 事件名称表\n * @type {Object}\n * @private\n */\nconst EVENT = {\n    history: 'im.chats.history',\n    history_start: 'im.chats.history.start',\n    history_end: 'im.chats.history.end',\n    message_send: 'im.server.message.send',\n    message_receive: 'im.server.message.receive',\n};\n\n/**\n * 聊天加入任务\n * @type {number}\n * @private\n */\nlet chatJoinTask = null;\n\n// 设置 Socket 接收消息处理函数\nsocket.setHandler(imServerHandlers);\n\n/**\n * 获取消息历史记录分页器\n * @type {Object}\n * @private\n */\nlet historyFetchingPager = null;\n\n/**\n * 是否正在请求消息历史记录\n * @returns {boolean} 如果返回 `true` 则为正在请求消息历史记录，否则为不是\n */\nexport const isFetchingHistory = () => {\n    return historyFetchingPager;\n};\n\n/**\n * 请求从服务器获取聊天历史记录\n * @param {Object} pager 分页器对象\n * @param {boolean} continued 是否需要继续进行下一页的请求\n * @param {number} startDate 消息记录的最早日期（时间戳形式）\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const fetchChatsHistory = (pager, continued = false, startDate = 0) => {\n    if (continued instanceof Date || typeof continued === 'number') {\n        startDate = continued;\n        continued = false;\n    }\n    if (pager === 'all') {\n        pager = {queue: queryChats(x => !!x.id, true).map(x => x.gid)};\n    }\n    if (typeof pager === 'string') {\n        pager = {queue: [pager]};\n    }\n    pager = Object.assign({\n        recPerPage: 50,\n        pageID: 1,\n        recTotal: 0,\n        continued: true,\n        perent: 0,\n        finish: [],\n        startDate,\n    }, historyFetchingPager, pager);\n    if (pager.startDate) {\n        pager.startDate = createPhpTimestramp(pager.startDate);\n    }\n    if (!pager.queue || !pager.queue.length) {\n        if (DEBUG) {\n            console.error('Cannot fetch history, because the fetch queue is empty.', pager);\n        }\n        return;\n    }\n    // eslint-disable-next-line prefer-destructuring\n    pager.gid = pager.queue[0];\n    if (pager.total === undefined) {\n        pager.total = pager.finish.length + pager.queue.length;\n    }\n    if (pager.pageID === 1 && pager.continued && !continued) {\n        if (historyFetchingPager) {\n            if (DEBUG) {\n                console.warn('Server is busy.');\n            }\n            return;\n        }\n        events.emit(EVENT.history_start, pager);\n        historyFetchingPager = pager;\n    }\n    return socket.send({\n        method: 'history',\n        params: [pager.gid, pager.recPerPage, pager.pageID, pager.recTotal, pager.continued, pager.startDate]\n    });\n};\n\n/**\n * 将服务器推送的历史消息记录更新到数据库\n * @param {string} cgid 聊天 GID\n * @param {ChatMessage[]} messages 历史聊天消息列表\n * @param {Object} pager 分页器对象\n * @param {AppSocket} socket Socket 服务实例\n * @return {void}\n */\nexport const updateChatHistory = (cgid, messages, pager, socket) => {\n    if (messages && messages.length) {\n        updateChatMessages(messages, true, true);\n    }\n\n    const isFetchOver = pager.pageID * pager.recPerPage >= pager.recTotal;\n    pager = Object.assign({}, historyFetchingPager, pager, {\n        isFetchOver,\n    });\n    if (pager.continued) {\n        if (isFetchOver && pager.queue.length < 2) {\n            historyFetchingPager = null;\n        } else {\n            if (isFetchOver) {\n                pager.finish.push(pager.queue.shift());\n                pager = Object.assign(pager, {\n                    pageID: 1,\n                    recTotal: 0,\n                });\n            } else {\n                pager = Object.assign(pager, {\n                    pageID: pager.pageID + 1,\n                });\n            }\n            fetchChatsHistory(pager, true);\n        }\n    }\n    pager.total = pager.finish.length + pager.queue.length;\n    pager.percent = 100 * (pager.finish.length / pager.total + (pager.recTotal ? ((Math.min(pager.recTotal, pager.pageID * pager.recPerPage) / pager.recTotal)) : 0) / pager.total);\n    events.emit(EVENT.history, pager, messages);\n\n    if (pager.continued && !historyFetchingPager) {\n        events.emit(EVENT.history_end, pager);\n    }\n};\n\n/**\n * 绑定接收到服务器推送的聊天消息记录事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onChatHistory = listener => {\n    return events.on(EVENT.history, listener);\n};\n\n/**\n * 绑定开始接收到服务器推送的聊天消息记录事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onChatHistoryStart = listener => {\n    return events.on(EVENT.history_start, listener);\n};\n\n/**\n * 绑定完成接收到服务器推送的聊天消息记录事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onChatHistoryEnd = listener => {\n    return events.on(EVENT.history_end, listener);\n};\n\n/**\n * 请求服务器创建一个新的聊天\n * @param {Chat|{gid:string, name: string, type: string, members: number[]}} chat 要创建的聊天对象\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const createChat = chat => {\n    return socket.sendAndListen({\n        method: 'create',\n        params: [\n            chat.gid,\n            chat.name || '',\n            chat.type,\n            chat.members,\n            0,\n            false\n        ]\n    }).then(theChat => {\n        if (theChat) {\n            const groupUrl = `#/chats/groups/${theChat.gid}`;\n            if (theChat.isGroup) {\n                sendBoardChatMessage(Lang.format('chat.createNewChat.format', `@${profile.user.account}`, `[**[${theChat.getDisplayName({members, user: profile.user})}](${groupUrl})**]`), theChat);\n            }\n        }\n        return Promise.resolve(theChat);\n    });\n};\n\n/**\n * 在本地创建一个聊天实例\n * @private\n * @param {Set<number>|number[]} chatMembers 聊天成员\n * @param {Object} chatSetting 聊天属性对象\n * @return {Chat} 新创建的聊天实例\n */\nconst createLocalChatWithMembers = (chatMembers, chatSetting) => {\n    if (!Array.isArray(chatMembers)) {\n        chatMembers = [chatMembers];\n    }\n    const userMeId = profile.user.id;\n    chatMembers = chatMembers.map(member => {\n        if (typeof member === 'object') {\n            return member.id;\n        }\n        return member;\n    });\n    if (!chatMembers.find(memberId => memberId === userMeId)) {\n        chatMembers.push(userMeId);\n    }\n    let chat = null;\n    if (chatMembers.length === 2) {\n        const gid = chatMembers.sort().join('&');\n        chat = getChat(gid);\n        if (!chat) {\n            chat = new Chat(Object.assign({\n                members: chatMembers,\n                createdBy: profile.userAccount,\n                type: Chat.TYPES.one2one\n            }, chatSetting));\n        }\n    } else {\n        chat = new Chat(Object.assign({\n            members: chatMembers,\n            createdBy: profile.user.account,\n            type: Chat.TYPES.group\n        }, chatSetting));\n    }\n    return chat;\n};\n\n/**\n * 根据给定的成员清单创建一个聊天实例，如果成员清单中只有自己和另一个人则创建一个一对一聊天，否则创建一个讨论组；\n * 如果一对一聊天已经存在则直接返回之前的聊天实例，而不是请求服务器创建一个新的。\n * @param {Set<number>|number[]} chatMembers 聊天成员\n * @param {Object} chatSettings 聊天属性对象\n * @return {Chat} 新创建的聊天实例\n */\nexport const createChatWithMembers = (chatMembers, chatSettings) => {\n    const chat = createLocalChatWithMembers(chatMembers, chatSettings);\n    if (chat.id) {\n        return Promise.resolve(chat);\n    }\n    return createChat(chat);\n};\n\n/**\n * 请求从服务器获取公开聊天列表\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const fetchPublicChats = () => {\n    return socket.sendAndListen('getpubliclist');\n};\n\n/**\n * 设置聊天的白名单信息\n * @param {Chat} chat 聊天实例\n * @param {Set<string>|string[]|string} committers 白名单信息\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const setChatCommitters = (chat, committers) => {\n    if (committers instanceof Set) {\n        committers = Array.from(committers);\n    }\n    if (Array.isArray(committers)) {\n        committers = committers.join(',');\n    }\n    return socket.send({\n        method: 'setCommitters',\n        params: [chat.gid, committers]\n    });\n};\n\n/**\n * 切换聊天是否设置为公开\n * @param {Chat} chat 聊天实例\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const toggleChatPublic = (chat) => {\n    return socket.send({\n        method: 'changePublic',\n        params: [chat.gid, !chat.public]\n    });\n};\n\n/**\n * 切换聊天是否设置为已收藏\n * @param {Chat} chat 聊天实例\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const toggleChatStar = (chat) => {\n    const sendRequest = () => {\n        return socket.send({\n            method: 'star',\n            params: [chat.gid, !chat.star]\n        });\n    };\n    if (!chat.id) {\n        return createChat(chat).then(sendRequest);\n    }\n    return sendRequest();\n};\n\n/**\n * 切换聊天是否设置为免打扰\n * @param {Chat} chat 聊天实例\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const toggleMuteChat = (chat) => {\n    const sendRequest = () => {\n        return socket.send({\n            method: 'mute',\n            params: [chat.gid, !chat.mute]\n        });\n    };\n    if (!chat.id) {\n        return createChat(chat).then(sendRequest);\n    }\n    return sendRequest();\n};\n\n/**\n * 切换聊天是否设置为已隐藏（存档）\n * @param {Chat} chat 聊天实例\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const toggleHideChat = (chat) => {\n    const sendRequest = () => {\n        return socket.send({\n            method: 'hide',\n            params: [chat.gid, !chat.hide]\n        });\n    };\n    if (!chat.id) {\n        return createChat(chat).then(() => {\n            return sendRequest();\n        });\n    }\n    return sendRequest();\n};\n\n/**\n * 设置聊天分组\n * @param {Chat} chat 聊天实例\n * @param {string} category 分组名称\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const setChatCategory = (chat, category) => {\n    const isArray = Array.isArray(chat);\n    const gids = isArray ? chat.map(x => x.gid) : [chat.gid];\n    const sendRequest = () => {\n        return socket.send({\n            method: 'category',\n            params: [gids, category]\n        });\n    };\n    if (!isArray && !chat.id) {\n        return createChat(chat).then(() => {\n            return sendRequest();\n        });\n    }\n    return sendRequest();\n};\n\n/**\n * 向给定的聊天发送消息\n * @param {ChatMessage} socketMessage 聊天消息\n * @param {Chat} chat 聊天实例对象\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const sendSocketMessageForChat = (socketMessage, chat) => {\n    if (chat.id) {\n        return socket.send(socketMessage);\n    }\n    return createChat(chat).then(() => {\n        return socket.send(socketMessage);\n    });\n};\n\n/**\n * 创建一个广播聊天消息实例\n * @param {string} message 广播消息内容\n * @param {Chat|{gid: string}} chat 聊天实例对象\n * @return {ChatMessage} 广播聊天消息实例\n */\nexport const createBoardChatMessage = (message, chat) => {\n    return new ChatMessage({\n        content: message,\n        user: profile.userId,\n        cgid: chat.gid,\n        type: ChatMessage.TYPES.broadcast\n    });\n};\n\n/**\n * 发送广播消息\n * @param {string} message 广播消息内容\n * @param {Chat|{gid: string}} chat 聊天实例对象\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const sendBoardChatMessage = (message, chat) => {\n    return sendChatMessage(createBoardChatMessage(message, chat), chat, true);\n};\n\n/**\n * 创建一个文本聊天消息\n * @param {string} message 消息内容\n * @param {Chat|{gid:string}} chat 聊天对象\n * @return {ChatMessage} 聊天消息实例\n */\nexport const createTextChatMessage = (message, chat) => {\n    const {userConfig} = profile;\n    return new ChatMessage({\n        content: message,\n        user: profile.userId,\n        cgid: chat.gid,\n        contentType: userConfig && userConfig.sendMarkdown ? ChatMessage.CONTENT_TYPES.text : ChatMessage.CONTENT_TYPES.plain\n    });\n};\n\n/**\n * 创建一个网址卡片消息\n * @param {string} url 网址\n * @param {Chat|{gid:string}} chat 聊天对象\n * @return {ChatMessage} 聊天消息实例\n * @private\n */\nconst createUrlObjectMessage = (url, chat) => {\n    return new ChatMessage({\n        content: JSON.stringify({type: ChatMessage.OBJECT_TYPES.url, url}),\n        user: profile.userId,\n        cgid: chat.gid,\n        contentType: ChatMessage.CONTENT_TYPES.object\n    });\n};\n\n/**\n * 发送一个文本类聊天消息\n * @param {string} message 文本消息内容\n * @param {Chat|{gid:string}} chat 聊天对象\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const sendTextMessage = (message, chat) => {\n    return sendChatMessage(message && isWebUrl(message.trim()) ? createUrlObjectMessage(message, chat) : createTextChatMessage(message, chat), chat);\n};\n\n/**\n * 创建一个 Emoji 聊天消息\n * @param {string} emojicon Emojicon 表情名称\n * @param {Chat|{gid:string}} chat 聊天对象\n * @return {ChatMessage} 聊天消息实例\n */\nexport const createEmojiChatMessage = (emojicon, chat) => {\n    return new ChatMessage({\n        contentType: ChatMessage.CONTENT_TYPES.image,\n        content: JSON.stringify({type: 'emoji', content: emojicon}),\n        user: profile.userId,\n        cgid: chat.gid,\n    });\n};\n\n/**\n * 发送 Emoji 聊天消息\n * @param {string} emojicon Emojicon 表情名称\n * @param {Chat|{gid:string}} chat 聊天对象\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const sendEmojiMessage = (emojicon, chat) => {\n    return sendChatMessage(createEmojiChatMessage(emojicon, chat), chat, true);\n};\n\n/**\n * 重命名聊天\n * @param {Chat} chat 聊天实例\n * @param {string} newName 新的聊天名称\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const renameChat = (chat, newName) => {\n    if (chat && chat.canRename(profile.user)) {\n        if (chat.id) {\n            return socket.sendAndListen({\n                method: 'changename',\n                params: [chat.gid, newName]\n            }).then(theChat => {\n                if (theChat) {\n                    sendBoardChatMessage(Lang.format('chat.rename.someRenameGroup.format', `@${profile.user.account}`, `**${newName}**`), theChat);\n                }\n                return Promise.resolve(theChat);\n            });\n        }\n        chat.name = newName;\n        if (DEBUG) {\n            console.error('Cannot rename a local chat.', chat);\n        }\n        return Promise.reject(new Error('Cannot rename a local chat.'));\n    }\n    return Promise.reject(new Error('You have no permission to rename the chat.'));\n};\n\n/**\n * 向服务器发送聊天消息\n * @param {ChatMessage[]} messages 要发送聊天消息列表\n * @param {Chat} chat 聊天实例\n * @param {boolean} [isSystemMessage=false] 是否是系统消息\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const sendChatMessage = async (messages, chat, isSystemMessage = false) => {\n    if (!Array.isArray(messages)) {\n        messages = [messages];\n    }\n\n    if (!chat) {\n        chat = getChat(messages[0].cgid);\n        if (!chat) {\n            return Promise.reject(new Error('Chat is not set before send messages.'));\n        }\n    }\n\n    if (!isSystemMessage && chat.isReadonly(profile.user)) {\n        return Promise.reject(Lang.string('chat.blockedCommitterTip'));\n    }\n\n    messages.forEach(message => {\n        message.order = chat.newMsgOrder();\n\n        const command = message.getCommand();\n        if (command) {\n            if (command.action === 'version') {\n                const specialVersion = Config.system.specialVersion ? ` for ${Config.system.specialVersion}` : '';\n                const contentLines = ['```'];\n                contentLines.push(\n                    `$$version       = '${PKG.version}${PKG.buildVersion ? ('.' + PKG.buildVersion) : ''}${specialVersion}';`,\n                    `$$serverVersion = '${profile.user.serverVersion}';`,\n                    `$$platform      = '${Platform.type}';`,\n                    `$$os            = '${Platform.env.os}';`\n                );\n                if (Platform.env.arch) {\n                    contentLines.push(`$$arch          = '${Platform.env.arch}';`);\n                }\n                contentLines.push('```');\n                message.content = contentLines.join('\\n');\n            } else if (command.action === 'dataPath' && Platform.ui.createUserDataPath) {\n                const contentLines = ['```'];\n                contentLines.push(\n                    `$$dataPath = '${Platform.ui.createUserDataPath(profile.user, '', '')}';`,\n                );\n                contentLines.push('```');\n                message.content = contentLines.join('\\n');\n            }\n        }\n    });\n\n    if (!isSystemMessage) {\n        events.emit(EVENT.message_send, messages, chat);\n    }\n\n    updateChatMessages(messages);\n\n    return sendSocketMessageForChat({\n        method: 'message',\n        params: {\n            messages: messages.map(m => {\n                const msgObj = m.plainServer();\n                if (!profile.user.isVersionSupport('messageOrder')) {\n                    delete msgObj.order;\n                }\n                return msgObj;\n            })\n        }\n    }, chat);\n};\n\n/**\n * 将图片文件通过 Base64 编码发送\n * @param {FileData} imageFile 图片文件\n * @param {Chat} chat 聊天实例\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nconst sendImageAsBase64 = (imageFile, chat) => {\n    return new Promise((resolve) => {\n        const sendBase64 = base64Data => {\n            const message = new ChatMessage({\n                user: profile.userId,\n                cgid: chat.gid,\n                contentType: ChatMessage.CONTENT_TYPES.image\n            });\n            message.imageContent = {\n                content: base64Data,\n                time: new Date().getTime(),\n                name: imageFile.name,\n                size: imageFile.size,\n                send: true,\n                type: 'base64'\n            };\n            sendChatMessage(message, chat);\n            resolve();\n        };\n        if (imageFile.base64) {\n            sendBase64(imageFile.base64);\n        } else {\n            const reader = new FileReader();\n            reader.onload = e => {\n                sendBase64(e.target.result);\n            };\n            reader.readAsDataURL(imageFile.blob || imageFile);\n        }\n    });\n};\n\n/**\n * 发送图片消息并上传图片到服务器\n * @param {FileData} imageFile 图片文件\n * @param {Chat} chat 聊天实例\n * @param {function(progress: number)} onProgress 图片发送进度变更回调函数\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const sendImageMessage = async (imageFile, chat, onProgress) => {\n    if (imageFile.size < MAX_BASE64_IMAGE_SIZE) {\n        return sendImageAsBase64(imageFile, chat);\n    }\n    if (checkUploadFileSize(imageFile.size)) {\n        const message = new ChatMessage({\n            user: profile.userId,\n            cgid: chat.gid,\n            date: new Date(),\n            contentType: ChatMessage.CONTENT_TYPES.image\n        });\n        imageFile = FileData.create(imageFile);\n        message.attachFile = imageFile;\n        let info = imageFile.imageInfo;\n        if (!info) {\n            info = await getImageInfo(imageFile.viewUrl).catch(() => {\n                Messager.show(Lang.error('CANNOT_HANDLE_IMAGE'));\n                if (DEBUG) {\n                    console.warn('Cannot get image information', imageFile);\n                }\n            });\n        }\n        imageFile.width = info.width;\n        imageFile.height = info.height;\n        const imageObj = imageFile.plain();\n        delete imageObj.type;\n        message.imageContent = imageObj;\n        await sendChatMessage(message, chat);\n        return uploadFile(imageFile, progress => {\n            message.updateImageContent({send: progress});\n            sendChatMessage(message, chat);\n            if (onProgress) {\n                onProgress(progress);\n            }\n        }).then(data => {\n            message.updateImageContent(Object.assign({}, data, {send: true}));\n            return sendChatMessage(message, chat);\n        }).catch(error => {\n            message.updateImageContent({send: false, error: error && Lang.error(error)});\n            sendChatMessage(message, chat);\n        });\n    }\n    Messager.show(Lang.format('error.UPLOAD_FILE_IS_TOO_LARGE', formatBytes(imageFile.size)), {type: 'warning'});\n    return Promise.reject();\n};\n\n/**\n * 发送文件消息并上传文件到服务器\n * @param {FileData} file 文件\n * @param {Chat} chat 聊天实例\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const sendFileMessage = (file, chat) => {\n    if (checkUploadFileSize(file.size)) {\n        const message = new ChatMessage({\n            user: profile.userId,\n            cgid: chat.gid,\n            date: new Date(),\n            contentType: ChatMessage.CONTENT_TYPES.file\n        });\n        file = FileData.create(file);\n        file.cgid = chat.gid;\n        message.fileContent = file.plain();\n        sendChatMessage(message, chat);\n        uploadFile(file, progress => {\n            message.updateFileContent({send: progress});\n            return sendChatMessage(message, chat);\n        }).then(data => {\n            message.updateFileContent(Object.assign({}, data, {send: true}));\n            return sendChatMessage(message, chat);\n        }).catch(error => {\n            message.updateFileContent({send: false, error: error && Lang.error(error)});\n            return sendChatMessage(message, chat);\n        });\n    } else {\n        Messager.show(Lang.format('error.UPLOAD_FILE_IS_TOO_LARGE', formatBytes(file.size)), {type: 'warning'});\n    }\n};\n\n/**\n * 邀请其他成员到给定的聊天中\n * @param {Chat} chat 聊天实例\n * @param {Member[]} chatMembers 要邀请的成员列表\n * @param {Object} newChatSetting 当需要创建新的聊天实例时的属性对象\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nconst inviteMembersToChat = (chat, chatMembers, newChatSetting) => {\n    if (chat.canInvite(profile.user)) {\n        if (!chat.isOne2One) {\n            return socket.sendAndListen({\n                method: 'addmember',\n                params: [chat.gid, chatMembers.map(x => x.id), true]\n            });\n        }\n        chatMembers.push(...chat.membersSet);\n        return createChatWithMembers(chatMembers, newChatSetting);\n    }\n};\n\n/**\n * 将给定的成员从聊天中剔除\n * @param {Chat} chat 聊天实例\n * @param {Member} kickOfWho 要踢出的成员实例\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const kickOfMemberFromChat = (chat, kickOfWho) => {\n    if (chat.canKickOff(profile.user, kickOfWho)) {\n        return socket.sendAndListen({\n            method: 'addmember',\n            params: [chat.gid, [kickOfWho.id], false]\n        });\n    }\n};\n\n/**\n * 加入或退出聊天\n * @param {Chat} chat 聊天实例\n * @param {boolean} [join=true] 如果为 `true`，则为加入聊天，否则为退出聊天\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const joinChat = (chat, join = true) => {\n    chatJoinTask = true;\n    return socket.sendAndListen({\n        method: 'joinchat',\n        params: [chat.gid, join]\n    }).then(theChat => {\n        if (theChat && theChat.isMember(profile.userId)) {\n            sendBoardChatMessage(Lang.format('chat.join.message', `@${profile.userAccount}`), theChat);\n        }\n        return Promise.resolve(theChat);\n    });\n};\n\n/**\n * 退出指定的聊天\n * @param {Chat} chat 聊天实例\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const exitChat = (chat) => {\n    if (chat.canExit(profile.user)) {\n        return joinChat(chat, false).then(theChat => {\n            if (theChat && !theChat.isMember(profile.userId)) {\n                sendBoardChatMessage(Lang.format('chat.exit.message', `@${profile.userAccount}`), theChat);\n            }\n            return Promise.resolve(theChat);\n        });\n    }\n    return Promise.reject();\n};\n\n/**\n * 解散聊天\n * @param {Chat} chat 聊天实例\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const dimissChat = chat => {\n    if (chat.canDismiss(profile.user)) {\n        return socket.sendAndListen({\n            method: 'dismiss',\n            params: [chat.gid]\n        });\n    }\n    return Promise.reject();\n};\n\n/**\n * 处理从服务器接收到的消息\n * @param {Object[]} messages 接收到的消息列表\n * @return {void}\n */\nexport const handleReceiveChatMessages = messages => {\n    updateChatMessages(messages);\n    events.emit(EVENT.message_receive, messages);\n};\n\n/**\n * 处理从服务器接收到的聊天\n * @param {any[]} newChats 接收到的聊天列表\n * @return {void}\n */\nexport const handleInitChats = (newChats) => {\n    initChats(newChats, chat => {\n        if (chat.isOne2One && chat.hide) {\n            toggleHideChat(chat);\n        }\n    });\n};\n\n/**\n * 绑定发送聊天消息事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onSendChatMessages = listener => {\n    return events.on(EVENT.message_send, listener);\n};\n\n/**\n * 绑定接收聊天消息事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onReceiveChatMessages = listener => {\n    return events.on(EVENT.message_receive, listener);\n};\n\nexport default {\n    fetchChatsHistory,\n    onChatHistoryStart,\n    onChatHistoryEnd,\n    onChatHistory,\n    isFetchingHistory,\n    updateChatHistory,\n    createChat,\n    createChatWithMembers,\n    setCommitters: setChatCommitters,\n    toggleChatPublic,\n    toggleChatStar,\n    toggleHideChat,\n    toggleMuteChat,\n    setChatCategory,\n    renameChat,\n    sendSocketMessageForChat,\n    sendChatMessage,\n    joinChat,\n    exitChat,\n    dimissChat,\n    inviteMembersToChat,\n    fetchPublicChats,\n    sendImageMessage,\n    sendFileMessage,\n    createBoardChatMessage,\n    sendBoardChatMessage,\n    createTextChatMessage,\n    createEmojiChatMessage,\n    sendTextMessage,\n    sendEmojiMessage,\n    handleReceiveChatMessages,\n    handleInitChats,\n    onSendChatMessages,\n    onReceiveChatMessages,\n    kickOfMemberFromChat,\n\n    get chatJoinTask() {\n        return chatJoinTask;\n    },\n\n    set chatJoinTask(flag) {\n        chatJoinTask = flag;\n    },\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/im/im-server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 456,
    "kind": "variable",
    "name": "MAX_BASE64_IMAGE_SIZE",
    "memberof": "app/core/im/im-server.js",
    "static": true,
    "longname": "app/core/im/im-server.js~MAX_BASE64_IMAGE_SIZE",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": null,
    "description": "适合使用 Base64 格式发送图片的最大文件大小",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 457,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/im/im-server.js",
    "static": true,
    "longname": "app/core/im/im-server.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": null,
    "description": "事件名称表",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 458,
    "kind": "variable",
    "name": "chatJoinTask",
    "memberof": "app/core/im/im-server.js",
    "static": true,
    "longname": "app/core/im/im-server.js~chatJoinTask",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": null,
    "description": "聊天加入任务",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 459,
    "kind": "variable",
    "name": "historyFetchingPager",
    "memberof": "app/core/im/im-server.js",
    "static": true,
    "longname": "app/core/im/im-server.js~historyFetchingPager",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": null,
    "description": "获取消息历史记录分页器",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 460,
    "kind": "function",
    "name": "isFetchingHistory",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~isFetchingHistory",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{isFetchingHistory}",
    "description": "是否正在请求消息历史记录",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为正在请求消息历史记录，否则为不是"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为正在请求消息历史记录，否则为不是"
    },
    "params": []
  },
  {
    "__docId__": 461,
    "kind": "function",
    "name": "fetchChatsHistory",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~fetchChatsHistory",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{fetchChatsHistory}",
    "description": "请求从服务器获取聊天历史记录",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pager",
        "description": "分页器对象"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "continued",
        "description": "是否需要继续进行下一页的请求"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "startDate",
        "description": "消息记录的最早日期（时间戳形式）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 462,
    "kind": "function",
    "name": "updateChatHistory",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~updateChatHistory",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{updateChatHistory}",
    "description": "将服务器推送的历史消息记录更新到数据库",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cgid",
        "description": "聊天 GID"
      },
      {
        "nullable": null,
        "types": [
          "ChatMessage[]"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "历史聊天消息列表"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pager",
        "description": "分页器对象"
      },
      {
        "nullable": null,
        "types": [
          "AppSocket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 服务实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 463,
    "kind": "function",
    "name": "onChatHistory",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~onChatHistory",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{onChatHistory}",
    "description": "绑定接收到服务器推送的聊天消息记录事件",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 464,
    "kind": "function",
    "name": "onChatHistoryStart",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~onChatHistoryStart",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{onChatHistoryStart}",
    "description": "绑定开始接收到服务器推送的聊天消息记录事件",
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 465,
    "kind": "function",
    "name": "onChatHistoryEnd",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~onChatHistoryEnd",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{onChatHistoryEnd}",
    "description": "绑定完成接收到服务器推送的聊天消息记录事件",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 466,
    "kind": "function",
    "name": "createChat",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~createChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{createChat}",
    "description": "请求服务器创建一个新的聊天",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat",
          "{gid:string, name: string, type: string, members: number[]}"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "要创建的聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 467,
    "kind": "function",
    "name": "createLocalChatWithMembers",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~createLocalChatWithMembers",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": null,
    "description": "在本地创建一个聊天实例",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<number>",
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chatMembers",
        "description": "聊天成员"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "chatSetting",
        "description": "聊天属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "新创建的聊天实例"
    }
  },
  {
    "__docId__": 468,
    "kind": "function",
    "name": "createChatWithMembers",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~createChatWithMembers",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{createChatWithMembers}",
    "description": "根据给定的成员清单创建一个聊天实例，如果成员清单中只有自己和另一个人则创建一个一对一聊天，否则创建一个讨论组；\n如果一对一聊天已经存在则直接返回之前的聊天实例，而不是请求服务器创建一个新的。",
    "lineNumber": 272,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<number>",
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chatMembers",
        "description": "聊天成员"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "chatSettings",
        "description": "聊天属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "新创建的聊天实例"
    }
  },
  {
    "__docId__": 469,
    "kind": "function",
    "name": "fetchPublicChats",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~fetchPublicChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{fetchPublicChats}",
    "description": "请求从服务器获取公开聊天列表",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    },
    "params": []
  },
  {
    "__docId__": 470,
    "kind": "function",
    "name": "setChatCommitters",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~setChatCommitters",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{setChatCommitters}",
    "description": "设置聊天的白名单信息",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "Set<string>",
          "string[]",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "committers",
        "description": "白名单信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 471,
    "kind": "function",
    "name": "toggleChatPublic",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~toggleChatPublic",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{toggleChatPublic}",
    "description": "切换聊天是否设置为公开",
    "lineNumber": 312,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 472,
    "kind": "function",
    "name": "toggleChatStar",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~toggleChatStar",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{toggleChatStar}",
    "description": "切换聊天是否设置为已收藏",
    "lineNumber": 324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 473,
    "kind": "function",
    "name": "toggleMuteChat",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~toggleMuteChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{toggleMuteChat}",
    "description": "切换聊天是否设置为免打扰",
    "lineNumber": 342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 474,
    "kind": "function",
    "name": "toggleHideChat",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~toggleHideChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{toggleHideChat}",
    "description": "切换聊天是否设置为已隐藏（存档）",
    "lineNumber": 360,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 475,
    "kind": "function",
    "name": "setChatCategory",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~setChatCategory",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{setChatCategory}",
    "description": "设置聊天分组",
    "lineNumber": 381,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "category",
        "description": "分组名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 476,
    "kind": "function",
    "name": "sendSocketMessageForChat",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~sendSocketMessageForChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{sendSocketMessageForChat}",
    "description": "向给定的聊天发送消息",
    "lineNumber": 404,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "socketMessage",
        "description": "聊天消息"
      },
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 477,
    "kind": "function",
    "name": "createBoardChatMessage",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~createBoardChatMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{createBoardChatMessage}",
    "description": "创建一个广播聊天消息实例",
    "lineNumber": 419,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "广播消息内容"
      },
      {
        "nullable": null,
        "types": [
          "Chat",
          "{gid: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChatMessage"
      ],
      "spread": false,
      "description": "广播聊天消息实例"
    }
  },
  {
    "__docId__": 478,
    "kind": "function",
    "name": "sendBoardChatMessage",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~sendBoardChatMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{sendBoardChatMessage}",
    "description": "发送广播消息",
    "lineNumber": 434,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "广播消息内容"
      },
      {
        "nullable": null,
        "types": [
          "Chat",
          "{gid: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 479,
    "kind": "function",
    "name": "createTextChatMessage",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~createTextChatMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{createTextChatMessage}",
    "description": "创建一个文本聊天消息",
    "lineNumber": 444,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "消息内容"
      },
      {
        "nullable": null,
        "types": [
          "Chat",
          "{gid:string}"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChatMessage"
      ],
      "spread": false,
      "description": "聊天消息实例"
    }
  },
  {
    "__docId__": 480,
    "kind": "function",
    "name": "createUrlObjectMessage",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~createUrlObjectMessage",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": null,
    "description": "创建一个网址卡片消息",
    "lineNumber": 461,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "网址"
      },
      {
        "nullable": null,
        "types": [
          "Chat",
          "{gid:string}"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChatMessage"
      ],
      "spread": false,
      "description": "聊天消息实例"
    }
  },
  {
    "__docId__": 481,
    "kind": "function",
    "name": "sendTextMessage",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~sendTextMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{sendTextMessage}",
    "description": "发送一个文本类聊天消息",
    "lineNumber": 476,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "文本消息内容"
      },
      {
        "nullable": null,
        "types": [
          "Chat",
          "{gid:string}"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 482,
    "kind": "function",
    "name": "createEmojiChatMessage",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~createEmojiChatMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{createEmojiChatMessage}",
    "description": "创建一个 Emoji 聊天消息",
    "lineNumber": 486,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "emojicon",
        "description": "Emojicon 表情名称"
      },
      {
        "nullable": null,
        "types": [
          "Chat",
          "{gid:string}"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChatMessage"
      ],
      "spread": false,
      "description": "聊天消息实例"
    }
  },
  {
    "__docId__": 483,
    "kind": "function",
    "name": "sendEmojiMessage",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~sendEmojiMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{sendEmojiMessage}",
    "description": "发送 Emoji 聊天消息",
    "lineNumber": 501,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "emojicon",
        "description": "Emojicon 表情名称"
      },
      {
        "nullable": null,
        "types": [
          "Chat",
          "{gid:string}"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 484,
    "kind": "function",
    "name": "renameChat",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~renameChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{renameChat}",
    "description": "重命名聊天",
    "lineNumber": 511,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": "新的聊天名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 485,
    "kind": "function",
    "name": "sendChatMessage",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "app/core/im/im-server.js~sendChatMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{sendChatMessage}",
    "description": "向服务器发送聊天消息",
    "lineNumber": 540,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage[]"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "要发送聊天消息列表"
      },
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "isSystemMessage",
        "description": "是否是系统消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 486,
    "kind": "function",
    "name": "sendImageAsBase64",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~sendImageAsBase64",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": null,
    "description": "将图片文件通过 Base64 编码发送",
    "lineNumber": 612,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "imageFile",
        "description": "图片文件"
      },
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 487,
    "kind": "function",
    "name": "sendImageMessage",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "app/core/im/im-server.js~sendImageMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{sendImageMessage}",
    "description": "发送图片消息并上传图片到服务器",
    "lineNumber": 650,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "imageFile",
        "description": "图片文件"
      },
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "function(progress: number)"
        ],
        "spread": false,
        "optional": false,
        "name": "onProgress",
        "description": "图片发送进度变更回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 488,
    "kind": "function",
    "name": "sendFileMessage",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~sendFileMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{sendFileMessage}",
    "description": "发送文件消息并上传文件到服务器",
    "lineNumber": 702,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "文件"
      },
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 489,
    "kind": "function",
    "name": "inviteMembersToChat",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~inviteMembersToChat",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": null,
    "description": "邀请其他成员到给定的聊天中",
    "lineNumber": 736,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "Member[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chatMembers",
        "description": "要邀请的成员列表"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newChatSetting",
        "description": "当需要创建新的聊天实例时的属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 490,
    "kind": "function",
    "name": "kickOfMemberFromChat",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~kickOfMemberFromChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{kickOfMemberFromChat}",
    "description": "将给定的成员从聊天中剔除",
    "lineNumber": 755,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "kickOfWho",
        "description": "要踢出的成员实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 491,
    "kind": "function",
    "name": "joinChat",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~joinChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{joinChat}",
    "description": "加入或退出聊天",
    "lineNumber": 770,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "join",
        "description": "如果为 `true`，则为加入聊天，否则为退出聊天"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 492,
    "kind": "function",
    "name": "exitChat",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~exitChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{exitChat}",
    "description": "退出指定的聊天",
    "lineNumber": 788,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 493,
    "kind": "function",
    "name": "dimissChat",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~dimissChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{dimissChat}",
    "description": "解散聊天",
    "lineNumber": 805,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 494,
    "kind": "function",
    "name": "handleReceiveChatMessages",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~handleReceiveChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{handleReceiveChatMessages}",
    "description": "处理从服务器接收到的消息",
    "lineNumber": 820,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "接收到的消息列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 495,
    "kind": "function",
    "name": "handleInitChats",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~handleInitChats",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{handleInitChats}",
    "description": "处理从服务器接收到的聊天",
    "lineNumber": 830,
    "params": [
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "newChats",
        "description": "接收到的聊天列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 496,
    "kind": "function",
    "name": "onSendChatMessages",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~onSendChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{onSendChatMessages}",
    "description": "绑定发送聊天消息事件",
    "lineNumber": 843,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 497,
    "kind": "function",
    "name": "onReceiveChatMessages",
    "memberof": "app/core/im/im-server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-server.js~onReceiveChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-server.js",
    "importStyle": "{onReceiveChatMessages}",
    "description": "绑定接收聊天消息事件",
    "lineNumber": 852,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 498,
    "kind": "file",
    "name": "app/core/im/im-ui.js",
    "content": "import Platform from 'Platform';\nimport events from '../events';\nimport profile from '../profile';\nimport chats from './im-chats';\nimport Lang from '../../lang';\nimport Server from './im-server';\nimport members from '../members';\nimport StringHelper from '../../utils/string-helper';\nimport DateHelper from '../../utils/date-helper';\nimport Modal from '../../components/modal';\nimport ContextMenu from '../../components/context-menu';\nimport ChatCommittersSettingDialog from '../../views/chats/chat-committers-setting-dialog';\nimport ChatsHistoryDialog from '../../views/chats/chats-history-dialog';\nimport ChatInviteDialog from '../../views/chats/chat-invite-dialog';\nimport ChatTipPopover from '../../views/chats/chat-tip-popover';\nimport EmojiPopover from '../../views/common/emoji-popover';\nimport HotkeySettingDialog from '../../views/common/hotkey-setting-dialog';\nimport Markdown from '../../utils/markdown';\nimport Emojione from '../../components/emojione';\nimport ChatChangeFontPopover from '../../views/chats/chat-change-font-popover';\nimport db from '../db';\nimport ChatAddCategoryDialog from '../../views/chats/chat-add-category-dialog';\nimport TodoEditorDialog from '../../views/todo/todo-editor-dialog';\nimport Todo from '../todo';\nimport {strip, linkify, escape} from '../../utils/html-helper';\nimport {\n    addContextMenuCreator, getMenuItemsForContext, tryAddDividerItem, tryRemoveLastDivider\n} from '../context-menu';\nimport ui from '../ui';\nimport {registerCommand, executeCommandLine} from '../commander';\n\n/**\n * 当前激活的聊天实例 ID\n * @type {number}\n * @private\n */\nlet activedChatId = null;\n\n/**\n * 当前激活过的聊天缓存\n * @type {Object<string, Chat>}\n * @private\n */\nlet activeCaches = {};\n\n/**\n * 事件表\n * @type {Object<string, string>}\n * @private\n */\nconst EVENT = {\n    activeChat: 'im.chats.activeChat',\n    sendContentToChat: 'im.chats.sendContentToChat',\n    suggestSendImage: 'im.chats.suggestSendImage',\n    sendboxFocus: 'im.chat.sendbox.focus'\n};\n\n/**\n * 在界面上激活聊天\n * @param {Chat|string} chat 聊天实例或者聊天 GID\n * @return {void}\n */\nexport const activeChat = chat => {\n    if ((typeof chat === 'string') && chat.length) {\n        chat = chats.get(chat);\n    }\n    if (chat) {\n        if (!activedChatId || chat.gid !== activedChatId) {\n            activedChatId = chat.gid;\n            events.emit(EVENT.activeChat, chat);\n            ui.showMobileChatsMenu(false);\n        }\n        const urlHash = window.location.hash;\n        if (!urlHash.endsWith(`/${chat.gid}`)) {\n            window.location.hash = `#/chats/recents/${chat.gid}`;\n        }\n        activeCaches[chat.gid] = true;\n        if (chat.noticeCount) {\n            chat.muteNotice();\n            chats.saveChatMessages(chat.messages);\n        }\n    }\n};\n\n/**\n * 激活最后一个有更新的聊天\n * @return {void}\n */\nexport const activeLastChat = () => {\n    const lastChat = chats.getLastRecentChat();\n    if (lastChat) {\n        activeChat(lastChat);\n    }\n};\n\n/**\n * 判断给定的聊天是否是当前激活的聊天\n * @param {string} chatGid 聊天 GID\n * @returns {boolean} 如果返回 `true` 则为是当前激活的聊天，否则为不是当前激活的聊天\n */\nexport const isActiveChat = chatGid => activedChatId === chatGid;\n\n/**\n * 绑定聊天激活事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onActiveChat = listener => events.on(EVENT.activeChat, listener);\n\n/**\n * 向聊天发送框添加内容\n * @param {string|FileData} content 文本或图片文件内容\n * @param {string} type 内容类型，可以为 `'text'` 或 `'image'`\n * @param {string} cgid 聊天 GID\n * @return {void}\n */\nexport const sendContentToChat = (content, type = 'text', cgid = null) => {\n    if (!cgid) {\n        cgid = activedChatId;\n    }\n    if (type === 'file') {\n        Server.sendFileMessage(content, chats.get(cgid));\n    } else {\n        return events.emit(`${EVENT.sendContentToChat}.${cgid}`, {content, type});\n    }\n};\n\n/**\n * 绑定聊天发送框接收到新内容事件\n * @param {string} cgid 聊天 GID\n * @param {funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onSendContentToChat = (cgid, listener) => events.on(`${EVENT.sendContentToChat}.${cgid}`, listener);\n\n/**\n * 获取缓存中的聊天消息 GID 列表\n * @return {string[]} 聊天消息 GID 列表\n */\nexport const getActivedCacheChatsGID = () => Object.keys(activeCaches);\n\n// 添加聊天工具栏邮件菜单生成器\naddContextMenuCreator('chat.toolbar', context => {\n    let {chat, showSidebarIcon = 'auto'} = context;\n    const items = [];\n    if (!chat.isRobot) {\n        items.push({\n            id: 'star',\n            className: chat.star ? 'app-chat-star-icon stared' : 'app-chat-star-icon ',\n            icon: 'star-outline',\n            label: Lang.string(chat.star ? 'chat.toolbor.unstar' : 'chat.toolbor.star'),\n            click: () => {\n                Server.toggleChatStar(chat);\n            }\n        });\n    }\n    if (chat.canInvite(profile.user)) {\n        items.push({\n            id: 'invite',\n            icon: 'account-multiple-plus',\n            label: Lang.string('chat.toolbor.invite'),\n            click: () => {\n                ChatInviteDialog.show(chat);\n            }\n        });\n    }\n    items.push({\n        id: 'history',\n        icon: 'history',\n        label: Lang.string('chat.toolbor.history'),\n        click: () => {\n            ChatsHistoryDialog.show(chat);\n        }\n    });\n    if (chat.isRobot) {\n        showSidebarIcon = false;\n    }\n    if (showSidebarIcon === 'auto') {\n        showSidebarIcon = profile.userConfig.isChatSidebarHidden(chat.gid, chat.isOne2One);\n    }\n    if (showSidebarIcon) {\n        items.push({\n            id: 'sidebar',\n            icon: 'book-open',\n            label: Lang.string('chat.toolbor.sidebar'),\n            click: () => {\n                profile.userConfig.setChatSidebarHidden(chat.gid, false);\n            }\n        });\n    }\n    const moreItems = getMenuItemsForContext('chat.toolbar.more', {chat});\n    if (moreItems && moreItems.length) {\n        items.push({\n            id: 'more',\n            icon: 'dots-horizontal',\n            label: Lang.string('chat.toolbor.more'),\n            click: e => {\n                ContextMenu.show({x: e.pageX, y: e.pageY, direction: 'bottom-left'}, moreItems);\n            }\n        });\n    }\n    items[items.length - 1].hintPosition = 'bottom-left';\n    return items;\n});\n\n/**\n * 请求开始截屏操作\n * @param {boolean} [hiddenWindows=false] 是否隐藏窗口再截屏\n * @return {void}\n */\nexport const captureAndCutScreenImage = (hiddenWindows = false) => {\n    if (Platform.screenshot) {\n        const captureScreenChatId = activedChatId;\n        Platform.screenshot.captureAndCutScreenImage(0, hiddenWindows).then(image => {\n            activeChat(captureScreenChatId);\n            return image && sendContentToChat(image, 'image', captureScreenChatId);\n        }).catch(error => {\n            if (DEBUG) {\n                console.warn('Capture screen image error: ', error);\n            }\n        });\n    } else {\n        throw new Error(`The platform(${Platform.type}) not support capture screenshot.`);\n    }\n};\n\n/**\n * 创建截屏按钮右键菜单项清单\n * @return {Object[]} 右键菜单项清单\n */\nexport const createCatureScreenContextMenuItems = () => {\n    if (!Platform.screenshot) {\n        throw new Error(`The platform(${Platform.type}) not support take screenshots.`);\n    }\n    const items = [{\n        id: 'captureScreen',\n        label: Lang.string('chat.sendbox.toolbar.captureScreen'),\n        click: () => {\n            captureAndCutScreenImage();\n        }\n    }, {\n        id: 'hideAndCaptureScreen',\n        label: Lang.string('imageCutter.hideCurrentWindowAndCaptureScreen'),\n        click: () => {\n            captureAndCutScreenImage(true);\n        }\n    }, {\n        type: 'separator'\n    }, {\n        id: 'captureScreenHotSetting',\n        label: Lang.string('imageCutter.setGlobalHotkey'),\n        click: () => {\n            HotkeySettingDialog.show(Lang.string('imageCutter.setGlobalHotkey'), profile.userConfig.captureScreenHotkey, newHotKey => {\n                profile.userConfig.captureScreenHotkey = newHotKey;\n            });\n        }\n    }];\n    return items;\n};\n\n// 添加发送框工具栏菜单项目生成器\naddContextMenuCreator('chat.sendbox.toolbar', context => {\n    const {chatGid, openMessagePreview} = context;\n    const {userConfig} = profile;\n    const items = [{\n        id: 'emoticon',\n        icon: 'mdi-emoticon',\n        label: Lang.string('chat.sendbox.toolbar.emoticon'),\n        click: e => {\n            EmojiPopover.show({x: e.pageX, y: e.pageY, target: e.target, placement: 'top'}, emoji => {\n                sendContentToChat(`${Emojione.convert(emoji.unicode || Emojione.emojioneList[emoji.shortname].uc_base)} `);\n            });\n        }\n    }];\n    if (profile.user.isVersionSupport('fileServer')) {\n        items.push({\n            id: 'image',\n            icon: 'mdi-image',\n            label: Lang.string('chat.sendbox.toolbar.image'),\n            click: () => {\n                Platform.dialog.showOpenDialog({\n                    filters: [\n                        {name: 'Images', extensions: ['jpg', 'png', 'gif']},\n                    ]\n                }, files => {\n                    if (files && files.length) {\n                        sendContentToChat(files[0], 'image', chatGid);\n                    }\n                });\n            }\n        }, {\n            id: 'file',\n            icon: 'mdi-file-outline',\n            label: Lang.string('chat.sendbox.toolbar.file'),\n            click: () => {\n                Platform.dialog.showOpenDialog(null, files => {\n                    if (files && files.length) {\n                        Server.sendFileMessage(files[0], chats.get(chatGid));\n                    }\n                });\n            }\n        });\n    }\n    if (Platform.screenshot && userConfig) {\n        items.push({\n            id: 'captureScreen',\n            icon: 'mdi-content-cut rotate-270 inline-block',\n            label: `${Lang.string('chat.sendbox.toolbar.captureScreen')} ${(userConfig.captureScreenHotkey || '')} (${Lang.string('chat.sendbox.toolbar.moreOptions')})`,\n            click: () => {\n                captureAndCutScreenImage();\n            },\n            contextMenu: e => {\n                ContextMenu.show({x: e.pageX, y: e.pageY}, createCatureScreenContextMenuItems(chats.get(chatGid)));\n                e.preventDefault();\n            }\n        });\n    }\n    items.push({\n        id: 'setFontSize',\n        icon: 'mdi-format-size',\n        label: Lang.string('chat.sendbox.toolbar.setFontSize'),\n        click: e => {\n            ChatChangeFontPopover.show({x: e.pageX, y: e.pageY, target: e.target, placement: 'top'});\n        }\n    });\n    const sendMarkdown = userConfig && userConfig.sendMarkdown;\n    items.push({\n        id: 'markdown',\n        icon: sendMarkdown ? 'mdi-markdown icon-2x' : 'mdi-markdown icon-2x',\n        label: Lang.string(sendMarkdown ? 'chat.sendbox.toolbar.markdown.enabled' : 'chat.sendbox.toolbar.markdown.disabled') + (sendMarkdown ? ` (${Lang.string('chat.sendbox.toolbar.moreOptions')})` : ''),\n        className: sendMarkdown ? 'selected text-green' : '',\n        click: () => {\n            userConfig.sendMarkdown = !userConfig.sendMarkdown;\n        },\n        contextMenu: sendMarkdown ? e => {\n            const menuItems = [{\n                label: Lang.string('chat.sendbox.toolbar.previewDraft'),\n                click: openMessagePreview,\n                icon: 'mdi-file-find',\n                disabled: !openMessagePreview\n            }, {\n                icon: 'mdi-help-circle',\n                label: Lang.string('chat.sendbox.toolbar.markdownGuide'),\n                url: `!openUrlInDialog/${encodeURIComponent('http://wowubuntu.com/markdown/')}/?size=lg&insertCss=${encodeURIComponent('.wikistyle>p:first-child{display:none!important}')}`\n            }];\n            ui.showContextMenu({x: e.pageX, y: e.pageY, target: e.target, placement: 'top'}, menuItems);\n            e.preventDefault();\n        } : null\n    });\n    if (userConfig && userConfig.showMessageTip) {\n        items.push({\n            id: 'tips',\n            icon: 'mdi-comment-question-outline',\n            label: Lang.string('chat.sendbox.toolbar.tips'),\n            click: e => {\n                ChatTipPopover.show({x: e.pageX, y: e.pageY, target: e.target, placement: 'top'});\n            }\n        });\n    }\n    return items;\n});\n\n/**\n * 显示重命名聊天对话框\n * @param {Chat} chat 要重命名的聊天\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const chatRenamePrompt = chat => {\n    return Modal.prompt(Lang.string('chat.rename.title'), chat.name, {\n        placeholder: Lang.string('chat.rename.newTitle'),\n    }).then(newName => {\n        if (chat.name !== newName) {\n            Server.renameChat(chat, newName);\n        }\n    });\n};\n\n/**\n * 显示确认退出聊天对话框\n * @param {Chat} chat 要退出的聊天\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const chatExitConfirm = chat => {\n    return Modal.confirm(Lang.format('chat.group.exitConfirm', chat.getDisplayName({members, user: profile.user}))).then(result => {\n        if (result) {\n            Server.exitChat(chat);\n        }\n    });\n};\n\n/**\n * 显示确认解散聊天对话框\n * @param {Chat} chat 要解散的聊天\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const chatDismissConfirm = chat => {\n    return Modal.confirm(Lang.format('chat.group.dismissConfirm', chat.getDisplayName({members, user: profile.user}))).then(result => {\n        if (result) {\n            return Server.dimissChat(chat).then(theChat => {\n                if (theChat) {\n                    activeLastChat();\n                }\n                return Promise.resolve(theChat);\n            });\n        }\n    });\n};\n\n// 添加聊天上小文菜单生成器\naddContextMenuCreator('chat.menu', context => {\n    const {chat, menuType = null, viewType = null} = context;\n    const menu = [];\n    if (chat.isOne2One) {\n        menu.push(...getMenuItemsForContext('member', {member: chat.getTheOtherOne({members, user: profile.user})}));\n        tryAddDividerItem(menu);\n    }\n\n    if (!chat.isRobot) {\n        menu.push({\n            label: Lang.string(chat.star ? 'chat.toolbor.unstar' : 'chat.toolbor.star'),\n            click: () => {\n                Server.toggleChatStar(chat);\n            }\n        });\n\n        if (profile.user.isVersionSupport('muteChat')) {\n            menu.push({\n                label: Lang.string(chat.mute ? 'chat.toolbar.cancelMute' : 'chat.toolbar.mute'),\n                click: () => {\n                    Server.toggleMuteChat(chat);\n                }\n            });\n        }\n    }\n\n    if (chat.canRename(profile.user)) {\n        menu.push({\n            label: Lang.string('common.rename'),\n            click: () => {\n                chatRenamePrompt(chat);\n            }\n        });\n    }\n\n    if (chat.canMakePublic(profile.user)) {\n        menu.push({\n            label: Lang.string(chat.public ? 'chat.public.setPrivate' : 'chat.public.setPublic'),\n            click: () => {\n                Server.toggleChatPublic(chat);\n            }\n        });\n    }\n\n    if (chat.canDismiss(profile.user)) {\n        tryAddDividerItem(menu);\n        menu.push({\n            label: Lang.string('chat.group.dismiss'),\n            click: () => {\n                chatDismissConfirm(chat);\n            }\n        });\n    }\n\n    if (chat.canExit(profile.user)) {\n        tryAddDividerItem(menu);\n        menu.push({\n            label: Lang.string('chat.group.exit'),\n            click: () => {\n                chatExitConfirm(chat);\n            }\n        });\n    }\n\n    if (!chat.isDismissed && !chat.isRobot) {\n        tryAddDividerItem(menu);\n        if (viewType === 'category' && (menuType === 'contacts' || menuType === 'groups')) {\n            menu.push({\n                label: Lang.string('chats.menu.group.add'),\n                click: () => {\n                    ChatAddCategoryDialog.show(chat);\n                }\n            });\n        }\n        if (chat.canHide && profile.user.isVersionSupport('hideChat')) {\n            menu.push({\n                label: Lang.string(chat.hidden ? 'chat.toolbar.cancelHide' : 'chat.toolbar.hide'),\n                click: () => {\n                    Server.toggleHideChat(chat);\n                }\n            });\n        }\n    }\n\n    return tryRemoveLastDivider(menu);\n});\n\n// 添加聊天工具栏更多菜单生成器\naddContextMenuCreator('chat.toolbar.more', ({chat}) => {\n    if (chat.isOne2One) return [];\n    const menu = [];\n    if (profile.user.isVersionSupport('muteChat')) {\n        menu.push({\n            label: Lang.string(chat.mute ? 'chat.toolbar.cancelMute' : 'chat.toolbar.mute'),\n            click: () => {\n                Server.toggleMuteChat(chat);\n            }\n        });\n    }\n    if (chat.canRename(profile.user)) {\n        menu.push({\n            label: Lang.string('common.rename'),\n            click: () => {\n                chatRenamePrompt(chat);\n            }\n        });\n    }\n\n    if (chat.canMakePublic(profile.user)) {\n        menu.push({\n            label: Lang.string(chat.public ? 'chat.public.setPrivate' : 'chat.public.setPublic'),\n            click: () => {\n                Server.toggleChatPublic(chat);\n            }\n        });\n    }\n\n    if (chat.canSetCommitters(profile.user)) {\n        menu.push({\n            label: Lang.string('chat.committers.setCommitters'),\n            click: () => {\n                ChatCommittersSettingDialog.show(chat);\n            }\n        });\n    }\n\n    if (chat.canDismiss(profile.user)) {\n        if (menu.length) {\n            menu.push({type: 'separator'});\n        }\n        menu.push({\n            label: Lang.string('chat.group.dismiss'),\n            click: () => {\n                chatDismissConfirm(chat);\n            }\n        });\n    }\n\n    if (chat.canExit(profile.user)) {\n        if (menu.length) {\n            menu.push({type: 'separator'});\n        }\n        menu.push({\n            label: Lang.string('chat.group.exit'),\n            click: () => {\n                chatExitConfirm(chat);\n            }\n        });\n    }\n    return menu;\n});\n\n// 添加聊天成员上下文件菜单生成器\naddContextMenuCreator('chat.member', ({member, chat}) => {\n    const menu = [];\n    if (member.account !== profile.userAccount && chat.isGroupOrSystem) {\n        const one2OneGid = chats.getOne2OneChatGid([member, profile.user]);\n        menu.push({\n            label: Lang.string(`chat.atHim.${member.gender}`, Lang.string('chat.atHim')),\n            click: () => {\n                sendContentToChat(`@${member.displayName} `);\n            }\n        }, {\n            label: Lang.string('chat.sendMessage'),\n            click: () => {\n                window.location.hash = `#/chats/contacts/${one2OneGid}`;\n            }\n        });\n    }\n\n    tryAddDividerItem(menu);\n    menu.push(...getMenuItemsForContext('member', {member}));\n\n    if (chat.canKickOff(profile.user, member)) {\n        tryAddDividerItem(menu);\n        menu.push({\n            label: Lang.string('chat.kickOffFromGroup'),\n            click: () => {\n                return Modal.confirm(Lang.format('chat.kickOffFromGroup.confirm', member.displayName)).then(result => {\n                    if (result) {\n                        return Server.kickOfMemberFromChat(chat, member);\n                    }\n                    return Promise.reject();\n                });\n            }\n        });\n    }\n    return menu;\n});\n\n/**\n * 将文本中的 `@member` 转换为 HTML 链接\n * @param {string} text 文本内容\n * @param {{format: string}} param1 格式化选项\n * @return {string} 转换后的文本\n */\nexport const linkMembersInText = (text, {format = '<a class=\"app-link {className}\" data-url=\"@Member/{id}\">@{displayName}</a>'}) => {\n    if (text && text.indexOf('@') > -1) {\n        const langAtAll = Lang.string('chat.message.atAll');\n        const {userAccount} = profile;\n        text = text.replace(/@([\\w\\u4e00-\\u9fa5]+)/g, (mentionAt, mention) => {\n            const m = members.guess(mention);\n            if (m) {\n                return StringHelper.format(format, {displayName: m.displayName, id: m.id, account: m.account, className: m.account === userAccount ? 'at-me' : ''});\n            }\n            if (mention === 'all' || mention === langAtAll) {\n                return `<span class=\"at-all\">@${langAtAll}</span>`;\n            }\n            return mentionAt;\n        });\n    }\n    return text;\n};\n\n/**\n * 转换消息内容回调函数\n * @type {string}\n * @private\n */\nlet onRenderChatMessageContentListener = null;\n\n/**\n * 将聊天消息内容转换为适合显示的 HTML 文本\n * @param {string} messageContent 聊天消息内容\n * @param {{renderMarkdown: boolean}} param1 转换选项\n * @return {string} 转换后的聊天消息内容文本\n */\nexport const renderChatMessageContent = (messageContent, {renderMarkdown = false}) => {\n    if (typeof messageContent === 'string' && messageContent.length) {\n        if (renderMarkdown) {\n            messageContent = Markdown(messageContent);\n        } else {\n            messageContent = linkify(escape(messageContent));\n        }\n        messageContent = Emojione.toImage(messageContent);\n        if (onRenderChatMessageContentListener) {\n            messageContent = onRenderChatMessageContentListener(messageContent);\n        }\n    }\n    return messageContent;\n};\n\n/**\n * 绑定转换消息内容事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onRenderChatMessageContent = listener => {\n    onRenderChatMessageContentListener = listener;\n};\n\n/**\n * 根据成员清单创建讨论组\n * @param {Set<number>|number[]} groupMembers 聊天成员\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const createGroupChat = (groupMembers) => {\n    return Modal.prompt(Lang.string('chat.create.newChatNameTip'), '', {\n        inputProps: {placeholder: Lang.string('chat.rename.newTitle')},\n        onSubmit: newName => {\n            if (!newName) {\n                Modal.alert(Lang.string('chat.rename.newTitleRequired'));\n                return false;\n            }\n        }\n    }).then(newName => {\n        if (newName) {\n            return Server.createChatWithMembers(groupMembers, {name: newName});\n        }\n        return Promise.reject(false);\n    });\n};\n\n/**\n * 重命名讨论组\n * @param {{id: number, title: string}} group 要重命名的讨论组\n * @param {string} type 讨论组类型\n * @param {string} newCategoryName 新的讨论组名称\n * @return {void}\n */\nexport const renameChatCategory = (group, type = 'contact', newCategoryName = null) => {\n    if (newCategoryName === null) {\n        return Modal.prompt(Lang.string('chats.menu.group.renameTip'), group.title).then(name => {\n            return renameChatCategory(group, type, name);\n        });\n    }\n    if (newCategoryName !== group.title) {\n        if (group.id) {\n            const isContactType = type === 'contact';\n            const renameChats = chats.query(x => ((isContactType ? x.isOne2One : x.isGroupOrSystem) && x.category === group.id), false);\n            return Server.setChatCategory(renameChats, newCategoryName).then(() => {\n                const categoriesConfigName = isContactType ? 'contactsCategories' : 'groupsCategories';\n                const categories = profile.user.config[categoriesConfigName];\n                if (!categories[newCategoryName]) {\n                    categories[newCategoryName] = categories[group.id];\n                }\n                delete categories[group.id];\n                profile.user.config[categoriesConfigName] = categories;\n            });\n        } else {\n            profile.user.config[type === 'contact' ? 'contactsDefaultCategoryName' : 'groupsDefaultCategoryName'] = newCategoryName;\n        }\n    }\n};\n\n// 添加讨论组上下文菜单生成器\naddContextMenuCreator('chat.group', ({group, type = 'contact'}) => {\n    const menus = [];\n    if (!group.system) {\n        menus.push({\n            label: Lang.string('chats.menu.group.rename'),\n            click: () => {\n                renameChatCategory(group, type);\n            }\n        });\n    }\n    if (group.id && !group.system) {\n        menus.push({\n            label: Lang.string('chats.menu.group.delete'),\n            click: () => {\n                const defaultCategoryName = profile.user.config[type === 'contact' ? 'contactsDefaultCategoryName' : 'groupsDefaultCategoryName'] || Lang.string('chats.menu.group.default');\n                return Modal.confirm(Lang.format('chats.menu.group.delete.tip.format', defaultCategoryName), {\n                    title: Lang.format('chats.menu.group.delete.confirm.format', group.title)\n                }).then(result => {\n                    return result && renameChatCategory(group, type, '');\n                });\n            }\n        });\n    }\n    return menus;\n});\n\n// 添加文本消息上下文菜单生成器\naddContextMenuCreator('message.text', ({message}) => {\n    const items = [];\n    if (message.isTextContent && Platform.clipboard && Platform.clipboard.writeText) {\n        items.push({\n            icon: 'mdi-content-copy',\n            label: Lang.string('chat.message.copy'),\n            click: () => {\n                let copyHtmlText = message.isPlainTextContent ? message.content : null;\n                let copyPlainText = message.content;\n                if (copyHtmlText === null) {\n                    const contentElement = document.getElementById(`message-content-${message.gid}`);\n                    if (contentElement) {\n                        copyHtmlText = contentElement.innerHTML;\n                        copyPlainText = contentElement.innerText;\n                    }\n                }\n                if (copyHtmlText === undefined) {\n                    copyHtmlText = message.renderedTextContent(renderChatMessageContent, linkMembersInText);\n                }\n                if (Platform.clipboard.write) {\n                    Platform.clipboard.write({text: message.isPlainTextContent ? copyHtmlText : strip(copyHtmlText), html: copyHtmlText});\n                } else if (Platform.clipboard.writeHTML) {\n                    Platform.clipboard.writeHTML(copyHtmlText);\n                } else if (Platform.clipboard.writeText) {\n                    Platform.clipboard.writeText(copyPlainText);\n                }\n            }\n        });\n        if (!message.isPlainTextContent) {\n            items.push({\n                icon: 'mdi-markdown',\n                label: Lang.string('chat.message.copyMarkdown'),\n                click: () => {\n                    Platform.clipboard.writeText(message.content);\n                }\n            });\n        }\n    }\n    if (profile.user.isVersionSupport('todo')) {\n        if (items.length) {\n            items.push('divider');\n        }\n        items.push({\n            label: Lang.string('todo.create'),\n            icon: 'mdi-calendar-check',\n            click: (item, idx, e) => {\n                TodoEditorDialog.show(Todo.createTodoFromMessage(message));\n                e.preventDefault();\n            }\n        });\n    }\n    return items;\n});\n\n// 绑定用户切换事件\nprofile.onSwapUser(user => {\n    activedChatId = null;\n    activeCaches = {};\n});\n\n// 绑定聊天列表初始化事件\nchats.onChatsInit(initChats => {\n    if (!activedChatId) {\n        const lastActiveChat = chats.getLastActiveChat();\n        if (lastActiveChat) {\n            activedChatId = lastActiveChat && lastActiveChat.gid;\n            lastActiveChat.makeActive();\n            if (window.location.hash.startsWith('#/chats/')) {\n                window.location.hash = `#/chats/recents/${activedChatId}`;\n            }\n        }\n    }\n    if (!db.database.isExists) {\n        Server.fetchChatsHistory('all', DateHelper.getTimeBeforeDesc('threeMonth'));\n        if (DEBUG) {\n            console.color('Fetch all history for new database', 'greenPale');\n        }\n    }\n});\n\n// 如果平台支持截图，绑定截图全局快捷键\nif (Platform.screenshot) {\n    registerCommand('shortcut.captureScreenHotkey', () => {\n        captureAndCutScreenImage();\n    });\n}\n\n// 如果平台支持读取剪切板图片则绑定推荐发送剪切板图片命令\nif (Platform.clipboard && Platform.clipboard.getNewImage) {\n    registerCommand('suggestClipboardImage', () => {\n        if (!profile.userConfig.listenClipboardImage) {\n            return;\n        }\n        const newImage = Platform.clipboard.getNewImage();\n        if (newImage) {\n            events.emit(EVENT.suggestSendImage, newImage);\n        }\n    });\n}\n\n/**\n * 绑定推荐发送剪切板图片事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onSuggestSendImage = (listener) => events.on(EVENT.suggestSendImage, listener);\n\n/**\n * 激活聊天发送框并可以选择性的发送文本内容到聊天发送框\n * @param {Chat} chat 聊天实例\n * @param {string} [sendboxContent=null] 要发送到聊天框的内容\n * @return {void}\n */\nexport const emitChatSendboxFocus = (chat, sendboxContent = null) => {\n    events.emit(EVENT.sendboxFocus, chat, sendboxContent);\n    if (profile.userConfig.listenClipboardImage && StringHelper.isEmpty(sendboxContent)) {\n        executeCommandLine('suggestClipboardImage');\n    }\n};\n\n/**\n * 绑定聊天发送框激活事件\n * @param {funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onChatSendboxFocus = (listener) => {\n    return events.on(EVENT.sendboxFocus, listener);\n};\n\nexport default {\n    activeChat,\n    activeLastChat,\n    onActiveChat,\n    isActiveChat,\n    getActivedCacheChatsGID,\n    linkMembersInText,\n    renderChatMessageContent,\n    chatExitConfirm,\n    chatRenamePrompt,\n    createGroupChat,\n    sendContentToChat,\n    onSendContentToChat,\n    onRenderChatMessageContent,\n    onSuggestSendImage,\n    emitChatSendboxFocus,\n    onChatSendboxFocus,\n\n    get currentActiveChatId() {\n        return activedChatId;\n    },\n\n    get currentActiveChat() {\n        return activedChatId && chats.get(activedChatId);\n    },\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/im/im-ui.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 499,
    "kind": "variable",
    "name": "activedChatId",
    "memberof": "app/core/im/im-ui.js",
    "static": true,
    "longname": "app/core/im/im-ui.js~activedChatId",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": null,
    "description": "当前激活的聊天实例 ID",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 500,
    "kind": "variable",
    "name": "activeCaches",
    "memberof": "app/core/im/im-ui.js",
    "static": true,
    "longname": "app/core/im/im-ui.js~activeCaches",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": null,
    "description": "当前激活过的聊天缓存",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, Chat>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 501,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/im/im-ui.js",
    "static": true,
    "longname": "app/core/im/im-ui.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": null,
    "description": "事件表",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 502,
    "kind": "function",
    "name": "activeChat",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~activeChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{activeChat}",
    "description": "在界面上激活聊天",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例或者聊天 GID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 503,
    "kind": "function",
    "name": "activeLastChat",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~activeLastChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{activeLastChat}",
    "description": "激活最后一个有更新的聊天",
    "lineNumber": 89,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 504,
    "kind": "function",
    "name": "isActiveChat",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~isActiveChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{isActiveChat}",
    "description": "判断给定的聊天是否是当前激活的聊天",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是当前激活的聊天，否则为不是当前激活的聊天"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "chatGid",
        "description": "聊天 GID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是当前激活的聊天，否则为不是当前激活的聊天"
    }
  },
  {
    "__docId__": 505,
    "kind": "function",
    "name": "onActiveChat",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~onActiveChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{onActiveChat}",
    "description": "绑定聊天激活事件",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 506,
    "kind": "function",
    "name": "sendContentToChat",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~sendContentToChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{sendContentToChat}",
    "description": "向聊天发送框添加内容",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "文本或图片文件内容"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "内容类型，可以为 `'text'` 或 `'image'`"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cgid",
        "description": "聊天 GID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 507,
    "kind": "function",
    "name": "onSendContentToChat",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~onSendContentToChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{onSendContentToChat}",
    "description": "绑定聊天发送框接收到新内容事件",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cgid",
        "description": "聊天 GID"
      },
      {
        "nullable": null,
        "types": [
          "funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 508,
    "kind": "function",
    "name": "getActivedCacheChatsGID",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~getActivedCacheChatsGID",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{getActivedCacheChatsGID}",
    "description": "获取缓存中的聊天消息 GID 列表",
    "lineNumber": 140,
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "聊天消息 GID 列表"
    },
    "params": []
  },
  {
    "__docId__": 509,
    "kind": "function",
    "name": "captureAndCutScreenImage",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~captureAndCutScreenImage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{captureAndCutScreenImage}",
    "description": "请求开始截屏操作",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "hiddenWindows",
        "description": "是否隐藏窗口再截屏"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 510,
    "kind": "function",
    "name": "createCatureScreenContextMenuItems",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~createCatureScreenContextMenuItems",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{createCatureScreenContextMenuItems}",
    "description": "创建截屏按钮右键菜单项清单",
    "lineNumber": 231,
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "右键菜单项清单"
    },
    "params": []
  },
  {
    "__docId__": 511,
    "kind": "function",
    "name": "chatRenamePrompt",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~chatRenamePrompt",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{chatRenamePrompt}",
    "description": "显示重命名聊天对话框",
    "lineNumber": 368,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "要重命名的聊天"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 512,
    "kind": "function",
    "name": "chatExitConfirm",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~chatExitConfirm",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{chatExitConfirm}",
    "description": "显示确认退出聊天对话框",
    "lineNumber": 383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "要退出的聊天"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 513,
    "kind": "function",
    "name": "chatDismissConfirm",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~chatDismissConfirm",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{chatDismissConfirm}",
    "description": "显示确认解散聊天对话框",
    "lineNumber": 396,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "要解散的聊天"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 514,
    "kind": "function",
    "name": "linkMembersInText",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~linkMembersInText",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{linkMembersInText}",
    "description": "将文本中的 `@member` 转换为 HTML 链接",
    "lineNumber": 606,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "文本内容"
      },
      {
        "nullable": null,
        "types": [
          "{format: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "param1",
        "description": "格式化选项"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "转换后的文本"
    }
  },
  {
    "__docId__": 515,
    "kind": "variable",
    "name": "onRenderChatMessageContentListener",
    "memberof": "app/core/im/im-ui.js",
    "static": true,
    "longname": "app/core/im/im-ui.js~onRenderChatMessageContentListener",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": null,
    "description": "转换消息内容回调函数",
    "lineNumber": 629,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 516,
    "kind": "function",
    "name": "renderChatMessageContent",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~renderChatMessageContent",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{renderChatMessageContent}",
    "description": "将聊天消息内容转换为适合显示的 HTML 文本",
    "lineNumber": 637,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "messageContent",
        "description": "聊天消息内容"
      },
      {
        "nullable": null,
        "types": [
          "{renderMarkdown: boolean}"
        ],
        "spread": false,
        "optional": false,
        "name": "param1",
        "description": "转换选项"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "转换后的聊天消息内容文本"
    }
  },
  {
    "__docId__": 517,
    "kind": "function",
    "name": "onRenderChatMessageContent",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~onRenderChatMessageContent",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{onRenderChatMessageContent}",
    "description": "绑定转换消息内容事件",
    "lineNumber": 657,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 518,
    "kind": "function",
    "name": "createGroupChat",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~createGroupChat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{createGroupChat}",
    "description": "根据成员清单创建讨论组",
    "lineNumber": 666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<number>",
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "groupMembers",
        "description": "聊天成员"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 519,
    "kind": "function",
    "name": "renameChatCategory",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~renameChatCategory",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{renameChatCategory}",
    "description": "重命名讨论组",
    "lineNumber": 690,
    "params": [
      {
        "nullable": null,
        "types": [
          "{id: number, title: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "要重命名的讨论组"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "讨论组类型"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newCategoryName",
        "description": "新的讨论组名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 520,
    "kind": "function",
    "name": "onSuggestSendImage",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~onSuggestSendImage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{onSuggestSendImage}",
    "description": "绑定推荐发送剪切板图片事件",
    "lineNumber": 848,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 521,
    "kind": "function",
    "name": "emitChatSendboxFocus",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~emitChatSendboxFocus",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{emitChatSendboxFocus}",
    "description": "激活聊天发送框并可以选择性的发送文本内容到聊天发送框",
    "lineNumber": 856,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "sendboxContent",
        "description": "要发送到聊天框的内容"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 522,
    "kind": "function",
    "name": "onChatSendboxFocus",
    "memberof": "app/core/im/im-ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/im/im-ui.js~onChatSendboxFocus",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/im/im-ui.js",
    "importStyle": "{onChatSendboxFocus}",
    "description": "绑定聊天发送框激活事件",
    "lineNumber": 868,
    "params": [
      {
        "nullable": null,
        "types": [
          "funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 523,
    "kind": "file",
    "name": "app/core/im/index.js",
    "content": "import chats from './im-chats';\nimport server from './im-server';\nimport ui from './im-ui';\nimport notice from './im-notice';\nimport files from './im-files';\n\nexport default {\n    chats,\n    ui,\n    server,\n    notice,\n    files,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/im/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 524,
    "kind": "file",
    "name": "app/core/index.js",
    "content": "import profile from './profile';\nimport members from './members';\nimport im from './im';\nimport db from './db';\nimport server from './server';\nimport notice from './notice';\nimport events from './events';\nimport ui from './ui';\nimport models from './models';\nimport todo from './todo';\n\nconst app = {\n    profile,\n    members,\n    im,\n    db,\n    server,\n    notice,\n    events,\n    ui,\n    models,\n    todo,\n\n    get user() {\n        return profile.user;\n    }\n};\n\nif (DEBUG) {\n    global.$.App = app;\n}\n\nexport default app;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 525,
    "kind": "variable",
    "name": "app",
    "memberof": "app/core/index.js",
    "static": true,
    "longname": "app/core/index.js~app",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/index.js",
    "importStyle": "app",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{\"profile\": *, \"members\": *, \"im\": *, \"db\": *, \"server\": *, \"notice\": *, \"events\": *, \"ui\": *, \"models\": *, \"todo\": *, \"user\": function}"
      ]
    }
  },
  {
    "__docId__": 526,
    "kind": "file",
    "name": "app/core/members.js",
    "content": "import Member from './models/member';\nimport {getCurrentUser, onSwapUser} from './profile';\nimport events from './events';\nimport Lang from '../lang';\n\n/**\n * 缓存当前用户所有用户信息\n * @type {Object<string, Member>}\n * @private\n */\nlet members = null;\n\n/**\n * 缓存当前用户角色表\n * @type {Object<string, Object>}\n * @private\n */\nlet roles = null;\n\n/**\n * 缓存当前用户部门表\n * @type {Object<string, Object>}\n * @private\n */\nlet depts = null;\n\n/**\n * 事件名称表\n * @type {Object<string, string>}\n * @private\n */\nconst EVENT = {\n    change: 'members.change',\n};\n\n/**\n * 更新缓存的用户数据\n * @param {Object[]} memberArr 要更新的用户\n * @@return {void}\n */\nexport const updateMembers = memberArr => {\n    if (!Array.isArray(memberArr)) {\n        memberArr = [memberArr];\n    }\n\n    const newMembers = {};\n\n    memberArr.forEach(member => {\n        member = Member.create(member);\n        const user = getCurrentUser();\n        const isMe = user && member.id === user.id;\n        member.isMe = isMe;\n        newMembers[member.id] = member;\n        if (isMe) {\n            user.assign({realname: member.realname, avatar: member.avatar});\n        }\n    });\n\n    Object.assign(members, newMembers);\n    events.emit(EVENT.change, newMembers, members);\n    events.emitDataChange({members: newMembers});\n};\n\n/**\n * 绑定成员变更事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onMembersChange = listener => events.on(EVENT.change, listener);\n\n/**\n * 部门排序比较函数\n * @param {Object} d1 部门1\n * @param {Object} d2 部门2\n * @return {number}\n */\nexport const deptsSorter = (d1, d2) => {\n    let result = (d1.order || 0) - (d2.order || 0);\n    if (result === 0 || Number.isNaN(result)) {\n        result = d1.id - d2.id;\n    }\n    return result;\n};\n\n/**\n * 初始化缓存的部门表\n * @param {Object} deptsMap 部门表\n * @return {void}\n */\nexport const initDepts = (deptsMap) => {\n    depts = {};\n    if (deptsMap) {\n        const deptsArr = Object.keys(deptsMap).map(deptId => {\n            const dept = deptsMap[deptId];\n            dept.id = deptId;\n            return deptId;\n        }).sort(deptsSorter);\n        deptsArr.forEach(deptId => {\n            const dept = deptsMap[deptId];\n            let parentDept = dept.parent && deptsMap[dept.parent];\n            if (parentDept) {\n                const parents = [];\n                if (!parentDept.children) {\n                    parentDept.children = [];\n                }\n                parentDept.children.push(dept);\n                while (parentDept) {\n                    parents.push(parentDept);\n                    parentDept = parentDept.parent && deptsMap[parentDept.parent];\n                }\n                dept.parents = parents;\n            }\n            depts[deptId] = dept;\n        });\n    }\n};\n\n/**\n * 获取部门树结构对象\n * @return {Object[]}\n */\nexport const getDeptsTree = () => {\n    return Object.keys(depts).map(x => depts[x]).filter(x => !x.parents).sort(deptsSorter);\n};\n\n/**\n * 初始化缓存的用户数据\n * @param {Object[]} memberArr 要更新的用户\n * @param {Object} rolesMap 角色表\n * @param {Object} deptsMap 部门表\n * @@return {void}\n */\nexport const initMembers = (memberArr, rolesMap, deptsMap) => {\n    roles = rolesMap || {};\n\n    Object.keys(members).forEach(membersId => {\n        const member = members[membersId];\n        if (!member.temp && !member.isDeleted) {\n            member.$set('deleted', true);\n        }\n    });\n    if (memberArr && memberArr.length) {\n        updateMembers(memberArr);\n    }\n\n    initDepts(deptsMap);\n};\n\n/**\n * 获取缓存中的所有用户数据\n * @return {Member[]}\n */\nexport const getAllMembers = () => (members ? Object.keys(members).map(x => members[x]) : []);\n\n/**\n * 遍历缓存中的用户数据\n * @param {Function(member: Member)} callback 遍历回调函数\n * @param {boolean} [ignoreDeleteUser=false] 是否忽略已删除的用户\n * @return {void}\n */\nexport const forEachMember = (callback, ignoreDeleteUser = false) => {\n    if (members) {\n        Object.keys(members).forEach(memberId => {\n            if (!ignoreDeleteUser || !members[memberId].isDeleted) {\n                callback(members[memberId]);\n            }\n        });\n    }\n};\n\n/**\n * 根据用户账号或 ID 获取缓存中的用户对象\n *\n * @param {!string} idOrAccount 账号或 ID\n * @return {Member}\n */\nexport const getMember = (idOrAccount) => {\n    let member = members[idOrAccount];\n    if (!member) {\n        const findId = Object.keys(members).find(x => (members[x].account === idOrAccount));\n        if (findId) member = members[findId];\n        else {\n            member = new Member({\n                id: idOrAccount,\n                account: idOrAccount,\n                realname: `User-${idOrAccount}`\n            });\n            member.temp = true;\n        }\n    }\n    return member;\n};\n\n/**\n * 根据用户的账号、ID 或真实姓名获取用户对象\n * @param {!string} search 用于辨识用户的字符串，可以为用户的账号、ID 或真实姓名\n * @return {Member} 成员实例\n */\nexport const guessMember = (search) => {\n    let member = members[search];\n    if (!member) {\n        const findId = Object.keys(members).find(x => {\n            const xMember = members[x];\n            return xMember.account === search || xMember.realname === search;\n        });\n        if (findId) {\n            member = members[findId];\n        }\n    }\n    return member;\n};\n\n/**\n * 查询缓存中的用户数据，查询条件可以为：\n * - `Object`，包含属性值的对象；\n * - `Function`，使用函数判断是否符合要求；\n * - `string[]`，用户用户名或 ID 组成的字符串数组\n * @param {Object|Function|string[]} condition 查询条件\n * @param {string|boolean} sortList 排序依据，如果为 `true` 则使用默认排序依据\n * @return {Member[]} 查询结果\n */\nexport const queryMembers = (condition, sortList) => {\n    let result = null;\n    if (typeof condition === 'object' && condition !== null) {\n        const conditionObj = condition;\n        const conditionKeys = Object.keys(conditionObj);\n        condition = member => {\n            for (const key of conditionKeys) {\n                if (conditionObj[key] !== member[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }\n    if (typeof condition === 'function') {\n        result = [];\n        forEachMember(member => {\n            if (condition(member)) {\n                result.push(member);\n            }\n        });\n    } else if (Array.isArray(condition)) {\n        result = [];\n        condition.forEach(x => {\n            const member = getMember(x);\n            if (member) {\n                result.push(member);\n            }\n        });\n    } else {\n        result = getAllMembers();\n    }\n    if (sortList && result && result.length) {\n        const user = getCurrentUser();\n        Member.sort(result, sortList, user && user.id);\n    }\n    return result || [];\n};\n\n/**\n * 从缓存数据中移除指定的用户\n * @param {Member|string} member 用户对象实例或用户用户名或 ID\n * @return {boolean} 如果为 `true` 移除成功，如果为 `false` 移除失败，通常是找不到对应的用户\n */\nexport const removeMember = member => {\n    const memberId = (typeof member === 'object') ? member.id : member;\n    if (members[memberId]) {\n        delete members[memberId];\n        return true;\n    }\n    return false;\n};\n\n/**\n * 获取角色显示名称\n * @param {string} role 角色代号\n * @return {string}\n */\nexport const getRoleName = role => ((role && roles) ? (roles[role] || Lang.string(`member.role.${role}`, role)) : '');\n\n/**\n * 获取部门数据对象\n * @param {string} deptId 部门 ID\n * @return {Object<string, any>}\n */\nexport const getDept = deptId => depts[deptId];\n\n// 当当前登录的用户用户名变更时清空缓存中的用户数据\nonSwapUser(user => {\n    members = {};\n    roles = null;\n    depts = null;\n});\n\nexport default {\n    update: updateMembers,\n    init: initMembers,\n    get: getMember,\n    getAll: getAllMembers,\n    forEach: forEachMember,\n    guess: guessMember,\n    query: queryMembers,\n    remove: removeMember,\n    getRoleName,\n    getDept,\n    getDeptsTree,\n    deptsSorter,\n    onMembersChange,\n    get map() {\n        return members;\n    },\n    get all() {\n        return getAllMembers();\n    },\n    get depts() {\n        return depts;\n    },\n    get hasDepts() {\n        return depts && Object.keys(depts).length;\n    }\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/members.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 527,
    "kind": "variable",
    "name": "members",
    "memberof": "app/core/members.js",
    "static": true,
    "longname": "app/core/members.js~members",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": null,
    "description": "缓存当前用户所有用户信息",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, Member>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 528,
    "kind": "variable",
    "name": "roles",
    "memberof": "app/core/members.js",
    "static": true,
    "longname": "app/core/members.js~roles",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": null,
    "description": "缓存当前用户角色表",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 529,
    "kind": "variable",
    "name": "depts",
    "memberof": "app/core/members.js",
    "static": true,
    "longname": "app/core/members.js~depts",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": null,
    "description": "缓存当前用户部门表",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, Object>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 530,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/members.js",
    "static": true,
    "longname": "app/core/members.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": null,
    "description": "事件名称表",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 531,
    "kind": "function",
    "name": "updateMembers",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~updateMembers",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{updateMembers}",
    "description": "更新缓存的用户数据",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "memberArr",
        "description": "要更新的用户\n@@return {void}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 532,
    "kind": "function",
    "name": "onMembersChange",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~onMembersChange",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{onMembersChange}",
    "description": "绑定成员变更事件",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 533,
    "kind": "function",
    "name": "deptsSorter",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~deptsSorter",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{deptsSorter}",
    "description": "部门排序比较函数",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d1",
        "description": "部门1"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "d2",
        "description": "部门2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 534,
    "kind": "function",
    "name": "initDepts",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~initDepts",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{initDepts}",
    "description": "初始化缓存的部门表",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "deptsMap",
        "description": "部门表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 535,
    "kind": "function",
    "name": "getDeptsTree",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~getDeptsTree",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{getDeptsTree}",
    "description": "获取部门树结构对象",
    "lineNumber": 122,
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 536,
    "kind": "function",
    "name": "initMembers",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~initMembers",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{initMembers}",
    "description": "初始化缓存的用户数据",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "memberArr",
        "description": "要更新的用户"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rolesMap",
        "description": "角色表"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "deptsMap",
        "description": "部门表\n@@return {void}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 537,
    "kind": "function",
    "name": "getAllMembers",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~getAllMembers",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{getAllMembers}",
    "description": "获取缓存中的所有用户数据",
    "lineNumber": 153,
    "return": {
      "nullable": null,
      "types": [
        "Member[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 538,
    "kind": "function",
    "name": "forEachMember",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~forEachMember",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{forEachMember}",
    "description": "遍历缓存中的用户数据",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function(member: Member)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "遍历回调函数"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "ignoreDeleteUser",
        "description": "是否忽略已删除的用户"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 539,
    "kind": "function",
    "name": "getMember",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~getMember",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{getMember}",
    "description": "根据用户账号或 ID 获取缓存中的用户对象",
    "lineNumber": 177,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "idOrAccount",
        "description": "账号或 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Member"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 540,
    "kind": "function",
    "name": "guessMember",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~guessMember",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{guessMember}",
    "description": "根据用户的账号、ID 或真实姓名获取用户对象",
    "lineNumber": 199,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "用于辨识用户的字符串，可以为用户的账号、ID 或真实姓名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Member"
      ],
      "spread": false,
      "description": "成员实例"
    }
  },
  {
    "__docId__": 541,
    "kind": "function",
    "name": "queryMembers",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~queryMembers",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{queryMembers}",
    "description": "查询缓存中的用户数据，查询条件可以为：\n- `Object`，包含属性值的对象；\n- `Function`，使用函数判断是否符合要求；\n- `string[]`，用户用户名或 ID 组成的字符串数组",
    "lineNumber": 222,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "Function",
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "查询条件"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "sortList",
        "description": "排序依据，如果为 `true` 则使用默认排序依据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Member[]"
      ],
      "spread": false,
      "description": "查询结果"
    }
  },
  {
    "__docId__": 542,
    "kind": "function",
    "name": "removeMember",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~removeMember",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{removeMember}",
    "description": "从缓存数据中移除指定的用户",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "用户对象实例或用户用户名或 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 移除成功，如果为 `false` 移除失败，通常是找不到对应的用户"
    }
  },
  {
    "__docId__": 543,
    "kind": "function",
    "name": "getRoleName",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~getRoleName",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{getRoleName}",
    "description": "获取角色显示名称",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "role",
        "description": "角色代号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 544,
    "kind": "function",
    "name": "getDept",
    "memberof": "app/core/members.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/members.js~getDept",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/members.js",
    "importStyle": "{getDept}",
    "description": "获取部门数据对象",
    "lineNumber": 287,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deptId",
        "description": "部门 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 545,
    "kind": "file",
    "name": "app/core/models/chat-message.js",
    "content": "import Entity from './entity';\nimport Status from '../../utils/status';\nimport Member from './member';\n\n/**\n * 聊天消息状态管理器\n *\n * @private\n * @type {Status}\n */\nconst STATUS = new Status({\n    draft: 0,\n    sending: 1,\n    sendFail: 2,\n    ok: 3,\n}, 0);\n\n/**\n * 聊天消息类型表\n * @type {Object<string,string>}\n * @private\n */\nconst TYPES = {\n    broadcast: 'broadcast',\n    normal: 'normal',\n    notification: 'notification'\n};\n\n/**\n * 聊天消息内容类型表\n * @type {Object<string,string>}\n * @private\n */\nconst CONTENT_TYPES = {\n    file: 'file',\n    image: 'image',\n    text: 'text',\n    plain: 'plain',\n    emoticon: 'emoticon',\n    object: 'object'\n};\n\n/**\n * 聊天消息对象内容类型表\n * @type {Object<string,string>}\n * @private\n */\nconst OBJECT_TYPES = {\n    default: 'default',\n    url: 'url'\n};\n\n/**\n * 判断会发送失败的等待时间，单位毫秒\n * @type {number}\n * @private\n */\nconst SEND_WAIT_TIME = 10000;\n\nexport default class ChatMessage extends Entity {\n    /**\n     * 实体名称\n     * @type {string}\n     * @memberof Entity\n     */\n    static NAME = 'ChatMessage';\n\n    /**\n     * 聊天消息状态管理器\n     *\n     * @static\n     * @type {Status}\n     * @memberof ChatMessage\n     */\n    static STATUS = STATUS;\n\n    /**\n     * 聊天消息类型表\n     * @type {Object<string,string>}\n     * @static\n     * @memberof ChatMessage\n     */\n    static TYPES = TYPES;\n\n    /**\n     * 聊天消息内容类型表\n     * @type {Object<string,string>}\n     * @static\n     * @memberof ChatMessage\n     */\n    static CONTENT_TYPES = CONTENT_TYPES;\n\n    /**\n     * 聊天消息对象内容类型表\n     * @type {Object<string,string>}\n     * @static\n     * @memberof ChatMessage\n     */\n    static OBJECT_TYPES = OBJECT_TYPES;\n\n    /**\n     * 数据库存储实体属性结构管理器\n     *\n     * @type {EntitySchema}\n     * @static\n     * @memberof Chat\n     */\n    static SCHEMA = Entity.SCHEMA.extend({\n        cgid: {type: 'string', indexed: true},\n        user: {type: 'int', indexed: true},\n        order: {type: 'int', indexed: true},\n        date: {type: 'timestamp', indexed: true},\n        type: {type: 'string', indexed: true, defaultValue: TYPES.normal},\n        contentType: {type: 'string', indexed: true, defaultValue: CONTENT_TYPES.text},\n        content: {type: 'string', defaultValue: null},\n        unread: {type: 'boolean', indexed: true, defaultValue: false},\n        status: {type: 'int', indexed: true},\n        data: {type: 'json'},\n    });\n\n    /**\n     * 创建一个聊天消息类实例\n     * @param {Object<string,any>} data 聊天消息属性对象\n     * @param {string} [entityType=Chat.NAME] 实体类型名称\n     * @memberof Chat\n     */\n    constructor(data, entityType = ChatMessage.NAME) {\n        super(data, entityType);\n\n        /**\n         * 聊天消息状态\n         * @type {Status}\n         * @private\n         */\n        this._status = STATUS.create(this.$.status);\n        this._status.onChange = newStatus => {\n            this.$.status = newStatus;\n            if (typeof this.onStatusChange === 'function') {\n                this.onStatusChange(newStatus, this);\n            }\n        };\n        if (!this.$.contentType) {\n            this.$.contentType = CONTENT_TYPES.text;\n        }\n        if (!this.$.type) {\n            this.$.type = TYPES.normal;\n        }\n        if (!this.$.date) {\n            this.$.date = new Date().getTime();\n        }\n    }\n\n    /**\n     * 获取用于发送到服务器的数据简单对象\n     *\n     * @return {Object<string,any>} 简单对象\n     * @memberof ChatMessage\n     */\n    plainServer() {\n        return {\n            gid: this.gid,\n            cgid: this.cgid,\n            type: this.type,\n            contentType: this.contentType,\n            content: this.content,\n            date: '',\n            user: this.senderId,\n            order: this.order,\n        };\n    }\n\n    /**\n     * 获取数据库存储实体属性结构管理器\n     *\n     * @readonly\n     * @memberof Member\n     * @type {EntitySchema}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    get schema() {\n        return ChatMessage.SCHEMA;\n    }\n\n    /**\n     * 设置 ID 属性\n     * @param {number} remoteId  ID 属性\n     * @memberof Chat\n     */\n    set id(remoteId) {\n        super.id = remoteId;\n        this._status.change(remoteId ? STATUS.ok : STATUS.sendFail);\n    }\n\n    /**\n     * 获取 ID 属性值\n     * @memberof Chat\n     * @type {number}\n     */\n    get id() {\n        return this.$get('id', 0);\n    }\n\n    /**\n     * 获取排序序号\n     * @memberof ChatMessage\n     * @type {number}\n     */\n    get order() {\n        return this.$get('order', 0);\n    }\n\n    /**\n     * 设置排序序号\n     * @param {number} order 排序序号\n     * @memberof ChatMessage\n     */\n    set order(order) {\n        this.$set('order', order);\n    }\n\n    /**\n     * 获取状态值\n     * @memberof ChatMessage\n     * @readonly\n     * @type {number}\n     */\n    get status() {\n        return this._status.value;\n    }\n\n    /**\n     * 获取状态名称\n     * @memberof ChatMessage\n     * @readonly\n     * @type {string}\n     */\n    get statusName() {\n        return this._status.name;\n    }\n\n    /**\n     * 判断当前状态是否是给定的状态\n     * @memberof ChatMessage\n     * @param {number|string} status 要判断的状态值或状态名称\n     * @return {boolean} 如果为 `true` 则为给定的状态，否则不是\n     */\n    isStatus(status) {\n        return this._status.is(status);\n    }\n\n    /**\n     * 获取是否发送失败\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isSendFail() {\n        return this.isStatus(STATUS.sendFail);\n    }\n\n    /**\n     * 获取是否发送成功\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isOK() {\n        return this.isStatus(STATUS.ok);\n    }\n\n    /**\n     * 获取是否已发送正在等待服务器结果\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isSending() {\n        return this.isStatus(STATUS.sending);\n    }\n\n    /**\n     * 获取是否是草稿状态（未发送）\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isDraft() {\n        return this.isStatus(STATUS.draft);\n    }\n\n    /**\n     * 标记为开始发送状态\n     *\n     * @memberof ChatMessage\n     * @return {void}\n     */\n    beginSend() {\n        this.$set('date', new Date().getTime());\n        this._status.change(STATUS.sending);\n        setTimeout(() => {\n            if (this.isStatus(STATUS.sending)) {\n                this._status.change(STATUS.sendFail);\n            }\n        }, SEND_WAIT_TIME);\n    }\n\n    /**\n     * 标记为结束发送\n     *\n     * @param {*} remoteId 服务器存储 ID，如果为 `0`，表示发送失败（没有在服务器上存储）\n     * @return {void}\n     * @memberof ChatMessage\n     */\n    endSend(remoteId) {\n        this.id = remoteId;\n    }\n\n    /**\n     * 获取全局唯一标识字符串 GID\n     * @memberof ChatMessage\n     * @type {string}\n     */\n    get cgid() {\n        return this.$get('cgid');\n    }\n\n    /**\n     * 设置全局唯一标识字符串 GID\n     * @param {string} gid 全局唯一标识字符串 GID\n     * @memberof ChatMessage\n     */\n    set cgid(gid) {\n        this.$set('cgid', gid);\n    }\n\n    /**\n     * 获取是否处于未读状态\n     * @memberof ChatMessage\n     * @type {boolean}\n     */\n    get unread() {\n        return this.$get('unread');\n    }\n\n    /**\n     * 设置是否处于未读状态\n     * @param {boolean} unread 处于未读状态\n     * @memberof ChatMessage\n     */\n    set unread(unread) {\n        this.$set('unread', unread);\n    }\n\n    /**\n     * 获取消息额外存储数据\n     * @memberof ChatMessage\n     * @type {Object}\n     */\n    get data() {\n        if (this._data === undefined) {\n            this._data = this.$get('data');\n        }\n        return this._data;\n    }\n\n    /**\n     * 设置消息额外存储数据\n     * @param {any} data 消息额外存储数据，会转换为 JSON 字符串类型进行存储\n     * @memberof ChatMessage\n     */\n    set data(data) {\n        if (data !== undefined) {\n            data = JSON.stringify(data);\n            delete this._data;\n        }\n        this.$set('data', data);\n    }\n\n    /**\n     * 获取消息发送日期时间戳\n     * @memberof ChatMessage\n     * @type {number}\n     */\n    get date() {\n        return this.$get('date');\n    }\n\n    /**\n     * 设置消息发送日期时间戳\n     * @param {number} date 消息发送日期时间戳\n     * @memberof ChatMessage\n     */\n    set date(date) {\n        this.$set('date', date);\n    }\n\n    /**\n     * 获取消息发送日期时间戳，相当于读取 `date` 属性\n     * @memberof ChatMessage\n     * @type {number}\n     */\n    get sendTime() {\n        return this.date;\n    }\n\n    /**\n     * 获取消息发送者 ID\n     * @memberof ChatMessage\n     * @type {number}\n     */\n    get senderId() {\n        return this.$get('user');\n    }\n\n    /**\n     * 判断给定的成员 ID 是否是当前消息发送者\n     *\n     * @param {number} userId 成员 ID\n     * @returns {boolean} 如果返回 `true` 则为是当前消息发送者，否则为不是当前消息发送者\n     * @memberof ChatMessage\n     */\n    isSender(userId) {\n        return this.senderId === userId;\n    }\n\n    /**\n     * 获取消息发送者成员对象\n     * @memberof ChatMessage\n     * @type {Member}\n     */\n    get sender() {\n        if (!this._sender) {\n            return new Member({\n                id: this.senderId\n            });\n        }\n        return this._sender;\n    }\n\n    /**\n     * 设置消息发送者\n     * @param {Member} sendUser 消息发送者\n     * @memberof ChatMessage\n     */\n    set sender(sendUser) {\n        if (sendUser) {\n            this._sender = sendUser;\n            this.$set('user', sendUser.id);\n        }\n    }\n\n    /**\n     * 从系统获取消息发送成员对象\n     *\n     * @param {{get: function(id: number):Member}} appMembers 用于从系统获取成员信息的辅助对象\n     * @return {Member} 消息发送成员\n     * @memberof ChatMessage\n     */\n    getSender(appMembers) {\n        this._sender = appMembers.get(this.senderId);\n        return this._sender;\n    }\n\n    /**\n     * 获取消息内容类型\n     * @memberof ChatMessage\n     * @type {string}\n     */\n    get contentType() {\n        return this.$get('contentType', CONTENT_TYPES.text);\n    }\n\n    /**\n     * 设置消息内容类型\n     * @param {string} type 消息内容类型\n     * @memberof ChatMessage\n     */\n    set contentType(type) {\n        this.$set('contentType', type);\n    }\n\n    /**\n     * 获取消息内容是否是文件\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isFileContent() {\n        return this.contentType === CONTENT_TYPES.file;\n    }\n\n    /**\n     * 获取消息内容是否是文本\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isTextContent() {\n        return this.contentType === CONTENT_TYPES.text || this.contentType === CONTENT_TYPES.plain;\n    }\n\n    /**\n     * 获取消息内容是否是纯文本\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isPlainTextContent() {\n        return this.contentType === CONTENT_TYPES.plain;\n    }\n\n    /**\n     * 获取消息内容是否是图片\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isImageContent() {\n        return this.contentType === CONTENT_TYPES.image;\n    }\n\n    /**\n     * 获取消息内容是否是对象\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isObjectContent() {\n        return this.contentType === CONTENT_TYPES.object;\n    }\n\n    /**\n     * 获取内容对象类型\n     * @readonly\n     * @memberof ChatMessage\n     * @type {string}\n     */\n    get objectContentType() {\n        return this.isObjectContent ? this.objectContent.type : null;\n    }\n\n    /**\n     * 获取内容对象\n     * @readonly\n     * @memberof ChatMessage\n     * @type {Object<string, any>}\n     */\n    get objectContent() {\n        if (this.isObjectContent) {\n            let objectContent = this._objectContent;\n            if (!objectContent) {\n                objectContent = JSON.parse(this.content);\n                if (objectContent.path) {\n                    delete objectContent.path;\n                }\n                this._objectContent = objectContent;\n            }\n            return objectContent;\n        }\n        return null;\n    }\n\n    /**\n     * 获取消息类型\n     * @memberof ChatMessage\n     * @type {string}\n     */\n    get type() {\n        return this.$get('type', TYPES.normal);\n    }\n\n    /**\n     * 设置消息类型\n     * @param {string} type 消息类型\n     * @memberof ChatMessage\n     */\n    set type(type) {\n        this.$set('type', type);\n    }\n\n    /**\n     * 获取消息类型是否为广播\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isBroadcast() {\n        return this.type === TYPES.broadcast;\n    }\n\n    /**\n     * 获取原始内容字符串\n     * @memberof ChatMessage\n     * @type {string}\n     */\n    get content() {\n        return this.$get('content');\n    }\n\n    /**\n     * 设置原始内容字符串\n     * @param {string} newContent 原始内容字符串\n     * @memberof ChatMessage\n     */\n    set content(newContent) {\n        this.$set('content', newContent);\n        if (this._imageContent) {\n            delete this._imageContent;\n        }\n        if (this._fileContent) {\n            delete this._fileContent;\n        }\n        if (this._objectContent) {\n            delete this._objectContent;\n        }\n        if (this._renderedTextContent) {\n            delete this._renderedTextContent;\n            delete this._isBlockContent;\n        }\n    }\n\n    /**\n     * 将文本消息渲染为 HTML 格式\n     *\n     * @param {...function(content: string, options: Object<string,any>)} converters 格式转换函数\n     * @return {string} 转换后的 HTML 字符串\n     * @memberof ChatMessage\n     */\n    renderedTextContent(...converters) {\n        if (this._renderedTextContent === undefined) {\n            let {content} = this;\n            const renderOptions = {renderMarkdown: !this.isPlainTextContent};\n            if (typeof content === 'string' && content.length) {\n                if (converters && converters.length) {\n                    converters.forEach(converter => {\n                        content = converter(content, renderOptions);\n                    });\n                }\n                this._renderedTextContent = content;\n                this._isBlockContent = content && (content.includes('<h1>') || content.includes('<h2>') || content.includes('<h3>'));\n            } else {\n                this._renderedTextContent = '';\n                this._isBlockContent = false;\n            }\n        }\n        return this._renderedTextContent;\n    }\n\n    /**\n     * 获取是否块级富文本消息（至少包含一个 3 级以上的标题）\n     * @memberof ChatMessage\n     * @type {boolean}\n     */\n    get isBlockContent() {\n        return this.renderedTextContent && this._isBlockContent;\n    }\n\n    /**\n     * 获取图片内容对象\n     * @memberof ChatMessage\n     * @type {Object<string,any>}\n     */\n    get imageContent() {\n        if (this.isImageContent) {\n            let imageContent = this._imageContent;\n            if (!imageContent) {\n                imageContent = JSON.parse(this.content);\n                if (imageContent.path) {\n                    delete imageContent.path;\n                }\n                this._imageContent = imageContent;\n            }\n            return imageContent;\n        }\n        return null;\n    }\n\n    /**\n     * 设置图片内容对象\n     * @param {Object} content 图片内容对象\n     * @memberof ChatMessage\n     */\n    set imageContent(content) {\n        delete content.path;\n\n        this.contentType = CONTENT_TYPES.image;\n        this._imageContent = content;\n        this.content = JSON.stringify(content);\n    }\n\n    /**\n     * 更新图片内容对象\n     *\n     * @param {Object} content 图片内容对象\n     * @return {void}\n     * @memberof ChatMessage\n     */\n    updateImageContent(content) {\n        this._imageContent = Object.assign({}, this.imageContent, content);\n        this.content = JSON.stringify(this._imageContent);\n    }\n\n    /**\n     * 获取文件内容对象\n     * @memberof ChatMessage\n     * @type {Object<string,any>}\n     */\n    get fileContent() {\n        if (this.isFileContent) {\n            let fileContent = this._fileContent;\n            if (!fileContent) {\n                fileContent = JSON.parse(this.content);\n                if (fileContent.path) {\n                    delete fileContent.path;\n                }\n                this._fileContent = fileContent;\n            }\n            if (fileContent) {\n                fileContent.user = this.user;\n                if (this._sender) {\n                    fileContent.sender = this.sender;\n                }\n                fileContent.senderId = this.senderId;\n                fileContent.attachFile = this.attachFile;\n                fileContent.date = this.sendTime;\n                fileContent.gid = this.gid;\n            }\n            return fileContent;\n        }\n        return null;\n    }\n\n    /**\n     * 设置文件内容对象\n     * @param {Object} content 文件内容对象\n     * @memberof ChatMessage\n     */\n    set fileContent(content) {\n        delete content.path;\n\n        this.contentType = CONTENT_TYPES.file;\n        this.content = JSON.stringify({\n            name: content.name || content.title,\n            size: content.size,\n            send: content.send,\n            type: content.type,\n            id: content.id,\n            time: content.time,\n            isImage: content.type && content.type.startsWith('image')\n        });\n        this._fileContent = content;\n    }\n\n    /**\n     * 更新文件内容对象\n     *\n     * @param {Object} content 文件内容对象\n     * @return {void}\n     * @memberof ChatMessage\n     */\n    updateFileContent(content) {\n        this._fileContent = Object.assign({}, this.fileContent, content);\n        this.content = JSON.stringify(this._fileContent);\n    }\n\n    /**\n     * 获取消息指令对象\n     *\n     * @return {{action: string}} 消息指令对象\n     * @memberof ChatMessage\n     */\n    getCommand() {\n        if (this.contentType === 'text') {\n            const content = this.content.trim();\n            if (content === '$$version') {\n                return {action: 'version'};\n            }\n            if (content === '$$dataPath') {\n                return {action: 'dataPath'};\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 重置实体属性\n     *\n     * @param {Object} newData 属性对象\n     * @memberof ChatMessage\n     * @return {void}\n     */\n    reset(newData) {\n        if (newData instanceof ChatMessage) {\n            newData = newData.plain();\n        }\n        this.$set(newData);\n        this._status.change(newData.status);\n        delete this._fileContent;\n        delete this._imageContent;\n        delete this._isBlockContent;\n        delete this._renderedTextContent;\n        delete this._sender;\n    }\n\n    /**\n     * 检查消息是否需要检查重新发送\n     * @type {boolean}\n     * @memberof ChatMessage\n     * @readonly\n     */\n    get needCheckResend() {\n        return !this.id;\n    }\n\n    /**\n     * 判断消息是否发送失败并且需要重新发送\n     * @type {boolean}\n     * @memberof ChatMessage\n     * @readonly\n     */\n    get needResend() {\n        return this.needCheckResend && this.isSendFailed && !this.isFileContent && !this.isImageContent;\n    }\n\n    /**\n     * 获取是否发送失败\n     * @memberof ChatMessage\n     * @type {boolean}\n     * @readonly\n     */\n    get isSendFailed() {\n        return this.needCheckResend && this.isOutdated;\n    }\n\n    /**\n     * 检查消息是否过期（在一定时间内没有收到服务器回应的远程存储 ID）\n     * @type {boolean}\n     * @memberof ChatMessage\n     * @readonly\n     */\n    get isOutdated() {\n        return (new Date().getTime() - this.date) > 10000;\n    }\n\n    /**\n     * 创建一个聊天消息类实例\n     *\n     * @static\n     * @param {Object<string,any>|ChatMessage} chatMessage 聊天消息属性对象或者聊天消息实例\n     * @return {ChatMessage} 聊天消息类实例\n     * @memberof ChatMessage\n     */\n    static create(chatMessage) {\n        if (chatMessage instanceof ChatMessage) {\n            return chatMessage;\n        }\n        return new ChatMessage(chatMessage);\n    }\n\n    /**\n     * 对聊天消息列表进行排序\n     * @param  {ChatMessage[]} messages 要排序的聊天列表\n     * @return {ChatMessage[]} 排序后的聊天列表\n     * @memberof ChatMessage\n     * @static\n     */\n    static sort(messages) {\n        return messages.sort((x, y) => {\n            let orderResult = x.date - y.date;\n            if (orderResult === 0 && x.order && y.order) {\n                orderResult = x.order - y.order;\n            }\n            if (orderResult === 0) {\n                orderResult = (x.id || Number.MAX_SAFE_INTEGER) - (y.id || Number.MAX_SAFE_INTEGER);\n            }\n            return orderResult;\n        });\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/models/chat-message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 546,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "app/core/models/chat-message.js",
    "static": true,
    "longname": "app/core/models/chat-message.js~STATUS",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/chat-message.js",
    "importStyle": null,
    "description": "聊天消息状态管理器",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 547,
    "kind": "variable",
    "name": "TYPES",
    "memberof": "app/core/models/chat-message.js",
    "static": true,
    "longname": "app/core/models/chat-message.js~TYPES",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/chat-message.js",
    "importStyle": null,
    "description": "聊天消息类型表",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 548,
    "kind": "variable",
    "name": "CONTENT_TYPES",
    "memberof": "app/core/models/chat-message.js",
    "static": true,
    "longname": "app/core/models/chat-message.js~CONTENT_TYPES",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/chat-message.js",
    "importStyle": null,
    "description": "聊天消息内容类型表",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 549,
    "kind": "variable",
    "name": "OBJECT_TYPES",
    "memberof": "app/core/models/chat-message.js",
    "static": true,
    "longname": "app/core/models/chat-message.js~OBJECT_TYPES",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/chat-message.js",
    "importStyle": null,
    "description": "聊天消息对象内容类型表",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 550,
    "kind": "variable",
    "name": "SEND_WAIT_TIME",
    "memberof": "app/core/models/chat-message.js",
    "static": true,
    "longname": "app/core/models/chat-message.js~SEND_WAIT_TIME",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/chat-message.js",
    "importStyle": null,
    "description": "判断会发送失败的等待时间，单位毫秒",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 551,
    "kind": "class",
    "name": "ChatMessage",
    "memberof": "app/core/models/chat-message.js",
    "static": true,
    "longname": "app/core/models/chat-message.js~ChatMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/models/chat-message.js",
    "importStyle": "ChatMessage",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "interface": false,
    "extends": [
      "app/core/models/entity.js~Entity"
    ]
  },
  {
    "__docId__": 552,
    "kind": "member",
    "name": "NAME",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": true,
    "longname": "app/core/models/chat-message.js~ChatMessage.NAME",
    "access": "public",
    "description": "实体名称",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 553,
    "kind": "member",
    "name": "STATUS",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": true,
    "longname": "app/core/models/chat-message.js~ChatMessage.STATUS",
    "access": "public",
    "description": "聊天消息状态管理器",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 554,
    "kind": "member",
    "name": "TYPES",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": true,
    "longname": "app/core/models/chat-message.js~ChatMessage.TYPES",
    "access": "public",
    "description": "聊天消息类型表",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 555,
    "kind": "member",
    "name": "CONTENT_TYPES",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": true,
    "longname": "app/core/models/chat-message.js~ChatMessage.CONTENT_TYPES",
    "access": "public",
    "description": "聊天消息内容类型表",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 556,
    "kind": "member",
    "name": "OBJECT_TYPES",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": true,
    "longname": "app/core/models/chat-message.js~ChatMessage.OBJECT_TYPES",
    "access": "public",
    "description": "聊天消息对象内容类型表",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 557,
    "kind": "member",
    "name": "SCHEMA",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": true,
    "longname": "app/core/models/chat-message.js~ChatMessage.SCHEMA",
    "access": "public",
    "description": "数据库存储实体属性结构管理器",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 558,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#constructor",
    "access": "public",
    "description": "创建一个聊天消息类实例",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string,any>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "聊天消息属性对象"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Chat.NAME",
        "defaultRaw": "Chat.NAME",
        "name": "entityType",
        "description": "实体类型名称"
      }
    ]
  },
  {
    "__docId__": 559,
    "kind": "member",
    "name": "_status",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#_status",
    "access": "private",
    "description": "聊天消息状态",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "plainServer",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#plainServer",
    "access": "public",
    "description": "获取用于发送到服务器的数据简单对象",
    "lineNumber": 159,
    "return": {
      "nullable": null,
      "types": [
        "Object<string,any>"
      ],
      "spread": false,
      "description": "简单对象"
    },
    "params": []
  },
  {
    "__docId__": 561,
    "kind": "get",
    "name": "schema",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#schema",
    "access": "public",
    "description": "获取数据库存储实体属性结构管理器",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 562,
    "kind": "set",
    "name": "id",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#id",
    "access": "public",
    "description": "设置 ID 属性",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "remoteId",
        "description": "ID 属性"
      }
    ]
  },
  {
    "__docId__": 563,
    "kind": "get",
    "name": "id",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#id",
    "access": "public",
    "description": "获取 ID 属性值",
    "lineNumber": 199,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 564,
    "kind": "get",
    "name": "order",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#order",
    "access": "public",
    "description": "获取排序序号",
    "lineNumber": 208,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 565,
    "kind": "set",
    "name": "order",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#order",
    "access": "public",
    "description": "设置排序序号",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "order",
        "description": "排序序号"
      }
    ]
  },
  {
    "__docId__": 566,
    "kind": "get",
    "name": "status",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#status",
    "access": "public",
    "description": "获取状态值",
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 567,
    "kind": "get",
    "name": "statusName",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#statusName",
    "access": "public",
    "description": "获取状态名称",
    "lineNumber": 237,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "isStatus",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isStatus",
    "access": "public",
    "description": "判断当前状态是否是给定的状态",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "要判断的状态值或状态名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为给定的状态，否则不是"
    }
  },
  {
    "__docId__": 569,
    "kind": "get",
    "name": "isSendFail",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isSendFail",
    "access": "public",
    "description": "获取是否发送失败",
    "lineNumber": 257,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 570,
    "kind": "get",
    "name": "isOK",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isOK",
    "access": "public",
    "description": "获取是否发送成功",
    "lineNumber": 267,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 571,
    "kind": "get",
    "name": "isSending",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isSending",
    "access": "public",
    "description": "获取是否已发送正在等待服务器结果",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 572,
    "kind": "get",
    "name": "isDraft",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isDraft",
    "access": "public",
    "description": "获取是否是草稿状态（未发送）",
    "lineNumber": 287,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "beginSend",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#beginSend",
    "access": "public",
    "description": "标记为开始发送状态",
    "lineNumber": 297,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "endSend",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#endSend",
    "access": "public",
    "description": "标记为结束发送",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "remoteId",
        "description": "服务器存储 ID，如果为 `0`，表示发送失败（没有在服务器上存储）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 576,
    "kind": "get",
    "name": "cgid",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#cgid",
    "access": "public",
    "description": "获取全局唯一标识字符串 GID",
    "lineNumber": 323,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 577,
    "kind": "set",
    "name": "cgid",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#cgid",
    "access": "public",
    "description": "设置全局唯一标识字符串 GID",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "gid",
        "description": "全局唯一标识字符串 GID"
      }
    ]
  },
  {
    "__docId__": 578,
    "kind": "get",
    "name": "unread",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#unread",
    "access": "public",
    "description": "获取是否处于未读状态",
    "lineNumber": 341,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 579,
    "kind": "set",
    "name": "unread",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#unread",
    "access": "public",
    "description": "设置是否处于未读状态",
    "lineNumber": 350,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "unread",
        "description": "处于未读状态"
      }
    ]
  },
  {
    "__docId__": 580,
    "kind": "get",
    "name": "data",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#data",
    "access": "public",
    "description": "获取消息额外存储数据",
    "lineNumber": 359,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 581,
    "kind": "member",
    "name": "_data",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#_data",
    "access": "private",
    "description": null,
    "lineNumber": 361,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 582,
    "kind": "set",
    "name": "data",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#data",
    "access": "public",
    "description": "设置消息额外存储数据",
    "lineNumber": 371,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "消息额外存储数据，会转换为 JSON 字符串类型进行存储"
      }
    ]
  },
  {
    "__docId__": 583,
    "kind": "get",
    "name": "date",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#date",
    "access": "public",
    "description": "获取消息发送日期时间戳",
    "lineNumber": 384,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 584,
    "kind": "set",
    "name": "date",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#date",
    "access": "public",
    "description": "设置消息发送日期时间戳",
    "lineNumber": 393,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "消息发送日期时间戳"
      }
    ]
  },
  {
    "__docId__": 585,
    "kind": "get",
    "name": "sendTime",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#sendTime",
    "access": "public",
    "description": "获取消息发送日期时间戳，相当于读取 `date` 属性",
    "lineNumber": 402,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 586,
    "kind": "get",
    "name": "senderId",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#senderId",
    "access": "public",
    "description": "获取消息发送者 ID",
    "lineNumber": 411,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "isSender",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isSender",
    "access": "public",
    "description": "判断给定的成员 ID 是否是当前消息发送者",
    "lineNumber": 422,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是当前消息发送者，否则为不是当前消息发送者"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": "成员 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是当前消息发送者，否则为不是当前消息发送者"
    }
  },
  {
    "__docId__": 588,
    "kind": "get",
    "name": "sender",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#sender",
    "access": "public",
    "description": "获取消息发送者成员对象",
    "lineNumber": 431,
    "type": {
      "nullable": null,
      "types": [
        "Member"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 589,
    "kind": "set",
    "name": "sender",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#sender",
    "access": "public",
    "description": "设置消息发送者",
    "lineNumber": 445,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "sendUser",
        "description": "消息发送者"
      }
    ]
  },
  {
    "__docId__": 590,
    "kind": "member",
    "name": "_sender",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#_sender",
    "access": "private",
    "description": null,
    "lineNumber": 447,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "getSender",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#getSender",
    "access": "public",
    "description": "从系统获取消息发送成员对象",
    "lineNumber": 459,
    "params": [
      {
        "nullable": null,
        "types": [
          "{get: function(id: number):Member}"
        ],
        "spread": false,
        "optional": false,
        "name": "appMembers",
        "description": "用于从系统获取成员信息的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Member"
      ],
      "spread": false,
      "description": "消息发送成员"
    }
  },
  {
    "__docId__": 593,
    "kind": "get",
    "name": "contentType",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#contentType",
    "access": "public",
    "description": "获取消息内容类型",
    "lineNumber": 469,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 594,
    "kind": "set",
    "name": "contentType",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#contentType",
    "access": "public",
    "description": "设置消息内容类型",
    "lineNumber": 478,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "消息内容类型"
      }
    ]
  },
  {
    "__docId__": 595,
    "kind": "get",
    "name": "isFileContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isFileContent",
    "access": "public",
    "description": "获取消息内容是否是文件",
    "lineNumber": 488,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 596,
    "kind": "get",
    "name": "isTextContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isTextContent",
    "access": "public",
    "description": "获取消息内容是否是文本",
    "lineNumber": 498,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 597,
    "kind": "get",
    "name": "isPlainTextContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isPlainTextContent",
    "access": "public",
    "description": "获取消息内容是否是纯文本",
    "lineNumber": 508,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 598,
    "kind": "get",
    "name": "isImageContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isImageContent",
    "access": "public",
    "description": "获取消息内容是否是图片",
    "lineNumber": 518,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 599,
    "kind": "get",
    "name": "isObjectContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isObjectContent",
    "access": "public",
    "description": "获取消息内容是否是对象",
    "lineNumber": 528,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 600,
    "kind": "get",
    "name": "objectContentType",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#objectContentType",
    "access": "public",
    "description": "获取内容对象类型",
    "lineNumber": 538,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 601,
    "kind": "get",
    "name": "objectContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#objectContent",
    "access": "public",
    "description": "获取内容对象",
    "lineNumber": 548,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "_objectContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#_objectContent",
    "access": "private",
    "description": null,
    "lineNumber": 556,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "get",
    "name": "type",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#type",
    "access": "public",
    "description": "获取消息类型",
    "lineNumber": 568,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 604,
    "kind": "set",
    "name": "type",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#type",
    "access": "public",
    "description": "设置消息类型",
    "lineNumber": 577,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "消息类型"
      }
    ]
  },
  {
    "__docId__": 605,
    "kind": "get",
    "name": "isBroadcast",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isBroadcast",
    "access": "public",
    "description": "获取消息类型是否为广播",
    "lineNumber": 587,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 606,
    "kind": "get",
    "name": "content",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#content",
    "access": "public",
    "description": "获取原始内容字符串",
    "lineNumber": 596,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 607,
    "kind": "set",
    "name": "content",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#content",
    "access": "public",
    "description": "设置原始内容字符串",
    "lineNumber": 605,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newContent",
        "description": "原始内容字符串"
      }
    ]
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "renderedTextContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#renderedTextContent",
    "access": "public",
    "description": "将文本消息渲染为 HTML 格式",
    "lineNumber": 629,
    "params": [
      {
        "nullable": null,
        "types": [
          "...function(content: string, options: Object<string,any>)"
        ],
        "spread": true,
        "optional": false,
        "name": "converters",
        "description": "格式转换函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "转换后的 HTML 字符串"
    }
  },
  {
    "__docId__": 609,
    "kind": "member",
    "name": "_renderedTextContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#_renderedTextContent",
    "access": "private",
    "description": null,
    "lineNumber": 639,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "member",
    "name": "_isBlockContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#_isBlockContent",
    "access": "private",
    "description": null,
    "lineNumber": 640,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 613,
    "kind": "get",
    "name": "isBlockContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isBlockContent",
    "access": "public",
    "description": "获取是否块级富文本消息（至少包含一个 3 级以上的标题）",
    "lineNumber": 654,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 614,
    "kind": "get",
    "name": "imageContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#imageContent",
    "access": "public",
    "description": "获取图片内容对象",
    "lineNumber": 663,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "_imageContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#_imageContent",
    "access": "private",
    "description": null,
    "lineNumber": 671,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "set",
    "name": "imageContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#imageContent",
    "access": "public",
    "description": "设置图片内容对象",
    "lineNumber": 683,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "图片内容对象"
      }
    ]
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "updateImageContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#updateImageContent",
    "access": "public",
    "description": "更新图片内容对象",
    "lineNumber": 698,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "图片内容对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 623,
    "kind": "get",
    "name": "fileContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#fileContent",
    "access": "public",
    "description": "获取文件内容对象",
    "lineNumber": 708,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 624,
    "kind": "member",
    "name": "_fileContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#_fileContent",
    "access": "private",
    "description": null,
    "lineNumber": 716,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "set",
    "name": "fileContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#fileContent",
    "access": "public",
    "description": "设置文件内容对象",
    "lineNumber": 738,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "文件内容对象"
      }
    ]
  },
  {
    "__docId__": 629,
    "kind": "method",
    "name": "updateFileContent",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#updateFileContent",
    "access": "public",
    "description": "更新文件内容对象",
    "lineNumber": 761,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "文件内容对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "getCommand",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#getCommand",
    "access": "public",
    "description": "获取消息指令对象",
    "lineNumber": 772,
    "return": {
      "nullable": null,
      "types": [
        "{action: string}"
      ],
      "spread": false,
      "description": "消息指令对象"
    },
    "params": []
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "reset",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#reset",
    "access": "public",
    "description": "重置实体属性",
    "lineNumber": 792,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 634,
    "kind": "get",
    "name": "needCheckResend",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#needCheckResend",
    "access": "public",
    "description": "检查消息是否需要检查重新发送",
    "lineNumber": 811,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 635,
    "kind": "get",
    "name": "needResend",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#needResend",
    "access": "public",
    "description": "判断消息是否发送失败并且需要重新发送",
    "lineNumber": 821,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 636,
    "kind": "get",
    "name": "isSendFailed",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isSendFailed",
    "access": "public",
    "description": "获取是否发送失败",
    "lineNumber": 831,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 637,
    "kind": "get",
    "name": "isOutdated",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat-message.js~ChatMessage#isOutdated",
    "access": "public",
    "description": "检查消息是否过期（在一定时间内没有收到服务器回应的远程存储 ID）",
    "lineNumber": 841,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "create",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/models/chat-message.js~ChatMessage.create",
    "access": "public",
    "description": "创建一个聊天消息类实例",
    "lineNumber": 853,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string,any>",
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "chatMessage",
        "description": "聊天消息属性对象或者聊天消息实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChatMessage"
      ],
      "spread": false,
      "description": "聊天消息类实例"
    }
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "sort",
    "memberof": "app/core/models/chat-message.js~ChatMessage",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/models/chat-message.js~ChatMessage.sort",
    "access": "public",
    "description": "对聊天消息列表进行排序",
    "lineNumber": 867,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage[]"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "要排序的聊天列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ChatMessage[]"
      ],
      "spread": false,
      "description": "排序后的聊天列表"
    }
  },
  {
    "__docId__": 640,
    "kind": "file",
    "name": "app/core/models/chat.js",
    "content": "import Entity from './entity';\nimport Status from '../../utils/status';\nimport Lang from '../../lang';\nimport Pinyin from '../../utils/pinyin';\nimport ChatMessage from './chat-message';\n\n/**\n * 聊天状态管理器\n *\n * @private\n * @type {Status}\n */\nconst STATUS = new Status({\n    local: 0,\n    sending: 1,\n    fail: 2,\n    ok: 3,\n}, 0);\n\n/**\n * 聊天类型表\n * @type {Object<string,string>}\n * @private\n */\nconst TYPES = {\n    one2one: 'one2one',\n    group: 'group',\n    system: 'system',\n    robot: 'robot'\n};\n\n/**\n * 白名单类型表\n * @type {Object<string,string>}\n * @private\n */\nconst COMMITTERS_TYPES = {\n    admins: 'admins',\n    whitelist: 'whitelist',\n    all: 'all'\n};\n\n\n/**\n * 将被删除聊天标记为隐藏的过期时间，单位毫秒\n * @type {number}\n * @private\n */\nconst DISMISS_VISIBLE_TIME = 1000 * 60 * 60 * 24 * 90;\n\n/**\n * 聊天类\n *\n * @class Chat\n * @extends {Entity}\n */\nexport default class Chat extends Entity {\n    /**\n     * 实体名称\n     * @type {string}\n     * @memberof Chat\n     */\n    static NAME = 'Chat';\n\n    /**\n     * 成员状态管理器\n     *\n     * @static\n     * @memberof Chat\n     * @type {Status}\n     */\n    static STATUS = STATUS;\n\n    /**\n     * 聊天类型表\n     * @type {Object<string,string>}\n     * @memberof Chat\n     * @static\n     */\n    static TYPES = TYPES;\n\n    /**\n     * 白名单类型表\n     * @type {Object<string,string>}\n     * @memberof Chat\n     * @static\n     */\n    static COMMITTERS_TYPES = COMMITTERS_TYPES;\n\n    /**\n     * 数据库存储实体属性结构管理器\n     *\n     * @type {EntitySchema}\n     * @static\n     * @memberof Chat\n     */\n    static SCHEMA = Entity.SCHEMA.extend({\n        user: {type: 'int', indexed: true},\n        type: {type: 'string', indexed: true},\n        name: {type: 'string', indexed: true},\n        createdDate: {type: 'timestamp', indexed: true},\n        createdBy: {type: 'string', indexed: true},\n        editedDate: {type: 'timestamp'},\n        lastActiveTime: {type: 'timestamp', indexed: true},\n        dismissDate: {type: 'timestamp', indexed: true},\n        star: {type: 'boolean', indexed: true},\n        mute: {type: 'boolean', indexed: true},\n        public: {type: 'boolean', indexed: true},\n        admins: {type: 'set'},\n        members: {\n            type: 'set',\n            setter: (val, obj) => {\n                obj._membersSet = null;\n                return val;\n            }\n        },\n        committers: {type: 'string'},\n        category: {type: 'string'},\n    });\n\n    /**\n     * 创建一个聊天类实例\n     * @param {Object<string,any>} data 聊天属性对象\n     * @param {string} [entityType=Chat.NAME] 实体类型名称\n     * @memberof Chat\n     */\n    constructor(data, entityType = Chat.NAME) {\n        super(data, entityType);\n\n        /**\n         * 聊天状态\n         * @type {Status}\n         * @private\n         */\n        this._status = STATUS.create(this.$.status);\n        this._status.onChange = newStatus => {\n            this.$.status = newStatus;\n            if (typeof this.onStatusChange === 'function') {\n                this.onStatusChange(newStatus, this);\n            }\n        };\n\n        /**\n         * 最大聊天消息排序编号\n         * @type {number}\n         * @private\n         */\n        this._maxMsgOrder = 0;\n    }\n\n    /**\n     * 获取最大聊天消息排序编号\n     * @memberof Chat\n     * @type {number}\n     */\n    get maxMsgOrder() {\n        return this._maxMsgOrder;\n    }\n\n    /**\n     * 递增最大聊天消息排序编号\n     * @memberof Chat\n     * @return {number} 最大聊天消息排序编号\n     */\n    newMsgOrder() {\n        this._maxMsgOrder += 1;\n        return this._maxMsgOrder;\n    }\n\n    /**\n     * 调用此方法确保实体拥有合适的 GID 属性\n     *\n     * @memberof Entity\n     * @return {void}\n     * @override\n     */\n    ensureGid() {\n        if (this.isOne2One) {\n            this.$.gid = Array.from(this.members).sort().join('&');\n        } else {\n            super.ensureGid();\n        }\n    }\n\n    /**\n     * 获取数据库存储实体属性结构管理器\n     *\n     * @readonly\n     * @memberof Member\n     * @type {EntitySchema}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    get schema() {\n        return Chat.SCHEMA;\n    }\n\n    /**\n     * 设置 ID 属性\n     * @param {number} remoteId  ID 属性\n     * @memberof Chat\n     */\n    set id(remoteId) {\n        super.id = remoteId;\n        this._status.change(remoteId ? STATUS.ok : STATUS.fail);\n    }\n\n    /**\n     * 获取 ID 属性值\n     * @memberof Chat\n     * @type {number}\n     */\n    get id() {\n        return this.$get('id');\n    }\n\n    /**\n     * 获取状态值\n     * @memberof Chat\n     * @readonly\n     * @type {number}\n     */\n    get status() {\n        return this._status.value;\n    }\n\n    /**\n     * 获取状态名称\n     * @memberof Chat\n     * @readonly\n     * @type {string}\n     */\n    get statusName() {\n        return this._status.name;\n    }\n\n    /**\n     * 判断当前状态是否是给定的状态\n     * @memberof Chat\n     * @param {number|string} status 要判断的状态值或状态名称\n     * @return {boolean} 如果为 `true` 则为给定的状态，否则不是\n     */\n    isStatus(status) {\n        return this._status.is(status);\n    }\n\n    /**\n     * 判断当前状态是否是正常状态\n     * @memberof Chat\n     * @return {boolean} 如果为 `true` 则为正常状态，否则不是\n     */\n    get isOK() {\n        return this.isStatus(STATUS.ok);\n    }\n\n    /**\n     * 获取聊天类型\n     * @memberof Chat\n     * @type {string}\n     */\n    get type() {\n        let type = this.$get('type');\n        if (!type) {\n            const {members} = this;\n            type = (members && members.size === 2) ? TYPES.one2one : TYPES.group;\n        }\n        return type;\n    }\n\n    /**\n     * 获取是否为机器人聊天类型\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get isRobot() {\n        return this.type === TYPES.robot;\n    }\n\n    /**\n     * 设置聊天类型\n     * @param {string} type 聊天类型\n     * @memberof Chat\n     */\n    set type(type) {\n        this.$set('type', type);\n    }\n\n    /**\n     * 获取是否一对一聊天类型\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get isOne2One() {\n        return this.type === TYPES.one2one;\n    }\n\n    /**\n     * 获取是否为已删除的一对一聊天\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get isDeleteOne2One() {\n        return this.isOne2One && this._isDeleteOne2One;\n    }\n\n    /**\n     * 设置是否为已删除的一对一聊天\n     * @param {boolean} flag 为已删除的一对一聊天\n     * @memberof Chat\n     */\n    set isDeleteOne2One(flag) {\n        if (this.isOne2One) {\n            this._isDeleteOne2One = flag;\n        }\n    }\n\n    /**\n     * 获取是否讨论组\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get isGroup() {\n        return this.type === TYPES.group;\n    }\n\n    /**\n     * 获取聊天分组\n     * @memberof Chat\n     * @type {string}\n     */\n    get category() {\n        return this.$get('category');\n    }\n\n    /**\n     * 设置聊天分组\n     * @param {string} name 聊天分组\n     * @memberof Chat\n     */\n    set category(name) {\n        return this.$set('category', name);\n    }\n\n    /**\n     * 获取聊天名称\n     * @memberof Chat\n     * @type {string}\n     */\n    get name() {\n        return this.$get('name', `[Chat-${this.id}]`);\n    }\n\n    /**\n     * 设置聊天名称\n     * @param {string} newName 聊天名称\n     * @memberof Chat\n     */\n    set name(newName) {\n        this.$set('name', newName);\n    }\n\n    /**\n     * 获取聊天显示名称，如果是一对一聊天则返回对方成员名称，否则返回聊天 `name` 属性值\n     * @param {{members: {get: function(id: number):Member}}} app 用于获取系统成员的辅助对象\n     * @param {boolean} [includeMemberCount=false] 是否包含聊天成员数目\n     * @return {string} 聊天名称\n     * @memberof Chat\n     */\n    getDisplayName(app, includeMemberCount = false) {\n        const {name} = this;\n        if (this.isRobot) {\n            includeMemberCount = false;\n        }\n        if (this.isOne2One) {\n            const otherOne = this.getTheOtherOne(app);\n            return otherOne ? otherOne.displayName : Lang.string('chat.tempChat.name');\n        }\n        if (this.isSystem) {\n            if (includeMemberCount) {\n                return Lang.format('chat.groupName.format', name || Lang.string('chat.systemGroup.name'), Lang.string('chat.all'));\n            }\n            return name || Lang.string('chat.systemGroup.name');\n        }\n        if (name !== undefined && name !== '') {\n            if (includeMemberCount) {\n                return Lang.format('chat.groupName.format', name, this.getMembersCount(app.members));\n            }\n            return name;\n        }\n        return `${Lang.string('chat.group.name')}${this.id || `(${Lang.string('chat.tempChat.name')})`}`;\n    }\n\n    /**\n     * 获取聊天名称的拼音字符串（用于排序或搜索）\n     *\n     * @param {{members: {get: function(id: number):Member}}} app 用于获取系统成员的辅助对象\n     * @return {string} 拼音字符串\n     * @memberof Chat\n     */\n    getPinYin(app) {\n        if (!this._pinyin) {\n            const str = app ? this.getDisplayName(app, false) : this.name;\n            this._pinyin = Pinyin(str);\n        }\n        return this._pinyin;\n    }\n\n    /**\n     * 获取是否已收藏此聊天\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get star() {\n        return this.$get('star');\n    }\n\n    /**\n     * 设置是否已收藏此聊天\n     * @param {boolean} star 已收藏此聊天\n     * @memberof Chat\n     */\n    set star(star) {\n        this.$set('star', star);\n    }\n\n    /**\n     * 获取是否已设置为免打扰\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get mute() {\n        return this.$get('mute');\n    }\n\n    /**\n     * 设置是否已设置为免打扰\n     * @param {boolean} mute 已设置为免打扰\n     * @memberof Chat\n     */\n    set mute(mute) {\n        this.$set('mute', mute);\n    }\n\n    /**\n     * 获取是否已经隐藏（存档）此聊天，相当于读取 `hide` 属性\n     * @memberof Chat\n     * @type {string}\n     */\n    get hidden() {\n        return this.hide;\n    }\n\n    /**\n     * 设置是否已经隐藏（存档）此聊天，相当于设置 `hide` 属性\n     * @param {boolean} hide 已经隐藏（存档）此聊天\n     * @memberof Chat\n     */\n    set hidden(hide) {\n        this.hide = hide;\n    }\n\n    /**\n     * 获取是否已经隐藏（存档）此聊天\n     * @memberof Chat\n     * @type {string}\n     */\n    get hide() {\n        return this.$get('hide');\n    }\n\n    /**\n     * 设置是否已经隐藏（存档）此聊天\n     * @param {boolean} hide 已经隐藏（存档）此聊天\n     * @memberof Chat\n     */\n    set hide(hide) {\n        this.$set('hide', hide);\n    }\n\n    /**\n     * 获取是否已设为公开聊天\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get public() {\n        return this.$get('public');\n    }\n\n    /**\n     * 设置是否已设为公开聊天\n     * @param {boolean} flag 已设为公开聊天\n     * @memberof Chat\n     */\n    set public(flag) {\n        this.$set('public', flag);\n    }\n\n    /**\n     * 获取聊天创建时间戳\n     * @memberof Chat\n     * @type {number}\n     */\n    get createdDate() {\n        return this.$get('createdDate');\n    }\n\n    /**\n     * 设置聊天创建时间戳\n     * @param {number} createdDate 聊天创建时间戳\n     * @memberof Chat\n     */\n    set createdDate(createdDate) {\n        this.$set('createdDate', createdDate);\n    }\n\n    /**\n     * 获取聊天解散时间戳\n     * @memberof Chat\n     * @type {number}\n     */\n    get dismissDate() {\n        return this.$get('dismissDate');\n    }\n\n    /**\n     * 设置聊天解散时间戳\n     * @param {number} dismissDate 聊天解散时间戳\n     * @memberof Chat\n     */\n    set dismissDate(dismissDate) {\n        this.$set('dismissDate', dismissDate);\n    }\n\n    /**\n     * 获取是否已经解散此聊天\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get isDismissed() {\n        return !!this.dismissDate;\n    }\n\n    /**\n     * 判断指定的用户是否能够解散此聊天\n     *\n     * @param {Member|{id: number}|{account: string}} user 成员对象\n     * @returns {boolean} 如果返回 `true` 则可以解散，否则为不是\n     * @memberof Chat\n     */\n    canDismiss(user) {\n        return !this.isDismissed && this.isGroup && this.isAdmin(user);\n    }\n\n    /**\n     * 获取聊天管理员集合\n     * @memberof Chat\n     * @type {Set<string|number>}\n     */\n    get admins() {\n        return this.$get('admins');\n    }\n\n    /**\n     * 设置聊天管理员\n     * @param {Set<string|number>} admins 聊天管理员\n     * @memberof Chat\n     */\n    set admins(admins) {\n        this.$set('admins', admins);\n    }\n\n    /**\n     * 判断给定的成员是否是此聊天的管理员\n     *\n     * @param {Member|{id: number}|{account: string}} member 成员对象\n     * @returns {boolean} 如果为 `true` 则为是此聊天管理员，否则为不是\n     * @memberof Chat\n     */\n    isAdmin(member) {\n        if (typeof member !== 'object') {\n            member = {id: member, account: member};\n        }\n        if (this.isSystem && member.isSuperAdmin) {\n            return true;\n        }\n        if (this.isOwner(member)) {\n            return true;\n        }\n        const {admins} = this;\n        if (admins && admins.size) {\n            return admins.has(member.id) || admins.has(member.account);\n        }\n        return false;\n    }\n\n    /**\n     * 向此聊天添加一个新的管理员\n     *\n     * @param {number} memberId 要做为新管理员的 ID\n     * @memberof Chat\n     * @return {void}\n     */\n    addAdmin(memberId) {\n        const {admins} = this;\n        if (typeof memberId === 'object') {\n            memberId = memberId.id;\n        }\n        admins.add(memberId);\n        this.admins = admins;\n    }\n\n    /**\n     * 获取白名单设置\n     * @memberof Chat\n     * @type {Set<string>}\n     */\n    get committers() {\n        const committers = this.$get('committers');\n        if (!committers || committers === '$ADMINS') {\n            return [];\n        }\n        return new Set(committers.split(','));\n    }\n\n    /**\n     * 设置白名单配置\n     * @param {string|Set<string>} committers 白名单\n     * @memberof Chat\n     */\n    set committers(committers) {\n        this.$set('committers', committers);\n    }\n\n    /**\n     * 获取白名单类型\n     * @memberof Chat\n     * @type {string}\n     */\n    get committersType() {\n        const committers = this.$get('committers');\n        if ((this.isSystem || this.isGroup) && committers && committers !== '$ALL') {\n            if (committers === '$ADMINS') {\n                return COMMITTERS_TYPES.admins;\n            }\n            return COMMITTERS_TYPES.whitelist;\n        }\n        return COMMITTERS_TYPES.all;\n    }\n\n    /**\n     * 判断给定的用户是否在白名单中\n     *\n     * @param {number|{id: number}} member 用户 ID 或者用户对象\n     * @returns {boolean} 如果返回 `true` 则为在白名单中，否则为不在\n     * @memberof Chat\n     */\n    isCommitter(member) {\n        switch (this.committersType) {\n        case COMMITTERS_TYPES.admins:\n            return this.isAdmin(member);\n        case COMMITTERS_TYPES.whitelist:\n            if (typeof member === 'object') {\n                member = member.id;\n            }\n            return this.isInWhitelist(member);\n        default:\n            return true;\n        }\n    }\n\n    /**\n     * 判断给定的成员是否是能够重命名此聊天\n     *\n     * @param {Member|{id: number}|{account: string}} user 成员对象\n     * @returns {boolean} 如果为 `true` 则能够重命名此聊天，否则为不能\n     * @memberof Chat\n     */\n    canRename(user) {\n        return !this.isRobot && !this.isDismissed && this.isCommitter(user) && !this.isOne2One;\n    }\n\n    /**\n     * 判断给定的成员是否是能够邀请其他成员参与此聊天\n     *\n     * @param {Member|{id: number}|{account: string}} user 成员对象\n     * @returns {boolean} 如果为 `true` 则能够邀请其他成员参与此聊天，否则为不能\n     * @memberof Chat\n     */\n    canInvite(user) {\n        return !this.isRobot && !this.isDismissed && (this.isAdmin(user) || this.isCommitter(user)) && (!this.isSystem);\n    }\n\n    /**\n     * 判断给定的成员是否是能够将聊天内成员移除此聊天\n     *\n     * @param {!(Member|{id: number}|{account: string})} user 成员对象\n     * @param {!(Member|{id: number}|{account: string})} kickOfWho 要移除的成员对象\n     * @returns {boolean} 如果为 `true` 则能够将聊天内成员移除此聊天，否则为不能\n     * @memberof Chat\n     */\n    canKickOff(user, kickOfWho) {\n        return !this.isRobot && this.isGroup && !this.isSystem && (!kickOfWho || kickOfWho.id !== user.id) && this.isAdmin(user);\n    }\n\n    /**\n     * 判断给定的成员是否是能够将聊天设置为公开或者取消公开设置\n     *\n     * @param {Member|{id: number}|{account: string}} user 成员对象\n     * @returns {boolean} 如果为 `true` 则能够将聊天设置为公开或者取消公开设置，否则为不能\n     * @memberof Chat\n     */\n    canMakePublic(user) {\n        return !this.isRobot && !this.isDismissed && this.isAdmin(user) && this.isGroup;\n    }\n\n    /**\n     * 判断给定的成员是否是能够修改此聊天的白名单\n     *\n     * @param {Member|{id: number}|{account: string}} user 成员对象\n     * @returns {boolean} 如果为 `true` 则能够修改此聊天的白名单，否则为不能\n     * @memberof Chat\n     */\n    canSetCommitters(user) {\n        return !this.isRobot && !this.isDismissed && this.isAdmin(user) && !this.isOne2One;\n    }\n\n    /**\n     * 判断此聊天对于指定的用户是否只读（无法发送消息）\n     *\n     * @param {Member|{id: number}|{account: string}} member 成员对象\n     * @returns {boolean} 如果为 `true` 则为只读，否则不是\n     * @memberof Chat\n     */\n    isReadonly(member) {\n        return this.isRobot || this.isDeleteOne2One || this.isDismissed || !this.isCommitter(member);\n    }\n\n    get visible() {\n        if (this._visible === undefined) {\n            const {dismissDate} = this;\n            if (dismissDate) {\n                const now = new Date().getTime();\n                this._visible = now <= (dismissDate + DISMISS_VISIBLE_TIME);\n            } else {\n                this._visible = true;\n            }\n        }\n        return this._visible;\n    }\n\n    get visibleDate() {\n        const {dismissDate} = this;\n        return dismissDate ? (dismissDate + DISMISS_VISIBLE_TIME) : 0;\n    }\n\n    /**\n     * 获取是否设置有白名单\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get hasWhitelist() {\n        return this.committersType === COMMITTERS_TYPES.whitelist;\n    }\n\n    /**\n     * 获取此聊天的白名单\n     * @memberof Chat\n     * @type {string}\n     */\n    get whitelist() {\n        if (this.hasWhitelist) {\n            const set = new Set();\n            this.committers.forEach(x => {\n                x = Number.parseInt(x, 10);\n                if (!Number.isNaN(x)) {\n                    set.add(x);\n                }\n            });\n            return set;\n        }\n        return null;\n    }\n\n    /**\n     * 设置此聊天的白名单\n     *\n     * @memberof Chat\n     * @param {Set<string>} value 白名单\n     */\n    set whitelist(value) {\n        if (!this.isGroupOrSystem) {\n            value = '';\n        }\n        this.$set('committers', value);\n    }\n\n    /**\n     * 判断给定的用户 ID 是否在白名单中\n     *\n     * @param {number} memberId 用户 ID\n     * @param {?Set<number>} whitelist 白名单\n     * @returns {boolean} 如果返回 `true` 则为在白名单中，否则为不在\n     * @memberof Chat\n     */\n    isInWhitelist(memberId, whitelist) {\n        if (typeof memberId === 'object') {\n            memberId = memberId.id;\n        }\n        whitelist = whitelist || this.whitelist;\n        if (whitelist) {\n            return whitelist.has(memberId);\n        }\n        return false;\n    }\n\n    /**\n     * 将给定的用户 ID 添加到白名单中\n     *\n     * @param {number} memberId 用户 ID\n     * @returns {boolean} 如果返回 `true` 则为添加成功，否则为添加失败\n     * @memberof Chat\n     */\n    addToWhitelist(memberId) {\n        const {whitelist} = this;\n        if (whitelist) {\n            if (typeof memberId === 'object') {\n                memberId = memberId.id;\n            }\n            if (!whitelist.has(memberId)) {\n                whitelist.add(memberId);\n                this.whitelist = whitelist;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 将给定的用户 ID 从白名单中移除\n     *\n     * @param {number} memberId 用户 ID\n     * @returns {boolean} 如果返回 `true` 则为移除成功，否则为移除失败\n     * @memberof Chat\n     */\n    removeFromWhitelist(memberId) {\n        const {whitelist} = this;\n        if (whitelist) {\n            if (typeof memberId === 'object') {\n                memberId = memberId.id;\n            }\n            if (whitelist.has(memberId)) {\n                whitelist.delete(memberId);\n                this.whitelist = whitelist;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 获取聊天的创建者用户名\n     * @memberof Chat\n     * @type {string}\n     */\n    get createdBy() {\n        return this.$get('createdBy');\n    }\n\n    /**\n     * 设置聊天的创建者用户名\n     * @param {string} createdBy 聊天的创建者用户名\n     * @memberof Chat\n     */\n    set createdBy(createdBy) {\n        this.$set('createdBy', createdBy);\n    }\n\n    /**\n     * 获取聊天成员 ID 集合\n     * @memberof Chat\n     * @type {Set<number>}\n     */\n    get members() {\n        return this.$get('members');\n    }\n\n    /**\n     * 设置聊天成员\n     * @param {number[]|Member[]} newMembers 聊天成员\n     * @memberof Chat\n     */\n    set members(newMembers) {\n        if (newMembers.length) {\n            if (typeof newMembers[0] === 'object') {\n                this.resetMembers(newMembers);\n            } else {\n                this.$set('members', new Set(newMembers));\n                this._membersSet = null;\n            }\n        } else {\n            this._membersSet = [];\n        }\n    }\n\n    /**\n     * 判断给定的成员 ID 是否在此聊天成员集合中\n     *\n     * @param {number|{id: number}} memberId 聊天成员对象或者成员 ID\n     * @returns {boolean} 如果返回 `true` 则为在此聊天成员集合中，否则为不在\n     * @memberof Chat\n     */\n    isMember(memberId) {\n        if (typeof memberId === 'object') {\n            memberId = memberId.id;\n        }\n        const {members} = this;\n        return members && members.has(memberId);\n    }\n\n    /**\n     * 设置聊天成员\n     * @param {Member[]} members 聊天成员\n     * @return {void}\n     */\n    resetMembers(members) {\n        this._membersSet = members;\n        this.$set('members', new Set(members.map(member => member.id)));\n    }\n\n    /**\n     * 将成员添加到聊天中\n     *\n     * @param {...Member} newMembers 新到成员\n     * @memberof Chat\n     * @return {void}\n     */\n    addMember(...newMembers) {\n        const {members} = this;\n        if (!members.size) {\n            this._membersSet = [];\n        }\n        newMembers.forEach(member => {\n            if (!members.has(member.id)) {\n                members.add(member.id);\n                if (this._membersSet) {\n                    this._membersSet.push(member);\n                }\n            }\n        });\n        this.$set('members', members);\n    }\n\n    /**\n     * 从系统更新聊天成员列表\n     *\n     * @param {{get: function(id: number):Member}} appMembers 用于从系统获取成员信息的辅助对象\n     * @return {void}\n     * @memberof Chat\n     */\n    updateMembersSet(appMembers) {\n        this._membersSet = Array.from(this.members).map(memberId => (appMembers.get(memberId)));\n        if (this.isGroupOrSystem) {\n            this._membersSet = this._membersSet.filter(m => !m.temp && !m.isDeleted);\n        }\n    }\n\n    /**\n     * 获取聊天成员数目\n     *\n     * @param {{get: function(id: number):Member}} appMembers 用于从系统获取成员信息的辅助对象\n     * @return {number} 成员数目\n     * @memberof Chat\n     */\n    getMembersCount(appMembers) {\n        return this.getMembersSet(appMembers).length;\n    }\n\n    /**\n     * 从系统获取聊天成员列表\n     *\n     * @param {{get: function(id: number):Member}} appMembers 用于从系统获取成员信息的辅助对象\n     * @return {Member[]} 聊天成员列表\n     * @memberof Chat\n     */\n    getMembersSet(appMembers) {\n        if (this.type === TYPES.system) {\n            return appMembers.all.filter(x => !x.isDeleted);\n        }\n        if (!this._membersSet || this._membersSetUpdateId !== this.updateId) {\n            this.updateMembersSet(appMembers);\n            this._membersSetUpdateId = this.updateId;\n        }\n        return this._membersSet;\n    }\n\n    /**\n     * 获取一对一聊天对方成员\n     *\n     * @param {{members: {get: function(id: number):Member}}} app 用于获取系统成员的辅助对象\n     * @return {Member} 对方成员对象\n     * @memberof Chat\n     */\n    getTheOtherOne(app) {\n        if (this.isOne2One) {\n            const appMembers = app.members;\n            const currentUserId = app.user.id;\n            if (!this._theOtherOneId) {\n                this._theOtherOneId = Array.from(this.members).find(x => x !== currentUserId);\n            }\n            if (this._theOtherOneId) {\n                const member = appMembers.get(this._theOtherOneId);\n                if (member && member.temp) {\n                    this._membersSet = null;\n                }\n                return member;\n            }\n            return this._theOtherOne;\n        }\n        return null;\n    }\n\n    /**\n     * 判断聊天是否在线，如果是一对一聊天则判断对方成员状态是否在线，如果是其他聊天则直接判定为在线\n     *\n     * @param {{members: {get: function(id: number):Member}}} app 用于获取系统成员的辅助对象\n     * @returns {boolean} 如果为 `true` 则为在线，否则为不在线\n     * @memberof Chat\n     */\n    isOnline(app) {\n        if (this.isOne2One) {\n            const otherOne = this.getTheOtherOne(app);\n            return otherOne && otherOne.isOnline;\n        }\n        return true;\n    }\n\n    /**\n     * 判断给定的用户是否是聊天的创建者\n     *\n     * @param {Member|{id: number}|{account: string}} user 聊天成员对象\n     * @returns {boolean} 如果返回 `true` 则为是聊天的创建者，否则为不是聊天的创建者\n     * @memberof Chat\n     */\n    isOwner(user) {\n        return user.id === this.createdBy || user.account === this.createdBy;\n    }\n\n    /**\n     * 获取是否能够让其他成员自由加入\n     * @memberof Chat\n     * @readonly\n     * @type {boolean}\n     */\n    get canJoin() {\n        return !this.isDismissed && this.public && this.isGroup;\n    }\n\n    /**\n     * 判断给定的用户是否能够退出讨论组\n     *\n     * @param {Member|{id: number}|{account: string}} user 聊天成员对象\n     * @returns {boolean} 如果返回 `true` 则为能够退出讨论组，否则为不能够退出讨论组\n     * @memberof Chat\n     */\n    canExit(user) {\n        return this.isGroup && !this.isOwner(user);\n    }\n\n    /**\n     * 获取是否隐藏此聊天\n     * @memberof Chat\n     * @readonly\n     * @type {boolean}\n     */\n    get canHide() {\n        return this.isGroup;\n    }\n\n    /**\n     * 获取是否是系统聊天\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get isSystem() {\n        return this.type === TYPES.system || this.type === TYPES.robot;\n    }\n\n    /**\n     * 获取是否是讨论组或系统聊天\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get isGroupOrSystem() {\n        return this.isGroup || this.isSystem;\n    }\n\n    /**\n     * 获取此聊天的未读消息数目\n     * @memberof Chat\n     * @type {number}\n     */\n    get noticeCount() {\n        return this._noticeCount || 0;\n    }\n\n    /**\n     * 设置此聊天的未读消息数目\n     * @param {number} count 此聊天的未读消息数目\n     * @memberof Chat\n     */\n    set noticeCount(count) {\n        this._noticeCount = count;\n    }\n\n    /**\n     * 清除此聊天的未读消息数目\n     *\n     * @return {ChatMessage[]} 已新标记为已读的消息清单\n     * @memberof Chat\n     */\n    muteNotice() {\n        this._noticeCount = 0;\n        const mutedMessages = [];\n        this._messages.forEach(message => {\n            if (message.unread) {\n                message.unread = false;\n                mutedMessages.push(message);\n            }\n        });\n        this.renewUpdateId();\n        return mutedMessages;\n    }\n\n    /**\n     * 获取此聊天是否已被设置为免打扰或者隐藏（已存档）\n     * @memberof Chat\n     * @readonly\n     * @type {boolean}\n     */\n    get isMuteOrHidden() {\n        return this.mute || this.hidden;\n    }\n\n    /**\n     * 获取此聊天缓存的消息列表\n     * @memberof Chat\n     * @readonly\n     * @type {ChatMessage[]}\n     */\n    get messages() {\n        return this._messages || [];\n    }\n\n    /**\n     * 获取上次在界面上激活的时间戳\n     * @memberof Chat\n     * @type {number}\n     */\n    get lastActiveTime() {\n        let lastActiveTime = this.$get('lastActiveTime');\n        if (!lastActiveTime) {\n            lastActiveTime = this.createdDate;\n        }\n        return lastActiveTime || 0;\n    }\n\n    /**\n     * 设置上次在界面上激活的时间戳\n     * @param {number} time 上次在界面上激活的时间戳\n     * @memberof Chat\n     */\n    set lastActiveTime(time) {\n        this.$set('lastActiveTime', time);\n    }\n\n    /**\n     * 将聊天设置已激活\n     * @return {void}\n     * @memberof Chat\n     */\n    makeActive() {\n        this.lastActiveTime = new Date().getTime();\n    }\n\n    /**\n     * 获取是否有缓存消息\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get hasSetMessages() {\n        return !!this._messages;\n    }\n\n    /**\n     * 将聊天消息添加到缓存\n     *\n     * @param {ChatMessage[]} messages 要缓存的聊天列表\n     * @param {number} userId 用户 ID\n     * @param {boolean} [localMessage=false] 是否来源于本地数据消息\n     * @param {boolean} [skipOld=false] 是否忽略已缓存的消息\n     * @returns {Chat} 返回自身用于链式调用\n     * @memberof Chat\n     */\n    addMessages(messages, userId, localMessage = false, skipOld = false) {\n        if (!Array.isArray(messages)) {\n            messages = [messages];\n        }\n        if (!this._messages) {\n            this._messages = [];\n        }\n\n        if (!messages.length) {\n            return;\n        }\n\n        let {noticeCount, lastActiveTime} = this;\n        const now = skipOld ? (new Date().getTime()) : 0;\n        messages.forEach(message => {\n            if (message.date) {\n                const checkMessage = this._messages.find(x => x.gid === message.gid);\n                if (checkMessage) {\n                    checkMessage.reset(message);\n                } else if (skipOld && (now - message.date) > skipOld) {\n                    return;\n                } else {\n                    this._messages.push(message);\n                    if (!localMessage && userId !== message.senderId) {\n                        message.unread = true;\n                        noticeCount += 1;\n                    } else {\n                        message.unread = false;\n                    }\n                }\n                if (lastActiveTime < message.date) {\n                    lastActiveTime = message.date;\n                }\n                if (message.order) {\n                    this._maxMsgOrder = Math.max(this._maxMsgOrder, message.order);\n                }\n            } else if (DEBUG) {\n                console.warn('The message date is not defined.', message);\n            }\n        });\n        this.lastActiveTime = lastActiveTime;\n        this.noticeCount = noticeCount;\n\n        this._messages = ChatMessage.sort(this._messages);\n\n        this.renewUpdateId();\n\n        return this;\n    }\n\n    /**\n     * 获取缓存中最新的一个聊天消息\n     * @memberof Chat\n     * @type {ChatMessage}\n     */\n    get lastMessage() {\n        return this._messages && this._messages[this._messages.length - 1];\n    }\n\n    /**\n     * 从缓存中移除指定 GID 的聊天消息\n     *\n     * @param {string} messageGid 聊天消息 GID\n     * @returns {boolean} 如果返回 `true` 则移除成功，否则为移除失败（可能是未找到指定的聊天消息）\n     * @memberof Chat\n     */\n    removeMessage(messageGid) {\n        const {messages} = this;\n        if (messages.length) {\n            const findIndex = messages.findIndex(x => (x.id === messageGid || x.gid === messageGid));\n            if (findIndex > -1) {\n                this._messages.splice(findIndex, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 获取是否已经从数据库加载完所有消息到缓存\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get isLoadingOver() {\n        return this.loadingOffset === true;\n    }\n\n    /**\n     * 获取是否是第一次从数据库加载消息\n     * @memberof Chat\n     * @type {boolean}\n     */\n    get isFirstLoaded() {\n        return this.loadingOffset !== undefined;\n    }\n\n    /**\n     * 创建一个聊天类实例\n     *\n     * @static\n     * @param {Object<string,any>|Chat} chat 聊天属性对象或者聊天实例\n     * @return {Chat} 聊天类实例\n     * @memberof Chat\n     */\n    static create(chat) {\n        if (chat instanceof Chat) {\n            return chat;\n        }\n        return new Chat(chat);\n    }\n\n    /**\n     * 对聊天列表进行排序，排序规则 `orders` 可以为以下值：\n     * - `function(c1: Member, c2: Member):number`，自定义排序函数；\n     * - 一个用逗号分隔的根据属性排序的属性名称表；\n     * - 根据属性排序的属性名称表数组。\n     * 默认的排序规则为：`['star', 'notice', 'hide', 'mute', 'lastActiveTime', 'online', 'createDate', 'name', 'id']`。\n     * @param  {Chat[]} chats 要排序的聊天列表\n     * @param  {array|string|function(c1: Chat, c2: Chat):number}  orders 排序规则\n     * @param  {{members: {get: function(id: number):Member}}} app 用于获取系统成员的辅助对象\n     * @return {Chat[]} 排序后的聊天列表\n     */\n    static sort(chats, orders, app) {\n        if (chats.length < 2) {\n            return chats;\n        }\n        if (typeof orders === 'function') {\n            return chats.sort(orders);\n        }\n        if (!orders || orders === 'default' || orders === true) {\n            orders = ['star', 'notice', 'hide', 'mute', 'lastActiveTime', 'online', 'createDate', 'name', 'id'];\n        } else if (orders === 'onlineFirst') {\n            orders = ['star', 'notice', 'hide', 'online', 'mute', 'lastActiveTime', 'createDate', 'name', 'id'];\n        } else if (typeof orders === 'string') {\n            orders = orders.split(' ');\n        }\n        let isFinalInverse = false;\n        if (orders[0] === '-' || orders[0] === -1) {\n            isFinalInverse = true;\n            orders.shift();\n        }\n        return chats.sort((y, x) => {\n            let result = 0;\n            for (let order of orders) {\n                if (result !== 0) break;\n                if (typeof order === 'function') {\n                    result = order(y, x);\n                } else {\n                    const isInverse = order[0] === '-';\n                    if (isInverse) order = order.substr(1);\n                    let xValue;\n                    let yValue;\n                    switch (order) {\n                    case 'hide':\n                    case 'mute':\n                        result = (x[order] ? 0 : 1) - (y[order] ? 0 : 1);\n                        break;\n                    case 'isSystem':\n                    case 'star':\n                        result = (x[order] ? 1 : 0) - (y[order] ? 1 : 0);\n                        break;\n                    case 'online':\n                        if (app) {\n                            result = (x.isOnline(app) ? 1 : 0) - (y.isOnline(app) ? 1 : 0);\n                        }\n                        break;\n                    default:\n                        if (order === 'name' && app) {\n                            xValue = x.getDisplayName(app, false);\n                            yValue = y.getDisplayName(app, false);\n                        } else if (order === 'namePinyin') {\n                            xValue = x.getPinYin(app);\n                            yValue = y.getPinYin(app);\n                        } else {\n                            xValue = x[order];\n                            yValue = y[order];\n                        }\n                        if (xValue === undefined || xValue === null) xValue = 0;\n                        if (yValue === undefined || yValue === null) yValue = 0;\n                        // eslint-disable-next-line no-nested-ternary\n                        result = xValue > yValue ? 1 : (xValue === yValue ? 0 : -1);\n                    }\n                    result *= isInverse ? (-1) : 1;\n                }\n            }\n            return result * (isFinalInverse ? (-1) : 1);\n        });\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/models/chat.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 641,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "app/core/models/chat.js",
    "static": true,
    "longname": "app/core/models/chat.js~STATUS",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/chat.js",
    "importStyle": null,
    "description": "聊天状态管理器",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 642,
    "kind": "variable",
    "name": "TYPES",
    "memberof": "app/core/models/chat.js",
    "static": true,
    "longname": "app/core/models/chat.js~TYPES",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/chat.js",
    "importStyle": null,
    "description": "聊天类型表",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 643,
    "kind": "variable",
    "name": "COMMITTERS_TYPES",
    "memberof": "app/core/models/chat.js",
    "static": true,
    "longname": "app/core/models/chat.js~COMMITTERS_TYPES",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/chat.js",
    "importStyle": null,
    "description": "白名单类型表",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 644,
    "kind": "variable",
    "name": "DISMISS_VISIBLE_TIME",
    "memberof": "app/core/models/chat.js",
    "static": true,
    "longname": "app/core/models/chat.js~DISMISS_VISIBLE_TIME",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/chat.js",
    "importStyle": null,
    "description": "将被删除聊天标记为隐藏的过期时间，单位毫秒",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 645,
    "kind": "class",
    "name": "Chat",
    "memberof": "app/core/models/chat.js",
    "static": true,
    "longname": "app/core/models/chat.js~Chat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/models/chat.js",
    "importStyle": "Chat",
    "description": "聊天类",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Chat"
      }
    ],
    "interface": false,
    "extends": [
      "Entity"
    ]
  },
  {
    "__docId__": 646,
    "kind": "member",
    "name": "NAME",
    "memberof": "app/core/models/chat.js~Chat",
    "static": true,
    "longname": "app/core/models/chat.js~Chat.NAME",
    "access": "public",
    "description": "实体名称",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 647,
    "kind": "member",
    "name": "STATUS",
    "memberof": "app/core/models/chat.js~Chat",
    "static": true,
    "longname": "app/core/models/chat.js~Chat.STATUS",
    "access": "public",
    "description": "成员状态管理器",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 648,
    "kind": "member",
    "name": "TYPES",
    "memberof": "app/core/models/chat.js~Chat",
    "static": true,
    "longname": "app/core/models/chat.js~Chat.TYPES",
    "access": "public",
    "description": "聊天类型表",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 649,
    "kind": "member",
    "name": "COMMITTERS_TYPES",
    "memberof": "app/core/models/chat.js~Chat",
    "static": true,
    "longname": "app/core/models/chat.js~Chat.COMMITTERS_TYPES",
    "access": "public",
    "description": "白名单类型表",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "Object<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 650,
    "kind": "member",
    "name": "SCHEMA",
    "memberof": "app/core/models/chat.js~Chat",
    "static": true,
    "longname": "app/core/models/chat.js~Chat.SCHEMA",
    "access": "public",
    "description": "数据库存储实体属性结构管理器",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 651,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#constructor",
    "access": "public",
    "description": "创建一个聊天类实例",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string,any>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "聊天属性对象"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Chat.NAME",
        "defaultRaw": "Chat.NAME",
        "name": "entityType",
        "description": "实体类型名称"
      }
    ]
  },
  {
    "__docId__": 652,
    "kind": "member",
    "name": "_status",
    "memberof": "app/core/models/chat.js~Chat",
    "static": false,
    "longname": "app/core/models/chat.js~Chat#_status",
    "access": "private",
    "description": "聊天状态",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 653,
    "kind": "member",
    "name": "_maxMsgOrder",
    "memberof": "app/core/models/chat.js~Chat",
    "static": false,
    "longname": "app/core/models/chat.js~Chat#_maxMsgOrder",
    "access": "private",
    "description": "最大聊天消息排序编号",
    "lineNumber": 148,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 654,
    "kind": "get",
    "name": "maxMsgOrder",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#maxMsgOrder",
    "access": "public",
    "description": "获取最大聊天消息排序编号",
    "lineNumber": 156,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 655,
    "kind": "method",
    "name": "newMsgOrder",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#newMsgOrder",
    "access": "public",
    "description": "递增最大聊天消息排序编号",
    "lineNumber": 165,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "最大聊天消息排序编号"
    },
    "params": []
  },
  {
    "__docId__": 657,
    "kind": "method",
    "name": "ensureGid",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#ensureGid",
    "access": "public",
    "description": "调用此方法确保实体拥有合适的 GID 属性",
    "lineNumber": 177,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "override": true,
    "params": []
  },
  {
    "__docId__": 658,
    "kind": "get",
    "name": "schema",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#schema",
    "access": "public",
    "description": "获取数据库存储实体属性结构管理器",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 659,
    "kind": "set",
    "name": "id",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#id",
    "access": "public",
    "description": "设置 ID 属性",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "remoteId",
        "description": "ID 属性"
      }
    ]
  },
  {
    "__docId__": 660,
    "kind": "get",
    "name": "id",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#id",
    "access": "public",
    "description": "获取 ID 属性值",
    "lineNumber": 212,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 661,
    "kind": "get",
    "name": "status",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#status",
    "access": "public",
    "description": "获取状态值",
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 662,
    "kind": "get",
    "name": "statusName",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#statusName",
    "access": "public",
    "description": "获取状态名称",
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "isStatus",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isStatus",
    "access": "public",
    "description": "判断当前状态是否是给定的状态",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "要判断的状态值或状态名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为给定的状态，否则不是"
    }
  },
  {
    "__docId__": 664,
    "kind": "get",
    "name": "isOK",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isOK",
    "access": "public",
    "description": "判断当前状态是否是正常状态",
    "lineNumber": 251,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为正常状态，否则不是"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "get",
    "name": "type",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#type",
    "access": "public",
    "description": "获取聊天类型",
    "lineNumber": 260,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 666,
    "kind": "get",
    "name": "isRobot",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isRobot",
    "access": "public",
    "description": "获取是否为机器人聊天类型",
    "lineNumber": 274,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 667,
    "kind": "set",
    "name": "type",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#type",
    "access": "public",
    "description": "设置聊天类型",
    "lineNumber": 283,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "聊天类型"
      }
    ]
  },
  {
    "__docId__": 668,
    "kind": "get",
    "name": "isOne2One",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isOne2One",
    "access": "public",
    "description": "获取是否一对一聊天类型",
    "lineNumber": 292,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 669,
    "kind": "get",
    "name": "isDeleteOne2One",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isDeleteOne2One",
    "access": "public",
    "description": "获取是否为已删除的一对一聊天",
    "lineNumber": 301,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 670,
    "kind": "set",
    "name": "isDeleteOne2One",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isDeleteOne2One",
    "access": "public",
    "description": "设置是否为已删除的一对一聊天",
    "lineNumber": 310,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "为已删除的一对一聊天"
      }
    ]
  },
  {
    "__docId__": 671,
    "kind": "member",
    "name": "_isDeleteOne2One",
    "memberof": "app/core/models/chat.js~Chat",
    "static": false,
    "longname": "app/core/models/chat.js~Chat#_isDeleteOne2One",
    "access": "private",
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 672,
    "kind": "get",
    "name": "isGroup",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isGroup",
    "access": "public",
    "description": "获取是否讨论组",
    "lineNumber": 321,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 673,
    "kind": "get",
    "name": "category",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#category",
    "access": "public",
    "description": "获取聊天分组",
    "lineNumber": 330,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 674,
    "kind": "set",
    "name": "category",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#category",
    "access": "public",
    "description": "设置聊天分组",
    "lineNumber": 339,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "聊天分组"
      }
    ]
  },
  {
    "__docId__": 675,
    "kind": "get",
    "name": "name",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#name",
    "access": "public",
    "description": "获取聊天名称",
    "lineNumber": 348,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 676,
    "kind": "set",
    "name": "name",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#name",
    "access": "public",
    "description": "设置聊天名称",
    "lineNumber": 357,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": "聊天名称"
      }
    ]
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "getDisplayName",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#getDisplayName",
    "access": "public",
    "description": "获取聊天显示名称，如果是一对一聊天则返回对方成员名称，否则返回聊天 `name` 属性值",
    "lineNumber": 368,
    "params": [
      {
        "nullable": null,
        "types": [
          "{members: {get: function(id: number):Member}}"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "用于获取系统成员的辅助对象"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "includeMemberCount",
        "description": "是否包含聊天成员数目"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "聊天名称"
    }
  },
  {
    "__docId__": 678,
    "kind": "method",
    "name": "getPinYin",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#getPinYin",
    "access": "public",
    "description": "获取聊天名称的拼音字符串（用于排序或搜索）",
    "lineNumber": 399,
    "params": [
      {
        "nullable": null,
        "types": [
          "{members: {get: function(id: number):Member}}"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "用于获取系统成员的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "拼音字符串"
    }
  },
  {
    "__docId__": 679,
    "kind": "member",
    "name": "_pinyin",
    "memberof": "app/core/models/chat.js~Chat",
    "static": false,
    "longname": "app/core/models/chat.js~Chat#_pinyin",
    "access": "private",
    "description": null,
    "lineNumber": 402,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 680,
    "kind": "get",
    "name": "star",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#star",
    "access": "public",
    "description": "获取是否已收藏此聊天",
    "lineNumber": 412,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 681,
    "kind": "set",
    "name": "star",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#star",
    "access": "public",
    "description": "设置是否已收藏此聊天",
    "lineNumber": 421,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "star",
        "description": "已收藏此聊天"
      }
    ]
  },
  {
    "__docId__": 682,
    "kind": "get",
    "name": "mute",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#mute",
    "access": "public",
    "description": "获取是否已设置为免打扰",
    "lineNumber": 430,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 683,
    "kind": "set",
    "name": "mute",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#mute",
    "access": "public",
    "description": "设置是否已设置为免打扰",
    "lineNumber": 439,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mute",
        "description": "已设置为免打扰"
      }
    ]
  },
  {
    "__docId__": 684,
    "kind": "get",
    "name": "hidden",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#hidden",
    "access": "public",
    "description": "获取是否已经隐藏（存档）此聊天，相当于读取 `hide` 属性",
    "lineNumber": 448,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 685,
    "kind": "set",
    "name": "hidden",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#hidden",
    "access": "public",
    "description": "设置是否已经隐藏（存档）此聊天，相当于设置 `hide` 属性",
    "lineNumber": 457,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "hide",
        "description": "已经隐藏（存档）此聊天"
      }
    ]
  },
  {
    "__docId__": 687,
    "kind": "get",
    "name": "hide",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#hide",
    "access": "public",
    "description": "获取是否已经隐藏（存档）此聊天",
    "lineNumber": 466,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 688,
    "kind": "set",
    "name": "hide",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#hide",
    "access": "public",
    "description": "设置是否已经隐藏（存档）此聊天",
    "lineNumber": 475,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "hide",
        "description": "已经隐藏（存档）此聊天"
      }
    ]
  },
  {
    "__docId__": 689,
    "kind": "get",
    "name": "public",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#public",
    "access": "public",
    "description": "获取是否已设为公开聊天",
    "lineNumber": 484,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 690,
    "kind": "set",
    "name": "public",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#public",
    "access": "public",
    "description": "设置是否已设为公开聊天",
    "lineNumber": 493,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "已设为公开聊天"
      }
    ]
  },
  {
    "__docId__": 691,
    "kind": "get",
    "name": "createdDate",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#createdDate",
    "access": "public",
    "description": "获取聊天创建时间戳",
    "lineNumber": 502,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 692,
    "kind": "set",
    "name": "createdDate",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#createdDate",
    "access": "public",
    "description": "设置聊天创建时间戳",
    "lineNumber": 511,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "createdDate",
        "description": "聊天创建时间戳"
      }
    ]
  },
  {
    "__docId__": 693,
    "kind": "get",
    "name": "dismissDate",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#dismissDate",
    "access": "public",
    "description": "获取聊天解散时间戳",
    "lineNumber": 520,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 694,
    "kind": "set",
    "name": "dismissDate",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#dismissDate",
    "access": "public",
    "description": "设置聊天解散时间戳",
    "lineNumber": 529,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dismissDate",
        "description": "聊天解散时间戳"
      }
    ]
  },
  {
    "__docId__": 695,
    "kind": "get",
    "name": "isDismissed",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isDismissed",
    "access": "public",
    "description": "获取是否已经解散此聊天",
    "lineNumber": 538,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "canDismiss",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#canDismiss",
    "access": "public",
    "description": "判断指定的用户是否能够解散此聊天",
    "lineNumber": 549,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则可以解散，否则为不是"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "成员对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则可以解散，否则为不是"
    }
  },
  {
    "__docId__": 697,
    "kind": "get",
    "name": "admins",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#admins",
    "access": "public",
    "description": "获取聊天管理员集合",
    "lineNumber": 558,
    "type": {
      "nullable": null,
      "types": [
        "Set<string|number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 698,
    "kind": "set",
    "name": "admins",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#admins",
    "access": "public",
    "description": "设置聊天管理员",
    "lineNumber": 567,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<string|number>"
        ],
        "spread": false,
        "optional": false,
        "name": "admins",
        "description": "聊天管理员"
      }
    ]
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "isAdmin",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isAdmin",
    "access": "public",
    "description": "判断给定的成员是否是此聊天的管理员",
    "lineNumber": 578,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果为 `true` 则为是此聊天管理员，否则为不是"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "成员对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为是此聊天管理员，否则为不是"
    }
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "addAdmin",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#addAdmin",
    "access": "public",
    "description": "向此聊天添加一个新的管理员",
    "lineNumber": 602,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "memberId",
        "description": "要做为新管理员的 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 702,
    "kind": "get",
    "name": "committers",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#committers",
    "access": "public",
    "description": "获取白名单设置",
    "lineNumber": 616,
    "type": {
      "nullable": null,
      "types": [
        "Set<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 703,
    "kind": "set",
    "name": "committers",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#committers",
    "access": "public",
    "description": "设置白名单配置",
    "lineNumber": 629,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Set<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "committers",
        "description": "白名单"
      }
    ]
  },
  {
    "__docId__": 704,
    "kind": "get",
    "name": "committersType",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#committersType",
    "access": "public",
    "description": "获取白名单类型",
    "lineNumber": 638,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "isCommitter",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isCommitter",
    "access": "public",
    "description": "判断给定的用户是否在白名单中",
    "lineNumber": 656,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为在白名单中，否则为不在"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "{id: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "用户 ID 或者用户对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为在白名单中，否则为不在"
    }
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "canRename",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#canRename",
    "access": "public",
    "description": "判断给定的成员是否是能够重命名此聊天",
    "lineNumber": 677,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果为 `true` 则能够重命名此聊天，否则为不能"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "成员对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则能够重命名此聊天，否则为不能"
    }
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "canInvite",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#canInvite",
    "access": "public",
    "description": "判断给定的成员是否是能够邀请其他成员参与此聊天",
    "lineNumber": 688,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果为 `true` 则能够邀请其他成员参与此聊天，否则为不能"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "成员对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则能够邀请其他成员参与此聊天，否则为不能"
    }
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "canKickOff",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#canKickOff",
    "access": "public",
    "description": "判断给定的成员是否是能够将聊天内成员移除此聊天",
    "lineNumber": 700,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果为 `true` 则能够将聊天内成员移除此聊天，否则为不能"
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "成员对象"
      },
      {
        "nullable": false,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "kickOfWho",
        "description": "要移除的成员对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则能够将聊天内成员移除此聊天，否则为不能"
    }
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "canMakePublic",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#canMakePublic",
    "access": "public",
    "description": "判断给定的成员是否是能够将聊天设置为公开或者取消公开设置",
    "lineNumber": 711,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果为 `true` 则能够将聊天设置为公开或者取消公开设置，否则为不能"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "成员对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则能够将聊天设置为公开或者取消公开设置，否则为不能"
    }
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "canSetCommitters",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#canSetCommitters",
    "access": "public",
    "description": "判断给定的成员是否是能够修改此聊天的白名单",
    "lineNumber": 722,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果为 `true` 则能够修改此聊天的白名单，否则为不能"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "成员对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则能够修改此聊天的白名单，否则为不能"
    }
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "isReadonly",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isReadonly",
    "access": "public",
    "description": "判断此聊天对于指定的用户是否只读（无法发送消息）",
    "lineNumber": 733,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果为 `true` 则为只读，否则不是"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "成员对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为只读，否则不是"
    }
  },
  {
    "__docId__": 712,
    "kind": "get",
    "name": "visible",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#visible",
    "access": "public",
    "description": null,
    "lineNumber": 737,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 713,
    "kind": "member",
    "name": "_visible",
    "memberof": "app/core/models/chat.js~Chat",
    "static": false,
    "longname": "app/core/models/chat.js~Chat#_visible",
    "access": "private",
    "description": null,
    "lineNumber": 742,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 715,
    "kind": "get",
    "name": "visibleDate",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#visibleDate",
    "access": "public",
    "description": null,
    "lineNumber": 750,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 716,
    "kind": "get",
    "name": "hasWhitelist",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#hasWhitelist",
    "access": "public",
    "description": "获取是否设置有白名单",
    "lineNumber": 760,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 717,
    "kind": "get",
    "name": "whitelist",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#whitelist",
    "access": "public",
    "description": "获取此聊天的白名单",
    "lineNumber": 769,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 718,
    "kind": "set",
    "name": "whitelist",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#whitelist",
    "access": "public",
    "description": "设置此聊天的白名单",
    "lineNumber": 789,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "白名单"
      }
    ]
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "isInWhitelist",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isInWhitelist",
    "access": "public",
    "description": "判断给定的用户 ID 是否在白名单中",
    "lineNumber": 804,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为在白名单中，否则为不在"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "memberId",
        "description": "用户 ID"
      },
      {
        "nullable": true,
        "types": [
          "Set<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "whitelist",
        "description": "白名单"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为在白名单中，否则为不在"
    }
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "addToWhitelist",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#addToWhitelist",
    "access": "public",
    "description": "将给定的用户 ID 添加到白名单中",
    "lineNumber": 822,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为添加成功，否则为添加失败"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "memberId",
        "description": "用户 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为添加成功，否则为添加失败"
    }
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "removeFromWhitelist",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#removeFromWhitelist",
    "access": "public",
    "description": "将给定的用户 ID 从白名单中移除",
    "lineNumber": 844,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为移除成功，否则为移除失败"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "memberId",
        "description": "用户 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为移除成功，否则为移除失败"
    }
  },
  {
    "__docId__": 724,
    "kind": "get",
    "name": "createdBy",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#createdBy",
    "access": "public",
    "description": "获取聊天的创建者用户名",
    "lineNumber": 864,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 725,
    "kind": "set",
    "name": "createdBy",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#createdBy",
    "access": "public",
    "description": "设置聊天的创建者用户名",
    "lineNumber": 873,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "createdBy",
        "description": "聊天的创建者用户名"
      }
    ]
  },
  {
    "__docId__": 726,
    "kind": "get",
    "name": "members",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#members",
    "access": "public",
    "description": "获取聊天成员 ID 集合",
    "lineNumber": 882,
    "type": {
      "nullable": null,
      "types": [
        "Set<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 727,
    "kind": "set",
    "name": "members",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#members",
    "access": "public",
    "description": "设置聊天成员",
    "lineNumber": 891,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]",
          "Member[]"
        ],
        "spread": false,
        "optional": false,
        "name": "newMembers",
        "description": "聊天成员"
      }
    ]
  },
  {
    "__docId__": 728,
    "kind": "member",
    "name": "_membersSet",
    "memberof": "app/core/models/chat.js~Chat",
    "static": false,
    "longname": "app/core/models/chat.js~Chat#_membersSet",
    "access": "private",
    "description": null,
    "lineNumber": 897,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "isMember",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isMember",
    "access": "public",
    "description": "判断给定的成员 ID 是否在此聊天成员集合中",
    "lineNumber": 911,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为在此聊天成员集合中，否则为不在"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "{id: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "memberId",
        "description": "聊天成员对象或者成员 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为在此聊天成员集合中，否则为不在"
    }
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "resetMembers",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#resetMembers",
    "access": "public",
    "description": "设置聊天成员",
    "lineNumber": 924,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member[]"
        ],
        "spread": false,
        "optional": false,
        "name": "members",
        "description": "聊天成员"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "addMember",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#addMember",
    "access": "public",
    "description": "将成员添加到聊天中",
    "lineNumber": 936,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Member"
        ],
        "spread": true,
        "optional": false,
        "name": "newMembers",
        "description": "新到成员"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "updateMembersSet",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#updateMembersSet",
    "access": "public",
    "description": "从系统更新聊天成员列表",
    "lineNumber": 959,
    "params": [
      {
        "nullable": null,
        "types": [
          "{get: function(id: number):Member}"
        ],
        "spread": false,
        "optional": false,
        "name": "appMembers",
        "description": "用于从系统获取成员信息的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "getMembersCount",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#getMembersCount",
    "access": "public",
    "description": "获取聊天成员数目",
    "lineNumber": 973,
    "params": [
      {
        "nullable": null,
        "types": [
          "{get: function(id: number):Member}"
        ],
        "spread": false,
        "optional": false,
        "name": "appMembers",
        "description": "用于从系统获取成员信息的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "成员数目"
    }
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "getMembersSet",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#getMembersSet",
    "access": "public",
    "description": "从系统获取聊天成员列表",
    "lineNumber": 984,
    "params": [
      {
        "nullable": null,
        "types": [
          "{get: function(id: number):Member}"
        ],
        "spread": false,
        "optional": false,
        "name": "appMembers",
        "description": "用于从系统获取成员信息的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Member[]"
      ],
      "spread": false,
      "description": "聊天成员列表"
    }
  },
  {
    "__docId__": 740,
    "kind": "member",
    "name": "_membersSetUpdateId",
    "memberof": "app/core/models/chat.js~Chat",
    "static": false,
    "longname": "app/core/models/chat.js~Chat#_membersSetUpdateId",
    "access": "private",
    "description": null,
    "lineNumber": 990,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "getTheOtherOne",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#getTheOtherOne",
    "access": "public",
    "description": "获取一对一聊天对方成员",
    "lineNumber": 1002,
    "params": [
      {
        "nullable": null,
        "types": [
          "{members: {get: function(id: number):Member}}"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "用于获取系统成员的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Member"
      ],
      "spread": false,
      "description": "对方成员对象"
    }
  },
  {
    "__docId__": 742,
    "kind": "member",
    "name": "_theOtherOneId",
    "memberof": "app/core/models/chat.js~Chat",
    "static": false,
    "longname": "app/core/models/chat.js~Chat#_theOtherOneId",
    "access": "private",
    "description": null,
    "lineNumber": 1007,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "isOnline",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isOnline",
    "access": "public",
    "description": "判断聊天是否在线，如果是一对一聊天则判断对方成员状态是否在线，如果是其他聊天则直接判定为在线",
    "lineNumber": 1028,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果为 `true` 则为在线，否则为不在线"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{members: {get: function(id: number):Member}}"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "用于获取系统成员的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为在线，否则为不在线"
    }
  },
  {
    "__docId__": 745,
    "kind": "method",
    "name": "isOwner",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isOwner",
    "access": "public",
    "description": "判断给定的用户是否是聊天的创建者",
    "lineNumber": 1043,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是聊天的创建者，否则为不是聊天的创建者"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "聊天成员对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是聊天的创建者，否则为不是聊天的创建者"
    }
  },
  {
    "__docId__": 746,
    "kind": "get",
    "name": "canJoin",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#canJoin",
    "access": "public",
    "description": "获取是否能够让其他成员自由加入",
    "lineNumber": 1053,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "canExit",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#canExit",
    "access": "public",
    "description": "判断给定的用户是否能够退出讨论组",
    "lineNumber": 1064,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为能够退出讨论组，否则为不能够退出讨论组"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Member",
          "{id: number}",
          "{account: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "聊天成员对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为能够退出讨论组，否则为不能够退出讨论组"
    }
  },
  {
    "__docId__": 748,
    "kind": "get",
    "name": "canHide",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#canHide",
    "access": "public",
    "description": "获取是否隐藏此聊天",
    "lineNumber": 1074,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 749,
    "kind": "get",
    "name": "isSystem",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isSystem",
    "access": "public",
    "description": "获取是否是系统聊天",
    "lineNumber": 1083,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 750,
    "kind": "get",
    "name": "isGroupOrSystem",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isGroupOrSystem",
    "access": "public",
    "description": "获取是否是讨论组或系统聊天",
    "lineNumber": 1092,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 751,
    "kind": "get",
    "name": "noticeCount",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#noticeCount",
    "access": "public",
    "description": "获取此聊天的未读消息数目",
    "lineNumber": 1101,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 752,
    "kind": "set",
    "name": "noticeCount",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#noticeCount",
    "access": "public",
    "description": "设置此聊天的未读消息数目",
    "lineNumber": 1110,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "此聊天的未读消息数目"
      }
    ]
  },
  {
    "__docId__": 753,
    "kind": "member",
    "name": "_noticeCount",
    "memberof": "app/core/models/chat.js~Chat",
    "static": false,
    "longname": "app/core/models/chat.js~Chat#_noticeCount",
    "access": "private",
    "description": null,
    "lineNumber": 1111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "muteNotice",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#muteNotice",
    "access": "public",
    "description": "清除此聊天的未读消息数目",
    "lineNumber": 1120,
    "return": {
      "nullable": null,
      "types": [
        "ChatMessage[]"
      ],
      "spread": false,
      "description": "已新标记为已读的消息清单"
    },
    "params": []
  },
  {
    "__docId__": 756,
    "kind": "get",
    "name": "isMuteOrHidden",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isMuteOrHidden",
    "access": "public",
    "description": "获取此聊天是否已被设置为免打扰或者隐藏（已存档）",
    "lineNumber": 1139,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 757,
    "kind": "get",
    "name": "messages",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#messages",
    "access": "public",
    "description": "获取此聊天缓存的消息列表",
    "lineNumber": 1149,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "ChatMessage[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 758,
    "kind": "get",
    "name": "lastActiveTime",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#lastActiveTime",
    "access": "public",
    "description": "获取上次在界面上激活的时间戳",
    "lineNumber": 1158,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 759,
    "kind": "set",
    "name": "lastActiveTime",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#lastActiveTime",
    "access": "public",
    "description": "设置上次在界面上激活的时间戳",
    "lineNumber": 1171,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "上次在界面上激活的时间戳"
      }
    ]
  },
  {
    "__docId__": 760,
    "kind": "method",
    "name": "makeActive",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#makeActive",
    "access": "public",
    "description": "将聊天设置已激活",
    "lineNumber": 1180,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 762,
    "kind": "get",
    "name": "hasSetMessages",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#hasSetMessages",
    "access": "public",
    "description": "获取是否有缓存消息",
    "lineNumber": 1189,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 763,
    "kind": "method",
    "name": "addMessages",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#addMessages",
    "access": "public",
    "description": "将聊天消息添加到缓存",
    "lineNumber": 1203,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Chat} 返回自身用于链式调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage[]"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "要缓存的聊天列表"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "userId",
        "description": "用户 ID"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "localMessage",
        "description": "是否来源于本地数据消息"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "skipOld",
        "description": "是否忽略已缓存的消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "返回自身用于链式调用"
    }
  },
  {
    "__docId__": 764,
    "kind": "member",
    "name": "_messages",
    "memberof": "app/core/models/chat.js~Chat",
    "static": false,
    "longname": "app/core/models/chat.js~Chat#_messages",
    "access": "private",
    "description": null,
    "lineNumber": 1208,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 769,
    "kind": "get",
    "name": "lastMessage",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#lastMessage",
    "access": "public",
    "description": "获取缓存中最新的一个聊天消息",
    "lineNumber": 1258,
    "type": {
      "nullable": null,
      "types": [
        "ChatMessage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "removeMessage",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#removeMessage",
    "access": "public",
    "description": "从缓存中移除指定 GID 的聊天消息",
    "lineNumber": 1269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则移除成功，否则为移除失败（可能是未找到指定的聊天消息）"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "messageGid",
        "description": "聊天消息 GID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则移除成功，否则为移除失败（可能是未找到指定的聊天消息）"
    }
  },
  {
    "__docId__": 771,
    "kind": "get",
    "name": "isLoadingOver",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isLoadingOver",
    "access": "public",
    "description": "获取是否已经从数据库加载完所有消息到缓存",
    "lineNumber": 1286,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 772,
    "kind": "get",
    "name": "isFirstLoaded",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/chat.js~Chat#isFirstLoaded",
    "access": "public",
    "description": "获取是否是第一次从数据库加载消息",
    "lineNumber": 1295,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "create",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/models/chat.js~Chat.create",
    "access": "public",
    "description": "创建一个聊天类实例",
    "lineNumber": 1307,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string,any>",
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天属性对象或者聊天实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat"
      ],
      "spread": false,
      "description": "聊天类实例"
    }
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "sort",
    "memberof": "app/core/models/chat.js~Chat",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/models/chat.js~Chat.sort",
    "access": "public",
    "description": "对聊天列表进行排序，排序规则 `orders` 可以为以下值：\n- `function(c1: Member, c2: Member):number`，自定义排序函数；\n- 一个用逗号分隔的根据属性排序的属性名称表；\n- 根据属性排序的属性名称表数组。\n默认的排序规则为：`['star', 'notice', 'hide', 'mute', 'lastActiveTime', 'online', 'createDate', 'name', 'id']`。",
    "lineNumber": 1325,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat[]"
        ],
        "spread": false,
        "optional": false,
        "name": "chats",
        "description": "要排序的聊天列表"
      },
      {
        "nullable": null,
        "types": [
          "array",
          "string",
          "function(c1: Chat, c2: Chat):number"
        ],
        "spread": false,
        "optional": false,
        "name": "orders",
        "description": "排序规则"
      },
      {
        "nullable": null,
        "types": [
          "{members: {get: function(id: number):Member}}"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "用于获取系统成员的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Chat[]"
      ],
      "spread": false,
      "description": "排序后的聊天列表"
    }
  },
  {
    "__docId__": 775,
    "kind": "file",
    "name": "app/core/models/entity-schema.js",
    "content": "import {isNotEmptyString} from '../../utils/string-helper';\n\n/**\n * 默认类型表\n * @type {Object<string, string>}\n * @private\n */\nconst TYPES = {\n    int: 'int',\n    float: 'float',\n    string: 'string',\n    any: 'any',\n    boolean: 'boolean',\n    object: 'object',\n    array: 'array',\n    timestamp: 'timestamp',\n    datetime: 'datetime',\n    set: 'set',\n    json: 'json',\n};\n\n/**\n * 默认值转换器\n * @type {Object<string, function(val: any):any>}\n * @private\n */\nconst defaultValuesConveter = {\n    int: val => {\n        if (typeof val !== 'number') {\n            val = Number.parseInt(val, 10);\n        }\n        return val;\n    },\n    float: val => {\n        if (typeof val !== 'number') {\n            val = Number.parseFloat(val);\n        }\n        return val;\n    },\n    timestamp: val => {\n        if (typeof val === 'string') {\n            val = new Date(val).getTime();\n        }\n        if (val < 10000000000) {\n            val *= 1000;\n        }\n        return val;\n    },\n    string: val => {\n        if (val !== null && val !== undefined && typeof val !== 'string') {\n            return `${val}`;\n        }\n        return val;\n    },\n    boolean: val => {\n        if (typeof val === 'string') {\n            return val === '1' || val === 'true' || val === 'yes';\n        }\n        return !!val;\n    },\n    set: val => {\n        if (val instanceof Set) {\n            return val;\n        }\n        if (Array.isArray(val)) {\n            return new Set(val);\n        }\n        const valType = typeof val;\n        if (valType === 'string') {\n            const set = new Set();\n            val.split(',').forEach(x => {\n                if (x !== '') set.add(x);\n            });\n            return set;\n        }\n        return new Set(val);\n    },\n    array: val => {\n        if (Array.isArray(val)) {\n            return val;\n        }\n        if (typeof val === 'string') {\n            return val.split(',');\n        }\n        return [val];\n    },\n    datetime: val => {\n        if (val instanceof Date) {\n            return val;\n        }\n        return new Date(val);\n    },\n    json: json => {\n        if (typeof val === 'string') {\n            if (isNotEmptyString(json)) {\n                return JSON.parse(json);\n            }\n            return null;\n        }\n        return json;\n    }\n};\n\n/**\n * 数据库存储实体属性结构管理类，用于定义实体内所有属性的定义\n *\n * @export\n * @class EntitySchema\n */\nexport default class EntitySchema {\n    /**\n     * 创建一个数据库存储实体属性结构管理类\n     * @param {Object<string,Object<string, any>>} schema 属性结构管理对象\n     * @memberof EntitySchema\n     */\n    constructor(schema) {\n        let primaryKeyNumber = 0;\n        Object.keys(schema).forEach(name => {\n            const meta = schema[name];\n            if (meta.type && !TYPES[meta.type]) {\n                throw new Error(`Cannot create scheam, because the type(${meta.type}) is not a valid type.`);\n            }\n            if (meta.primaryKey) {\n                primaryKeyNumber += 1;\n                this.primaryKey = name;\n            }\n        });\n        if (primaryKeyNumber !== 1) {\n            if (DEBUG) {\n                console.trace('schema', schema);\n            }\n            throw new Error(`Cannot create scheam, because there has ${primaryKeyNumber} primary key(s).`);\n        }\n\n        /**\n         * 属性定义表\n         * @type {Object<string, {type: string, unique: boolean, indexed: boolean, convertGetterValue: function(key: string, val: any, entity: Entity):any, convertSetterValue: function(key: string, val: any, entity: Entity):any}>}\n         */\n        this.schema = schema;\n    }\n\n    /**\n     * 获取指定名称的属性定义对象\n     *\n     * @param {string} name 属性名称\n     * @param {boolean} [useDefault=false] 如果没有找定义是否使用默认定义\n     * @return {{type: string, unique: boolean, indexed: boolean, convertGetterValue: function(key: string, val: any, entity: Entity):any, convertSetterValue: function(key: string, val: any, entity: Entity):any}} 属性定义对象\n     * @memberof EntitySchema\n     */\n    of(name, useDefault = false) {\n        const scheam = this.schema[name];\n        if (scheam) {\n            return Object.assign({\n                type: TYPES.any,\n                indexed: false,\n            }, this.schema[name]);\n        }\n        if (useDefault) {\n            if (typeof useDefault === 'object') {\n                return useDefault;\n            }\n            return {\n                type: TYPES.any,\n                indexed: false,\n            };\n        }\n        return null;\n    }\n\n    /**\n     * 转换属性值\n     *\n     * @param {string} name 属性名称\n     * @param {any} value 属性值\n     * @param {?{type: string, unique: boolean, indexed: boolean, convertGetterValue: function(key: string, val: any, entity: Entity):any, convertSetterValue: function(key: string, val: any, entity: Entity):any}} meta 属性定义对象\n     * @return {any} 转换后的值\n     * @memberof EntitySchema\n     */\n    convertValue(name, value, meta) {\n        meta = meta || this.of(name);\n        if (meta) {\n            if (meta.type && defaultValuesConveter[meta.type]) {\n                return defaultValuesConveter[meta.type](value);\n            }\n            if (value === undefined && meta.defaultValue !== undefined) {\n                value = meta.defaultValue;\n            }\n        }\n        return value;\n    }\n\n    /**\n     * 转换用于读取的属性值\n     *\n     * @param {string} name 属性名称\n     * @param {any} value 属性值\n     * @param {Entity} thisObj 要转换的实体对象\n     * @return {any} 转换后的值\n     * @memberof EntitySchema\n     */\n    convertGetterValue(name, value, thisObj) {\n        const meta = this.of(name);\n        if (meta) {\n            if (meta.getter) {\n                return meta.getter.call(thisObj, value, thisObj);\n            }\n            if (meta.type && defaultValuesConveter[meta.type]) {\n                return defaultValuesConveter[meta.type](value);\n            }\n            if (value === undefined && meta.defaultValue !== undefined) {\n                value = meta.defaultValue;\n            }\n        }\n        return value;\n    }\n\n    /**\n     * 转换用于存储的属性值\n     *\n     * @param {string} name 属性名称\n     * @param {any} value 属性值\n     * @param {Entity} thisObj 要转换的实体对象\n     * @return {any} 转换后的值\n     * @memberof EntitySchema\n     */\n    convertSetterValue(name, value, thisObj) {\n        const meta = this.of(name);\n        if (meta) {\n            if (meta.setter) {\n                return meta.setter.call(thisObj, value, thisObj);\n            }\n            if (meta.type && defaultValuesConveter[meta.type]) {\n                return defaultValuesConveter[meta.type](value);\n            }\n            if (value === undefined && meta.defaultValue !== undefined) {\n                value = meta.defaultValue;\n            }\n        }\n        return value;\n    }\n\n    /**\n     * 扩展更多属性定义并返回一个新的属性结构管理类实例\n     *\n     * @param {Object<string,Object<string, any>>} newSchema 新的数学定义表\n     * @returns {EntitySchema} 新的属性结构管理类实例\n     * @memberof EntitySchema\n     */\n    extend(newSchema) {\n        return EntitySchema.extend(this, newSchema);\n    }\n\n    /**\n     * 获取用于定义 Dexie 表的格式字符串\n     * @memberof EntitySchema\n     * @type {string}\n     */\n    get dexieFormat() {\n        const formats = [this.primaryKey];\n        Object.keys(this.schema).forEach(name => {\n            const meta = this.schema[name];\n            if (meta.indexed !== false) {\n                if (meta.unique) {\n                    formats.push(`&${name}`);\n                } else if (meta.multiValued) {\n                    formats.push(`*${name}`);\n                } else if (meta.indexed) {\n                    formats.push(name);\n                }\n            }\n        });\n        return formats.join(',');\n    }\n\n    /**\n     * 扩展一个属性结构管理器并返回一个新的属性结构管理类实例\n     *\n     * @static\n     * @param {EntitySchema} parent 要扩展的属性结构管理器实例\n     * @param {Object<string,Object<string, any>>} newSchema 新的数学定义表\n     * @returns {EntitySchema} 新的属性结构管理类实例\n     * @memberof EntitySchema\n     */\n    static extend(parent, newSchema) {\n        return new EntitySchema(Object.assign({}, parent.schema, newSchema));\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/models/entity-schema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 776,
    "kind": "variable",
    "name": "TYPES",
    "memberof": "app/core/models/entity-schema.js",
    "static": true,
    "longname": "app/core/models/entity-schema.js~TYPES",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/entity-schema.js",
    "importStyle": null,
    "description": "默认类型表",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 777,
    "kind": "variable",
    "name": "defaultValuesConveter",
    "memberof": "app/core/models/entity-schema.js",
    "static": true,
    "longname": "app/core/models/entity-schema.js~defaultValuesConveter",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/entity-schema.js",
    "importStyle": null,
    "description": "默认值转换器",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, function(val: any):any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 778,
    "kind": "class",
    "name": "EntitySchema",
    "memberof": "app/core/models/entity-schema.js",
    "static": true,
    "longname": "app/core/models/entity-schema.js~EntitySchema",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/models/entity-schema.js",
    "importStyle": "EntitySchema",
    "description": "数据库存储实体属性结构管理类，用于定义实体内所有属性的定义",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "EntitySchema"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 779,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/models/entity-schema.js~EntitySchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity-schema.js~EntitySchema#constructor",
    "access": "public",
    "description": "创建一个数据库存储实体属性结构管理类",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string,Object<string, any>>"
        ],
        "spread": false,
        "optional": false,
        "name": "schema",
        "description": "属性结构管理对象"
      }
    ]
  },
  {
    "__docId__": 780,
    "kind": "member",
    "name": "primaryKey",
    "memberof": "app/core/models/entity-schema.js~EntitySchema",
    "static": false,
    "longname": "app/core/models/entity-schema.js~EntitySchema#primaryKey",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 781,
    "kind": "member",
    "name": "schema",
    "memberof": "app/core/models/entity-schema.js~EntitySchema",
    "static": false,
    "longname": "app/core/models/entity-schema.js~EntitySchema#schema",
    "access": "public",
    "description": "属性定义表",
    "lineNumber": 139,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, {type: string, unique: boolean, indexed: boolean, convertGetterValue: function(key: string, val: any, entity: Entity):any, convertSetterValue: function(key: string, val: any, entity: Entity):any}>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "of",
    "memberof": "app/core/models/entity-schema.js~EntitySchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity-schema.js~EntitySchema#of",
    "access": "public",
    "description": "获取指定名称的属性定义对象",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "属性名称"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "useDefault",
        "description": "如果没有找定义是否使用默认定义"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{type: string, unique: boolean, indexed: boolean, convertGetterValue: function(key: string, val: any, entity: Entity):any, convertSetterValue: function(key: string, val: any, entity: Entity):any}"
      ],
      "spread": false,
      "description": "属性定义对象"
    }
  },
  {
    "__docId__": 783,
    "kind": "method",
    "name": "convertValue",
    "memberof": "app/core/models/entity-schema.js~EntitySchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity-schema.js~EntitySchema#convertValue",
    "access": "public",
    "description": "转换属性值",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "属性名称"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "属性值"
      },
      {
        "nullable": true,
        "types": [
          "{type: string, unique: boolean, indexed: boolean, convertGetterValue: function(key: string, val: any, entity: Entity):any, convertSetterValue: function(key: string, val: any, entity: Entity):any}"
        ],
        "spread": false,
        "optional": false,
        "name": "meta",
        "description": "属性定义对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "转换后的值"
    }
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "convertGetterValue",
    "memberof": "app/core/models/entity-schema.js~EntitySchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity-schema.js~EntitySchema#convertGetterValue",
    "access": "public",
    "description": "转换用于读取的属性值",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "属性名称"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "属性值"
      },
      {
        "nullable": null,
        "types": [
          "Entity"
        ],
        "spread": false,
        "optional": false,
        "name": "thisObj",
        "description": "要转换的实体对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "转换后的值"
    }
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "convertSetterValue",
    "memberof": "app/core/models/entity-schema.js~EntitySchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity-schema.js~EntitySchema#convertSetterValue",
    "access": "public",
    "description": "转换用于存储的属性值",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "属性名称"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "属性值"
      },
      {
        "nullable": null,
        "types": [
          "Entity"
        ],
        "spread": false,
        "optional": false,
        "name": "thisObj",
        "description": "要转换的实体对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "转换后的值"
    }
  },
  {
    "__docId__": 786,
    "kind": "method",
    "name": "extend",
    "memberof": "app/core/models/entity-schema.js~EntitySchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity-schema.js~EntitySchema#extend",
    "access": "public",
    "description": "扩展更多属性定义并返回一个新的属性结构管理类实例",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{EntitySchema} 新的属性结构管理类实例"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string,Object<string, any>>"
        ],
        "spread": false,
        "optional": false,
        "name": "newSchema",
        "description": "新的数学定义表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": "新的属性结构管理类实例"
    }
  },
  {
    "__docId__": 787,
    "kind": "get",
    "name": "dexieFormat",
    "memberof": "app/core/models/entity-schema.js~EntitySchema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity-schema.js~EntitySchema#dexieFormat",
    "access": "public",
    "description": "获取用于定义 Dexie 表的格式字符串",
    "lineNumber": 258,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 788,
    "kind": "method",
    "name": "extend",
    "memberof": "app/core/models/entity-schema.js~EntitySchema",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/models/entity-schema.js~EntitySchema.extend",
    "access": "public",
    "description": "扩展一个属性结构管理器并返回一个新的属性结构管理类实例",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{EntitySchema} 新的属性结构管理类实例"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "EntitySchema"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "要扩展的属性结构管理器实例"
      },
      {
        "nullable": null,
        "types": [
          "Object<string,Object<string, any>>"
        ],
        "spread": false,
        "optional": false,
        "name": "newSchema",
        "description": "新的数学定义表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": "新的属性结构管理类实例"
    }
  },
  {
    "__docId__": 789,
    "kind": "file",
    "name": "app/core/models/entity.js",
    "content": "import UUID from 'uuid/v4';\nimport Schema from './entity-schema';\nimport timeSequence from '../../utils/time-sequence';\n\n/**\n * 集成实体存储类\n *\n * @export\n * @class Entity\n * @abstract\n */\nexport default class Entity {\n    /**\n     * 实体名称\n     * @type {string}\n     * @memberof Entity\n     */\n    static NAME = 'Entity';\n\n    /**\n     * 数据库存储实体属性结构管理器\n     *\n     * @type {EntitySchema}\n     * @static\n     * @memberof Entity\n     */\n    static SCHEMA = new Schema({\n        gid: {type: 'string', primaryKey: true},\n        id: {type: 'int', indexed: true},\n    });\n\n    /**\n     * 创建一个基础实体类实例\n     * @param {!Object<string, any>} data 实体属性对象\n     * @param {!string} entityType 实体类型名称\n     * @memberof Entity\n     */\n    constructor(data, entityType) {\n        /**\n         * 内部数据存储对象\n         * @type {Object<string, any>}\n         * @private\n         */\n        this.$ = {};\n\n        if (typeof data === 'object') {\n            this.$set(data);\n        }\n\n        this.ensureGid();\n\n        /**\n         * 实体类型名称\n         * @type {string}\n         * @private\n         */\n        this._entityType = entityType;\n\n        /**\n         * 跟踪实体属性变更的 ID，每次更新需要更高此值为一个全局唯一的数字\n         * @type {number}\n         * @private\n         */\n        this._updateId = timeSequence();\n    }\n\n    /**\n     * 从属性对象更新此实体属性\n     *\n     * @param {...Object<string, any>} data 属性对象\n     * @return {Entity} 返回自身用于链式调用\n     * @memberof Entity\n     */\n    assign(...data) {\n        Object.assign(this, ...data);\n        return this;\n    }\n\n    /**\n     * 调用此方法确保实体拥有合适的 GID 属性\n     *\n     * @memberof Entity\n     * @return {void}\n     */\n    ensureGid() {\n        if (!this.$.gid) {\n            this.$.gid = UUID();\n        }\n    }\n\n    /**\n     * 获取用于数据存储的简单对象\n     *\n     * @return {Object<string, any>} 用于的存储对象\n     * @memberof Entity\n     */\n    plain() {\n        this.ensureGid();\n        return this.$;\n    }\n\n    /**\n     * 获取跟踪实体属性变更的 ID，每次更新需要更高此值为一个全局唯一的数字\n     * @memberof Entity\n     * @type {number}\n     */\n    get updateId() {\n        return this._updateId;\n    }\n\n    /**\n     * 调用此方法将会更新用于跟踪实体属性变更 ID\n     *\n     * @memberof Entity\n     * @return {void}\n     */\n    renewUpdateId() {\n        this._updateId = timeSequence();\n    }\n\n    /**\n     * 获取实体类型\n     * @memberof Entity\n     * @type {string}\n     * @readonly\n     */\n    get entityType() {\n        return this._entityType || Entity.name;\n    }\n\n    /**\n     * 获取 GID 属性（全局唯一编号）\n     * @memberof Entity\n     * @type {string}\n     * @readonly\n     */\n    get gid() {\n        return this.$get('gid');\n    }\n\n    /**\n     * 获取 ID 属性\n     * @memberof Entity\n     * @type {number}\n     */\n    get id() {\n        return this.$get('id', 0);\n    }\n\n    /**\n     * 设置 ID 属性\n     * @param {number} newId  ID 属性\n     * @memberof Entity\n     */\n    set id(newId) {\n        this.$set('id', newId);\n    }\n\n    /**\n     * 获取数据库存储实体属性结构管理器\n     *\n     * @readonly\n     * @memberof Entity\n     * @type {EntitySchema}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    get schema() {\n        return Entity.SCHEMA;\n    }\n\n    /**\n     * 设置内部数据属性\n     * @param {String|Object<string, any>} key 如果为 `string` 则作为要设置的属性名称，如果为 `Object<string, any>` 则作为属性对象批量设置属性值，此时 `val` 参数将会被忽略\n     * @param {any} val 当 `key` 如果为 `string` 时要设置的属性值\n     * @param {boolean} [ignoreUpdateId=false] 不更新用于跟踪实体属性变更 ID\n     * @returns {Entity} 返回自身用于链式调用\n     */\n    $set(key, val, ignoreUpdateId = false) {\n        if (typeof key === 'object') {\n            Object.keys(key).forEach(k => {\n                this.$set(k, key[k], true);\n            });\n        } else {\n            const {schema} = this;\n            if (schema) {\n                const meta = schema.of(key);\n                if (meta && meta.aliasFor) {\n                    key = meta.aliasFor;\n                }\n                val = schema.convertSetterValue(key, val, this);\n            }\n            this.$[key] = val;\n        }\n        if (!ignoreUpdateId) {\n            this.renewUpdateId();\n        }\n        return this;\n    }\n\n    /**\n     * 获取内部数据属性的值\n     * @param  {string} key 属性名称\n     * @param  {string} defaultValue 默认值\n     * @return {any} 内部数据属性值\n     */\n    $get(key, defaultValue) {\n        let value = this.$[key];\n        const {schema} = this;\n        if (schema) {\n            const meta = schema.of(key);\n            if (meta && meta.aliasFor) {\n                key = meta.aliasFor;\n            }\n            value = schema.convertGetterValue(key, value, this);\n        }\n        if (value === undefined) {\n            value = defaultValue;\n        }\n        return value;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/models/entity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 790,
    "kind": "class",
    "name": "Entity",
    "memberof": "app/core/models/entity.js",
    "static": true,
    "longname": "app/core/models/entity.js~Entity",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/models/entity.js",
    "importStyle": "Entity",
    "description": "集成实体存储类",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Entity"
      }
    ],
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 791,
    "kind": "member",
    "name": "NAME",
    "memberof": "app/core/models/entity.js~Entity",
    "static": true,
    "longname": "app/core/models/entity.js~Entity.NAME",
    "access": "public",
    "description": "实体名称",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 792,
    "kind": "member",
    "name": "SCHEMA",
    "memberof": "app/core/models/entity.js~Entity",
    "static": true,
    "longname": "app/core/models/entity.js~Entity.SCHEMA",
    "access": "public",
    "description": "数据库存储实体属性结构管理器",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 793,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#constructor",
    "access": "public",
    "description": "创建一个基础实体类实例",
    "lineNumber": 38,
    "params": [
      {
        "nullable": false,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "实体属性对象"
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entityType",
        "description": "实体类型名称"
      }
    ]
  },
  {
    "__docId__": 794,
    "kind": "member",
    "name": "$",
    "memberof": "app/core/models/entity.js~Entity",
    "static": false,
    "longname": "app/core/models/entity.js~Entity#$",
    "access": "private",
    "description": "内部数据存储对象",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 795,
    "kind": "member",
    "name": "_entityType",
    "memberof": "app/core/models/entity.js~Entity",
    "static": false,
    "longname": "app/core/models/entity.js~Entity#_entityType",
    "access": "private",
    "description": "实体类型名称",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 796,
    "kind": "member",
    "name": "_updateId",
    "memberof": "app/core/models/entity.js~Entity",
    "static": false,
    "longname": "app/core/models/entity.js~Entity#_updateId",
    "access": "private",
    "description": "跟踪实体属性变更的 ID，每次更新需要更高此值为一个全局唯一的数字",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "assign",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#assign",
    "access": "public",
    "description": "从属性对象更新此实体属性",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object<string, any>"
        ],
        "spread": true,
        "optional": false,
        "name": "data",
        "description": "属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Entity"
      ],
      "spread": false,
      "description": "返回自身用于链式调用"
    }
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "ensureGid",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#ensureGid",
    "access": "public",
    "description": "调用此方法确保实体拥有合适的 GID 属性",
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "plain",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#plain",
    "access": "public",
    "description": "获取用于数据存储的简单对象",
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": "用于的存储对象"
    },
    "params": []
  },
  {
    "__docId__": 800,
    "kind": "get",
    "name": "updateId",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#updateId",
    "access": "public",
    "description": "获取跟踪实体属性变更的 ID，每次更新需要更高此值为一个全局唯一的数字",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "renewUpdateId",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#renewUpdateId",
    "access": "public",
    "description": "调用此方法将会更新用于跟踪实体属性变更 ID",
    "lineNumber": 117,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 803,
    "kind": "get",
    "name": "entityType",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#entityType",
    "access": "public",
    "description": "获取实体类型",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 804,
    "kind": "get",
    "name": "gid",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#gid",
    "access": "public",
    "description": "获取 GID 属性（全局唯一编号）",
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 805,
    "kind": "get",
    "name": "id",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#id",
    "access": "public",
    "description": "获取 ID 属性",
    "lineNumber": 146,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 806,
    "kind": "set",
    "name": "id",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#id",
    "access": "public",
    "description": "设置 ID 属性",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newId",
        "description": "ID 属性"
      }
    ]
  },
  {
    "__docId__": 807,
    "kind": "get",
    "name": "schema",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#schema",
    "access": "public",
    "description": "获取数据库存储实体属性结构管理器",
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 808,
    "kind": "method",
    "name": "$set",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#$set",
    "access": "public",
    "description": "设置内部数据属性",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Entity} 返回自身用于链式调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "如果为 `string` 则作为要设置的属性名称，如果为 `Object<string, any>` 则作为属性对象批量设置属性值，此时 `val` 参数将会被忽略"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "当 `key` 如果为 `string` 时要设置的属性值"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "ignoreUpdateId",
        "description": "不更新用于跟踪实体属性变更 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Entity"
      ],
      "spread": false,
      "description": "返回自身用于链式调用"
    }
  },
  {
    "__docId__": 809,
    "kind": "method",
    "name": "$get",
    "memberof": "app/core/models/entity.js~Entity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/entity.js~Entity#$get",
    "access": "public",
    "description": "获取内部数据属性的值",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "属性名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "默认值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "内部数据属性值"
    }
  },
  {
    "__docId__": 810,
    "kind": "file",
    "name": "app/core/models/file-data.js",
    "content": "import UUID from 'uuid';\nimport md5 from 'md5';\nimport Entity from './entity';\nimport Member from './member';\nimport {matchScore} from '../../utils/search-score';\nimport {createDate} from '../../utils/date-helper';\n\n/**\n * 将 data uri 数据转换为 Blob 对象\n * @param {string} dataURI data uri 格式数据\n * @return {Blob} Blob 对象\n */\nexport const dataURItoBlob = (dataURI) => {\n    // convert base64 to raw binary data held in a string\n    // doesn't handle URLEncoded DataURIs\n    const byteString = atob(dataURI.split(',')[1]);\n\n    // separate out the mime component\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n    // write the bytes of the string to an ArrayBuffer\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n\n    // write the ArrayBuffer to a blob, and you're done\n    const bb = new Blob([ab], {type: mimeString});\n    return bb;\n};\n\n/**\n * 搜索匹配分值表\n * @type {Object[]}\n * @private\n */\nconst MATCH_SCORE_MAP = [\n    {name: 'name', equal: 100, include: 50},\n    {name: 'category', equal: 100, prefix: ':'},\n    {name: 'cgid', equal: 100, prefix: '#'},\n    {name: 'senderId', equal: 100, prefix: '@'},\n    {name: 'extName', equal: 100, prefix: '.'},\n];\n\n/**\n * 文件类型表\n * @type {Object[]}\n * @private\n */\nconst CATEGORIES = [\n    {name: 'doc', like: new Set(['doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'key', 'page', 'number', 'pdf', 'txt', 'md', 'rtf', 'wps', 'html', 'htm', 'chtml', 'epub', ''])},\n    {name: 'image', like: new Set(['jpg', 'jpeg', 'sketch', 'psd', 'png', 'gif', 'tiff', 'ico', 'icns', 'svg'])},\n    {name: 'program', like: new Set(['js', 'exe', 'app', 'dmg', 'msi', 'bat', 'sh'])}\n];\n\n/**\n * 文件数据类\n *\n * @export\n * @class FileData\n * @extends {Entity}\n */\nexport default class FileData extends Entity {\n    /**\n     * 文件类型表\n     * @type {Object[]}\n     */\n    static CATEGORIES = CATEGORIES;\n\n    /**\n     * 实体名称\n     * @type {string}\n     */\n    static NAME = 'FileData';\n\n    /**\n     * 数据库存储实体属性结构管理器\n     *\n     * @type {EntitySchema}\n     * @static\n     * @memberof FileData\n     */\n    static SCHEMA = Entity.SCHEMA.extend({\n        cgid: {type: 'string', indexed: true},\n        senderId: {type: 'int', indexed: true},\n        size: {type: 'int', indexed: true},\n        width: {type: 'int', indexed: false},\n        height: {type: 'int', indexed: false},\n        date: {type: 'timestamp', indexed: true},\n        type: {type: 'string', indexed: true},\n        name: {type: 'string', indexed: true},\n        send: {\n            type: 'int',\n            indexed: true,\n            getter: val => {\n                if (val === -1) {\n                    return true;\n                }\n                if (val === -2) {\n                    return false;\n                }\n                return val;\n            },\n            setter: val => {\n                if (val === true) {\n                    return -1;\n                }\n                if (val === false) {\n                    return -2;\n                }\n                return val;\n            }\n        },\n    });\n\n    /**\n     * 创建一个文件类实例\n     * @param {Object<string, any>} data 文件属性对象\n     * @param {string} [entityType=FileData.NAME] 实体类型名称\n     * @memberof FileData\n     */\n    constructor(data, entityType = FileData.NAME) {\n        super(data, entityType);\n\n        if (data.time) {\n            /**\n             * 文件创建日期\n             * @type {number}\n             */\n            this.date = data.time;\n        }\n        if (data.originFile) {\n            /**\n             * 原始文件对象\n             * @type {File|Object}\n             */\n            this.originFile = data.originFile;\n        }\n        if (data.path) {\n            /**\n             * 文件存储路径\n             * @type {string}\n             */\n            this.path = data.path;\n        }\n    }\n\n    /**\n     * 确保 Gid 属性有可用的值\n     * @memberof FileData\n     * @return {void}\n     */\n    ensureGid() {\n        if (!this.$.gid) {\n            if (this.isOK) {\n                this.$.gid = md5(`${this.name}:${this.date}:${this.id}`);\n            } else {\n                this.$.gid = UUID();\n            }\n        }\n    }\n\n    /**\n     * 获取文件原始类型\n     * @memberof FileData\n     * @type {string}\n     * @readonly\n     */\n    get originType() {\n        const {originFile} = this;\n        if (originFile) {\n            if (originFile instanceof File) {\n                return 'file';\n            }\n            if (originFile.base64) {\n                return 'base64';\n            }\n            if (originFile.blob) {\n                return 'blob';\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 获取文件原始存储数据\n     * @memberof FileData\n     * @type {File|Blob|string}\n     * @readonly\n     */\n    get originData() {\n        const {originType, originFile} = this;\n        if (originType && originFile) {\n            if (originType === 'blob') {\n                return originFile.blob;\n            }\n            if (originType === 'file') {\n                return originFile;\n            }\n            if (originType === 'base64') {\n                originFile.blob = dataURItoBlob(originFile.base64);\n                return originFile.blob;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 获取文件访问地址\n     *\n     * @param {User} user 当前用户\n     * @returns {string} 文件地址\n     * @memberof FileData\n     */\n    getViewUrl(user) {\n        const {originFile} = this;\n        if (originFile) {\n            if (!this._viewUrl) {\n                this._viewUrl = originFile.path || this.localPath;\n                if (this._viewUrl && !this._viewUrl.startsWith('http://') && !this._viewUrl.startsWith('https://') && !this._viewUrl.startsWith('file://')) {\n                    this._viewUrl = `file://${this._viewUrl}`;\n                }\n            }\n            if (!this._viewUrl) {\n                if (originFile.blob) {\n                    this._viewUrl = URL.createObjectURL(originFile.blob);\n                } else {\n                    this._viewUrl = originFile.base64;\n                }\n            }\n            if (!this._viewUrl && (originFile instanceof File || originFile instanceof Blob)) {\n                this._viewUrl = URL.createObjectURL(originFile);\n            }\n            if (!this._viewUrl) {\n                this._viewUrl = this.makeUrl(user);\n            }\n        }\n        return this._viewUrl;\n    }\n\n    /**\n     * 获取上次为用户生成的文件访问地址\n     *\n     * @readonly\n     * @memberof FileData\n     * @type {string}\n     */\n    get viewUrl() {\n        return this.getViewUrl();\n    }\n\n    /**\n     * 获取数据库存储实体属性结构管理器\n     *\n     * @readonly\n     * @memberof FileData\n     * @type {EntitySchema}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    get schema() {\n        return FileData.SCHEMA;\n    }\n\n    /**\n     * 获取用于数据存储的简单对象\n     *\n     * @return {Object<string, any>} 用于的存储对象\n     * @memberof FileData\n     */\n    plain() {\n        const plainData = super.plain();\n        delete plainData.path;\n        delete plainData.originFile;\n        return plainData;\n    }\n\n    /**\n     * 获取存储对象的 JSON 字符串格式\n     * @memberof FileData\n     * @type {string}\n     * @readonly\n     */\n    get json() {\n        return JSON.stringify(this.plain());\n    }\n\n    /**\n     * 获取文件对应的聊天 GID\n     * @memberof FileData\n     * @type {string}\n     */\n    get cgid() {\n        return this.$get('cgid');\n    }\n\n    /**\n     * 设置文件对应的聊天 GID\n     * @param {string} gid 文件对应的聊天 GID\n     * @memberof FileData\n     */\n    set cgid(gid) {\n        this.$set('cgid', gid);\n    }\n\n    /**\n     * 获取内部存储文件名\n     * @memberof FileData\n     * @type {string}\n     * @readonly\n     */\n    get storageName() {\n        return `${this.gid}.${this.extName}`;\n    }\n\n    /**\n     * 获取文件创建日期\n     * @memberof FileData\n     * @type {Date} 文件创建日期\n     */\n    get date() {\n        return createDate(this.$get('date'));\n    }\n\n    /**\n     * 设置文件创建日期（时间戳格式）\n     * @param {number} date 文件创建日期\n     * @memberof FileData\n     */\n    set date(date) {\n        this.$set('date', date);\n    }\n\n    /**\n     * 获取文件创建日期（php 时间戳格式）\n     * @memberof FileData\n     * @type {number}\n     */\n    get time() {\n        return Math.floor(this.date.getTime() / 1000);\n    }\n\n    /**\n     * 设置文件创建日期（php 时间戳格式）\n     * @param {number} time 文件创建日期（php 时间戳格式）\n     * @memberof FileData\n     */\n    set time(time) {\n        this.date = time;\n    }\n\n    /**\n     * 获取文件发送者 ID\n     * @memberof FileData\n     * @type {string}\n     */\n    get senderId() {\n        return this.$get('senderId');\n    }\n\n    /**\n     * 判断指定的用户 ID 是否是当前文件的发送者\n     * @memberof FileData\n     * @param {string} userID 用户 ID\n     * @return {boolean} 如果为 `true` 则为文件发送者，否则不是\n     */\n    isSender(userID) {\n        return this.senderId === userID;\n    }\n\n    /**\n     * 获取文件发送者\n     * @memberof FileData\n     * @type {Member}\n     */\n    get sender() {\n        if (!this._sender) {\n            return new Member({\n                id: this.senderId\n            });\n        }\n        return this._sender;\n    }\n\n    /**\n     * 设置文件发送着\n     * @param {Member} sendUser 文件发送着\n     * @memberof FileData\n     */\n    set sender(sendUser) {\n        if (sendUser) {\n            this._sender = sendUser;\n            this.$set('user', sendUser.id);\n        }\n    }\n\n    /**\n     * 根据系统成员数据获取当前文件发送者\n     * @param {{get: function(id: string):Member}} appMembers 系统成员获取辅助对象\n     * @returns {Member} 文件发送者\n     * @memberof FileData\n     */\n    getSender(appMembers) {\n        if (!this._sender) {\n            this._sender = appMembers.get(this.senderId);\n        }\n        return this._sender;\n    }\n\n    /**\n     * 获取文件类型\n     * @memberof FileData\n     * @type {string}\n     */\n    get type() {\n        return this.$get('type');\n    }\n\n    /**\n     * 设置文件类型\n     * @param {string} type 文件类型\n     * @memberof FileData\n     */\n    set type(type) {\n        this.$set('type', type);\n    }\n\n    /**\n     * 获取是否是图片类型\n     * @memberof FileData\n     * @type {boolean}\n     * @readonly\n     */\n    get isImage() {\n        const {type} = this;\n        return type && type.startsWith('image');\n    }\n\n    /**\n     * 获取文件大小，单位字节\n     * @memberof FileData\n     * @type {number}\n     */\n    get size() {\n        return this.$get('size');\n    }\n\n    /**\n     * 设置文件大小，单位字节\n     * @param {number} size 文件大小，单位字节\n     * @memberof FileData\n     */\n    set size(size) {\n        this.$set('size', size);\n    }\n\n    /**\n     * 获取图片宽度\n     * @memberof FileData\n     * @type {number}\n     */\n    get width() {\n        return this.$get('width');\n    }\n\n    /**\n     * 设置图片宽度\n     * @param {number} width 图片宽度\n     * @memberof FileData\n     */\n    set width(width) {\n        this.$set('width', width);\n    }\n\n    /**\n     * 获取图片高度\n     * @memberof FileData\n     * @type {number}\n     */\n    get height() {\n        return this.$get('height');\n    }\n\n    /**\n     * 设置图片高度\n     * @param {number} height 图片高度\n     * @memberof FileData\n     */\n    set height(height) {\n        this.$set('height', height);\n    }\n\n    /**\n     * 获取图片信息\n     * @memberof FileData\n     * @type {{width: number, height: number}}\n     * @property {number} width 图片宽度\n     * @property {number} height 图片高度\n     * @readonly\n     */\n    get imageInfo() {\n        const {width, height} = this;\n        return width && height ? {width, height} : null;\n    }\n\n    /**\n     * 获取文件名称\n     * @memberof FileData\n     * @type {string}\n     */\n    get name() {\n        return this.$get('name');\n    }\n\n    /**\n     * 设置文件名称\n     * @param {string} name 文件名称\n     * @memberof FileData\n     */\n    set name(name) {\n        this.$set('name', name);\n    }\n\n    /**\n     * 获取文件是否已经发送到服务器，此属性可能值包括：\n     * - 0～100 的数字，表示发送到服务器的百分比；\n     * - `false`，表示没有发送到服务器；\n     * - `true`，表示已经成功发送到服务器。\n     * @memberof FileData\n     * @type {boolean|number}\n     */\n    get send() {\n        return this.$get('send');\n    }\n\n    /**\n     * 设置文件发送到服务器状态，此属性可能值包括：\n     * - 0～100 的数字，表示发送到服务器的百分比；\n     * - `false`，表示没有发送到服务器；\n     * - `true`，表示已经成功发送到服务器。\n     * @param {boolean|number} send 文件发送到服务器状态\n     * @memberof FileData\n     */\n    set send(send) {\n        this.$set('send', send);\n    }\n\n    /**\n     * 获取是否已经发送到服务器\n     * @memberof FileData\n     * @readonly\n     * @type {boolean}\n     */\n    get isOK() {\n        return this.id && this.send === true;\n    }\n\n    /**\n     * 获取文件扩展名，例如 `'txt'`\n     * @memberof FileData\n     * @type {string}\n     * @readonly\n     */\n    get extName() {\n        if (this._extName === undefined) {\n            const {name} = this;\n            const dotIndex = name.lastIndexOf('.');\n            this._extName = dotIndex > -1 ? name.substr(dotIndex + 1) : '';\n        }\n        return this._extName;\n    }\n\n    /**\n     * 获取获取文件所属类型\n     * @memberof FileData\n     * @type {string}\n     * @readonly\n     */\n    get category() {\n        if (!this._category) {\n            this._category = 'other';\n            const {extName} = this;\n            if (extName) {\n                for (const cat of CATEGORIES) {\n                    if (cat.like.has(extName)) {\n                        this._category = cat.name;\n                        break;\n                    }\n                }\n            }\n        }\n        return this._category;\n    }\n\n    /**\n     * 获取文件与给定的关键字匹配分值\n     * @memberof FileData\n     * @param {string[]} keys 关键字列表\n     * @return {number} 匹配的分值\n     */\n    getMatchScore(keys) {\n        return matchScore(MATCH_SCORE_MAP, this, keys);\n    }\n\n    /**\n     * 拼接文件访问地址\n     * @memberof FileData\n     * @param {User} user 当前用户\n     * @return {string} 文件访问地址\n     */\n    makeUrl(user) {\n        if (!this._url && user) {\n            this._url = user.makeServerUrl(`download?fileName=${encodeURIComponent(this.name)}&time=${this.time || 0}&id=${this.id}&ServerName=${user.serverName}&gid=${user.id}&sid=${md5(user.sessionID + this.name)}`);\n        }\n        return this._url;\n    }\n\n    /**\n     * 获取上次用户访问的地址\n     * @memberof FileData\n     * @type {string}\n     */\n    get url() {\n        return this._url;\n    }\n\n    /**\n     * 创建一个文件类对象\n     *\n     * @static\n     * @param {Object|FileData} fileData 文件属性对象\n     * @return {FileData} 一个文件类对象\n     * @memberof FileData\n     */\n    static create(fileData) {\n        if (fileData instanceof FileData) {\n            return fileData;\n        }\n        if (fileData instanceof File || fileData.base64 || fileData.blob) {\n            const originFile = fileData;\n            fileData = {\n                date: originFile.lastModifiedDate || new Date().getTime(),\n                name: originFile.name,\n                size: originFile.size,\n                width: originFile.width,\n                height: originFile.height,\n                send: 0,\n                type: originFile.type,\n                originFile\n            };\n        }\n        return new FileData(fileData);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/models/file-data.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 811,
    "kind": "function",
    "name": "dataURItoBlob",
    "memberof": "app/core/models/file-data.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/models/file-data.js~dataURItoBlob",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/models/file-data.js",
    "importStyle": "{dataURItoBlob}",
    "description": "将 data uri 数据转换为 Blob 对象",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dataURI",
        "description": "data uri 格式数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Blob"
      ],
      "spread": false,
      "description": "Blob 对象"
    }
  },
  {
    "__docId__": 812,
    "kind": "variable",
    "name": "MATCH_SCORE_MAP",
    "memberof": "app/core/models/file-data.js",
    "static": true,
    "longname": "app/core/models/file-data.js~MATCH_SCORE_MAP",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/file-data.js",
    "importStyle": null,
    "description": "搜索匹配分值表",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 813,
    "kind": "variable",
    "name": "CATEGORIES",
    "memberof": "app/core/models/file-data.js",
    "static": true,
    "longname": "app/core/models/file-data.js~CATEGORIES",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/file-data.js",
    "importStyle": null,
    "description": "文件类型表",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 814,
    "kind": "class",
    "name": "FileData",
    "memberof": "app/core/models/file-data.js",
    "static": true,
    "longname": "app/core/models/file-data.js~FileData",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/models/file-data.js",
    "importStyle": "FileData",
    "description": "文件数据类",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "FileData"
      }
    ],
    "interface": false,
    "extends": [
      "Entity"
    ]
  },
  {
    "__docId__": 815,
    "kind": "member",
    "name": "CATEGORIES",
    "memberof": "app/core/models/file-data.js~FileData",
    "static": true,
    "longname": "app/core/models/file-data.js~FileData.CATEGORIES",
    "access": "public",
    "description": "文件类型表",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 816,
    "kind": "member",
    "name": "NAME",
    "memberof": "app/core/models/file-data.js~FileData",
    "static": true,
    "longname": "app/core/models/file-data.js~FileData.NAME",
    "access": "public",
    "description": "实体名称",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 817,
    "kind": "member",
    "name": "SCHEMA",
    "memberof": "app/core/models/file-data.js~FileData",
    "static": true,
    "longname": "app/core/models/file-data.js~FileData.SCHEMA",
    "access": "public",
    "description": "数据库存储实体属性结构管理器",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 818,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#constructor",
    "access": "public",
    "description": "创建一个文件类实例",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "文件属性对象"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "FileData.NAME",
        "defaultRaw": "FileData.NAME",
        "name": "entityType",
        "description": "实体类型名称"
      }
    ]
  },
  {
    "__docId__": 820,
    "kind": "member",
    "name": "originFile",
    "memberof": "app/core/models/file-data.js~FileData",
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#originFile",
    "access": "public",
    "description": "原始文件对象",
    "lineNumber": 138,
    "type": {
      "nullable": null,
      "types": [
        "File",
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 821,
    "kind": "member",
    "name": "path",
    "memberof": "app/core/models/file-data.js~FileData",
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#path",
    "access": "public",
    "description": "文件存储路径",
    "lineNumber": 145,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 822,
    "kind": "method",
    "name": "ensureGid",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#ensureGid",
    "access": "public",
    "description": "确保 Gid 属性有可用的值",
    "lineNumber": 154,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 823,
    "kind": "get",
    "name": "originType",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#originType",
    "access": "public",
    "description": "获取文件原始类型",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 824,
    "kind": "get",
    "name": "originData",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#originData",
    "access": "public",
    "description": "获取文件原始存储数据",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "File",
        "Blob",
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 825,
    "kind": "method",
    "name": "getViewUrl",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#getViewUrl",
    "access": "public",
    "description": "获取文件访问地址",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 文件地址"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "当前用户"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "文件地址"
    }
  },
  {
    "__docId__": 826,
    "kind": "member",
    "name": "_viewUrl",
    "memberof": "app/core/models/file-data.js~FileData",
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#_viewUrl",
    "access": "private",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 832,
    "kind": "get",
    "name": "viewUrl",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#viewUrl",
    "access": "public",
    "description": "获取上次为用户生成的文件访问地址",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 833,
    "kind": "get",
    "name": "schema",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#schema",
    "access": "public",
    "description": "获取数据库存储实体属性结构管理器",
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 834,
    "kind": "method",
    "name": "plain",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#plain",
    "access": "public",
    "description": "获取用于数据存储的简单对象",
    "lineNumber": 271,
    "return": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": "用于的存储对象"
    },
    "params": []
  },
  {
    "__docId__": 835,
    "kind": "get",
    "name": "json",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#json",
    "access": "public",
    "description": "获取存储对象的 JSON 字符串格式",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 836,
    "kind": "get",
    "name": "cgid",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#cgid",
    "access": "public",
    "description": "获取文件对应的聊天 GID",
    "lineNumber": 293,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 837,
    "kind": "set",
    "name": "cgid",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#cgid",
    "access": "public",
    "description": "设置文件对应的聊天 GID",
    "lineNumber": 302,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "gid",
        "description": "文件对应的聊天 GID"
      }
    ]
  },
  {
    "__docId__": 838,
    "kind": "get",
    "name": "storageName",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#storageName",
    "access": "public",
    "description": "获取内部存储文件名",
    "lineNumber": 312,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 839,
    "kind": "get",
    "name": "date",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#date",
    "access": "public",
    "description": "获取文件创建日期",
    "lineNumber": 321,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 840,
    "kind": "set",
    "name": "date",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#date",
    "access": "public",
    "description": "设置文件创建日期（时间戳格式）",
    "lineNumber": 330,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "文件创建日期"
      }
    ]
  },
  {
    "__docId__": 841,
    "kind": "get",
    "name": "time",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#time",
    "access": "public",
    "description": "获取文件创建日期（php 时间戳格式）",
    "lineNumber": 339,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 842,
    "kind": "set",
    "name": "time",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#time",
    "access": "public",
    "description": "设置文件创建日期（php 时间戳格式）",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "文件创建日期（php 时间戳格式）"
      }
    ]
  },
  {
    "__docId__": 844,
    "kind": "get",
    "name": "senderId",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#senderId",
    "access": "public",
    "description": "获取文件发送者 ID",
    "lineNumber": 357,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 845,
    "kind": "method",
    "name": "isSender",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#isSender",
    "access": "public",
    "description": "判断指定的用户 ID 是否是当前文件的发送者",
    "lineNumber": 367,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userID",
        "description": "用户 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为文件发送者，否则不是"
    }
  },
  {
    "__docId__": 846,
    "kind": "get",
    "name": "sender",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#sender",
    "access": "public",
    "description": "获取文件发送者",
    "lineNumber": 376,
    "type": {
      "nullable": null,
      "types": [
        "Member"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 847,
    "kind": "set",
    "name": "sender",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#sender",
    "access": "public",
    "description": "设置文件发送着",
    "lineNumber": 390,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "sendUser",
        "description": "文件发送着"
      }
    ]
  },
  {
    "__docId__": 848,
    "kind": "member",
    "name": "_sender",
    "memberof": "app/core/models/file-data.js~FileData",
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#_sender",
    "access": "private",
    "description": null,
    "lineNumber": 392,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 849,
    "kind": "method",
    "name": "getSender",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#getSender",
    "access": "public",
    "description": "根据系统成员数据获取当前文件发送者",
    "lineNumber": 403,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Member} 文件发送者"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{get: function(id: string):Member}"
        ],
        "spread": false,
        "optional": false,
        "name": "appMembers",
        "description": "系统成员获取辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Member"
      ],
      "spread": false,
      "description": "文件发送者"
    }
  },
  {
    "__docId__": 851,
    "kind": "get",
    "name": "type",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#type",
    "access": "public",
    "description": "获取文件类型",
    "lineNumber": 415,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 852,
    "kind": "set",
    "name": "type",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#type",
    "access": "public",
    "description": "设置文件类型",
    "lineNumber": 424,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "文件类型"
      }
    ]
  },
  {
    "__docId__": 853,
    "kind": "get",
    "name": "isImage",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#isImage",
    "access": "public",
    "description": "获取是否是图片类型",
    "lineNumber": 434,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 854,
    "kind": "get",
    "name": "size",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#size",
    "access": "public",
    "description": "获取文件大小，单位字节",
    "lineNumber": 444,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 855,
    "kind": "set",
    "name": "size",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#size",
    "access": "public",
    "description": "设置文件大小，单位字节",
    "lineNumber": 453,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "文件大小，单位字节"
      }
    ]
  },
  {
    "__docId__": 856,
    "kind": "get",
    "name": "width",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#width",
    "access": "public",
    "description": "获取图片宽度",
    "lineNumber": 462,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 857,
    "kind": "set",
    "name": "width",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#width",
    "access": "public",
    "description": "设置图片宽度",
    "lineNumber": 471,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "图片宽度"
      }
    ]
  },
  {
    "__docId__": 858,
    "kind": "get",
    "name": "height",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#height",
    "access": "public",
    "description": "获取图片高度",
    "lineNumber": 480,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 859,
    "kind": "set",
    "name": "height",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#height",
    "access": "public",
    "description": "设置图片高度",
    "lineNumber": 489,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "图片高度"
      }
    ]
  },
  {
    "__docId__": 860,
    "kind": "get",
    "name": "imageInfo",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#imageInfo",
    "access": "public",
    "description": "获取图片信息",
    "lineNumber": 501,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "图片宽度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "图片高度"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{width: number, height: number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 861,
    "kind": "get",
    "name": "name",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#name",
    "access": "public",
    "description": "获取文件名称",
    "lineNumber": 511,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 862,
    "kind": "set",
    "name": "name",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#name",
    "access": "public",
    "description": "设置文件名称",
    "lineNumber": 520,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "文件名称"
      }
    ]
  },
  {
    "__docId__": 863,
    "kind": "get",
    "name": "send",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#send",
    "access": "public",
    "description": "获取文件是否已经发送到服务器，此属性可能值包括：\n- 0～100 的数字，表示发送到服务器的百分比；\n- `false`，表示没有发送到服务器；\n- `true`，表示已经成功发送到服务器。",
    "lineNumber": 532,
    "type": {
      "nullable": null,
      "types": [
        "boolean",
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 864,
    "kind": "set",
    "name": "send",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#send",
    "access": "public",
    "description": "设置文件发送到服务器状态，此属性可能值包括：\n- 0～100 的数字，表示发送到服务器的百分比；\n- `false`，表示没有发送到服务器；\n- `true`，表示已经成功发送到服务器。",
    "lineNumber": 544,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "send",
        "description": "文件发送到服务器状态"
      }
    ]
  },
  {
    "__docId__": 865,
    "kind": "get",
    "name": "isOK",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#isOK",
    "access": "public",
    "description": "获取是否已经发送到服务器",
    "lineNumber": 554,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 866,
    "kind": "get",
    "name": "extName",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#extName",
    "access": "public",
    "description": "获取文件扩展名，例如 `'txt'`",
    "lineNumber": 564,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 867,
    "kind": "member",
    "name": "_extName",
    "memberof": "app/core/models/file-data.js~FileData",
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#_extName",
    "access": "private",
    "description": null,
    "lineNumber": 568,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 868,
    "kind": "get",
    "name": "category",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#category",
    "access": "public",
    "description": "获取获取文件所属类型",
    "lineNumber": 579,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 869,
    "kind": "member",
    "name": "_category",
    "memberof": "app/core/models/file-data.js~FileData",
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#_category",
    "access": "private",
    "description": null,
    "lineNumber": 581,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 871,
    "kind": "method",
    "name": "getMatchScore",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#getMatchScore",
    "access": "public",
    "description": "获取文件与给定的关键字匹配分值",
    "lineNumber": 601,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "关键字列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "匹配的分值"
    }
  },
  {
    "__docId__": 872,
    "kind": "method",
    "name": "makeUrl",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#makeUrl",
    "access": "public",
    "description": "拼接文件访问地址",
    "lineNumber": 611,
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "当前用户"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "文件访问地址"
    }
  },
  {
    "__docId__": 873,
    "kind": "member",
    "name": "_url",
    "memberof": "app/core/models/file-data.js~FileData",
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#_url",
    "access": "private",
    "description": null,
    "lineNumber": 613,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 874,
    "kind": "get",
    "name": "url",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/file-data.js~FileData#url",
    "access": "public",
    "description": "获取上次用户访问的地址",
    "lineNumber": 623,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 875,
    "kind": "method",
    "name": "create",
    "memberof": "app/core/models/file-data.js~FileData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/models/file-data.js~FileData.create",
    "access": "public",
    "description": "创建一个文件类对象",
    "lineNumber": 635,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "fileData",
        "description": "文件属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileData"
      ],
      "spread": false,
      "description": "一个文件类对象"
    }
  },
  {
    "__docId__": 876,
    "kind": "file",
    "name": "app/core/models/index.js",
    "content": "import Entity from './entity';\nimport Member from './member';\nimport Chat from './chat';\nimport ChatMessage from './chat-message';\nimport EntitySchema from './entity-schema';\n\n/**\n * 返回所有可用的数据库存储类\n * @type {Object}\n * @property {Class} Entity 基础存储实体类\n * @property {Class} Member 成员类\n * @property {Class} Chat 聊天类\n * @property {Class} ChatMessage 聊天消息类\n * @property {Class} EntitySchema 存储实体结构类\n */\nexport default {\n    Entity, Member, Chat, ChatMessage, EntitySchema,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/models/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 877,
    "kind": "file",
    "name": "app/core/models/member.js",
    "content": "import Entity from './entity';\nimport Pinyin from '../../utils/pinyin';\nimport Status from '../../utils/status';\nimport {matchScore} from '../../utils/search-score';\n\n/**\n * 搜索匹配分值表\n * @type {Object[]}\n * @private\n */\nconst MATCH_SCORE_MAP = [\n    {name: 'namePinyin', equal: 100, include: 50},\n    {name: 'displayName', equal: 100, include: 50},\n    {name: 'account', equal: 100, include: 50},\n    {name: 'email', equal: 70, include: 30},\n    {name: 'phone', equal: 70, include: 30},\n    {name: 'site', equal: 50, include: 25},\n];\n\n/**\n * 成员状态管理器\n * @type {Status}\n * @private\n */\nconst STATUS = new Status({\n    unverified: 0, // 未登录\n    disconnect: 1, // 登录过，但掉线了\n    logined: 2, // 登录成功\n    online: 3, // 在线\n    busy: 4, // 忙碌\n    away: 5, // 离开\n}, 0);\n\n/**\n * 成员类\n *\n * @export\n * @class Member\n * @extends {Entity}\n */\nexport default class Member extends Entity {\n    /**\n     * 实体名称\n     * @type {string}\n     * @memberof Member\n     */\n    static NAME = 'Member';\n\n    /**\n     * 成员状态管理器\n     *\n     * @static\n     * @memberof Member\n     * @type {Status}\n     */\n    static STATUS = STATUS;\n\n    /**\n     * 数据库存储实体属性结构管理器\n     *\n     * @type {EntitySchema}\n     * @static\n     * @memberof Member\n     */\n    static SCHEMA = Entity.SCHEMA.extend({\n        account: {type: 'string', unique: true},\n        email: {type: 'string', indexed: true},\n        phone: {type: 'string', indexed: true},\n        mobile: {type: 'string', indexed: true},\n        realname: {type: 'string', indexed: true},\n        site: {type: 'string'},\n        avatar: {type: 'string', indexed: true},\n        role: {type: 'string'},\n        gender: {type: 'string'},\n        dept: {type: 'int', indexed: true},\n        admin: {type: 'string'},\n        deleted: {type: 'boolean'},\n    });\n\n    /**\n     * 创建一个成员类实例\n     * @param {Object<string, any>} data 成员属性对象\n     * @param {string} [entityType=Member.NAME] 实体类型名称\n     * @memberof Member\n     */\n    constructor(data, entityType = Member.NAME) {\n        super(data, entityType);\n        /**\n         * 成员状态\n         * @type {Status}\n         * @private\n         */\n        this._status = STATUS.create(this.$.status);\n    }\n\n    /**\n     * 获取数据库存储实体属性结构管理器\n     *\n     * @readonly\n     * @memberof Member\n     * @type {EntitySchema}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    get schema() {\n        return Member.SCHEMA;\n    }\n\n    /**\n     * 获取是否已经删除\n     * @memberof Member\n     * @type {boolean}\n     */\n    get isDeleted() {\n        return this.$get('deleted');\n    }\n\n    /**\n     * 获取状态值\n     * @memberof Member\n     * @type {number}\n     */\n    get status() {\n        return this._status.value;\n    }\n\n    /**\n     * 获取状态名称\n     * @memberof Member\n     * @type {string}\n     * @readonly\n     */\n    get statusName() {\n        return this._status.name;\n    }\n\n    /**\n     * 设置成员状态\n     * @param {string|number} newStatus 成员状态值或名称\n     * @memberof Member\n     */\n    set status(newStatus) {\n        this._status.change(newStatus);\n        this.renewUpdateId();\n    }\n\n    /**\n     * 获取是否状态为在线\n     * @memberof Member\n     * @type {boolean}\n     * @readonly\n     */\n    get isOnline() {\n        return this.status >= STATUS.logined;\n    }\n\n    /**\n     * 获取是否状态是否为离线\n     * @memberof Member\n     * @type {boolean}\n     * @readonly\n     */\n    get isOffline() {\n        return !this.isOnline;\n    }\n\n    /**\n     * 获取是否状态是否为忙碌\n     * @memberof Member\n     * @type {boolean}\n     * @readonly\n     */\n    get isBusy() {\n        return this._status.is(STATUS.busy);\n    }\n\n    /**\n     * 判断当前状态是否是给定的状态\n     * @memberof Member\n     * @param {number|string} status 要判断的状态值或状态名称\n     * @return {boolean} 如果为 `true` 则为给定的状态，否则不是\n     */\n    isStatus(status) {\n        return this._status.is(status);\n    }\n\n    /**\n     * 判断成员账号是否为给定的值\n     *\n     * @param {string} account 要判断的用户名\n     * @return {boolean} 如果为 `true` 则为给定的值，否则不是\n     * @memberof Member\n     */\n    isMember(account) {\n        return this.account === account;\n    }\n\n    /**\n     * 获取性别\n     * @memberof Member\n     * @type {string}\n     */\n    get gender() {\n        return this.$get('gender');\n    }\n\n    /**\n     * 获取部门编号\n     * @memberof Member\n     * @type {number}\n     */\n    get dept() {\n        return this.$get('dept');\n    }\n\n    /**\n     * 从系统获取部门信息\n     * @param {{members: {getDept: function(dept: number):Object}}} app 用于获取系统部门信息的辅助对象\n     * @return {Object} 部门信息对象\n     * @memberof Member\n     */\n    getDept(app) {\n        const {dept} = this;\n        if (dept && !this._dept) {\n            this._dept = app.members.getDept(dept);\n        }\n        return this._dept;\n    }\n\n    /**\n     * 获取部门名称\n     *\n     * @param {{members: {getDept: function(dept: number):Object}}} app 用于获取系统部门信息的辅助对象\n     * @return {string} 部门名称\n     * @memberof Member\n     */\n    getDeptName(app) {\n        const dept = this.getDept(app);\n        return dept && dept.name;\n    }\n\n    /**\n     * 获取部门完整名称\n     *\n     * @param {{members: {getDept: function(dept: number):Object}}} app 用于获取系统部门信息的辅助对象\n     * @returns {string} 部门完整名称\n     * @memberof Member\n     */\n    getDeptFullName(app) {\n        const dept = this.getDept(app);\n        return dept && dept.fullName;\n    }\n\n    /**\n     * 获取是否为超级管理员\n     * @memberof Member\n     * @type {boolean}\n     * @readonly\n     */\n    get isSuperAdmin() {\n        return this.$get('admin') === 'super';\n    }\n\n    /**\n     * 获取是否为管理员\n     * @memberof Member\n     * @type {boolean}\n     * @readonly\n     */\n    get isAdmin() {\n        return this.$get('admin') !== 'no';\n    }\n\n    /**\n     * 获取用户用户真实姓名\n     * @memberof Member\n     * @type {string}\n     */\n    get realname() {\n        return this.$get('realname');\n    }\n\n    /**\n     * 设置用户真实姓名\n     * @param {string} realname 用户真实姓名\n     * @memberof Member\n     */\n    set realname(realname) {\n        this.$set('realname', realname);\n    }\n\n    /**\n     * 获取用户账号\n     * @memberof Member\n     * @type {string}\n     * @readonly\n     */\n    get account() {\n        return this.$get('account');\n    }\n\n    /**\n     * 获取用户头像图片地址\n     * @memberof Member\n     * @type {string}\n     * @readonly\n     */\n    get avatar() {\n        return this.$get('avatar');\n    }\n\n    /**\n     * 获取用户电话号码\n     * @memberof Member\n     * @type {string}\n     * @readonly\n     */\n    get phone() {\n        return this.$get('phone');\n    }\n\n    /**\n     * 获取用户移动电话\n     * @memberof Member\n     * @type {string}\n     * @readonly\n     */\n    get mobile() {\n        return this.$get('mobile');\n    }\n\n    /**\n     * 获取用户电子邮件地址\n     * @memberof Member\n     * @type {string}\n     * @readonly\n     */\n    get email() {\n        return this.$get('email');\n    }\n\n    /**\n     * 从系统获取用户头像图片地址\n     *\n     * @param {string} serverUrl 服务器地址\n     * @return {string} 用户头像图片地址\n     * @memberof Member\n     */\n    getAvatar(serverUrl) {\n        let {avatar} = this;\n        if (avatar && avatar.startsWith('$')) {\n            avatar = avatar.substr(1);\n        } else if (serverUrl && avatar && !avatar.startsWith('https://') && !avatar.startsWith('http://')) {\n            if (!(serverUrl instanceof URL)) {\n                serverUrl = new URL(serverUrl);\n            }\n            const serverUrlRoot = `${serverUrl.protocol}//${serverUrl.hostname}/`;\n            avatar = serverUrlRoot + avatar;\n        }\n        return avatar;\n    }\n\n    /**\n     * 获取用户角色代号\n     * @memberof Member\n     * @type {string}\n     * @readonly\n     */\n    get role() {\n        return this.$get('role');\n    }\n\n    /**\n     * 从系统获取角色名称\n     *\n     * @param {{members: {getRoleName: function(role: string):string}}} app 用于获取系统部门信息的辅助对象\n     * @return {string} 角色名称\n     * @memberof Member\n     */\n    getRoleName(app) {\n        const {role} = this;\n        if (role && !this._role) {\n            this._role = app.members.getRoleName(role);\n        }\n        return this._role;\n    }\n\n    /**\n     * 获取限时名称\n     * @memberof Member\n     * @type {string}\n     * @readonly\n     */\n    get displayName() {\n        let name = this.$get('realname', `[${this.account}]`);\n        if (!name) {\n            name = `User-${this.id}`;\n        }\n        return name;\n    }\n\n    /**\n     * 获取用户显示名称的拼音字符串（通常用于检索和排序）\n     * @readonly\n     * @memberof Member\n     * @type {string}\n     */\n    get namePinyin() {\n        if (!this._namePinyin) {\n            this._namePinyin = Pinyin(this.displayName);\n        }\n        return this._namePinyin;\n    }\n\n    /**\n     * 获取成员与给定的关键字匹配分值\n     * @memberof Member\n     * @param {string[]} keys 关键字列表\n     * @return {number} 匹配的分值\n     */\n    getMatchScore(keys) {\n        return matchScore(MATCH_SCORE_MAP, this, keys);\n    }\n\n    /**\n     * 创建一个成员实例\n     *\n     * @static\n     * @param {Objec|Member} member 成员属性对象\n     * @return {Member} 成员实例\n     * @memberof Member\n     */\n    static create(member) {\n        if (member instanceof Member) {\n            return member;\n        }\n        return new Member(member);\n    }\n\n    /**\n     * 对成员列表进行排序，排序规则 `orders` 可以为以下值：\n     * - `function(m1: Member, m2: Member):number`，自定义排序函数；\n     * - 一个用逗号分隔的根据属性排序的属性名称表；\n     * - 根据属性排序的属性名称表数组。\n     * 默认的排序规则为：`['me', 'status', '-namePinyin', '-id']`。\n     * @param  {Member[]} members 要排序的成员列表\n     * @param  {array|string|function(m1: Member, m2: Member):number}  orders 排序规则\n     * @param  {{id: number}|number} userMe 当前登录的用户 ID 或者用户对象\n     * @return {Member[]} 排序后的成员列表\n     * @static\n     * @memberof Member\n     */\n    static sort(members, orders, userMe) {\n        if (members.length < 2) {\n            return members;\n        }\n        if (typeof orders === 'function') {\n            return members.sort(orders);\n        }\n        if (!orders || orders === 'default' || orders === true) {\n            orders = ['me', 'status', '-namePinyin', '-id'];\n        } else if (typeof orders === 'string') {\n            orders = orders.split(' ');\n        }\n        let isFinalInverse = false;\n        if (orders[0] === '-' || orders[0] === -1) {\n            isFinalInverse = true;\n            orders.shift();\n        }\n        const userMeId = (typeof userMe === 'object') ? userMe.id : userMe;\n        return members.sort((y, x) => {\n            let result = 0;\n            for (let order of orders) {\n                if (result !== 0) break;\n                if (typeof order === 'function') {\n                    result = order(y, x);\n                } else {\n                    const isInverse = order[0] === '-';\n                    if (isInverse) order = order.substr(1);\n                    let xStatus = x.status;\n                    let yStatus = y.status;\n                    let xValue;\n                    let yValue;\n                    switch (order) {\n                    case 'me':\n                        if (userMe) {\n                            if (userMeId === x.id) result = 1;\n                            else if (userMeId === y.id) result = -1;\n                        }\n                        break;\n                    case 'status':\n                        if (xStatus === STATUS.online) xStatus = 100;\n                        if (yStatus === STATUS.online) yStatus = 100;\n                        // eslint-disable-next-line no-nested-ternary\n                        result = xStatus > yStatus ? 1 : (xStatus === yStatus ? 0 : -1);\n                        break;\n                    default:\n                        xValue = x[order];\n                        yValue = y[order];\n                        if (xValue === undefined || xValue === null) xValue = 0;\n                        if (yValue === undefined || yValue === null) yValue = 0;\n                        // eslint-disable-next-line no-nested-ternary\n                        result = xValue > yValue ? 1 : (xValue === yValue ? 0 : -1);\n                    }\n                    result *= isInverse ? (-1) : 1;\n                }\n            }\n            return result * (isFinalInverse ? (-1) : 1);\n        });\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/models/member.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 878,
    "kind": "variable",
    "name": "MATCH_SCORE_MAP",
    "memberof": "app/core/models/member.js",
    "static": true,
    "longname": "app/core/models/member.js~MATCH_SCORE_MAP",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/member.js",
    "importStyle": null,
    "description": "搜索匹配分值表",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 879,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "app/core/models/member.js",
    "static": true,
    "longname": "app/core/models/member.js~STATUS",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/models/member.js",
    "importStyle": null,
    "description": "成员状态管理器",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 880,
    "kind": "class",
    "name": "Member",
    "memberof": "app/core/models/member.js",
    "static": true,
    "longname": "app/core/models/member.js~Member",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/models/member.js",
    "importStyle": "Member",
    "description": "成员类",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Member"
      }
    ],
    "interface": false,
    "extends": [
      "Entity"
    ]
  },
  {
    "__docId__": 881,
    "kind": "member",
    "name": "NAME",
    "memberof": "app/core/models/member.js~Member",
    "static": true,
    "longname": "app/core/models/member.js~Member.NAME",
    "access": "public",
    "description": "实体名称",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 882,
    "kind": "member",
    "name": "STATUS",
    "memberof": "app/core/models/member.js~Member",
    "static": true,
    "longname": "app/core/models/member.js~Member.STATUS",
    "access": "public",
    "description": "成员状态管理器",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 883,
    "kind": "member",
    "name": "SCHEMA",
    "memberof": "app/core/models/member.js~Member",
    "static": true,
    "longname": "app/core/models/member.js~Member.SCHEMA",
    "access": "public",
    "description": "数据库存储实体属性结构管理器",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 884,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#constructor",
    "access": "public",
    "description": "创建一个成员类实例",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "成员属性对象"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Member.NAME",
        "defaultRaw": "Member.NAME",
        "name": "entityType",
        "description": "实体类型名称"
      }
    ]
  },
  {
    "__docId__": 885,
    "kind": "member",
    "name": "_status",
    "memberof": "app/core/models/member.js~Member",
    "static": false,
    "longname": "app/core/models/member.js~Member#_status",
    "access": "private",
    "description": "成员状态",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 886,
    "kind": "get",
    "name": "schema",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#schema",
    "access": "public",
    "description": "获取数据库存储实体属性结构管理器",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 887,
    "kind": "get",
    "name": "isDeleted",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#isDeleted",
    "access": "public",
    "description": "获取是否已经删除",
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 888,
    "kind": "get",
    "name": "status",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#status",
    "access": "public",
    "description": "获取状态值",
    "lineNumber": 122,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 889,
    "kind": "get",
    "name": "statusName",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#statusName",
    "access": "public",
    "description": "获取状态名称",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 890,
    "kind": "set",
    "name": "status",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#status",
    "access": "public",
    "description": "设置成员状态",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newStatus",
        "description": "成员状态值或名称"
      }
    ]
  },
  {
    "__docId__": 891,
    "kind": "get",
    "name": "isOnline",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#isOnline",
    "access": "public",
    "description": "获取是否状态为在线",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 892,
    "kind": "get",
    "name": "isOffline",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#isOffline",
    "access": "public",
    "description": "获取是否状态是否为离线",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 893,
    "kind": "get",
    "name": "isBusy",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#isBusy",
    "access": "public",
    "description": "获取是否状态是否为忙碌",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 894,
    "kind": "method",
    "name": "isStatus",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#isStatus",
    "access": "public",
    "description": "判断当前状态是否是给定的状态",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "要判断的状态值或状态名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为给定的状态，否则不是"
    }
  },
  {
    "__docId__": 895,
    "kind": "method",
    "name": "isMember",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#isMember",
    "access": "public",
    "description": "判断成员账号是否为给定的值",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "要判断的用户名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为给定的值，否则不是"
    }
  },
  {
    "__docId__": 896,
    "kind": "get",
    "name": "gender",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#gender",
    "access": "public",
    "description": "获取性别",
    "lineNumber": 202,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 897,
    "kind": "get",
    "name": "dept",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#dept",
    "access": "public",
    "description": "获取部门编号",
    "lineNumber": 211,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 898,
    "kind": "method",
    "name": "getDept",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#getDept",
    "access": "public",
    "description": "从系统获取部门信息",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "{members: {getDept: function(dept: number):Object}}"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "用于获取系统部门信息的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "部门信息对象"
    }
  },
  {
    "__docId__": 899,
    "kind": "member",
    "name": "_dept",
    "memberof": "app/core/models/member.js~Member",
    "static": false,
    "longname": "app/core/models/member.js~Member#_dept",
    "access": "private",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 900,
    "kind": "method",
    "name": "getDeptName",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#getDeptName",
    "access": "public",
    "description": "获取部门名称",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "{members: {getDept: function(dept: number):Object}}"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "用于获取系统部门信息的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "部门名称"
    }
  },
  {
    "__docId__": 901,
    "kind": "method",
    "name": "getDeptFullName",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#getDeptFullName",
    "access": "public",
    "description": "获取部门完整名称",
    "lineNumber": 248,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} 部门完整名称"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{members: {getDept: function(dept: number):Object}}"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "用于获取系统部门信息的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "部门完整名称"
    }
  },
  {
    "__docId__": 902,
    "kind": "get",
    "name": "isSuperAdmin",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#isSuperAdmin",
    "access": "public",
    "description": "获取是否为超级管理员",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 903,
    "kind": "get",
    "name": "isAdmin",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#isAdmin",
    "access": "public",
    "description": "获取是否为管理员",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 904,
    "kind": "get",
    "name": "realname",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#realname",
    "access": "public",
    "description": "获取用户用户真实姓名",
    "lineNumber": 278,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 905,
    "kind": "set",
    "name": "realname",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#realname",
    "access": "public",
    "description": "设置用户真实姓名",
    "lineNumber": 287,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "realname",
        "description": "用户真实姓名"
      }
    ]
  },
  {
    "__docId__": 906,
    "kind": "get",
    "name": "account",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#account",
    "access": "public",
    "description": "获取用户账号",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 907,
    "kind": "get",
    "name": "avatar",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#avatar",
    "access": "public",
    "description": "获取用户头像图片地址",
    "lineNumber": 307,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 908,
    "kind": "get",
    "name": "phone",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#phone",
    "access": "public",
    "description": "获取用户电话号码",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 909,
    "kind": "get",
    "name": "mobile",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#mobile",
    "access": "public",
    "description": "获取用户移动电话",
    "lineNumber": 327,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 910,
    "kind": "get",
    "name": "email",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#email",
    "access": "public",
    "description": "获取用户电子邮件地址",
    "lineNumber": 337,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 911,
    "kind": "method",
    "name": "getAvatar",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#getAvatar",
    "access": "public",
    "description": "从系统获取用户头像图片地址",
    "lineNumber": 348,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serverUrl",
        "description": "服务器地址"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "用户头像图片地址"
    }
  },
  {
    "__docId__": 912,
    "kind": "get",
    "name": "role",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#role",
    "access": "public",
    "description": "获取用户角色代号",
    "lineNumber": 368,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 913,
    "kind": "method",
    "name": "getRoleName",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#getRoleName",
    "access": "public",
    "description": "从系统获取角色名称",
    "lineNumber": 379,
    "params": [
      {
        "nullable": null,
        "types": [
          "{members: {getRoleName: function(role: string):string}}"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "用于获取系统部门信息的辅助对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "角色名称"
    }
  },
  {
    "__docId__": 914,
    "kind": "member",
    "name": "_role",
    "memberof": "app/core/models/member.js~Member",
    "static": false,
    "longname": "app/core/models/member.js~Member#_role",
    "access": "private",
    "description": null,
    "lineNumber": 382,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 915,
    "kind": "get",
    "name": "displayName",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#displayName",
    "access": "public",
    "description": "获取限时名称",
    "lineNumber": 393,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 916,
    "kind": "get",
    "name": "namePinyin",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#namePinyin",
    "access": "public",
    "description": "获取用户显示名称的拼音字符串（通常用于检索和排序）",
    "lineNumber": 407,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 917,
    "kind": "member",
    "name": "_namePinyin",
    "memberof": "app/core/models/member.js~Member",
    "static": false,
    "longname": "app/core/models/member.js~Member#_namePinyin",
    "access": "private",
    "description": null,
    "lineNumber": 409,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 918,
    "kind": "method",
    "name": "getMatchScore",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/member.js~Member#getMatchScore",
    "access": "public",
    "description": "获取成员与给定的关键字匹配分值",
    "lineNumber": 420,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "关键字列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "匹配的分值"
    }
  },
  {
    "__docId__": 919,
    "kind": "method",
    "name": "create",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/models/member.js~Member.create",
    "access": "public",
    "description": "创建一个成员实例",
    "lineNumber": 432,
    "params": [
      {
        "nullable": null,
        "types": [
          "Objec",
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "成员属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Member"
      ],
      "spread": false,
      "description": "成员实例"
    }
  },
  {
    "__docId__": 920,
    "kind": "method",
    "name": "sort",
    "memberof": "app/core/models/member.js~Member",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/models/member.js~Member.sort",
    "access": "public",
    "description": "对成员列表进行排序，排序规则 `orders` 可以为以下值：\n- `function(m1: Member, m2: Member):number`，自定义排序函数；\n- 一个用逗号分隔的根据属性排序的属性名称表；\n- 根据属性排序的属性名称表数组。\n默认的排序规则为：`['me', 'status', '-namePinyin', '-id']`。",
    "lineNumber": 452,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member[]"
        ],
        "spread": false,
        "optional": false,
        "name": "members",
        "description": "要排序的成员列表"
      },
      {
        "nullable": null,
        "types": [
          "array",
          "string",
          "function(m1: Member, m2: Member):number"
        ],
        "spread": false,
        "optional": false,
        "name": "orders",
        "description": "排序规则"
      },
      {
        "nullable": null,
        "types": [
          "{id: number}|number"
        ],
        "spread": false,
        "optional": false,
        "name": "userMe",
        "description": "当前登录的用户 ID 或者用户对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Member[]"
      ],
      "spread": false,
      "description": "排序后的成员列表"
    }
  },
  {
    "__docId__": 921,
    "kind": "file",
    "name": "app/core/models/notification-message.js",
    "content": "import Config from '../../config';\nimport ChatMessage from './chat-message';\nimport Member from './member';\nimport {isNotEmptyString} from '../../utils/string-helper';\n\n/**\n * 通知消息类\n *\n * @export\n * @class NotificationMessage\n * @extends {ChatMessage}\n */\nexport default class NotificationMessage extends ChatMessage {\n    /**\n     * 获取消息发送者\n     *\n     * @type {Member}\n     * @readonly\n     * @memberof NotificationMessage\n     */\n    get sender() {\n        if (!this._sender) {\n            const {notification} = this;\n            this._sender = new Member(notification.sender.id === 'ranzhi' ? {\n                id: 'ranzhi',\n                realname: '然之协同',\n                system: true,\n                avatar: `$${Config.media['image.path']}ranzhi-icon.png`\n            } : notification.sender);\n        }\n        return this._sender;\n    }\n\n    /**\n     * 获取消息发送者 ID\n     * @memberof NotificationMessage\n     * @type {string}\n     */\n    get senderId() {\n        return this.notification.sender.id || 'robot1';\n    }\n\n    /**\n     * 获取是否为通知类消息，此类实例永远返回 `true`\n     * @memberof NotificationMessage\n     * @type {boolean}\n     */\n    get isNotification() {\n        return true;\n    }\n\n    /**\n     * 获取通知操作\n     * @memberof NotificationMessage\n     * @type {Object[]}\n     */\n    get actions() {\n        const {notification} = this;\n        let {actions} = notification;\n        if (actions && !Array.isArray(actions)) {\n            actions = [actions];\n        }\n        return actions;\n    }\n\n    /**\n     * 获取通知数据对象\n     * @memberof NotificationMessage\n     * @type {Object<string, any>}\n     */\n    get notification() {\n        return this.data;\n    }\n\n    /**\n     * 获取通知发送者，相当于调用 `sender` 属性\n     * @memberof NotificationMessage\n     * @return {Member} 发送人成员实例\n     */\n    getSender() {\n        return this.sender;\n    }\n\n    /**\n     * 获取是否需要检查重新发送，因为通知消息只能是服务器推送的，所以此属性永远返回 `true`\n     * @memberof NotificationMessage\n     * @type {boolean}\n     */\n    get needCheckResend() {\n        return false;\n    }\n\n    /**\n     * 获取是否发送失败，因为通知消息只能是服务器推送的，所以此属性永远返回 `true`\n     * @memberof NotificationMessage\n     * @type {boolean}\n     */\n    get isSendFailed() {\n        return false;\n    }\n\n    /**\n     * 获取是否过期，因为通知消息只能是服务器推送的，所以此属性永远返回 `true`\n     * @memberof NotificationMessage\n     * @type {boolean}\n     */\n    get isOutdated() {\n        return false;\n    }\n\n    /**\n     * 创建一个通知消息类实例\n     *\n     * @static\n     * @param {Object<string, any>|NotificationMessage} data 用于创建实例的属性对象\n     * @returns {NotificationMessage} 一个通知消息类实例\n     * @memberof NotificationMessage\n     */\n    static create(data) {\n        if (data instanceof NotificationMessage) {\n            return data;\n        }\n        if (data.data) {\n            // eslint-disable-next-line prefer-destructuring\n            data = data.data;\n        }\n\n        let content = `#### ${data.title}`;\n        if (isNotEmptyString(data.subtitle)) {\n            content += `\\n##### ${data.subtitle}`;\n        }\n        if (isNotEmptyString(data.content)) {\n            content += `\\n${data.content}`;\n        }\n\n        return new NotificationMessage({\n            cgid: 'littlexx',\n            content,\n            contentType: data.contentType,\n            data,\n            date: data.date,\n            gid: data.gid,\n            user: data.sender.id,\n            type: 'notification',\n            id: data.id,\n        });\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/models/notification-message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 922,
    "kind": "class",
    "name": "NotificationMessage",
    "memberof": "app/core/models/notification-message.js",
    "static": true,
    "longname": "app/core/models/notification-message.js~NotificationMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/models/notification-message.js",
    "importStyle": "NotificationMessage",
    "description": "通知消息类",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "NotificationMessage"
      }
    ],
    "interface": false,
    "extends": [
      "ChatMessage"
    ]
  },
  {
    "__docId__": 923,
    "kind": "get",
    "name": "sender",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/notification-message.js~NotificationMessage#sender",
    "access": "public",
    "description": "获取消息发送者",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Member"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 924,
    "kind": "member",
    "name": "_sender",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "static": false,
    "longname": "app/core/models/notification-message.js~NotificationMessage#_sender",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 925,
    "kind": "get",
    "name": "senderId",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/notification-message.js~NotificationMessage#senderId",
    "access": "public",
    "description": "获取消息发送者 ID",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 926,
    "kind": "get",
    "name": "isNotification",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/notification-message.js~NotificationMessage#isNotification",
    "access": "public",
    "description": "获取是否为通知类消息，此类实例永远返回 `true`",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 927,
    "kind": "get",
    "name": "actions",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/notification-message.js~NotificationMessage#actions",
    "access": "public",
    "description": "获取通知操作",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 928,
    "kind": "get",
    "name": "notification",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/notification-message.js~NotificationMessage#notification",
    "access": "public",
    "description": "获取通知数据对象",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 929,
    "kind": "method",
    "name": "getSender",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/notification-message.js~NotificationMessage#getSender",
    "access": "public",
    "description": "获取通知发送者，相当于调用 `sender` 属性",
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "Member"
      ],
      "spread": false,
      "description": "发送人成员实例"
    },
    "params": []
  },
  {
    "__docId__": 930,
    "kind": "get",
    "name": "needCheckResend",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/notification-message.js~NotificationMessage#needCheckResend",
    "access": "public",
    "description": "获取是否需要检查重新发送，因为通知消息只能是服务器推送的，所以此属性永远返回 `true`",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 931,
    "kind": "get",
    "name": "isSendFailed",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/notification-message.js~NotificationMessage#isSendFailed",
    "access": "public",
    "description": "获取是否发送失败，因为通知消息只能是服务器推送的，所以此属性永远返回 `true`",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 932,
    "kind": "get",
    "name": "isOutdated",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/models/notification-message.js~NotificationMessage#isOutdated",
    "access": "public",
    "description": "获取是否过期，因为通知消息只能是服务器推送的，所以此属性永远返回 `true`",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 933,
    "kind": "method",
    "name": "create",
    "memberof": "app/core/models/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/models/notification-message.js~NotificationMessage.create",
    "access": "public",
    "description": "创建一个通知消息类实例",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{NotificationMessage} 一个通知消息类实例"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>",
          "NotificationMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "用于创建实例的属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NotificationMessage"
      ],
      "spread": false,
      "description": "一个通知消息类实例"
    }
  },
  {
    "__docId__": 934,
    "kind": "file",
    "name": "app/core/network/api.js",
    "content": "import Platform from 'Platform'; // eslint-disable-line\nimport Config from '../../config';\n\n/**\n * 登录前向 XXD 服务器请求获取服务器信息\n * @param {User} user 当前登录的用户\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const requestServerInfo = user => {\n    const postData = JSON.stringify({\n        module: 'chat',\n        method: 'login',\n        params: [\n            user.serverName,\n            user.account,\n            user.passwordForServer,\n            ''\n        ],\n        v: Config.pkg.version\n    });\n    return Platform.net.postJSON(user.webServerInfoUrl, {\n        headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'},\n        body: `data=${postData}`\n    }).then(data => {\n        if (data) {\n            user.socketPort = data.chatPort;\n            user.token = data.token;\n            user.serverVersion = data.version;\n            user.socketUrl = data.socketUrl;\n            user.uploadFileSize = data.uploadFileSize;\n            user.ranzhiUrl = data.ranzhiUrl;\n            return Promise.resolve(user);\n        }\n        const error = new Error('Empty serverInfo data');\n        error.code = 'WRONG_DATA';\n        return Promise.reject(error);\n    });\n};\n\n/**\n * 检查上传的文件大小是否符合要求\n * @param {User} user 当前用户\n * @param {number} size 文件大小\n * @return {boolean} 如果为 `true` 则符合要求，否则不符合要求\n */\nexport const checkUploadFileSize = (user, size) => {\n    if (typeof size === 'object') {\n        // eslint-disable-next-line prefer-destructuring\n        size = size.size;\n    }\n    const {uploadFileSize} = user;\n    return uploadFileSize && size <= uploadFileSize;\n};\n\n/**\n * 获取然之服务器信息\n * @param {User} user 当前用户\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const getRanzhiServerInfo = (user) => {\n    const {ranzhiUrl} = user;\n    if (ranzhiUrl) {\n        return Platform.net.getJSON(`${ranzhiUrl}/index.php?mode=getconfig`).then(json => {\n            if (json && json.version) {\n                json.url = ranzhiUrl;\n                json.isPathInfo = json.requestType.toUpperCase() === 'PATH_INFO';\n                return Promise.resolve(json);\n            }\n            return Promise.reject(new Error('WRONG_DATA'));\n        });\n    }\n    return Promise.reject(new Error('RANZHI_SERVER_NOTSET'));\n};\n\nexport default {\n    downloadFile: Platform.net.downloadFile,\n    uploadFile: Platform.net.uploadFile,\n    checkFileCache: Platform.net.checkFileCache || (() => false)\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/network/api.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 935,
    "kind": "function",
    "name": "requestServerInfo",
    "memberof": "app/core/network/api.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/network/api.js~requestServerInfo",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/network/api.js",
    "importStyle": "{requestServerInfo}",
    "description": "登录前向 XXD 服务器请求获取服务器信息",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "当前登录的用户"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 936,
    "kind": "function",
    "name": "checkUploadFileSize",
    "memberof": "app/core/network/api.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/network/api.js~checkUploadFileSize",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/network/api.js",
    "importStyle": "{checkUploadFileSize}",
    "description": "检查上传的文件大小是否符合要求",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "当前用户"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "文件大小"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则符合要求，否则不符合要求"
    }
  },
  {
    "__docId__": 937,
    "kind": "function",
    "name": "getRanzhiServerInfo",
    "memberof": "app/core/network/api.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/network/api.js~getRanzhiServerInfo",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/network/api.js",
    "importStyle": "{getRanzhiServerInfo}",
    "description": "获取然之服务器信息",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "当前用户"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 938,
    "kind": "file",
    "name": "app/core/network/socket-message.js",
    "content": "import Config from '../../config';\n\n/**\n * Socket 服务消息类\n *\n * @export\n * @class SocketMessage\n */\nexport default class SocketMessage {\n    /**\n     * 创建一个 Socket 服务消息类\n     * @param {Object<string, any>} data 属性数据对象\n     * @memberof SocketMessage\n     */\n    constructor(data) {\n        /**\n         * 操作模块名称\n         * @type {string}\n         */\n        this.module = null;\n\n        /**\n         * 操作方法名称\n         * @type {string}\n         */\n        this.method = null;\n\n        /**\n         * 操作方法的参数\n         * @type {Array}\n         */\n        this.params = null;\n\n        /**\n         * 操作数据\n         * @type {any}\n         */\n        this.data = null;\n\n        /**\n         * 操作结果\n         * @type {string}\n         */\n        this.result = null;\n\n        /**\n         * 版本号\n         * @type {string}\n         */\n        this.v = null;\n\n        Object.assign(this, {\n            module: 'chat',\n            v: Config.pkg.version\n        }, data);\n    }\n\n    /**\n     * 获取路径名称\n     *\n     * @type {string}\n     * @readonly\n     * @memberof SocketMessage\n     */\n    get pathname() {\n        const pathnames = [this.module];\n        if (this.method !== undefined) {\n            pathnames.push(this.method);\n        }\n        return pathnames.join('/').toLowerCase();\n    }\n\n    /**\n     * 获取 JSON 字符串形式\n     *\n     * @memberof SocketMessage\n     * @type {string}\n     * @readonly\n     */\n    get json() {\n        return JSON.stringify(this);\n    }\n\n    /**\n     * 获取此消息待办的操作是否成功\n     *\n     * @memberof SocketMessage\n     * @type {string}\n     * @readonly\n     */\n    get isSuccess() {\n        return this.result === 'success' || (this.result === undefined);\n    }\n\n    /**\n     * 从 JSON 字符串创建 SocketMessage 类实例，如果 JSON 内容是一个数组，则返回一个 SocketMessage 实例数组\n     * @param  {string} json JSON 字符串\n     * @static\n     * @return {ScoketMessage|ScoketMessage[]} SocketMessage 类实例或 SocketMessage 实例数组\n     */\n    static fromJSON(json) {\n        try {\n            if (Array.isArray(json)) {\n                if (DEBUG) {\n                    console.groupCollapsed('%cBuild socket message from buffer array.', 'display: inline-block; font-size: 10px; color: #673AB7; background: #D1C4E9; border: 1px solid #D1C4E9; padding: 1px 5px; border-radius: 2px;');\n                    console.log('buffer', json);\n                    console.groupEnd();\n                }\n                json = json.map(x => x.toString()).join('');\n            }\n            if (typeof json !== 'string') json = json.toString();\n            json = json.trim();\n            while (json.length && (json[json.length - 1] === '\\n' || json.charCodeAt(json.length - 1) === 8)) {\n                json = json.substring(0, json.length - 1);\n            }\n            const firstEOF = json.indexOf('\\n');\n            if (firstEOF > 0 && firstEOF < json.length) {\n                const objArray = [];\n                json.split('\\n').forEach(str => {\n                    str = str.trim();\n                    if (str.length && str.startsWith('{')) {\n                        objArray.push(str);\n                    }\n                });\n                json = (objArray.length > 1) ? (`[${objArray.join(',')}]`) : (objArray[0] || '');\n                if (DEBUG) {\n                    console.groupCollapsed('%cSocket message contains \"\\\\n\", make it as json array.', 'display: inline-block; font-size: 10px; color: #673AB7; background: #D1C4E9; border: 1px solid #D1C4E9; padding: 1px 5px; border-radius: 2px;');\n                    console.log('json', json);\n                    console.groupEnd();\n                }\n            }\n            const data = JSON.parse(json);\n            if (Array.isArray(data)) {\n                const msgs = [];\n                data.forEach(x => {\n                    if (Array.isArray(x)) {\n                        msgs.push(...x.map(y => new SocketMessage(y)));\n                    } else {\n                        msgs.push(new SocketMessage(x));\n                    }\n                });\n                return msgs;\n            }\n            return new SocketMessage(data);\n        } catch (error) {\n            if (DEBUG) {\n                console.groupCollapsed('%cError: SocketMessage from json', 'color:red', error);\n                console.log('raw', json);\n                console.log('raw string', json && json.toString());\n                console.groupEnd();\n            }\n        }\n    }\n\n    /**\n     * 创建一个 SocketMessage 实例\n     *\n     * @static\n     * @param {Object|SocketMessage} msg 一个 SocketMessage 实例或者用于创建实例的属性对象\n     * @return {SocketMessage} SocketMessage 实例\n     * @memberof SocketMessage\n     */\n    static create(msg) {\n        if (typeof msg === 'string') {\n            msg = {method: msg};\n        } else if (msg instanceof SocketMessage) {\n            return msg;\n        }\n        return new SocketMessage(msg);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/network/socket-message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 939,
    "kind": "class",
    "name": "SocketMessage",
    "memberof": "app/core/network/socket-message.js",
    "static": true,
    "longname": "app/core/network/socket-message.js~SocketMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/network/socket-message.js",
    "importStyle": "SocketMessage",
    "description": "Socket 服务消息类",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "SocketMessage"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 940,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket-message.js~SocketMessage#constructor",
    "access": "public",
    "description": "创建一个 Socket 服务消息类",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "属性数据对象"
      }
    ]
  },
  {
    "__docId__": 941,
    "kind": "member",
    "name": "module",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "static": false,
    "longname": "app/core/network/socket-message.js~SocketMessage#module",
    "access": "public",
    "description": "操作模块名称",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 942,
    "kind": "member",
    "name": "method",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "static": false,
    "longname": "app/core/network/socket-message.js~SocketMessage#method",
    "access": "public",
    "description": "操作方法名称",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 943,
    "kind": "member",
    "name": "params",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "static": false,
    "longname": "app/core/network/socket-message.js~SocketMessage#params",
    "access": "public",
    "description": "操作方法的参数",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 944,
    "kind": "member",
    "name": "data",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "static": false,
    "longname": "app/core/network/socket-message.js~SocketMessage#data",
    "access": "public",
    "description": "操作数据",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 945,
    "kind": "member",
    "name": "result",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "static": false,
    "longname": "app/core/network/socket-message.js~SocketMessage#result",
    "access": "public",
    "description": "操作结果",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 946,
    "kind": "member",
    "name": "v",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "static": false,
    "longname": "app/core/network/socket-message.js~SocketMessage#v",
    "access": "public",
    "description": "版本号",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 947,
    "kind": "get",
    "name": "pathname",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket-message.js~SocketMessage#pathname",
    "access": "public",
    "description": "获取路径名称",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 948,
    "kind": "get",
    "name": "json",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket-message.js~SocketMessage#json",
    "access": "public",
    "description": "获取 JSON 字符串形式",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 949,
    "kind": "get",
    "name": "isSuccess",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket-message.js~SocketMessage#isSuccess",
    "access": "public",
    "description": "获取此消息待办的操作是否成功",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 950,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/network/socket-message.js~SocketMessage.fromJSON",
    "access": "public",
    "description": "从 JSON 字符串创建 SocketMessage 类实例，如果 JSON 内容是一个数组，则返回一个 SocketMessage 实例数组",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "JSON 字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ScoketMessage",
        "ScoketMessage[]"
      ],
      "spread": false,
      "description": "SocketMessage 类实例或 SocketMessage 实例数组"
    }
  },
  {
    "__docId__": 951,
    "kind": "method",
    "name": "create",
    "memberof": "app/core/network/socket-message.js~SocketMessage",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/network/socket-message.js~SocketMessage.create",
    "access": "public",
    "description": "创建一个 SocketMessage 实例",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "一个 SocketMessage 实例或者用于创建实例的属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SocketMessage"
      ],
      "spread": false,
      "description": "SocketMessage 实例"
    }
  },
  {
    "__docId__": 952,
    "kind": "file",
    "name": "app/core/network/socket.js",
    "content": "// eslint-disable-next-line import/no-unresolved\nimport {Socket} from 'Platform';\nimport md5 from 'md5';\nimport SocketMessage from './socket-message';\nimport events from '../events';\nimport {langString} from '../../lang';\n\n/**\n * Ping 消息发送间隔，单位毫秒\n * @type {number}\n * @private\n */\nconst PING_INTERVAL = DEBUG ? (1000 * 60) : (1000 * 60 * 2);\n\n/**\n * 等待消息回应判定为超时的事件，单位毫秒\n * @type {number}\n * @private\n */\nconst LISTEN_TIMEOUT = 1000 * 15;\n\n/**\n * 事件名称表\n * @type {Object}\n * @private\n */\nconst EVENT = {\n    message: 'app_socket.message',\n};\n\n/**\n * 监听消息回应\n * @param {string} moduleName 消息操作模块名称\n * @param {string} methodName 消息操作方法名称\n * @param {number} [timeout=LISTEN_TIMEOUT]\n * @return {Promise}\n * @private\n */\nconst listenMessage = (moduleName, methodName, timeout = LISTEN_TIMEOUT) => {\n    return new Promise((resolve, reject) => {\n        let listenHandler = null;\n        const listenTimer = setTimeout(() => {\n            if (listenHandler) {\n                events.off(listenHandler);\n            }\n            reject();\n        }, timeout);\n        listenHandler = events.on(EVENT.message, (msg, result) => {\n            if (msg.module === moduleName && msg.method === methodName) {\n                if (listenTimer) {\n                    clearTimeout(listenTimer);\n                }\n                if (listenHandler) {\n                    events.off(listenHandler);\n                }\n                resolve(result);\n            }\n        });\n    });\n};\n\n/**\n * Socket 服务管理类\n *\n * @export\n * @class AppSocket\n * @extends {Socket}\n */\nexport default class AppSocket extends Socket {\n    /**\n     * 创建一个 Socket 服务器管理类实例\n     * @memberof AppSocket\n     */\n    constructor() {\n        super();\n\n        /**\n         * 当前用户\n         * @type {User}\n         */\n        this.user = null;\n\n        /**\n         * Ping 消息发送间隔，单位毫秒\n         * @type {number}\n         */\n        this.pingInterval = PING_INTERVAL;\n\n        /**\n         * Socket 消息接收处理函数\n         * @type {Object<string, Function>}\n         */\n        this.handlers = {};\n\n        /**\n         * ping 循环任务 ID\n         * @type {number}\n         * @private\n         */\n        this.pingTask = null;\n    }\n\n    /**\n     * 发送 SocketMessage\n     *\n     * @param {Object<string, any>|SocketMessage} msg 要发送的 SocketMessage 实例或者用于创建 SocketMessage 实例的属性对象\n     * @returns {Promise} 使用 Promise 异步返回处理结果\n     * @memberof AppSocket\n     */\n    send(msg) {\n        return new Promise((resolve) => {\n            msg = SocketMessage.create(msg);\n            if (!msg.userID) {\n                msg.userID = this.user.id;\n            }\n            super.send(msg.json, () => {\n                if (DEBUG) {\n                    console.collapse('Socket Send ⬆︎', 'indigoBg', msg.pathname, 'indigoPale');\n                    console.log('msg', msg);\n                    console.groupEnd();\n                }\n                resolve(msg);\n            });\n        });\n    }\n\n    /**\n     * 设置 Socket 消息接收处理函数\n     * @param {string} moduleName 要处理的操作模块名称\n     * @param {string} methodName 要处理的操作方法名称\n     * @param {Function(msg: SocketMessage, socket: Socket)} func 处理函数\n     * @return {void}\n     * @memberof Socket\n     */\n    setHandler(pathname, func) {\n        if (typeof pathname === 'object') {\n            Object.keys(pathname).forEach(name => {\n                this.handlers[name.toLowerCase()] = pathname[name];\n            });\n        } else {\n            this.handlers[pathname.toLowerCase()] = func;\n        }\n    }\n\n    /**\n     * 获取消息接收处理函数\n     * @param {...string} pathnames 操作路径\n     * @return {Function(msg: SocketMessage, socket: Socket)}\n     * @memberof Socket\n     */\n    getHandler(...pathnames) {\n        const pathname = pathnames.join('/').toLowerCase();\n        return this.handlers[pathname];\n    }\n\n    /**\n     * 使用消息接收处理函数处理接收到的消息\n     *\n     * @param {SocketMessage} msg 要处理的消息实例\n     * @memberof AppSocket\n     * @return {void}\n     */\n    handleMessage(msg) {\n        if (DEBUG) {\n            console.collapse('SOCKET Data ⬇︎', 'purpleBg', msg.pathname, 'purplePale', msg.isSuccess ? 'OK' : 'FAILED', msg.isSuccess ? 'greenPale' : 'dangerPale');\n            console.log('msg', msg);\n            console.log('socket', this);\n            console.groupEnd();\n        }\n\n        let handler = this.getHandler(msg.module, msg.method);\n        let result;\n        if (handler) {\n            while (handler && typeof handler === 'string') {\n                handler = this.getHandler(handler);\n            }\n            if (handler) {\n                result = handler(msg, this);\n            }\n        } else {\n            result = msg.data;\n        }\n        if (result === undefined) {\n            result = msg.isSuccess;\n        }\n        events.emit(EVENT.message, msg, result);\n    }\n\n    /**\n     * 通过 Socket 发送消息并监听服务器对此消息的回应\n     * @param {Object<string, any>|SocketMessage} msg 要发送的 SocketMessage 实例或者用于创建 SocketMessage 实例的属性对象\n     * @param {Function(result: any): any} check 用于检查服务器返回结果的函数\n     * @return {Promise}\n     * @memberof AppSocket\n     */\n    sendAndListen(msg, check) {\n        return new Promise((resolve, reject) => {\n            msg = SocketMessage.create(msg);\n            listenMessage(msg.module, msg.method).then((result) => {\n                if (check) {\n                    result = check(result);\n                }\n                if (result) {\n                    resolve(result);\n                } else {\n                    reject();\n                }\n                return result;\n            }).catch(reject);\n            this.send(msg);\n        });\n    }\n\n    /**\n     * 当 Socket 初始化时执行的操作\n     * @private\n     * @return {void}\n     * @memberof AppSocket\n     */\n    onInit() {\n        this.lastHandTime = 0;\n        this.lastHandTime = 0;\n    }\n\n    /**\n     * 当 Socket 关闭时执行的操作\n     * @param {number} code 关闭代码\n     * @param {string} reason 关闭原因\n     * @param {boolean} unexpected 是否是意外关闭\n     * @private\n     * @return {void}\n     * @memberof AppSocket\n     */\n    onClose(code, reason, unexpected) {\n        this.stopPing();\n        if (this.user && this.user.isOnline) {\n            this.user[unexpected ? 'markDisconnect' : 'markUnverified']();\n        }\n    }\n\n    /**\n     * 当 Socket 接收到数据时执行的操作\n     * @param {string} data Socket 接收到的数据（通常是JSON 字符串形式）\n     * @param {object} flags 数据标识\n     * @private\n     * @return {void}\n     * @memberof AppSocket\n     */\n    onData(data, flags) {\n        const msg = SocketMessage.fromJSON(data);\n        if (!msg) {\n            if (DEBUG) {\n                console.error('Cannot handle data:', data);\n            }\n            return;\n        }\n        this.lastHandTime = new Date().getTime();\n        if (Array.isArray(msg)) {\n            msg.forEach(x => {\n                this.handleMessage(x);\n            });\n        } else {\n            this.handleMessage(msg);\n        }\n    }\n\n    /**\n     * 发起登录请求\n     *\n     * @param {User} user 当前要进行登录的用户\n     * @param {Object<string,any>} options 登录选项\n     * @returns {Promise} 使用 Promise 异步返回处理结果\n     * @memberof AppSocket\n     */\n    login(user, options) {\n        this.isLogging = true;\n        return new Promise((resolve, reject) => {\n            if (user) {\n                this.user = user;\n            } else {\n                // eslint-disable-next-line prefer-destructuring\n                user = this.user;\n            }\n            if (!user) {\n                return Promise.reject(new Error('User is not defined.'));\n            }\n            const onConnect = () => {\n                listenMessage('chat', 'login').then((result, msg) => {\n                    if (result) {\n                        this.startPing();\n                        this.syncUserSettings();\n                        resolve(user);\n                    } else {\n                        reject(new Error('Login result is not success.'));\n                    }\n                    this.isLogging = false;\n                    return result;\n                }).catch(reject);\n                this.send({\n                    module: 'chat',\n                    method: 'login',\n                    params: [\n                        user.serverName,\n                        user.account,\n                        user.passwordForServer,\n                        'online'\n                    ]\n                });\n            };\n            this.init(user.socketUrl, Object.assign({\n                userToken: user.token,\n                cipherIV: user.cipherIV,\n                connect: true,\n                onConnect,\n                onConnectFail: (e) => {\n                    reject(e);\n                }\n            }, options));\n        });\n    }\n\n    /**\n     * 发起退出登录请求\n     *\n     * @return {void}\n     * @memberof AppSocket\n     */\n    logout() {\n        if (this.isConnected) {\n            this.uploadUserSettings();\n            setTimeout(() => {\n                this.markClose();\n                this.send('logout');\n            }, 500);\n        } else {\n            this.markClose();\n            this.handleClose(null, 'logout');\n        }\n    }\n\n    /**\n     * 发起上传用户个人配置请求\n     *\n     * @returns {Promise} 使用 Promise 异步返回处理结果\n     * @memberof AppSocket\n     */\n    uploadUserSettings() {\n        const {user} = this;\n        const needSaveId = user.config.needSave;\n        return this.sendAndListen({\n            method: 'settings',\n            params: [\n                user.account,\n                user.config.exportCloud()\n            ]\n        }).then(() => {\n            if (user.config.needSave === needSaveId) {\n                user.config.makeSave();\n            }\n            return user;\n        });\n    }\n\n    /**\n     * 从服务器同步个人配置\n     *\n     * @returns {Promise} 使用 Promise 异步返回处理结果\n     * @memberof AppSocket\n     */\n    syncUserSettings() {\n        return this.sendAndListen({\n            method: 'settings',\n            params: [\n                this.user.account,\n                ''\n            ]\n        });\n    }\n\n    /**\n     * 变更当前用户状态\n     *\n     * @param {string} status 状态名称\n     * @returns {Promise} 使用 Promise 异步返回处理结果\n     * @memberof AppSocket\n     */\n    changeUserStatus(status) {\n        return this.changeUser({status});\n    }\n\n    /**\n     * 变更用户信息\n     *\n     * @param {Object<string,any>} userChangeData 要变更的属性对象\n     * @returns {Promise} 使用 Promise 异步返回处理结果\n     * @memberof AppSocket\n     */\n    changeUser(userChangeData) {\n        userChangeData.account = this.user.account;\n        return this.sendAndListen({\n            method: 'userchange',\n            params: [userChangeData]\n        });\n    }\n\n    /**\n     * 修改用户密码\n     *\n     * @param {string} password 新的密码\n     * @returns {Promise} 使用 Promise 异步返回处理结果\n     * @memberof AppSocket\n     */\n    changeUserPassword(password) {\n        if (this.user.ldap) {\n            return Promise.reject(langString('user.changePassword.notSupport'));\n        }\n        return this.changeUser({\n            password: this.user.isVersionSupport('changePwdWithMD5') ? md5(password) : md5(`${md5(password)}${this.user.account}`)\n        });\n    }\n\n    /**\n     * 向服务器发送 ping 消息\n     *\n     * @returns {Promise} 使用 Promise 异步返回处理结果\n     * @memberof AppSocket\n     */\n    ping() {\n        const now = new Date().getTime();\n        if ((now - this.lastHandTime) > PING_INTERVAL * 2) {\n            this.user.markDisconnect();\n            this.close(null, 'ping_timeout');\n        } else if (!this.handlePing && !this.handlePong && !this.user.isVersionSupport('socketPing')) {\n            return this.send('ping');\n        }\n    }\n\n    /**\n     * 停止自动向服务器发送 ping 消息\n     *\n     * @memberof AppSocket\n     * @return {void}\n     */\n    stopPing() {\n        if (this.pingTask) {\n            clearInterval(this.pingTask);\n            this.pingTask = null;\n        }\n    }\n\n    /**\n     * 处理从服务器接收到的 ping 消息\n     *\n     * @memberof AppSocket\n     * @return {void}\n     * @private\n     */\n    onPing() {\n        const now = new Date().getTime();\n        if (DEBUG) {\n            console.color('SOCKET Ping ⬇︎', 'purpleBg', 'OK', 'greenPale', `${(now - this.lastHandTime) / 1000} seconds`, 'muted');\n        }\n        this.lastHandTime = new Date().getTime();\n    }\n\n    /**\n     * 处理从服务器接收到的 pong 消息\n     *\n     * @memberof AppSocket\n     * @return {void}\n     * @private\n     */\n    onPong() {\n        this.onPing();\n    }\n\n    /**\n     * 开始自动向服务器发送 ping 消息\n     *\n     * @memberof AppSocket\n     * @return {void}\n     */\n    startPing() {\n        this.stopPing();\n        if (this.isConnected) {\n            this.pingTask = setInterval(() => {\n                const now = new Date().getTime();\n                if (now - this.lastHandTime > this.pingInterval) {\n                    this.ping();\n                }\n            }, this.pingInterval / 2);\n        } else if (DEBUG) {\n            console.error('Start ping fail, because the socket connection is not opened.');\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/network/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 953,
    "kind": "variable",
    "name": "PING_INTERVAL",
    "memberof": "app/core/network/socket.js",
    "static": true,
    "longname": "app/core/network/socket.js~PING_INTERVAL",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/network/socket.js",
    "importStyle": null,
    "description": "Ping 消息发送间隔，单位毫秒",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 954,
    "kind": "variable",
    "name": "LISTEN_TIMEOUT",
    "memberof": "app/core/network/socket.js",
    "static": true,
    "longname": "app/core/network/socket.js~LISTEN_TIMEOUT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/network/socket.js",
    "importStyle": null,
    "description": "等待消息回应判定为超时的事件，单位毫秒",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 955,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/network/socket.js",
    "static": true,
    "longname": "app/core/network/socket.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/network/socket.js",
    "importStyle": null,
    "description": "事件名称表",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 956,
    "kind": "function",
    "name": "listenMessage",
    "memberof": "app/core/network/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/network/socket.js~listenMessage",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/network/socket.js",
    "importStyle": null,
    "description": "监听消息回应",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleName",
        "description": "消息操作模块名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "methodName",
        "description": "消息操作方法名称"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "LISTEN_TIMEOUT",
        "defaultRaw": "LISTEN_TIMEOUT",
        "name": "timeout",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 957,
    "kind": "class",
    "name": "AppSocket",
    "memberof": "app/core/network/socket.js",
    "static": true,
    "longname": "app/core/network/socket.js~AppSocket",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/network/socket.js",
    "importStyle": "AppSocket",
    "description": "Socket 服务管理类",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AppSocket"
      }
    ],
    "interface": false,
    "extends": [
      "Socket"
    ]
  },
  {
    "__docId__": 958,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#constructor",
    "access": "public",
    "description": "创建一个 Socket 服务器管理类实例",
    "lineNumber": 74
  },
  {
    "__docId__": 959,
    "kind": "member",
    "name": "user",
    "memberof": "app/core/network/socket.js~AppSocket",
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#user",
    "access": "public",
    "description": "当前用户",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "User"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 960,
    "kind": "member",
    "name": "pingInterval",
    "memberof": "app/core/network/socket.js~AppSocket",
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#pingInterval",
    "access": "public",
    "description": "Ping 消息发送间隔，单位毫秒",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 961,
    "kind": "member",
    "name": "handlers",
    "memberof": "app/core/network/socket.js~AppSocket",
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#handlers",
    "access": "public",
    "description": "Socket 消息接收处理函数",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, Function>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 962,
    "kind": "member",
    "name": "pingTask",
    "memberof": "app/core/network/socket.js~AppSocket",
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#pingTask",
    "access": "private",
    "description": "ping 循环任务 ID",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 963,
    "kind": "method",
    "name": "send",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#send",
    "access": "public",
    "description": "发送 SocketMessage",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>",
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "要发送的 SocketMessage 实例或者用于创建 SocketMessage 实例的属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 964,
    "kind": "method",
    "name": "setHandler",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#setHandler",
    "access": "public",
    "description": "设置 Socket 消息接收处理函数",
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleName",
        "description": "要处理的操作模块名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "methodName",
        "description": "要处理的操作方法名称"
      },
      {
        "nullable": null,
        "types": [
          "Function(msg: SocketMessage, socket: Socket)"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "处理函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 965,
    "kind": "method",
    "name": "getHandler",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#getHandler",
    "access": "public",
    "description": "获取消息接收处理函数",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "pathnames",
        "description": "操作路径"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function(msg: SocketMessage, socket: Socket)"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 966,
    "kind": "method",
    "name": "handleMessage",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#handleMessage",
    "access": "public",
    "description": "使用消息接收处理函数处理接收到的消息",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "要处理的消息实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 967,
    "kind": "method",
    "name": "sendAndListen",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#sendAndListen",
    "access": "public",
    "description": "通过 Socket 发送消息并监听服务器对此消息的回应",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>",
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "要发送的 SocketMessage 实例或者用于创建 SocketMessage 实例的属性对象"
      },
      {
        "nullable": null,
        "types": [
          "Function(result: any): any"
        ],
        "spread": false,
        "optional": false,
        "name": "check",
        "description": "用于检查服务器返回结果的函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 968,
    "kind": "method",
    "name": "onInit",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#onInit",
    "access": "private",
    "description": "当 Socket 初始化时执行的操作",
    "lineNumber": 220,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 969,
    "kind": "member",
    "name": "lastHandTime",
    "memberof": "app/core/network/socket.js~AppSocket",
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#lastHandTime",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 971,
    "kind": "method",
    "name": "onClose",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#onClose",
    "access": "private",
    "description": "当 Socket 关闭时执行的操作",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "关闭代码"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "关闭原因"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "unexpected",
        "description": "是否是意外关闭"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 972,
    "kind": "method",
    "name": "onData",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#onData",
    "access": "private",
    "description": "当 Socket 接收到数据时执行的操作",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Socket 接收到的数据（通常是JSON 字符串形式）"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "flags",
        "description": "数据标识"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 974,
    "kind": "method",
    "name": "login",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#login",
    "access": "public",
    "description": "发起登录请求",
    "lineNumber": 275,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "当前要进行登录的用户"
      },
      {
        "nullable": null,
        "types": [
          "Object<string,any>"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "登录选项"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 975,
    "kind": "member",
    "name": "isLogging",
    "memberof": "app/core/network/socket.js~AppSocket",
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#isLogging",
    "access": "public",
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 978,
    "kind": "method",
    "name": "logout",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#logout",
    "access": "public",
    "description": "发起退出登录请求",
    "lineNumber": 328,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 979,
    "kind": "method",
    "name": "uploadUserSettings",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#uploadUserSettings",
    "access": "public",
    "description": "发起上传用户个人配置请求",
    "lineNumber": 347,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    },
    "params": []
  },
  {
    "__docId__": 980,
    "kind": "method",
    "name": "syncUserSettings",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#syncUserSettings",
    "access": "public",
    "description": "从服务器同步个人配置",
    "lineNumber": 370,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    },
    "params": []
  },
  {
    "__docId__": 981,
    "kind": "method",
    "name": "changeUserStatus",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#changeUserStatus",
    "access": "public",
    "description": "变更当前用户状态",
    "lineNumber": 387,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "状态名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 982,
    "kind": "method",
    "name": "changeUser",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#changeUser",
    "access": "public",
    "description": "变更用户信息",
    "lineNumber": 398,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string,any>"
        ],
        "spread": false,
        "optional": false,
        "name": "userChangeData",
        "description": "要变更的属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 983,
    "kind": "method",
    "name": "changeUserPassword",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#changeUserPassword",
    "access": "public",
    "description": "修改用户密码",
    "lineNumber": 413,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "新的密码"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 984,
    "kind": "method",
    "name": "ping",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#ping",
    "access": "public",
    "description": "向服务器发送 ping 消息",
    "lineNumber": 428,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    },
    "params": []
  },
  {
    "__docId__": 985,
    "kind": "method",
    "name": "stopPing",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#stopPing",
    "access": "public",
    "description": "停止自动向服务器发送 ping 消息",
    "lineNumber": 444,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 987,
    "kind": "method",
    "name": "onPing",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#onPing",
    "access": "private",
    "description": "处理从服务器接收到的 ping 消息",
    "lineNumber": 458,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 989,
    "kind": "method",
    "name": "onPong",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#onPong",
    "access": "private",
    "description": "处理从服务器接收到的 pong 消息",
    "lineNumber": 473,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 990,
    "kind": "method",
    "name": "startPing",
    "memberof": "app/core/network/socket.js~AppSocket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/network/socket.js~AppSocket#startPing",
    "access": "public",
    "description": "开始自动向服务器发送 ping 消息",
    "lineNumber": 483,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 992,
    "kind": "file",
    "name": "app/core/notice.js",
    "content": "import {notify, ui as PlatformUI} from 'Platform';\nimport events from './events';\nimport Lang from '../lang';\n\n/**\n * 默认通知内容\n * @type {Object<string, any>}\n * @private\n */\nconst DEFAULT = {\n    chats: 0,\n    total: 0,\n    message: null,\n    sound: false,\n    tray: false\n};\n\n/**\n * 事件名称表\n * @type {Object<string, string>}\n * @private\n */\nconst EVENT = {\n    update: 'notice.update',\n};\n\n/**\n * 更新通知信息\n * @param {Object<string, any>} info 通知信息对象\n * @return {void}\n */\nexport const updateNotice = info => {\n    info = Object.assign({}, DEFAULT, info);\n    info.total = info.chats + 0;\n\n    if (info.sound && notify.playSound) {\n        notify.playSound(info.sound);\n    }\n\n    if (notify.setBadgeLabel) {\n        notify.setBadgeLabel(info.notMuteCount || '');\n    }\n\n    if (notify.updateTrayIcon) {\n        if (info.tray) {\n            const trayLabel = info.tray.label ? `${Lang.string('app.title')} - ${info.tray.label}` : Lang.string('app.title');\n            notify.updateTrayIcon(trayLabel, info.tray.flash);\n        } else {\n            notify.updateTrayIcon(Lang.string('app.title'));\n        }\n    }\n\n    if (info.message && notify.showNotification) {\n        notify.showNotification(info.message);\n    }\n\n    events.emit(EVENT.update, info);\n};\n\n/**\n * 判定当前桌面应用是否处于给定条件中描述的状态\n * 所有可用的条件状态包括：\n * - `onWindowHide`：当前应用窗口已经被隐藏\n * - `onWindowBlur`：当前应用窗口已经失去焦点\n * @param {string} condition 条件名称\n * @return {boolean}\n */\nexport const isMatchWindowCondition = condition => {\n    if (condition === 'onWindowHide') {\n        return !PlatformUI.isWindowOpen;\n    }\n    if (condition === 'onWindowBlur') {\n        return !PlatformUI.isWindowFocus;\n    }\n    return true;\n};\n\n/**\n * 绑定通知变更事件\n * @param {Function} listener 事件回调函数\n * @return {Symbo} 事件 ID\n */\nexport const onNoticeUpdate = listener => (events.on(EVENT.update, listener));\n\n/**\n * 在用户系统桌面上请求获得用户注意\n * @function\n * @return {void}\n */\n// eslint-disable-next-line prefer-destructuring\nexport const requestAttention = notify.requestAttention;\n\nexport default {\n    update: updateNotice,\n    onNoticeUpdate,\n    isMatchWindowCondition,\n    requestAttention: notify.requestAttention\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/notice.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 993,
    "kind": "variable",
    "name": "DEFAULT",
    "memberof": "app/core/notice.js",
    "static": true,
    "longname": "app/core/notice.js~DEFAULT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/notice.js",
    "importStyle": null,
    "description": "默认通知内容",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 994,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/notice.js",
    "static": true,
    "longname": "app/core/notice.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/notice.js",
    "importStyle": null,
    "description": "事件名称表",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 995,
    "kind": "function",
    "name": "updateNotice",
    "memberof": "app/core/notice.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/notice.js~updateNotice",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/notice.js",
    "importStyle": "{updateNotice}",
    "description": "更新通知信息",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "通知信息对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 996,
    "kind": "function",
    "name": "isMatchWindowCondition",
    "memberof": "app/core/notice.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/notice.js~isMatchWindowCondition",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/notice.js",
    "importStyle": "{isMatchWindowCondition}",
    "description": "判定当前桌面应用是否处于给定条件中描述的状态\n所有可用的条件状态包括：\n- `onWindowHide`：当前应用窗口已经被隐藏\n- `onWindowBlur`：当前应用窗口已经失去焦点",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "条件名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 997,
    "kind": "function",
    "name": "onNoticeUpdate",
    "memberof": "app/core/notice.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/notice.js~onNoticeUpdate",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/notice.js",
    "importStyle": "{onNoticeUpdate}",
    "description": "绑定通知变更事件",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbo"
      ],
      "spread": false,
      "description": "事件 ID"
    }
  },
  {
    "__docId__": 998,
    "kind": "variable",
    "name": "requestAttention",
    "memberof": "app/core/notice.js",
    "static": true,
    "longname": "app/core/notice.js~requestAttention",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/notice.js",
    "importStyle": "{requestAttention}",
    "description": "在用户系统桌面上请求获得用户注意",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 999,
    "kind": "file",
    "name": "app/core/profile/index.js",
    "content": "// eslint-disable-next-line import/no-unresolved\nimport Platform from 'Platform';\nimport events from '../events';\nimport UserConfig from './user-config';\nimport User from './user';\nimport Lang from '../../lang';\nimport notice from '../notice';\n\n/**\n * 事件表\n * @type {Object<string, string>}\n * @private\n */\nconst EVENT = {\n    swap: 'profile.user.swap',\n};\n\n/**\n * 存储当前登录的用户实例\n * @type {User}\n * @private\n */\nlet user = null;\n\n/**\n * 创建用户实例\n * @param {Object} userData 用户存储数据对象\n * @return {User}\n */\nexport const createUser = userData => {\n    if (!(userData instanceof User)) {\n        const newUser = new User(userData);\n        newUser.$set(Object.assign({}, Platform.config.getUser(newUser.identify), userData));\n        if (userData.password) {\n            newUser.password = userData.password;\n        }\n        return newUser;\n    }\n    return userData;\n};\n\n/**\n * 设置当前登录的用户实例\n * @param {!User} newUser 新的用户实例\n * @return {User}\n */\nexport const setCurrentUser = newUser => {\n    if (!(newUser instanceof User)) {\n        throw new Error('Cannot set user for profile, because the user param is not User instance.');\n    }\n\n    const oldUser = user;\n    if (oldUser) {\n        oldUser.destroy();\n    }\n    user = newUser;\n    user.enableEvents();\n\n    if (DEBUG) {\n        console.collapse('Profile.setUser', 'tealBg', user.identify, 'tealPale');\n        console.log('user', user);\n        console.groupEnd();\n    }\n    if (!oldUser || oldUser.identify !== user.identify) {\n        notice.update();\n        events.emit(EVENT.swap, user);\n    }\n    return user;\n};\n\n/**\n * 绑定切换当前用户事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onSwapUser = listener => (events.on(EVENT.swap, listener));\n\n/**\n * 绑定用户状态变更事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onUserStatusChange = listener => (events.on(User.EVENT.status_change, listener));\n\n/**\n * 绑定用户配置变更事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onUserConfigChange = listener => (events.on(User.EVENT.config_change, listener));\n\n/**\n * 获取上次保存的用户数据\n * @return {Object}\n */\nexport const getLastSavedUser = () => Platform.config.getUser();\n\n/**\n * 判定给定的用户或成员是否是当前登录用户\n * @param {User|Member} theUser 要判断的用户或成员实例\n * @return {boolean}\n */\nexport const isCurrentUser = theUser => (theUser && user && user.id === theUser.id);\n\n/**\n * 获取当前登录的用户\n * @return {User}\n */\nexport const getCurrentUser = () => user;\n\nexport default {\n    UserConfig,\n    EVENT,\n    createUser,\n    setUser: setCurrentUser,\n    onSwapUser,\n    onUserStatusChange,\n    onUserConfigChange,\n    getLastSavedUser,\n    isCurrentUser,\n\n    /**\n     * 获取当前登录的用户实例\n     * @type {User}\n     */\n    get user() {\n        return user;\n    },\n\n    /**\n     * 获取当前登录的用户 ID\n     * @type {number}\n     */\n    get userId() {\n        return user && user.id;\n    },\n\n    /**\n     * 检查当前登录的用户是否在线\n     * @type {boolean}\n     */\n    get isUserOnline() {\n        return user && user.isOnline;\n    },\n\n    /**\n     * 检查当前登录的用户是否验证通过过\n     * @type {boolean}\n     */\n    get isUserVertified() {\n        return user && user.isVertified;\n    },\n\n    /**\n     * 获取当前登录的用户状态编号\n     * @type {number}\n     */\n    get userStatus() {\n        return user && user.status;\n    },\n\n    /**\n     * 获取当前用户状态描述文本\n     * @type {string}\n     */\n    get summaryText() {\n        if (user) {\n            return `${user.displayName} [${Lang.string(`member.status.${user.statusName}`)}]`;\n        }\n        return '';\n    },\n\n    /**\n     * 获取当前用户配置对象\n     */\n    get userConfig() {\n        return user ? user.config : {};\n    },\n\n    /**\n     * 获取当前用户用户名\n     */\n    get userAccount() {\n        return user ? user.account : '';\n    }\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/profile/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1000,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/profile/index.js",
    "static": true,
    "longname": "app/core/profile/index.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/profile/index.js",
    "importStyle": null,
    "description": "事件表",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1001,
    "kind": "variable",
    "name": "user",
    "memberof": "app/core/profile/index.js",
    "static": true,
    "longname": "app/core/profile/index.js~user",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/profile/index.js",
    "importStyle": null,
    "description": "存储当前登录的用户实例",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "User"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1002,
    "kind": "function",
    "name": "createUser",
    "memberof": "app/core/profile/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/index.js~createUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/index.js",
    "importStyle": "{createUser}",
    "description": "创建用户实例",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "userData",
        "description": "用户存储数据对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "User"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1003,
    "kind": "function",
    "name": "setCurrentUser",
    "memberof": "app/core/profile/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/index.js~setCurrentUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/index.js",
    "importStyle": "{setCurrentUser}",
    "description": "设置当前登录的用户实例",
    "lineNumber": 47,
    "params": [
      {
        "nullable": false,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "newUser",
        "description": "新的用户实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "User"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1004,
    "kind": "function",
    "name": "onSwapUser",
    "memberof": "app/core/profile/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/index.js~onSwapUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/index.js",
    "importStyle": "{onSwapUser}",
    "description": "绑定切换当前用户事件",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1005,
    "kind": "function",
    "name": "onUserStatusChange",
    "memberof": "app/core/profile/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/index.js~onUserStatusChange",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/index.js",
    "importStyle": "{onUserStatusChange}",
    "description": "绑定用户状态变更事件",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1006,
    "kind": "function",
    "name": "onUserConfigChange",
    "memberof": "app/core/profile/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/index.js~onUserConfigChange",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/index.js",
    "importStyle": "{onUserConfigChange}",
    "description": "绑定用户配置变更事件",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1007,
    "kind": "function",
    "name": "getLastSavedUser",
    "memberof": "app/core/profile/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/index.js~getLastSavedUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/index.js",
    "importStyle": "{getLastSavedUser}",
    "description": "获取上次保存的用户数据",
    "lineNumber": 96,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1008,
    "kind": "function",
    "name": "isCurrentUser",
    "memberof": "app/core/profile/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/index.js~isCurrentUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/index.js",
    "importStyle": "{isCurrentUser}",
    "description": "判定给定的用户或成员是否是当前登录用户",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "User",
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "theUser",
        "description": "要判断的用户或成员实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1009,
    "kind": "function",
    "name": "getCurrentUser",
    "memberof": "app/core/profile/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/index.js~getCurrentUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/index.js",
    "importStyle": "{getCurrentUser}",
    "description": "获取当前登录的用户",
    "lineNumber": 109,
    "return": {
      "nullable": null,
      "types": [
        "User"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1010,
    "kind": "file",
    "name": "app/core/profile/user-config.js",
    "content": "import md5 from 'md5';\nimport Config from '../../config';\nimport DEFAULT from './user-default-config';\nimport DelayAction from '../../utils/delay-action';\nimport timeSequence from '../../utils/time-sequence';\n\n/**\n * 用户配置管理类\n *\n * @export\n * @class UserConfig\n */\nexport default class UserConfig {\n    /**\n     * 用户默认配置\n     *\n     * @static\n     * @memberof UserConfig\n     * @type {Object<string, any>}\n     */\n    static DEFAULT = DEFAULT;\n\n    /**\n     * 创建一个用户配置管理类实例`\n     * @param {Object<string, any>} config 用户配置数据对象\n     * @memberof UserConfig\n     */\n    constructor(config) {\n        if (config && config.version !== DEFAULT.version) {\n            config = null;\n        }\n        this.$ = Object.assign({}, DEFAULT, Config.system.defaultConfig, config);\n\n        this.changeAction = new DelayAction(() => {\n            this.onChange(this.lastChange, this);\n            this.lastChange = null;\n        });\n\n        const {groupsCategories} = this;\n        Object.keys(groupsCategories).forEach(x => {\n            const category = groupsCategories[x];\n            if (category.order > 1000000000000) {\n                if (x.startsWith('_')) {\n                    category.order = 100000000000 + timeSequence();\n                } else {\n                    category.order = timeSequence();\n                }\n            }\n        });\n        return this.set('ui.chat.groups.categories', groupsCategories, true);\n    }\n\n    /**\n     * 获取配置数据存储对象\n     *\n     * @return {Object<string, any>}\n     * @memberof UserConfig\n     */\n    plain() {\n        return Object.assign({}, this.$);\n    }\n\n    /**\n     * 导出用于上传到服务器的数据存储对象\n     *\n     * @return {Object<string, any>}\n     * @memberof UserConfig\n     */\n    exportCloud() {\n        const config = {};\n        Object.keys(this.$).forEach(key => {\n            if (key.indexOf('local.') !== 0) {\n                config[key] = this.$[key];\n            }\n        });\n        config.hash = md5(JSON.stringify(config));\n        this.hash = config.hash;\n        return config;\n    }\n\n    /**\n     * 将用户配置标记已变更\n     *\n     * @param {Object<string, any>} change 要变更的数据\n     * @param {boolean} [reset=false] 是否标记为全部重置\n     * @return {void}\n     * @memberof UserConfig\n     */\n    makeChange(change, reset = false) {\n        this.lastChange = Object.assign({}, this.lastChange, change);\n        this.$.lastChangeTime = new Date().getTime();\n        if (!reset) {\n            this.needSave = this.$.lastChangeTime;\n        }\n        if (typeof this.onChange === 'function') {\n            this.changeAction.do();\n        }\n    }\n\n    /**\n     * 将用户配置数据标记为需要存储\n     *\n     * @memberof UserConfig\n     * @return {void}\n     */\n    makeSave() {\n        this.needSave = false;\n    }\n\n    /**\n     * 获取指定名称的用户配置项值\n     *\n     * @param {string} key 配置名称\n     * @param {?any} defaultValue 默认值\n     * @return {any}\n     * @memberof UserConfig\n     */\n    get(key, defaultValue) {\n        if (this.$) {\n            const val = this.$[key];\n            if (val !== undefined) {\n                return val;\n            }\n        }\n        if (defaultValue === undefined) {\n            defaultValue = DEFAULT[key];\n        }\n        return defaultValue;\n    }\n\n    /**\n     * 设置配置项的值\n     *\n     * @param {string|Object<string, any>} keyOrObj 如果为字符串则为要设置的配置项名称，如果为对象则将对象键值对作为要设置的配置项\n     * @param {?any} value 当 {keyOrObj} 为字符串时要设置的配置项的值\n     * @param {boolean} [reset=false] 是否标记为全部重置\n     * @return {void}\n     * @memberof UserConfig\n     */\n    set(keyOrObj, value, reset = false) {\n        if (typeof keyOrObj === 'object') {\n            Object.assign(this.$, keyOrObj);\n            this.makeChange(keyOrObj, reset);\n        } else {\n            this.$[keyOrObj] = value;\n            this.makeChange({[keyOrObj]: value}, reset);\n        }\n    }\n\n    /**\n     * 获取扩展的配置项\n     *\n     * @param {!string} extensionName 扩展名称\n     * @param {?string} key 配置项名称，如果不给定名称，则以对象的形式返回所有配置项\n     * @param {?any} defaultValue 配置项的默认值\n     * @return {any}\n     * @memberof UserConfig\n     */\n    getForExtension(extensionName, key, defaultValue) {\n        if (typeof extensionName === 'object' && extensionName.name) {\n            extensionName = extensionName.name;\n        }\n        const extensionConfig = this.get(`EXTENSION::${extensionName}`, {});\n        const value = key !== undefined ? extensionConfig[key] : extensionConfig;\n        return value !== undefined ? value : defaultValue;\n    }\n\n    /**\n     * 设置扩展的配置项值\n     *\n     * @param {!string} extensionName 扩展名称\n     * @param {?string} keyOrObj 如果为字符串则为要设置的配置项名称，如果为对象则将对象键值对作为要设置的配置\n     * @param {?any} value 当 {keyOrObj} 为字符串时要设置的配置项的值\n     * @return {void}\n     * @memberof UserConfig\n     */\n    setForExtension(extensionName, keyOrObj, value) {\n        const extensionConfig = this.getForExtension(extensionName);\n        if (typeof keyOrObj === 'object') {\n            Object.assign(extensionConfig, keyOrObj);\n        } else {\n            extensionConfig[keyOrObj] = value;\n        }\n        return this.set(`EXTENSION::${extensionName}`, extensionConfig);\n    }\n\n    /**\n     * 将用户所有配置项重置为给定的配置\n     *\n     * @param {?Object<string, any>} newConfig 要重置的配置项对象，如果留空，则将配置项重置为默认\n     * @return {void}\n     * @memberof UserConfig\n     */\n    reset(newConfig) {\n        this.$ = Object.assign({}, DEFAULT, newConfig);\n        this.makeChange(this.$, true);\n    }\n\n    /**\n     * 获取上次配置发生变更的时间戳\n     *\n     * @type {number}\n     * @readonly\n     * @memberof UserConfig\n     */\n    get lastChangeTime() {\n        return this.$.lastChangeTime;\n    }\n\n    /**\n     * 获取是否自动重连\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get autoReconnect() {\n        return this.get('user.autoReconnect');\n    }\n\n    /**\n     * 设置是否自动重连\n     *\n     * @param {boolean} flag 是否自动重连\n     * @memberof UserConfig\n     */\n    set autoReconnect(flag) {\n        return this.set('user.autoReconnect', flag);\n    }\n\n    /**\n     * 获取用户头像在导航上显示的位置\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get avatarPosition() {\n        return this.get('ui.navbar.avatarPosition');\n    }\n\n    /**\n     * 设置用户头像在导航上显示的位置\n     *\n     * @param {string} position 用户头像在导航上显示的位置\n     * @memberof UserConfig\n     */\n    set avatarPosition(position) {\n        return this.set('ui.navbar.avatarPosition', position);\n    }\n\n    /**\n     * 获取上次保存配置的时间戳\n     *\n     * @memberof UserConfig\n     * @type {number}\n     */\n    get lastSaveTime() {\n        return this.get('lastSaveTime');\n    }\n\n    /**\n     * 设置上次保存配置的时间戳\n     *\n     * @param {number} time 上次保存配置的时间戳\n     * @memberof UserConfig\n     */\n    set lastSaveTime(time) {\n        if (time instanceof Date) {\n            time = time.getTime();\n        }\n        return this.set('lastSaveTime', time);\n    }\n\n    /**\n     * 获取是否显示发送消息提示面板\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get showMessageTip() {\n        return this.get('ui.chat.showMessageTip');\n    }\n\n    /**\n     * 设置是否显示发送消息提示面板\n     *\n     * @param {boolean} flag 是否显示发送消息提示面板\n     * @memberof UserConfig\n     */\n    set showMessageTip(flag) {\n        return this.set('ui.chat.showMessageTip', flag);\n    }\n\n    /**\n     * 获取是否直接发送高清表情\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get sendHDEmoticon() {\n        return this.get('ui.chat.sendHDEmoticon');\n    }\n\n    /**\n     * 设置是否直接发送高清表情\n     *\n     * @param {boolean} flag 是否直接发送高清表情\n     * @memberof UserConfig\n     */\n    set sendHDEmoticon(flag) {\n        return this.set('ui.chat.sendHDEmoticon', flag);\n    }\n\n    /**\n     * 获取是否将消息以 Markdown 格式发送\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get sendMarkdown() {\n        return this.get('ui.chat.sendMarkdown');\n    }\n\n    /**\n     * 设置是否将消息以 Markdown 格式发送\n     *\n     * @param {boolean} flag 将消息以 Markdown 格式发送\n     * @memberof UserConfig\n     */\n    set sendMarkdown(flag) {\n        return this.set('ui.chat.sendMarkdown', flag);\n    }\n\n    /**\n     * 判断给定当聊天是否隐藏聊天侧边栏\n     *\n     * @param {string} cgid 聊天 GID\n     * @param {boolean} [defaultValue=false] 默认值\n     * @return {boolean}\n     * @memberof UserConfig\n     */\n    isChatSidebarHidden(cgid, defaultValue = false) {\n        return !!this.get(`ui.chat.hideSidebar.${cgid}`, defaultValue);\n    }\n\n    /**\n     * 设置给定当聊天是否隐藏聊天侧边栏\n     *\n     * @param {string} cgid 聊天 GID\n     * @param {boolean} flag 是否隐藏\n     * @return {void}\n     * @memberof UserConfig\n     */\n    setChatSidebarHidden(cgid, flag) {\n        return this.set(`ui.chat.hideSidebar.${cgid}`, flag);\n    }\n\n    /**\n     * 获取是否在联系人列表上显示自己\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get showMeOnMenu() {\n        return !!this.get('ui.chat.menu.showMe');\n    }\n\n    /**\n     * 设置是否在联系人列表上显示自己\n     *\n     * @param {boolean} flag 在联系人列表上显示自己\n     * @memberof UserConfig\n     */\n    set showMeOnMenu(flag) {\n        return this.set('ui.chat.menu.showMe', flag);\n    }\n\n    /**\n     * 获取是否在表情选择面板上启用搜索功能\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get enableSearchInEmojionePicker() {\n        return this.get('ui.chat.enableSearchInEmojionePicker');\n    }\n\n    /**\n     * 设置是否在表情选择面板上启用搜索功能\n     *\n     * @param {boolean} flag 在表情选择面板上启用搜索功能\n     * @memberof UserConfig\n     */\n    set enableSearchInEmojionePicker(flag) {\n        return this.set('ui.chat.enableSearchInEmojionePicker', flag);\n    }\n\n    /**\n     * 获取是否启用桌面通知\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get enableWindowNotification() {\n        return this.get('ui.notify.enableWindowNotification');\n    }\n\n    /**\n     * 设置是否启用桌面通知\n     *\n     * @param {boolean} flag 启用桌面通知\n     * @memberof UserConfig\n     */\n    set enableWindowNotification(flag) {\n        return this.set('ui.notify.enableWindowNotification', flag);\n    }\n\n    /**\n     * 获取是否不在弹窗上显示消息具体内容\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get safeWindowNotification() {\n        return this.get('ui.notify.safeWindowNotification');\n    }\n\n    /**\n     * 设置是否不在弹窗上显示消息具体内容\n     *\n     * @param {boolean} flag 不在弹窗上显示消息具体内容\n     * @memberof UserConfig\n     */\n    set safeWindowNotification(flag) {\n        return this.set('ui.notify.safeWindowNotification', flag);\n    }\n\n    /**\n     * 获取桌面通知显示的时机\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get windowNotificationCondition() {\n        return this.get('ui.notify.windowNotificationCondition');\n    }\n\n    /**\n     * 设置桌面通知显示的时机\n     *\n     * @param {string} condition 桌面通知显示的时机\n     * @memberof UserConfig\n     */\n    set windowNotificationCondition(condition) {\n        return this.set('ui.notify.windowNotificationCondition', condition);\n    }\n\n    /**\n     * 获取是否启用声音通知\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get enableSound() {\n        return this.get('ui.notify.enableSound');\n    }\n\n    /**\n     * 设置是否启用声音通知\n     *\n     * @param {boolean} flag 启用声音通知\n     * @memberof UserConfig\n     */\n    set enableSound(flag) {\n        return this.set('ui.notify.enableSound', flag);\n    }\n\n    /**\n     * 获取声音通知显示的时机\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get playSoundCondition() {\n        return this.get('ui.notify.playSoundCondition');\n    }\n\n    /**\n     * 设置声音通知显示的时机\n     *\n     * @param {string} condition 声音通知显示的时机\n     * @memberof UserConfig\n     */\n    set playSoundCondition(condition) {\n        return this.set('ui.notify.playSoundCondition', condition);\n    }\n\n    /**\n     * 获取是否闪烁通知栏图标\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get flashTrayIcon() {\n        return this.get('ui.notify.flashTrayIcon');\n    }\n\n    /**\n     * 设置是否闪烁通知栏图标\n     *\n     * @param {boolean} flag 闪烁通知栏图标\n     * @memberof UserConfig\n     */\n    set flashTrayIcon(flag) {\n        return this.set('ui.notify.flashTrayIcon', flag);\n    }\n\n    /**\n     * 获取闪烁通知栏图标通知显示的时机\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get flashTrayIconCondition() {\n        return this.get('ui.notify.flashTrayIconCondition');\n    }\n\n    /**\n     * 设置闪烁通知栏图标通知显示的时机\n     *\n     * @param {string} condition 闪烁通知栏图标通知显示的时机\n     * @memberof UserConfig\n     */\n    set flashTrayIconCondition(condition) {\n        return this.set('ui.notify.flashTrayIconCondition', condition);\n    }\n\n    /**\n     * 获取是否禁用通知当用户状态设置为忙碌时\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get muteOnUserIsBusy() {\n        return this.get('ui.notify.muteOnUserIsBusy');\n    }\n\n    /**\n     * 设置是否禁用通知当用户状态设置为忙碌时\n     *\n     * @param {boolean} flag 禁用通知当用户状态设置为忙碌时\n     * @memberof UserConfig\n     */\n    set muteOnUserIsBusy(flag) {\n        return this.set('ui.notify.muteOnUserIsBusy', flag);\n    }\n\n    /**\n     * 获取截屏快捷键\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get captureScreenHotkey() {\n        return this.get('shortcut.captureScreen');\n    }\n\n    /**\n     * 设置截屏快捷键\n     *\n     * @param {string} shortcut 截屏快捷键\n     * @memberof UserConfig\n     */\n    set captureScreenHotkey(shortcut) {\n        return this.set('shortcut.captureScreen', shortcut);\n    }\n\n    /**\n     * 获取激活主窗口快捷键\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get focusWindowHotkey() {\n        return this.get('shortcut.focusWindow');\n    }\n\n    /**\n     * 设置激活主窗口快捷键\n     *\n     * @param {string} shortcut 激活主窗口快捷键\n     * @memberof UserConfig\n     */\n    set focusWindowHotkey(shortcut) {\n        return this.set('shortcut.focusWindow', shortcut);\n    }\n\n    /**\n     * 获取全局快捷键配置\n     *\n     * @readonly\n     * @memberof UserConfig\n     * @type {Object<string, string>}\n     */\n    get globalHotkeys() {\n        return {\n            captureScreenHotkey: this.captureScreenHotkey,\n            focusWindowHotkey: this.focusWindowHotkey\n        };\n    }\n\n    /**\n     * 获取发送消息快捷键\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get sendMessageHotkey() {\n        return this.get('shortcut.sendMessage');\n    }\n\n    /**\n     * 设置发送消息快捷键\n     *\n     * @param {string} shortcut 发送消息快捷键\n     * @memberof UserConfig\n     */\n    set sendMessageHotkey(shortcut) {\n        return this.set('shortcut.sendMessage', shortcut);\n    }\n\n    /**\n     * 获取聊天消息字体大小配置\n     *\n     * @memberof UserConfig\n     * @type {Object<string, any>}\n     */\n    get chatFontSize() {\n        return this.get('ui.chat.fontSize');\n    }\n\n    /**\n     * 设置聊天消息字体大小配置\n     *\n     * @param {Object<string, any>} fontSize 聊天消息字体大小配置\n     * @memberof UserConfig\n     */\n    set chatFontSize(fontSize) {\n        return this.set('ui.chat.fontSize', fontSize);\n    }\n\n    /**\n     * 获取应用关闭时的策略选项\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get appCloseOption() {\n        return this.get('ui.app.onClose');\n    }\n\n    /**\n     * 设置应用关闭时的策略选项\n     *\n     * @param {string} option 应用关闭时的策略选项\n     * @memberof UserConfig\n     */\n    set appCloseOption(option) {\n        return this.set('ui.app.onClose', option);\n    }\n\n    /**\n     * 获取是否当窗口关闭时从任务栏移除\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get removeFromTaskbarOnHide() {\n        return this.get('ui.app.removeFromTaskbarOnHide');\n    }\n\n    /**\n     * 设置是否当窗口关闭时从任务栏移除\n     *\n     * @param {boolean} flag 当窗口关闭时从任务栏移除\n     * @memberof UserConfig\n     */\n    set removeFromTaskbarOnHide(flag) {\n        return this.set('ui.app.removeFromTaskbarOnHide', flag);\n    }\n\n    /**\n     * 获取是否当应用窗口失去焦点时隐藏窗口\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get hideWindowOnBlur() {\n        return this.get('ui.app.hideWindowOnBlur');\n    }\n\n    /**\n     * 设置是否当应用窗口失去焦点时隐藏窗口\n     *\n     * @param {boolean} flag 当应用窗口失去焦点时隐藏窗口\n     * @memberof UserConfig\n     */\n    set hideWindowOnBlur(flag) {\n        return this.set('ui.app.hideWindowOnBlur', flag);\n    }\n\n    /**\n     * 获取联系人分组显示方式\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get contactsGroupByType() {\n        return this.get('ui.chat.contacts.groupBy');\n    }\n\n    /**\n     * 设置联系人分组显示方式\n     *\n     * @param {string} type 联系人分组显示方式\n     * @memberof UserConfig\n     */\n    set contactsGroupByType(type) {\n        return this.set('ui.chat.contacts.groupBy', type);\n    }\n\n    /**\n     * 获取联系人列表以角色分组时的排序设置\n     *\n     * @memberof UserConfig\n     * @type {Object}\n     */\n    get contactsOrderRole() {\n        return this.get('ui.chat.contacts.order.role', {});\n    }\n\n    /**\n     * 设置联系人列表以角色分组时的排序设置\n     *\n     * @param {Object} orders 联系人列表以角色分组时的排序设置\n     * @memberof UserConfig\n     */\n    set contactsOrderRole(orders) {\n        return this.set('ui.chat.contacts.order.role', orders);\n    }\n\n    /**\n     * 获取联系人自定义分组数据\n     *\n     * @memberof UserConfig\n     * @type {Object}\n     */\n    get contactsCategories() {\n        return this.get('ui.chat.contacts.categories', {});\n    }\n\n    /**\n     * 设置联系人自定义分组数据\n     *\n     * @param {Object} orders 联系人自定义分组数据\n     * @memberof UserConfig\n     */\n    set contactsCategories(orders) {\n        return this.set('ui.chat.contacts.categories', orders);\n    }\n\n    /**\n     * 获取联系人列表以部门分组时的排序设置\n     *\n     * @memberof UserConfig\n     * @type {Object}\n     */\n    get contactsOrderDept() {\n        return this.get('ui.chat.contacts.order.dept', {});\n    }\n\n    /**\n     * 设置联系人列表以部门分组时的排序设置\n     *\n     * @param {Object} orders 联系人列表以部门分组时的排序设置\n     * @memberof UserConfig\n     */\n    set contactsOrderDept(orders) {\n        return this.set('ui.chat.contacts.order.dept', orders);\n    }\n\n    /**\n     * 获取联系人默认分组名称\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get contactsDefaultCategoryName() {\n        return this.get('ui.chat.contacts.category.default');\n    }\n\n    /**\n     * 设置联系人默认分组名称\n     *\n     * @param {string} name 联系人默认分组名称\n     * @memberof UserConfig\n     */\n    set contactsDefaultCategoryName(name) {\n        return this.set('ui.chat.contacts.category.default', name);\n    }\n\n    /**\n     * 获取讨论组列表自定义分组配置\n     *\n     * @memberof UserConfig\n     * @type {Object}\n     */\n    get groupsCategories() {\n        return this.get('ui.chat.groups.categories', {});\n    }\n\n    /**\n     * 设置讨论组列表自定义分组配置\n     *\n     * @param {Object} orders 讨论组列表自定义分组配置\n     * @memberof UserConfig\n     */\n    set groupsCategories(orders) {\n        return this.set('ui.chat.groups.categories', orders);\n    }\n\n    /**\n     * 获取讨论组列表默认分组名称\n     *\n     * @memberof UserConfig\n     * @type {string}\n     */\n    get groupsDefaultCategoryName() {\n        return this.get('ui.chat.groups.category.default');\n    }\n\n    /**\n     * 设置讨论组列表默认分组名称\n     *\n     * @param {string} name 讨论组列表默认分组名称\n     * @memberof UserConfig\n     */\n    set groupsDefaultCategoryName(name) {\n        return this.set('ui.chat.groups.category.default', name);\n    }\n\n    /**\n     * 获取讨论组分组折叠展开状态\n     *\n     * @memberof UserConfig\n     * @type {Object}\n     */\n    get chatGroupStates() {\n        return this.get('ui.chat.list.group.states', {});\n    }\n\n    /**\n     * 设置讨论组分组折叠展开状态\n     *\n     * @param {Object} states 讨论组分组折叠展开状态\n     * @memberof UserConfig\n     */\n    set chatGroupStates(states) {\n        return this.set('ui.chat.list.group.states', states);\n    }\n\n    /**\n     * 获取是否监听剪切板图片并提示发送\n     *\n     * @memberof UserConfig\n     * @type {boolean}\n     */\n    get listenClipboardImage() {\n        return this.get('ui.chat.listenClipboardImage', true);\n    }\n\n    /**\n     * 设置是否监听剪切板图片并提示发送\n     *\n     * @param {boolean} flag 监听剪切板图片并提示发送\n     * @memberof UserConfig\n     */\n    set listenClipboardImage(flag) {\n        return this.set('ui.chat.listenClipboardImage', flag);\n    }\n\n    /**\n     * 设置讨论组分组折叠展开状态\n     *\n     * @param {string} listType 列表类型\n     * @param {string} groupType 分组类型\n     * @param {string} id 组编号\n     * @param {boolean} expanded 是否展开\n     * @memberof UserConfig\n     * @return {void}\n     */\n    setChatMenuGroupState(listType, groupType, id, expanded) {\n        const {chatGroupStates} = this;\n        const key = `${listType}.${groupType}.${id}`;\n        if (expanded) {\n            chatGroupStates[key] = expanded;\n        } else if (chatGroupStates[key]) {\n            delete chatGroupStates[key];\n        }\n        this.chatGroupStates = chatGroupStates;\n    }\n\n    /**\n     * 检查讨论组分组折叠展开状态\n     *\n     * @param {string} listType 列表类型\n     * @param {string} groupType 分组类型\n     * @param {string} id 组编号\n     * @return {boolean}\n     * @memberof UserConfig\n     */\n    getChatMenuGroupState(listType, groupType, id) {\n        const {chatGroupStates} = this;\n        return !!(chatGroupStates && chatGroupStates[`${listType}.${groupType}.${id}`]);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/profile/user-config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1011,
    "kind": "class",
    "name": "UserConfig",
    "memberof": "app/core/profile/user-config.js",
    "static": true,
    "longname": "app/core/profile/user-config.js~UserConfig",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/user-config.js",
    "importStyle": "UserConfig",
    "description": "用户配置管理类",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "UserConfig"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 1012,
    "kind": "member",
    "name": "DEFAULT",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "static": true,
    "longname": "app/core/profile/user-config.js~UserConfig.DEFAULT",
    "access": "public",
    "description": "用户默认配置",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1013,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#constructor",
    "access": "public",
    "description": "创建一个用户配置管理类实例`",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "用户配置数据对象"
      }
    ]
  },
  {
    "__docId__": 1014,
    "kind": "member",
    "name": "$",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#$",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1015,
    "kind": "member",
    "name": "changeAction",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#changeAction",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1016,
    "kind": "member",
    "name": "lastChange",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#lastChange",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1017,
    "kind": "method",
    "name": "plain",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#plain",
    "access": "public",
    "description": "获取配置数据存储对象",
    "lineNumber": 59,
    "return": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1018,
    "kind": "method",
    "name": "exportCloud",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#exportCloud",
    "access": "public",
    "description": "导出用于上传到服务器的数据存储对象",
    "lineNumber": 69,
    "return": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1019,
    "kind": "member",
    "name": "hash",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#hash",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1020,
    "kind": "method",
    "name": "makeChange",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#makeChange",
    "access": "public",
    "description": "将用户配置标记已变更",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "change",
        "description": "要变更的数据"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "reset",
        "description": "是否标记为全部重置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1022,
    "kind": "member",
    "name": "needSave",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#needSave",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1023,
    "kind": "method",
    "name": "makeSave",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#makeSave",
    "access": "public",
    "description": "将用户配置数据标记为需要存储",
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1025,
    "kind": "method",
    "name": "get",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#get",
    "access": "public",
    "description": "获取指定名称的用户配置项值",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "配置名称"
      },
      {
        "nullable": true,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "默认值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1026,
    "kind": "method",
    "name": "set",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#set",
    "access": "public",
    "description": "设置配置项的值",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "keyOrObj",
        "description": "如果为字符串则为要设置的配置项名称，如果为对象则将对象键值对作为要设置的配置项"
      },
      {
        "nullable": true,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "当 {keyOrObj} 为字符串时要设置的配置项的值"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "reset",
        "description": "是否标记为全部重置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1027,
    "kind": "method",
    "name": "getForExtension",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#getForExtension",
    "access": "public",
    "description": "获取扩展的配置项",
    "lineNumber": 159,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "extensionName",
        "description": "扩展名称"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "配置项名称，如果不给定名称，则以对象的形式返回所有配置项"
      },
      {
        "nullable": true,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "配置项的默认值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1028,
    "kind": "method",
    "name": "setForExtension",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#setForExtension",
    "access": "public",
    "description": "设置扩展的配置项值",
    "lineNumber": 177,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "extensionName",
        "description": "扩展名称"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keyOrObj",
        "description": "如果为字符串则为要设置的配置项名称，如果为对象则将对象键值对作为要设置的配置"
      },
      {
        "nullable": true,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "当 {keyOrObj} 为字符串时要设置的配置项的值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1029,
    "kind": "method",
    "name": "reset",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#reset",
    "access": "public",
    "description": "将用户所有配置项重置为给定的配置",
    "lineNumber": 194,
    "params": [
      {
        "nullable": true,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "newConfig",
        "description": "要重置的配置项对象，如果留空，则将配置项重置为默认"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1031,
    "kind": "get",
    "name": "lastChangeTime",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#lastChangeTime",
    "access": "public",
    "description": "获取上次配置发生变更的时间戳",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1032,
    "kind": "get",
    "name": "autoReconnect",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#autoReconnect",
    "access": "public",
    "description": "获取是否自动重连",
    "lineNumber": 216,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1033,
    "kind": "set",
    "name": "autoReconnect",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#autoReconnect",
    "access": "public",
    "description": "设置是否自动重连",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "是否自动重连"
      }
    ]
  },
  {
    "__docId__": 1034,
    "kind": "get",
    "name": "avatarPosition",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#avatarPosition",
    "access": "public",
    "description": "获取用户头像在导航上显示的位置",
    "lineNumber": 236,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1035,
    "kind": "set",
    "name": "avatarPosition",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#avatarPosition",
    "access": "public",
    "description": "设置用户头像在导航上显示的位置",
    "lineNumber": 246,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "用户头像在导航上显示的位置"
      }
    ]
  },
  {
    "__docId__": 1036,
    "kind": "get",
    "name": "lastSaveTime",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#lastSaveTime",
    "access": "public",
    "description": "获取上次保存配置的时间戳",
    "lineNumber": 256,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1037,
    "kind": "set",
    "name": "lastSaveTime",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#lastSaveTime",
    "access": "public",
    "description": "设置上次保存配置的时间戳",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "上次保存配置的时间戳"
      }
    ]
  },
  {
    "__docId__": 1038,
    "kind": "get",
    "name": "showMessageTip",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#showMessageTip",
    "access": "public",
    "description": "获取是否显示发送消息提示面板",
    "lineNumber": 279,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1039,
    "kind": "set",
    "name": "showMessageTip",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#showMessageTip",
    "access": "public",
    "description": "设置是否显示发送消息提示面板",
    "lineNumber": 289,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "是否显示发送消息提示面板"
      }
    ]
  },
  {
    "__docId__": 1040,
    "kind": "get",
    "name": "sendHDEmoticon",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#sendHDEmoticon",
    "access": "public",
    "description": "获取是否直接发送高清表情",
    "lineNumber": 299,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1041,
    "kind": "set",
    "name": "sendHDEmoticon",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#sendHDEmoticon",
    "access": "public",
    "description": "设置是否直接发送高清表情",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "是否直接发送高清表情"
      }
    ]
  },
  {
    "__docId__": 1042,
    "kind": "get",
    "name": "sendMarkdown",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#sendMarkdown",
    "access": "public",
    "description": "获取是否将消息以 Markdown 格式发送",
    "lineNumber": 319,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1043,
    "kind": "set",
    "name": "sendMarkdown",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#sendMarkdown",
    "access": "public",
    "description": "设置是否将消息以 Markdown 格式发送",
    "lineNumber": 329,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "将消息以 Markdown 格式发送"
      }
    ]
  },
  {
    "__docId__": 1044,
    "kind": "method",
    "name": "isChatSidebarHidden",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#isChatSidebarHidden",
    "access": "public",
    "description": "判断给定当聊天是否隐藏聊天侧边栏",
    "lineNumber": 341,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cgid",
        "description": "聊天 GID"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "defaultValue",
        "description": "默认值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1045,
    "kind": "method",
    "name": "setChatSidebarHidden",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#setChatSidebarHidden",
    "access": "public",
    "description": "设置给定当聊天是否隐藏聊天侧边栏",
    "lineNumber": 353,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cgid",
        "description": "聊天 GID"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "是否隐藏"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1046,
    "kind": "get",
    "name": "showMeOnMenu",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#showMeOnMenu",
    "access": "public",
    "description": "获取是否在联系人列表上显示自己",
    "lineNumber": 363,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1047,
    "kind": "set",
    "name": "showMeOnMenu",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#showMeOnMenu",
    "access": "public",
    "description": "设置是否在联系人列表上显示自己",
    "lineNumber": 373,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "在联系人列表上显示自己"
      }
    ]
  },
  {
    "__docId__": 1048,
    "kind": "get",
    "name": "enableSearchInEmojionePicker",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#enableSearchInEmojionePicker",
    "access": "public",
    "description": "获取是否在表情选择面板上启用搜索功能",
    "lineNumber": 383,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1049,
    "kind": "set",
    "name": "enableSearchInEmojionePicker",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#enableSearchInEmojionePicker",
    "access": "public",
    "description": "设置是否在表情选择面板上启用搜索功能",
    "lineNumber": 393,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "在表情选择面板上启用搜索功能"
      }
    ]
  },
  {
    "__docId__": 1050,
    "kind": "get",
    "name": "enableWindowNotification",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#enableWindowNotification",
    "access": "public",
    "description": "获取是否启用桌面通知",
    "lineNumber": 403,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1051,
    "kind": "set",
    "name": "enableWindowNotification",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#enableWindowNotification",
    "access": "public",
    "description": "设置是否启用桌面通知",
    "lineNumber": 413,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "启用桌面通知"
      }
    ]
  },
  {
    "__docId__": 1052,
    "kind": "get",
    "name": "safeWindowNotification",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#safeWindowNotification",
    "access": "public",
    "description": "获取是否不在弹窗上显示消息具体内容",
    "lineNumber": 423,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1053,
    "kind": "set",
    "name": "safeWindowNotification",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#safeWindowNotification",
    "access": "public",
    "description": "设置是否不在弹窗上显示消息具体内容",
    "lineNumber": 433,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "不在弹窗上显示消息具体内容"
      }
    ]
  },
  {
    "__docId__": 1054,
    "kind": "get",
    "name": "windowNotificationCondition",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#windowNotificationCondition",
    "access": "public",
    "description": "获取桌面通知显示的时机",
    "lineNumber": 443,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1055,
    "kind": "set",
    "name": "windowNotificationCondition",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#windowNotificationCondition",
    "access": "public",
    "description": "设置桌面通知显示的时机",
    "lineNumber": 453,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "桌面通知显示的时机"
      }
    ]
  },
  {
    "__docId__": 1056,
    "kind": "get",
    "name": "enableSound",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#enableSound",
    "access": "public",
    "description": "获取是否启用声音通知",
    "lineNumber": 463,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1057,
    "kind": "set",
    "name": "enableSound",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#enableSound",
    "access": "public",
    "description": "设置是否启用声音通知",
    "lineNumber": 473,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "启用声音通知"
      }
    ]
  },
  {
    "__docId__": 1058,
    "kind": "get",
    "name": "playSoundCondition",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#playSoundCondition",
    "access": "public",
    "description": "获取声音通知显示的时机",
    "lineNumber": 483,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1059,
    "kind": "set",
    "name": "playSoundCondition",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#playSoundCondition",
    "access": "public",
    "description": "设置声音通知显示的时机",
    "lineNumber": 493,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "声音通知显示的时机"
      }
    ]
  },
  {
    "__docId__": 1060,
    "kind": "get",
    "name": "flashTrayIcon",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#flashTrayIcon",
    "access": "public",
    "description": "获取是否闪烁通知栏图标",
    "lineNumber": 503,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1061,
    "kind": "set",
    "name": "flashTrayIcon",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#flashTrayIcon",
    "access": "public",
    "description": "设置是否闪烁通知栏图标",
    "lineNumber": 513,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "闪烁通知栏图标"
      }
    ]
  },
  {
    "__docId__": 1062,
    "kind": "get",
    "name": "flashTrayIconCondition",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#flashTrayIconCondition",
    "access": "public",
    "description": "获取闪烁通知栏图标通知显示的时机",
    "lineNumber": 523,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1063,
    "kind": "set",
    "name": "flashTrayIconCondition",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#flashTrayIconCondition",
    "access": "public",
    "description": "设置闪烁通知栏图标通知显示的时机",
    "lineNumber": 533,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "闪烁通知栏图标通知显示的时机"
      }
    ]
  },
  {
    "__docId__": 1064,
    "kind": "get",
    "name": "muteOnUserIsBusy",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#muteOnUserIsBusy",
    "access": "public",
    "description": "获取是否禁用通知当用户状态设置为忙碌时",
    "lineNumber": 543,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1065,
    "kind": "set",
    "name": "muteOnUserIsBusy",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#muteOnUserIsBusy",
    "access": "public",
    "description": "设置是否禁用通知当用户状态设置为忙碌时",
    "lineNumber": 553,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "禁用通知当用户状态设置为忙碌时"
      }
    ]
  },
  {
    "__docId__": 1066,
    "kind": "get",
    "name": "captureScreenHotkey",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#captureScreenHotkey",
    "access": "public",
    "description": "获取截屏快捷键",
    "lineNumber": 563,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1067,
    "kind": "set",
    "name": "captureScreenHotkey",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#captureScreenHotkey",
    "access": "public",
    "description": "设置截屏快捷键",
    "lineNumber": 573,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "shortcut",
        "description": "截屏快捷键"
      }
    ]
  },
  {
    "__docId__": 1068,
    "kind": "get",
    "name": "focusWindowHotkey",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#focusWindowHotkey",
    "access": "public",
    "description": "获取激活主窗口快捷键",
    "lineNumber": 583,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1069,
    "kind": "set",
    "name": "focusWindowHotkey",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#focusWindowHotkey",
    "access": "public",
    "description": "设置激活主窗口快捷键",
    "lineNumber": 593,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "shortcut",
        "description": "激活主窗口快捷键"
      }
    ]
  },
  {
    "__docId__": 1070,
    "kind": "get",
    "name": "globalHotkeys",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#globalHotkeys",
    "access": "public",
    "description": "获取全局快捷键配置",
    "lineNumber": 604,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1071,
    "kind": "get",
    "name": "sendMessageHotkey",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#sendMessageHotkey",
    "access": "public",
    "description": "获取发送消息快捷键",
    "lineNumber": 617,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1072,
    "kind": "set",
    "name": "sendMessageHotkey",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#sendMessageHotkey",
    "access": "public",
    "description": "设置发送消息快捷键",
    "lineNumber": 627,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "shortcut",
        "description": "发送消息快捷键"
      }
    ]
  },
  {
    "__docId__": 1073,
    "kind": "get",
    "name": "chatFontSize",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#chatFontSize",
    "access": "public",
    "description": "获取聊天消息字体大小配置",
    "lineNumber": 637,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1074,
    "kind": "set",
    "name": "chatFontSize",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#chatFontSize",
    "access": "public",
    "description": "设置聊天消息字体大小配置",
    "lineNumber": 647,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "fontSize",
        "description": "聊天消息字体大小配置"
      }
    ]
  },
  {
    "__docId__": 1075,
    "kind": "get",
    "name": "appCloseOption",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#appCloseOption",
    "access": "public",
    "description": "获取应用关闭时的策略选项",
    "lineNumber": 657,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1076,
    "kind": "set",
    "name": "appCloseOption",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#appCloseOption",
    "access": "public",
    "description": "设置应用关闭时的策略选项",
    "lineNumber": 667,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "option",
        "description": "应用关闭时的策略选项"
      }
    ]
  },
  {
    "__docId__": 1077,
    "kind": "get",
    "name": "removeFromTaskbarOnHide",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#removeFromTaskbarOnHide",
    "access": "public",
    "description": "获取是否当窗口关闭时从任务栏移除",
    "lineNumber": 677,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1078,
    "kind": "set",
    "name": "removeFromTaskbarOnHide",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#removeFromTaskbarOnHide",
    "access": "public",
    "description": "设置是否当窗口关闭时从任务栏移除",
    "lineNumber": 687,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "当窗口关闭时从任务栏移除"
      }
    ]
  },
  {
    "__docId__": 1079,
    "kind": "get",
    "name": "hideWindowOnBlur",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#hideWindowOnBlur",
    "access": "public",
    "description": "获取是否当应用窗口失去焦点时隐藏窗口",
    "lineNumber": 697,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1080,
    "kind": "set",
    "name": "hideWindowOnBlur",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#hideWindowOnBlur",
    "access": "public",
    "description": "设置是否当应用窗口失去焦点时隐藏窗口",
    "lineNumber": 707,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "当应用窗口失去焦点时隐藏窗口"
      }
    ]
  },
  {
    "__docId__": 1081,
    "kind": "get",
    "name": "contactsGroupByType",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#contactsGroupByType",
    "access": "public",
    "description": "获取联系人分组显示方式",
    "lineNumber": 717,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1082,
    "kind": "set",
    "name": "contactsGroupByType",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#contactsGroupByType",
    "access": "public",
    "description": "设置联系人分组显示方式",
    "lineNumber": 727,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "联系人分组显示方式"
      }
    ]
  },
  {
    "__docId__": 1083,
    "kind": "get",
    "name": "contactsOrderRole",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#contactsOrderRole",
    "access": "public",
    "description": "获取联系人列表以角色分组时的排序设置",
    "lineNumber": 737,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1084,
    "kind": "set",
    "name": "contactsOrderRole",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#contactsOrderRole",
    "access": "public",
    "description": "设置联系人列表以角色分组时的排序设置",
    "lineNumber": 747,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "orders",
        "description": "联系人列表以角色分组时的排序设置"
      }
    ]
  },
  {
    "__docId__": 1085,
    "kind": "get",
    "name": "contactsCategories",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#contactsCategories",
    "access": "public",
    "description": "获取联系人自定义分组数据",
    "lineNumber": 757,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1086,
    "kind": "set",
    "name": "contactsCategories",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#contactsCategories",
    "access": "public",
    "description": "设置联系人自定义分组数据",
    "lineNumber": 767,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "orders",
        "description": "联系人自定义分组数据"
      }
    ]
  },
  {
    "__docId__": 1087,
    "kind": "get",
    "name": "contactsOrderDept",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#contactsOrderDept",
    "access": "public",
    "description": "获取联系人列表以部门分组时的排序设置",
    "lineNumber": 777,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1088,
    "kind": "set",
    "name": "contactsOrderDept",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#contactsOrderDept",
    "access": "public",
    "description": "设置联系人列表以部门分组时的排序设置",
    "lineNumber": 787,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "orders",
        "description": "联系人列表以部门分组时的排序设置"
      }
    ]
  },
  {
    "__docId__": 1089,
    "kind": "get",
    "name": "contactsDefaultCategoryName",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#contactsDefaultCategoryName",
    "access": "public",
    "description": "获取联系人默认分组名称",
    "lineNumber": 797,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1090,
    "kind": "set",
    "name": "contactsDefaultCategoryName",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#contactsDefaultCategoryName",
    "access": "public",
    "description": "设置联系人默认分组名称",
    "lineNumber": 807,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "联系人默认分组名称"
      }
    ]
  },
  {
    "__docId__": 1091,
    "kind": "get",
    "name": "groupsCategories",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#groupsCategories",
    "access": "public",
    "description": "获取讨论组列表自定义分组配置",
    "lineNumber": 817,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1092,
    "kind": "set",
    "name": "groupsCategories",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#groupsCategories",
    "access": "public",
    "description": "设置讨论组列表自定义分组配置",
    "lineNumber": 827,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "orders",
        "description": "讨论组列表自定义分组配置"
      }
    ]
  },
  {
    "__docId__": 1093,
    "kind": "get",
    "name": "groupsDefaultCategoryName",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#groupsDefaultCategoryName",
    "access": "public",
    "description": "获取讨论组列表默认分组名称",
    "lineNumber": 837,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1094,
    "kind": "set",
    "name": "groupsDefaultCategoryName",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#groupsDefaultCategoryName",
    "access": "public",
    "description": "设置讨论组列表默认分组名称",
    "lineNumber": 847,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "讨论组列表默认分组名称"
      }
    ]
  },
  {
    "__docId__": 1095,
    "kind": "get",
    "name": "chatGroupStates",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#chatGroupStates",
    "access": "public",
    "description": "获取讨论组分组折叠展开状态",
    "lineNumber": 857,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1096,
    "kind": "set",
    "name": "chatGroupStates",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#chatGroupStates",
    "access": "public",
    "description": "设置讨论组分组折叠展开状态",
    "lineNumber": 867,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "states",
        "description": "讨论组分组折叠展开状态"
      }
    ]
  },
  {
    "__docId__": 1097,
    "kind": "get",
    "name": "listenClipboardImage",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#listenClipboardImage",
    "access": "public",
    "description": "获取是否监听剪切板图片并提示发送",
    "lineNumber": 877,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1098,
    "kind": "set",
    "name": "listenClipboardImage",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#listenClipboardImage",
    "access": "public",
    "description": "设置是否监听剪切板图片并提示发送",
    "lineNumber": 887,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "监听剪切板图片并提示发送"
      }
    ]
  },
  {
    "__docId__": 1099,
    "kind": "method",
    "name": "setChatMenuGroupState",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#setChatMenuGroupState",
    "access": "public",
    "description": "设置讨论组分组折叠展开状态",
    "lineNumber": 901,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "listType",
        "description": "列表类型"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "groupType",
        "description": "分组类型"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "组编号"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "expanded",
        "description": "是否展开"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1101,
    "kind": "method",
    "name": "getChatMenuGroupState",
    "memberof": "app/core/profile/user-config.js~UserConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user-config.js~UserConfig#getChatMenuGroupState",
    "access": "public",
    "description": "检查讨论组分组折叠展开状态",
    "lineNumber": 921,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "listType",
        "description": "列表类型"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "groupType",
        "description": "分组类型"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "组编号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1102,
    "kind": "file",
    "name": "app/core/profile/user-default-config.js",
    "content": "/**\n * 默认用户个人配置\n * @type {Object<string, any>}\n * @property {number} [version=3] 配置版本\n * @property {number} [lastSaveTime=0] 上次配置保存的时间戳\n * @property {boolean} [ui.animate.enable=false] 是否在界面上启用动画效果\n * @property {string} [ui.navbar.width=50] 导航条宽度\n * @property {string} [ui.navbar.active='chat'] 导航上默认激活的项目\n * @property {string} [ui.navbar.avatarPosition='bottom'] 导航上个人头像显示的位置，可选值：\"bottom\"，\"top\"\n * @property {boolean} [ui.navbar.onlyShowNoticeCountOnRecents=true] 是否仅仅在最近聊天上显示未读消息数目红点\n * @property {string} [ui.chat.menu.with=200] 聊天列表默认宽度\n * @property {boolean} [ui.chat.menu.showMe=true] 是否在联系人聊天列表上显示自己\n * @property {string} [ui.chat.sendbox.height=125] 发送框默认高度\n * @property {string} [ui.chat.sidebar.width=300] 聊天侧边栏默认宽度\n * @property {Object<string, any>} [ui.chat.fontSize={name: 13,time: '0.9230769231em',lineHeight: 1.53846153846,size: 13}] 聊天消息字体大小\n * @property {boolean} [ui.chat.sendHDEmoticon=true] 是否发送高清表情\n * @property {boolean} [ui.chat.showMessageTip=true] 是否在发送框上显示消息发送提示面板\n * @property {boolean} [ui.chat.sendMarkdown=false] 是否使用 Markdown 发送消息\n * @property {boolean} [ui.chat.enableSearchInEmojionePicker=false] 是否在表情选择面板上显示搜索框\n * @property {string} [ui.chat.contacts.groupBy='normal'] 联系人分组方式，可用值包括 'normal', 'role', 'dept'\n * @property {Object<string, any>} [ui.chat.contacts.order.role={}] 当联系人列表使用角色分组显示时分组排序配置\n * @property {Object<string, any>} [ui.chat.contacts.categories={}] 当联系人列表使用自定义分组显示时分组排序配置\n * @property {Object<string, any>} [ui.chat.contacts.order.dept={}] 当联系人列表使用部门分组显示时分组排序配置\n * @property {Object<string, any>} [ui.chat.menu.group.states={}] 聊天分组折叠展开状态配置\n * @property {string} [ui.chat.contacts.category.default=''] 联系人默认分组名称\n * @property {string} [ui.chat.groups.category.default=''] 讨论组默认分组名称\n * @property {Object<string, any>} [ui.chat.groups.categories={}] 讨论组列表分组配置\n * @property {boolean} [ui.chat.listenClipboardImage=false] 是否监听剪切板上的图片并提示直接发送\n * @property {boolean} [ui.notify.enableSound=true] 是否启用声音通知\n * @property {string} [ui.notify.playSoundCondition='onWindowHide'] 播放声音通知的时机，\"onWindowHide\" 或 \"onWindowBlur\"\n * @property {boolean} [ui.notify.muteOnUserIsBusy=true] 是否在用户忙碌时禁用通知\n * @property {boolean} [ui.notify.flashTrayIcon=true] 是否启用通知栏图标闪烁通知\n * @property {string} [ui.notify.flashTrayIconCondition='onWindowHide'] 通知栏图标闪烁通知时机，\"onWindowHide\" 或 \"onWindowBlur\"\n * @property {boolean} [ui.notify.enableWindowNotification=false] 是否启用系统桌面通知（弹窗）\n * @property {string} [ui.notify.windowNotificationCondition='onWindowBlur'] 系统桌面通知时机\n * @property {boolean} [ui.notify.safeWindowNotification=false] 是否不在桌面通知上显示消息具体内容\n * @property {boolean} [ui.app.hideWindowOnBlur=false] 是否隐藏主窗口当窗口失去焦点时\n * @property {boolean} [ui.app.removeFromTaskbarOnHide=true] 当窗口隐藏时是否从任务栏移除\n * @property {string} [ui.app.onClose='ask'] 点击关闭窗口按钮时的策略 \"ask\"、\"close\" 或 \"minimize\"\n * @property {string} [local.ui.app.lastFileSavePath=''] 用户上次手动保存文件的位置\n * @property {string} [shortcut.captureScreen='Ctrl+Alt+Z'] 截屏全局快捷键\n * @property {string} [shortcut.focusWindow='Ctrl+Alt+X'] 激活窗口全局快捷键\n * @property {string} [shortcut.sendMessage='Enter'] 发送消息快捷键\n * @property {string} [user.autoReconnect=true] 是否断线自动重连\n */\nexport default {\n    version: 3,\n    lastSaveTime: 0,\n    'ui.animate.enable': false,\n    'ui.navbar.width': 50,\n    'ui.navbar.active': 'chat',\n    'ui.navbar.avatarPosition': 'bottom',\n    'ui.navbar.onlyShowNoticeCountOnRecents': true,\n    'ui.chat.menu.with': 200,\n    'ui.chat.menu.showMe': true,\n    'ui.chat.sendbox.height': 125,\n    'ui.chat.sidebar.width': 300,\n    'ui.chat.fontSize': {\n        name: 13,\n        time: '0.9230769231em',\n        lineHeight: 1.53846153846,\n        size: 13\n    },\n    'ui.chat.sendHDEmoticon': true,\n    'ui.chat.showMessageTip': true,\n    'ui.chat.sendMarkdown': false,\n    'ui.chat.enableSearchInEmojionePicker': false,\n    'ui.chat.contacts.groupBy': 'normal', // 'normal', 'role', 'dept'\n    'ui.chat.contacts.order.role': {},\n    'ui.chat.contacts.categories': {},\n    'ui.chat.contacts.order.dept': {},\n    'ui.chat.menu.group.states': {},\n    'ui.chat.contacts.category.default': '',\n    'ui.chat.groups.category.default': '',\n    'ui.chat.groups.categories': {},\n    'ui.chat.listenClipboardImage': false,\n    'ui.notify.enableSound': true,\n    'ui.notify.playSoundCondition': 'onWindowHide', // or \"onWindowBlur\", \"\n    'ui.notify.muteOnUserIsBusy': true,\n    'ui.notify.flashTrayIcon': true,\n    'ui.notify.flashTrayIconCondition': '', // \"onWindowBlur\", \",\n    'ui.notify.enableWindowNotification': false,\n    'ui.notify.windowNotificationCondition': 'onWindowBlur',\n    'ui.notify.safeWindowNotification': false,\n    'ui.app.hideWindowOnBlur': false,\n    'ui.app.removeFromTaskbarOnHide': true,\n    'ui.app.onClose': 'ask', // or \"close\", \"minimize\"\n    'local.ui.app.lastFileSavePath': '',\n    'shortcut.captureScreen': 'Ctrl+Alt+Z',\n    'shortcut.focusWindow': 'Ctrl+Alt+X',\n    'shortcut.sendMessage': 'Enter',\n    'user.autoReconnect': true\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/profile/user-default-config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1103,
    "kind": "file",
    "name": "app/core/profile/user.js",
    "content": "// eslint-disable-next-line import/no-unresolved\nimport Platfrom from 'Platform';\nimport Md5 from 'md5';\nimport Member from '../models/member';\nimport UserConfig from './user-config';\nimport DelayAction from '../../utils/delay-action';\nimport {isSameDay, isToday} from '../../utils/date-helper';\nimport events from '../events';\n\n/**\n * 用户密码 MD5 存储前缀\n * @type {string}\n * @private\n */\nconst PASSWORD_WITH_MD5_FLAG = '%%%PWD_FLAG%%% ';\n\n/**\n * 事件表\n * @type {Object<string, string>}\n * @private\n */\nconst EVENT = {\n    config_change: 'user.config.change',\n    status_change: 'user.status.change',\n    reconnect: 'user.reconnect',\n};\n\n/**\n * 检查用户密码字符串是否包含 MD5 存储前缀\n * @param {string} password 用户密码\n * @return {boolean} 如果为 `true` 表示给定的密码字符串包含 MD5 存储前缀，否则不是\n */\nexport const isPasswordWithMD5Flag = password => password && password.startsWith(PASSWORD_WITH_MD5_FLAG);\n\n/**\n * 用户类\n *\n * @class User\n * @extends {Member}\n */\nexport default class User extends Member {\n    /**\n     * 事件表\n     * @type {Object<string, string>}\n     * @static\n     * @memberof User\n     */\n    static EVENT = EVENT;\n\n    /**\n     * 数据库存储实体属性结构管理器\n     *\n     * @type {EntitySchema}\n     * @static\n     * @memberof User\n     */\n    static SCHEMA = Member.SCHEMA.extend({\n        lastLoginTime: {type: 'timestamp'},\n        config: {type: 'object', defaultValue: {}},\n        password: {type: 'string'},\n        token: {type: 'string'},\n        cipherIV: {type: 'string'},\n        server: {type: 'string'},\n        serverVersion: {type: 'string'},\n        uploadFileSize: {type: 'int'},\n        autoLogin: {type: 'boolean', default: false},\n        rememberPassword: {type: 'boolean', default: true},\n        signed: {\n            type: 'timestamp',\n            setter: (time, obj) => {\n                const lastSignedTime = obj.signed;\n                obj._isFirstSignedToday = time && isToday(time) && (!lastSignedTime || !isSameDay(time, lastSignedTime));\n                return time;\n            }\n        },\n    });\n\n    /**\n     * 用户状态管理器\n     *\n     * @type {Status}\n     * @static\n     * @memberof User\n     */\n    static STATUS = Member.STATUS;\n\n    /**\n     * 创建一个用户类实例\n     * @param {Object<string, any>} data 属性对象\n     * @memberof User\n     */\n    constructor(data) {\n        super(data);\n\n        /**\n         * 用户保存延迟操作管理器\n         * @type {DelayAction}\n         * @private\n         */\n        this.saveUserAction = new DelayAction(() => {\n            Platfrom.config.saveUser(this);\n        });\n\n        /**\n         * 事件机制是否可用\n         * @private\n         * @type {boolean}\n         */\n        this.eventsEnable = false;\n\n        this._status.onChange = (status, oldStatus) => {\n            if (this.isEventsEnable) {\n                events.emit(EVENT.status_change, status, oldStatus, this);\n            }\n\n            clearTimeout(this.statusChangeCallTimer);\n            if (this._status.is(Member.STATUS.logined)) {\n                this.$set('lastLoginTime', new Date().getTime());\n                this.statusChangeCallTimer = setTimeout(() => {\n                    this.status = Member.STATUS.online;\n                }, 1000);\n            }\n        };\n    }\n\n\n    /**\n     * 获取用户类数据库存储实体属性结构管理器\n     *\n     * @readonly\n     * @memberof User\n     * @type {EntitySchema}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    get schema() {\n        return User.SCHEMA;\n    }\n\n    /**\n     * 判定当前用户事件机制是否可用\n     *\n     * @readonly\n     * @memberof User\n     * @type {boolean}\n     */\n    get isEventsEnable() {\n        return this.eventsEnable;\n    }\n\n    /**\n     * 将当前用户事件机制标记为可用\n     *\n     * @memberof User\n     * @return {void}\n     */\n    enableEvents() {\n        this.eventsEnable = true;\n    }\n\n    /**\n     * 销毁当前用户实例，并将当前用户事件机制标记为不可用\n     *\n     * @memberof User\n     * @return {void}\n     */\n    destroy() {\n        this.eventsEnable = false;\n    }\n\n    /**\n     * 获取当前用户实例存储数据对象\n     *\n     * @return {Object<string, any>} 数据对象\n     * @memberof User\n     */\n    plain() {\n        return Object.assign({}, this.$, {\n            config: this.config.plain()\n        });\n    }\n\n    /**\n     * 将用户保存到本地存储\n     *\n     * @memberof User\n     * @return {void}\n     */\n    save() {\n        this.saveUserAction.do();\n    }\n\n    /**\n     * 判定用户是否在今天第一次进行登录\n     *\n     * @readonly\n     * @memberof User\n     * @type {boolean}\n     */\n    get isFirstSignedToday() {\n        return !!this._isFirstSignedToday;\n    }\n\n    /**\n     * 判定用户是否成功登录过\n     *\n     * @memberof User\n     * @type {boolean}\n     */\n    get signed() {\n        return this.$get('signed');\n    }\n\n    /**\n     * 设置用户上次登录时间\n     *\n     * @memberof User\n     * @param {number} time 上次登录时间戳\n     */\n    set signed(time) {\n        return this.$set('signed', time);\n    }\n\n    /**\n     * 获取用户个人配置数据\n     *\n     * @readonly\n     * @memberof User\n     * @return {Object<string, any>} 配置数据对象\n     */\n    get config() {\n        if (!this._config) {\n            this._config = new UserConfig(this.$get('config'));\n            this._config.onChange = (change, config) => {\n                // Save user to config file\n                this.save();\n\n                // Emit user config change event\n                if (this.isEventsEnable) {\n                    events.emit(EVENT.config_change, change, config, this);\n                }\n            };\n        }\n        return this._config;\n    }\n\n    /**\n     * 判断用户状态是否处于离线状态\n     *\n     * @readonly\n     * @memberof User\n     * @return {boolean} 如果为 `true` 则表示用户处于离线状态，否则为为通过验证或在线状态\n     */\n    get isDisconnect() {\n        return this._status.is(Member.STATUS.disconnect);\n    }\n\n    /**\n     * 判断用户状态是否处于未通过验证状态\n     *\n     * @readonly\n     * @memberof User\n     * @return {boolean} 如果为 `true` 则表示用户处于未通过验证状态\n     */\n    get isUnverified() {\n        return this.status <= Member.STATUS.unverified;\n    }\n\n    /**\n     * 判断用户状态是否处于已通过验证状态\n     *\n     * @readonly\n     * @memberof User\n     * @return {boolean}\n     */\n    get isVertified() {\n        return this.status >= Member.STATUS.disconnect;\n    }\n\n    /**\n     * 判断用户状态是否处于已登录状态\n     *\n     * @readonly\n     * @memberof User\n     * @return {boolean}\n     */\n    get isLogined() {\n        return this.status >= Member.STATUS.logined;\n    }\n\n    /**\n     * 将用户登录状态设置为离线状态\n     *\n     * @memberof User\n     * @return {void}\n     */\n    markDisconnect() {\n        this.status = Member.STATUS.disconnect;\n    }\n\n    /**\n     * 将用户登录状态设置为未通过验证状态\n     *\n     * @memberof User\n     * @return {void}\n     */\n    markUnverified() {\n        this.status = Member.STATUS.unverified;\n    }\n\n    /**\n     * 判断用户状态是否处于正在登录中状态\n     *\n     * @readonly\n     * @memberof User\n     * @return {boolean}\n     */\n    get isLogging() {\n        return this._isLogging;\n    }\n\n    /**\n     * 标记用户正在开始登录操作\n     *\n     * @memberof User\n     * @return {void}\n     */\n    beginLogin() {\n        this._isLogging = true;\n    }\n\n    /**\n     * 标记用户已结束登录操作\n     *\n     * @param {boolean} result 是否登录成功\n     * @memberof User\n     * @return {void}\n     */\n    endLogin(result) {\n        this._isLogging = false;\n        if (result) {\n            this.status = Member.STATUS.logined;\n        } else if (!this.isDisconnect) {\n            this.status = Member.STATUS.unverified;\n        }\n    }\n\n    /**\n     * 获取用户可用的 Session ID\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get sessionID() {\n        return this._sessionID;\n    }\n\n    /**\n     * 设置用户可用的 Session ID\n     *\n     * @param {string} sessionID Session ID\n     * @memberof User\n     */\n    set sessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n\n    /**\n     * 设置用户登录的服务器地址\n     *\n     * @memberof User\n     * @param {string} server 服务器地址\n     */\n    set server(server) {\n        if (server) {\n            if (!server.startsWith('https://') && !server.startsWith('http://')) {\n                server = `https://${server}`;\n            }\n            const url = new URL(server);\n            if (!url.port) {\n                url.port = 11443;\n            }\n            this.$set('server', url.toString());\n            this._server = url;\n        }\n    }\n\n    /**\n     * 获取用户登录的服务器地址（以 URL 实例形式）\n     *\n     * @type {URL}\n     * @memberof User\n     */\n    get server() {\n        if (!this._server) {\n            this.server = this.$get('server');\n        }\n        return this._server;\n    }\n\n    /**\n     * 获取用户登录的服务器地址（以字符串形式）\n     *\n     * @readonly\n     * @memberof User\n     * @type {string}\n     */\n    get serverUrl() {\n        const {server} = this;\n        return server && server.toString();\n    }\n\n    /**\n     * 获取然之服务器地址\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get ranzhiUrl() {\n        if (this._ranzhiUrl === undefined) {\n            this._ranzhiUrl = this.$get('ranzhiUrl') || `http://${this.server.hostname}`;\n        }\n        return this._ranzhiUrl;\n    }\n\n    /**\n     * 设置然之服务器地址\n     *\n     * @memberof User\n     * @param {string} url 然之服务器地址\n     */\n    set ranzhiUrl(url) {\n        this._ranzhiUrl = url;\n    }\n\n    /**\n     * 获取 XXD 服务器端口号\n     *\n     * @readonly\n     * @memberof User\n     * @type {string}\n     */\n    get webServerPort() {\n        const {server} = this;\n        return server ? server.port : '';\n    }\n\n    /**\n     * 获取要登录的 XXD 服务器名称\n     *\n     * @readonly\n     * @memberof User\n     * @type {string}\n     */\n    get serverName() {\n        const {server} = this;\n        if (server) {\n            // eslint-disable-next-line no-nested-ternary\n            return server.username ? server.username : (server.pathname ? server.pathname.substr(1) : '');\n        }\n        return '';\n    }\n\n    /**\n     * 获取请求 XXD 服务器信息 URL 地址\n     *\n     * @readonly\n     * @memberof User\n     * @type {string}\n     */\n    get webServerInfoUrl() {\n        const {server} = this;\n        return server ? `${server.origin}/serverInfo` : '';\n    }\n\n    /**\n     * 获取 Socket 服务器端口\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get socketPort() {\n        return this._socketPort || '';\n    }\n\n    /**\n     * 设置 Socket 服务器端口\n     *\n     * @memberof User\n     */\n    set socketPort(port) {\n        this._socketPort = port;\n    }\n\n    /**\n     * 获取 Socket 服务连接地址\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get socketUrl() {\n        if (this._socketUrl) {\n            return this._socketUrl;\n        }\n        const {serverUrl} = this;\n        if (serverUrl) {\n            const url = new URL(serverUrl);\n            url.protocol = (this.isVersionSupport('wss') && url.protocol === 'https:') ? 'wss:' : 'ws:';\n            url.pathname = '/ws';\n            url.port = this.socketPort;\n            return url.toString();\n        }\n        return '';\n    }\n\n    /**\n     * 设置Socket 服务器连接地址\n     *\n     * @param {string} url Socket 服务器连接地址\n     * @memberof User\n     */\n    set socketUrl(url) {\n        this._socketUrl = url;\n    }\n\n    /**\n     * 获取服务器版本\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get serverVersion() {\n        return this._serverVersion;\n    }\n\n    /**\n     * 设置服务器版本号\n     *\n     * @param {string} version 服务器版本号\n     * @memberof User\n     */\n    set serverVersion(version) {\n        version = version.toLowerCase();\n        if (version[0] === 'v') {\n            version = version.substr(1);\n        }\n        this._serverVersion = version;\n    }\n\n    /**\n     * 获取服务器地址根路径\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get serverUrlRoot() {\n        const {serverUrl} = this;\n        let urlRoot = '';\n        if (serverUrl) {\n            const url = new URL(serverUrl);\n            url.hash = '';\n            url.search = '';\n            url.pathname = '';\n            urlRoot = url.toString();\n        }\n        if (urlRoot && !urlRoot.endsWith('/')) {\n            urlRoot += '/';\n        }\n        return urlRoot;\n    }\n\n    /**\n     * 拼接 http 服务器请求地址\n     * @param {string} [path=''] 请求路径\n     * @memberof User\n     * @return {void}\n     */\n    makeServerUrl(path = '') {\n        if (path && path.startsWith('/')) {\n            path = path.substr(1);\n        }\n        return this.serverUrlRoot + path;\n    }\n\n    /**\n     * 获取上传文件请求地址\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get uploadUrl() {\n        return this.makeServerUrl('upload');\n    }\n\n    /**\n     * 获取用户标识字符串\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get identify() {\n        const {server} = this;\n        if (!server) {\n            return '';\n        }\n        return User.createIdentify(server, this.account);\n    }\n\n    /**\n     * 获取 Socket 加密 Token 字符串\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get token() {\n        return this.$get('token');\n    }\n\n    /**\n     * 设置 Socket 加密 Token 字符串\n     *\n     * @param {string} token  Socket 加密 Token 字符串\n     * @memberof User\n     */\n    set token(token) {\n        this.$set('token', token);\n    }\n\n    /**\n     * 获取 Socket 服务 AES 加密向量\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get cipherIV() {\n        return this.token.substr(0, 16);\n        // let cipherIV = this.$get('cipherIV');\n        // if(!cipherIV) {\n        //     cipherIV = this.token.substr(0, 16);\n        // }\n        // return cipherIV;\n    }\n\n    /**\n     * 设置 Socket 服务 AES 加密向量\n     *\n     * @memberof User\n     * @param {string} cipherIV Socket 服务 AES 加密向量\n     */\n    set cipherIV(cipherIV) {\n        this.$set('cipherIV', cipherIV);\n    }\n\n    /**\n     * 获取最大允许文件上传大小\n     *\n     * @memberof User\n     * @type {number}\n     */\n    get uploadFileSize() {\n        return this.$get('uploadFileSize');\n    }\n\n    /**\n     * 设置最大允许文件上传大小\n     *\n     * @param {number} uploadFileSize 最大允许文件上传大小\n     * @memberof User\n     */\n    set uploadFileSize(uploadFileSize) {\n        this.$set('uploadFileSize', uploadFileSize);\n    }\n\n    /**\n     * 获取上次登录的时间戳\n     *\n     * @memberof User\n     * @type {number}\n     * @readonly\n     */\n    get lastLoginTime() {\n        return this.$get('lastLoginTime');\n    }\n\n    /**\n     * 获取是否已设置为自动登录\n     *\n     * @memberof User\n     * @type {boolean}\n     */\n    get autoLogin() {\n        return this.$get('autoLogin');\n    }\n\n    /**\n     * 设置是否已设置为自动登录\n     *\n     * @param {boolean} autoLogin 是否已设置为自动登录\n     * @memberof User\n     */\n    set autoLogin(autoLogin) {\n        this.$set('autoLogin', autoLogin);\n    }\n\n    /**\n     * 获取是否设置为记住密码\n     *\n     * @memberof User\n     * @type {boolean}\n     */\n    get rememberPassword() {\n        return this.$get('rememberPassword');\n    }\n\n    /**\n     * 设置是否设置为记住密码\n     *\n     * @param {boolean} rememberPassword 是否设置为记住密码\n     * @memberof User\n     */\n    set rememberPassword(rememberPassword) {\n        this.$set('rememberPassword', rememberPassword);\n    }\n\n    /**\n     * 获取是否开启 LDAP 登录模式\n     *\n     * @memberof User\n     * @type {boolean}\n     */\n    get ldap() {\n        return this.$get('ldap');\n    }\n\n    /**\n     * 设置是否开启 LDAP 登录模式\n     *\n     * @param {boolean} ldap 是否开启 LDAP 登录模式\n     * @memberof User\n     */\n    set ldap(ldap) {\n        this.$set('ldap', ldap);\n    }\n\n    /**\n     * 获取用户头像图片地址\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get avatar() {\n        let avatar = this._avatar;\n        if (!avatar) {\n            avatar = this.$get('avatar');\n            if (avatar) {\n                if (!avatar.startsWith('https://') && !avatar.startsWith('http://')) {\n                    avatar = this.serverUrlRoot + avatar;\n                }\n            }\n        }\n        return avatar;\n    }\n\n    /**\n     * 设置用户头像图片地址\n     *\n     * @param {string} newAvatar 用户头像图片地址\n     * @memberof User\n     */\n    set avatar(newAvatar) {\n        this._avatar = null;\n        this.$set('avatar', newAvatar);\n    }\n\n    /**\n     * 获取是否从没有成功登录过\n     *\n     * @memberof User\n     * @type {boolean}\n     * @readonly\n     */\n    get isNeverLogined() {\n        return !this.lastLoginTime;\n    }\n\n    /**\n     * 获取用户密码\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get password() {\n        return this.$get('password');\n    }\n\n    /**\n     * 获取包含 MD5 前缀的密码\n     *\n     * @memberof User\n     * @type {string}\n     */\n    get passwordMD5WithFlag() {\n        let {password} = this;\n        if (password && !isPasswordWithMD5Flag(password)) {\n            password = PASSWORD_WITH_MD5_FLAG + password;\n        }\n        return password;\n    }\n\n    /**\n     * 获取用于登录验证的密码\n     *\n     * @memberof User\n     * @type {string}\n     * @readonly\n     */\n    get passwordForServer() {\n        return this.ldap ? this.password : this.passwordMD5;\n    }\n\n    /**\n     * 获取 MD5 算法加密后的密码\n     *\n     * @memberof User\n     * @type {string}\n     * @readonly\n     */\n    get passwordMD5() {\n        let {password} = this;\n        if (isPasswordWithMD5Flag(password)) {\n            password = password.substr(PASSWORD_WITH_MD5_FLAG.length);\n        } else {\n            password = Md5(password);\n        }\n        return password;\n    }\n\n    /**\n     * 设置用户密码，支持设置原始密码或者已添加 MD5 前缀的加密后的密码\n     *\n     * @param {string} newPassword 用户密码，支持设置原始密码或者已添加 MD5 前缀的加密后的密码\n     * @memberof User\n     */\n    set password(newPassword) {\n        if (!this.ldap && newPassword && !isPasswordWithMD5Flag(newPassword)) {\n            newPassword = PASSWORD_WITH_MD5_FLAG + Md5(newPassword);\n        }\n        this.$set('password', newPassword);\n    }\n\n    /**\n     * 检查当前版本是否支持特定功能\n     *\n     * @param {string} name 功能名称\n     * @return {boolean}\n     * @memberof User\n     */\n    isVersionSupport(name) {\n        return this._versionSupport && this._versionSupport[name];\n    }\n\n    /**\n     * 设置当前服务器版本支持的功能表\n     *\n     * @param {Object<string, boolean>} flags 支持的功能表\n     * @memberof User\n     */\n    setVersionSupport(flags) {\n        if (flags) {\n            if (!this._versionSupport) {\n                this._versionSupport = {};\n            }\n            Object.assign(this._versionSupport, flags);\n        }\n    }\n\n    /**\n     * 创建一个用户实例\n     *\n     * @static\n     * @param {Object|User} user 用户数据对象\n     * @return {User}\n     * @memberof User\n     */\n    static create(user) {\n        if (user instanceof User) {\n            return user;\n        }\n        return new User(user);\n    }\n\n    /**\n     * 创建用户唯一识别标识字符串\n     *\n     * @static\n     * @param {string} server 用户登录的服务器地址\n     * @param {string} account 用户账号\n     * @return {string}\n     * @memberof User\n     */\n    static createIdentify(server, account) {\n        if (!(server instanceof URL)) {\n            if (!server.startsWith('https://') && !server.startsWith('http://')) {\n                server = `https://${server}`;\n            }\n            server = new URL(server);\n        }\n        if (!server.port) {\n            server.port = 11443;\n        }\n        let {pathname} = server;\n        if (pathname && pathname.length) {\n            if (pathname === '/') {\n                pathname = '';\n            }\n            pathname = pathname.replace(/\\//g, '_');\n        }\n        const hostname = server.host.replace(':', '__');\n        return `${account}@${hostname}${pathname}`;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/profile/user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1104,
    "kind": "variable",
    "name": "PASSWORD_WITH_MD5_FLAG",
    "memberof": "app/core/profile/user.js",
    "static": true,
    "longname": "app/core/profile/user.js~PASSWORD_WITH_MD5_FLAG",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/profile/user.js",
    "importStyle": null,
    "description": "用户密码 MD5 存储前缀",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1105,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/profile/user.js",
    "static": true,
    "longname": "app/core/profile/user.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/profile/user.js",
    "importStyle": null,
    "description": "事件表",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1106,
    "kind": "function",
    "name": "isPasswordWithMD5Flag",
    "memberof": "app/core/profile/user.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/user.js~isPasswordWithMD5Flag",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/user.js",
    "importStyle": "{isPasswordWithMD5Flag}",
    "description": "检查用户密码字符串是否包含 MD5 存储前缀",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "用户密码"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 表示给定的密码字符串包含 MD5 存储前缀，否则不是"
    }
  },
  {
    "__docId__": 1107,
    "kind": "class",
    "name": "User",
    "memberof": "app/core/profile/user.js",
    "static": true,
    "longname": "app/core/profile/user.js~User",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/profile/user.js",
    "importStyle": "User",
    "description": "用户类",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "User"
      }
    ],
    "interface": false,
    "extends": [
      "Member"
    ]
  },
  {
    "__docId__": 1108,
    "kind": "member",
    "name": "EVENT",
    "memberof": "app/core/profile/user.js~User",
    "static": true,
    "longname": "app/core/profile/user.js~User.EVENT",
    "access": "public",
    "description": "事件表",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1109,
    "kind": "member",
    "name": "SCHEMA",
    "memberof": "app/core/profile/user.js~User",
    "static": true,
    "longname": "app/core/profile/user.js~User.SCHEMA",
    "access": "public",
    "description": "数据库存储实体属性结构管理器",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1110,
    "kind": "member",
    "name": "STATUS",
    "memberof": "app/core/profile/user.js~User",
    "static": true,
    "longname": "app/core/profile/user.js~User.STATUS",
    "access": "public",
    "description": "用户状态管理器",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1111,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#constructor",
    "access": "public",
    "description": "创建一个用户类实例",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "属性对象"
      }
    ]
  },
  {
    "__docId__": 1112,
    "kind": "member",
    "name": "saveUserAction",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#saveUserAction",
    "access": "private",
    "description": "用户保存延迟操作管理器",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "DelayAction"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1113,
    "kind": "member",
    "name": "eventsEnable",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#eventsEnable",
    "access": "private",
    "description": "事件机制是否可用",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1114,
    "kind": "member",
    "name": "statusChangeCallTimer",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#statusChangeCallTimer",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1115,
    "kind": "member",
    "name": "status",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#status",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1116,
    "kind": "get",
    "name": "schema",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#schema",
    "access": "public",
    "description": "获取用户类数据库存储实体属性结构管理器",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "EntitySchema"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1117,
    "kind": "get",
    "name": "isEventsEnable",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#isEventsEnable",
    "access": "public",
    "description": "判定当前用户事件机制是否可用",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1118,
    "kind": "method",
    "name": "enableEvents",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#enableEvents",
    "access": "public",
    "description": "将当前用户事件机制标记为可用",
    "lineNumber": 156,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1120,
    "kind": "method",
    "name": "destroy",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#destroy",
    "access": "public",
    "description": "销毁当前用户实例，并将当前用户事件机制标记为不可用",
    "lineNumber": 166,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1122,
    "kind": "method",
    "name": "plain",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#plain",
    "access": "public",
    "description": "获取当前用户实例存储数据对象",
    "lineNumber": 176,
    "return": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": "数据对象"
    },
    "params": []
  },
  {
    "__docId__": 1123,
    "kind": "method",
    "name": "save",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#save",
    "access": "public",
    "description": "将用户保存到本地存储",
    "lineNumber": 188,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1124,
    "kind": "get",
    "name": "isFirstSignedToday",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#isFirstSignedToday",
    "access": "public",
    "description": "判定用户是否在今天第一次进行登录",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1125,
    "kind": "get",
    "name": "signed",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#signed",
    "access": "public",
    "description": "判定用户是否成功登录过",
    "lineNumber": 209,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1126,
    "kind": "set",
    "name": "signed",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#signed",
    "access": "public",
    "description": "设置用户上次登录时间",
    "lineNumber": 219,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "上次登录时间戳"
      }
    ]
  },
  {
    "__docId__": 1127,
    "kind": "get",
    "name": "config",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#config",
    "access": "public",
    "description": "获取用户个人配置数据",
    "lineNumber": 230,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": "配置数据对象"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1128,
    "kind": "member",
    "name": "_config",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#_config",
    "access": "private",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1129,
    "kind": "get",
    "name": "isDisconnect",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#isDisconnect",
    "access": "public",
    "description": "判断用户状态是否处于离线状态",
    "lineNumber": 253,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则表示用户处于离线状态，否则为为通过验证或在线状态"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1130,
    "kind": "get",
    "name": "isUnverified",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#isUnverified",
    "access": "public",
    "description": "判断用户状态是否处于未通过验证状态",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则表示用户处于未通过验证状态"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1131,
    "kind": "get",
    "name": "isVertified",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#isVertified",
    "access": "public",
    "description": "判断用户状态是否处于已通过验证状态",
    "lineNumber": 275,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1132,
    "kind": "get",
    "name": "isLogined",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#isLogined",
    "access": "public",
    "description": "判断用户状态是否处于已登录状态",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1133,
    "kind": "method",
    "name": "markDisconnect",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#markDisconnect",
    "access": "public",
    "description": "将用户登录状态设置为离线状态",
    "lineNumber": 296,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1135,
    "kind": "method",
    "name": "markUnverified",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#markUnverified",
    "access": "public",
    "description": "将用户登录状态设置为未通过验证状态",
    "lineNumber": 306,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1137,
    "kind": "get",
    "name": "isLogging",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#isLogging",
    "access": "public",
    "description": "判断用户状态是否处于正在登录中状态",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1138,
    "kind": "method",
    "name": "beginLogin",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#beginLogin",
    "access": "public",
    "description": "标记用户正在开始登录操作",
    "lineNumber": 327,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1139,
    "kind": "member",
    "name": "_isLogging",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#_isLogging",
    "access": "private",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1140,
    "kind": "method",
    "name": "endLogin",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#endLogin",
    "access": "public",
    "description": "标记用户已结束登录操作",
    "lineNumber": 338,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "是否登录成功"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1144,
    "kind": "get",
    "name": "sessionID",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#sessionID",
    "access": "public",
    "description": "获取用户可用的 Session ID",
    "lineNumber": 353,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1145,
    "kind": "set",
    "name": "sessionID",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#sessionID",
    "access": "public",
    "description": "设置用户可用的 Session ID",
    "lineNumber": 363,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sessionID",
        "description": "Session ID"
      }
    ]
  },
  {
    "__docId__": 1146,
    "kind": "member",
    "name": "_sessionID",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#_sessionID",
    "access": "private",
    "description": null,
    "lineNumber": 364,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1147,
    "kind": "set",
    "name": "server",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#server",
    "access": "public",
    "description": "设置用户登录的服务器地址",
    "lineNumber": 373,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "服务器地址"
      }
    ]
  },
  {
    "__docId__": 1148,
    "kind": "member",
    "name": "_server",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#_server",
    "access": "private",
    "description": null,
    "lineNumber": 383,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1149,
    "kind": "get",
    "name": "server",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#server",
    "access": "public",
    "description": "获取用户登录的服务器地址（以 URL 实例形式）",
    "lineNumber": 393,
    "type": {
      "nullable": null,
      "types": [
        "URL"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1151,
    "kind": "get",
    "name": "serverUrl",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#serverUrl",
    "access": "public",
    "description": "获取用户登录的服务器地址（以字符串形式）",
    "lineNumber": 407,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1152,
    "kind": "get",
    "name": "ranzhiUrl",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#ranzhiUrl",
    "access": "public",
    "description": "获取然之服务器地址",
    "lineNumber": 418,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1153,
    "kind": "member",
    "name": "_ranzhiUrl",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#_ranzhiUrl",
    "access": "private",
    "description": null,
    "lineNumber": 420,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1154,
    "kind": "set",
    "name": "ranzhiUrl",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#ranzhiUrl",
    "access": "public",
    "description": "设置然之服务器地址",
    "lineNumber": 431,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "然之服务器地址"
      }
    ]
  },
  {
    "__docId__": 1156,
    "kind": "get",
    "name": "webServerPort",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#webServerPort",
    "access": "public",
    "description": "获取 XXD 服务器端口号",
    "lineNumber": 442,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1157,
    "kind": "get",
    "name": "serverName",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#serverName",
    "access": "public",
    "description": "获取要登录的 XXD 服务器名称",
    "lineNumber": 454,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1158,
    "kind": "get",
    "name": "webServerInfoUrl",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#webServerInfoUrl",
    "access": "public",
    "description": "获取请求 XXD 服务器信息 URL 地址",
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1159,
    "kind": "get",
    "name": "socketPort",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#socketPort",
    "access": "public",
    "description": "获取 Socket 服务器端口",
    "lineNumber": 481,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1160,
    "kind": "set",
    "name": "socketPort",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#socketPort",
    "access": "public",
    "description": "设置 Socket 服务器端口",
    "lineNumber": 490
  },
  {
    "__docId__": 1161,
    "kind": "member",
    "name": "_socketPort",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#_socketPort",
    "access": "private",
    "description": null,
    "lineNumber": 491,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1162,
    "kind": "get",
    "name": "socketUrl",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#socketUrl",
    "access": "public",
    "description": "获取 Socket 服务连接地址",
    "lineNumber": 500,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1163,
    "kind": "set",
    "name": "socketUrl",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#socketUrl",
    "access": "public",
    "description": "设置Socket 服务器连接地址",
    "lineNumber": 521,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Socket 服务器连接地址"
      }
    ]
  },
  {
    "__docId__": 1164,
    "kind": "member",
    "name": "_socketUrl",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#_socketUrl",
    "access": "private",
    "description": null,
    "lineNumber": 522,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1165,
    "kind": "get",
    "name": "serverVersion",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#serverVersion",
    "access": "public",
    "description": "获取服务器版本",
    "lineNumber": 531,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1166,
    "kind": "set",
    "name": "serverVersion",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#serverVersion",
    "access": "public",
    "description": "设置服务器版本号",
    "lineNumber": 541,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "服务器版本号"
      }
    ]
  },
  {
    "__docId__": 1167,
    "kind": "member",
    "name": "_serverVersion",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#_serverVersion",
    "access": "private",
    "description": null,
    "lineNumber": 546,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1168,
    "kind": "get",
    "name": "serverUrlRoot",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#serverUrlRoot",
    "access": "public",
    "description": "获取服务器地址根路径",
    "lineNumber": 555,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1169,
    "kind": "method",
    "name": "makeServerUrl",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#makeServerUrl",
    "access": "public",
    "description": "拼接 http 服务器请求地址",
    "lineNumber": 577,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "path",
        "description": "请求路径"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1170,
    "kind": "get",
    "name": "uploadUrl",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#uploadUrl",
    "access": "public",
    "description": "获取上传文件请求地址",
    "lineNumber": 590,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1171,
    "kind": "get",
    "name": "identify",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#identify",
    "access": "public",
    "description": "获取用户标识字符串",
    "lineNumber": 600,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1172,
    "kind": "get",
    "name": "token",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#token",
    "access": "public",
    "description": "获取 Socket 加密 Token 字符串",
    "lineNumber": 614,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1173,
    "kind": "set",
    "name": "token",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#token",
    "access": "public",
    "description": "设置 Socket 加密 Token 字符串",
    "lineNumber": 624,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "Socket 加密 Token 字符串"
      }
    ]
  },
  {
    "__docId__": 1174,
    "kind": "get",
    "name": "cipherIV",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#cipherIV",
    "access": "public",
    "description": "获取 Socket 服务 AES 加密向量",
    "lineNumber": 634,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1175,
    "kind": "set",
    "name": "cipherIV",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#cipherIV",
    "access": "public",
    "description": "设置 Socket 服务 AES 加密向量",
    "lineNumber": 649,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cipherIV",
        "description": "Socket 服务 AES 加密向量"
      }
    ]
  },
  {
    "__docId__": 1176,
    "kind": "get",
    "name": "uploadFileSize",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#uploadFileSize",
    "access": "public",
    "description": "获取最大允许文件上传大小",
    "lineNumber": 659,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1177,
    "kind": "set",
    "name": "uploadFileSize",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#uploadFileSize",
    "access": "public",
    "description": "设置最大允许文件上传大小",
    "lineNumber": 669,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "uploadFileSize",
        "description": "最大允许文件上传大小"
      }
    ]
  },
  {
    "__docId__": 1178,
    "kind": "get",
    "name": "lastLoginTime",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#lastLoginTime",
    "access": "public",
    "description": "获取上次登录的时间戳",
    "lineNumber": 680,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1179,
    "kind": "get",
    "name": "autoLogin",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#autoLogin",
    "access": "public",
    "description": "获取是否已设置为自动登录",
    "lineNumber": 690,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1180,
    "kind": "set",
    "name": "autoLogin",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#autoLogin",
    "access": "public",
    "description": "设置是否已设置为自动登录",
    "lineNumber": 700,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "autoLogin",
        "description": "是否已设置为自动登录"
      }
    ]
  },
  {
    "__docId__": 1181,
    "kind": "get",
    "name": "rememberPassword",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#rememberPassword",
    "access": "public",
    "description": "获取是否设置为记住密码",
    "lineNumber": 710,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1182,
    "kind": "set",
    "name": "rememberPassword",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#rememberPassword",
    "access": "public",
    "description": "设置是否设置为记住密码",
    "lineNumber": 720,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "rememberPassword",
        "description": "是否设置为记住密码"
      }
    ]
  },
  {
    "__docId__": 1183,
    "kind": "get",
    "name": "ldap",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#ldap",
    "access": "public",
    "description": "获取是否开启 LDAP 登录模式",
    "lineNumber": 730,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1184,
    "kind": "set",
    "name": "ldap",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#ldap",
    "access": "public",
    "description": "设置是否开启 LDAP 登录模式",
    "lineNumber": 740,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "ldap",
        "description": "是否开启 LDAP 登录模式"
      }
    ]
  },
  {
    "__docId__": 1185,
    "kind": "get",
    "name": "avatar",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#avatar",
    "access": "public",
    "description": "获取用户头像图片地址",
    "lineNumber": 750,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1186,
    "kind": "set",
    "name": "avatar",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#avatar",
    "access": "public",
    "description": "设置用户头像图片地址",
    "lineNumber": 769,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newAvatar",
        "description": "用户头像图片地址"
      }
    ]
  },
  {
    "__docId__": 1187,
    "kind": "member",
    "name": "_avatar",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#_avatar",
    "access": "private",
    "description": null,
    "lineNumber": 770,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1188,
    "kind": "get",
    "name": "isNeverLogined",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#isNeverLogined",
    "access": "public",
    "description": "获取是否从没有成功登录过",
    "lineNumber": 781,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1189,
    "kind": "get",
    "name": "password",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#password",
    "access": "public",
    "description": "获取用户密码",
    "lineNumber": 791,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1190,
    "kind": "get",
    "name": "passwordMD5WithFlag",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#passwordMD5WithFlag",
    "access": "public",
    "description": "获取包含 MD5 前缀的密码",
    "lineNumber": 801,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1191,
    "kind": "get",
    "name": "passwordForServer",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#passwordForServer",
    "access": "public",
    "description": "获取用于登录验证的密码",
    "lineNumber": 816,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1192,
    "kind": "get",
    "name": "passwordMD5",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#passwordMD5",
    "access": "public",
    "description": "获取 MD5 算法加密后的密码",
    "lineNumber": 827,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1193,
    "kind": "set",
    "name": "password",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#password",
    "access": "public",
    "description": "设置用户密码，支持设置原始密码或者已添加 MD5 前缀的加密后的密码",
    "lineNumber": 843,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newPassword",
        "description": "用户密码，支持设置原始密码或者已添加 MD5 前缀的加密后的密码"
      }
    ]
  },
  {
    "__docId__": 1194,
    "kind": "method",
    "name": "isVersionSupport",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#isVersionSupport",
    "access": "public",
    "description": "检查当前版本是否支持特定功能",
    "lineNumber": 857,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "功能名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1195,
    "kind": "method",
    "name": "setVersionSupport",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/core/profile/user.js~User#setVersionSupport",
    "access": "public",
    "description": "设置当前服务器版本支持的功能表",
    "lineNumber": 867,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, boolean>"
        ],
        "spread": false,
        "optional": false,
        "name": "flags",
        "description": "支持的功能表"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1196,
    "kind": "member",
    "name": "_versionSupport",
    "memberof": "app/core/profile/user.js~User",
    "static": false,
    "longname": "app/core/profile/user.js~User#_versionSupport",
    "access": "private",
    "description": null,
    "lineNumber": 870,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1197,
    "kind": "method",
    "name": "create",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/user.js~User.create",
    "access": "public",
    "description": "创建一个用户实例",
    "lineNumber": 884,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "用户数据对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "User"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1198,
    "kind": "method",
    "name": "createIdentify",
    "memberof": "app/core/profile/user.js~User",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/profile/user.js~User.createIdentify",
    "access": "public",
    "description": "创建用户唯一识别标识字符串",
    "lineNumber": 900,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "用户登录的服务器地址"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "account",
        "description": "用户账号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1199,
    "kind": "file",
    "name": "app/core/runtime.js",
    "content": "import ExtsRuntime from 'ExtsRuntime';\nimport events from './events';\n\n/**\n * 运行时事件表\n * @type {Object<string, string>}\n * @private\n */\nconst EVENT = {\n    ready: 'runtime.ready',\n};\n\n/**\n * 应用是否准备就绪（所有扩展加载完毕）\n * @type {boolean}\n * @private\n */\nlet isReadyed = false;\n\n/**\n * 绑定应用准备就绪事件\n * @param {Function} listener 事件回调函数\n * @return {boolean|Symbol} 如果应用已经准备就绪会立即执行回调函数并返回 `false`，否则会返回一个事件 ID\n */\nexport const ready = (listener) => {\n    if (isReadyed) {\n        listener();\n        return false;\n    }\n    return events.once(EVENT.ready, listener);\n};\n\n/**\n * 触发界面准备就绪事件\n * @private\n * @return {void}\n */\nconst sayReady = () => {\n    isReadyed = true;\n    events.emit(EVENT.ready);\n};\n\nif (ExtsRuntime) {\n    setTimeout(() => {\n        ExtsRuntime.loadModules();\n        sayReady();\n    }, 0);\n    global.ExtsRuntime = ExtsRuntime;\n} else {\n    sayReady();\n}\n\nexport default {ready};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/runtime.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1200,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/runtime.js",
    "static": true,
    "longname": "app/core/runtime.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/runtime.js",
    "importStyle": null,
    "description": "运行时事件表",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1201,
    "kind": "variable",
    "name": "isReadyed",
    "memberof": "app/core/runtime.js",
    "static": true,
    "longname": "app/core/runtime.js~isReadyed",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/runtime.js",
    "importStyle": null,
    "description": "应用是否准备就绪（所有扩展加载完毕）",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1202,
    "kind": "function",
    "name": "ready",
    "memberof": "app/core/runtime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/runtime.js~ready",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/runtime.js",
    "importStyle": "{ready}",
    "description": "绑定应用准备就绪事件",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "Symbol"
      ],
      "spread": false,
      "description": "如果应用已经准备就绪会立即执行回调函数并返回 `false`，否则会返回一个事件 ID"
    }
  },
  {
    "__docId__": 1203,
    "kind": "function",
    "name": "sayReady",
    "memberof": "app/core/runtime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/runtime.js~sayReady",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/runtime.js",
    "importStyle": null,
    "description": "触发界面准备就绪事件",
    "lineNumber": 38,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1204,
    "kind": "file",
    "name": "app/core/server/index.js",
    "content": "// eslint-disable-next-line import/no-unresolved\nimport Platform from 'Platform';\nimport compareVersions from 'compare-versions';\nimport pkg from '../../package.json';\nimport Socket from '../network/socket';\nimport serverHandlers from './server-handlers';\nimport {\n    onSwapUser, createUser, setCurrentUser, getCurrentUser,\n} from '../profile';\nimport {requestServerInfo} from '../network/api';\nimport notice from '../notice';\nimport events from '../events';\nimport limitTimePromise from '../../utils/limit-time-promise';\n\n/**\n * 判定服务器请求超时时间，单位毫秒\n * @type {number}\n * @private\n */\nconst TIMEOUT = 20 * 1000;\n\n/**\n * 当前 Socket 管理类实例\n * @type {Socket}\n */\nexport const socket = new Socket();\n\n// 设置默认通话处理函数\nsocket.setHandler(serverHandlers);\n\n/**\n * 事件表\n * @type {Object<string, string>}\n * @private\n */\nconst EVENT = {\n    login: 'server.user.login',\n    loginout: 'server.user.loginout',\n};\n\n// 监听切换用户事件，在切换用时关闭以连接的 Socket 连接\nonSwapUser(user => {\n    socket.close();\n});\n\n/**\n * 最小支持的服务器版本\n * @type {number}\n * @private\n */\nconst MIN_SUPPORT_VERSION = '1.2.0';\n\n/**\n * 检查服务器版本是否受支持\n * @param {string} serverVersion 服务器版本\n * @return {boolean}\n */\nconst checkServerVersion = serverVersion => {\n    if (!serverVersion) {\n        return 'SERVER_VERSION_UNKNOWN';\n    }\n    if (serverVersion[0].toLowerCase() === 'v') {\n        serverVersion = serverVersion.substr(1);\n    }\n    if (compareVersions(serverVersion, MIN_SUPPORT_VERSION) < 0) {\n        if (!DEBUG) {\n            const error = new Error('SERVER_VERSION_NOT_SUPPORT');\n            error.formats = [pkg.version, serverVersion, MIN_SUPPORT_VERSION];\n            return error;\n        }\n        console.warn(`The server version '${serverVersion}' not support, require the min version '${MIN_SUPPORT_VERSION}'.`);\n    }\n    if (Platform.type === 'browser' && compareVersions(serverVersion, '1.2.0') < 0) {\n        const error = new Error('SERVER_VERSION_NOT_SUPPORT_IN_BROWSER');\n        error.formats = [pkg.version, serverVersion, '1.2.0'];\n        return error;\n    }\n    return false;\n};\n\n/**\n * 检查用户登录的服务器版本支持情况\n * @param {User} user 当前用户\n * @return {Object<string, boolean>} 返回一个功能支持情况表\n */\nconst checkVersionSupport = user => {\n    const {serverVersion, uploadFileSize} = user;\n    const compareVersionValue = compareVersions(serverVersion, '1.3.0');\n    const compareVersionValue2 = compareVersions(serverVersion, '1.4.0');\n    const compareVersionValue3 = compareVersions(serverVersion, '1.6.0');\n    return {\n        messageOrder: compareVersionValue >= 0,\n        userGetListWithId: compareVersionValue >= 0,\n        wss: compareVersionValue > 0,\n        fileServer: uploadFileSize !== 0,\n        todo: compareVersionValue2 > 0,\n        socketPing: compareVersionValue2 > 0,\n        remoteExtension: compareVersions(serverVersion, '1.5.0') > 0,\n        muteChat: compareVersionValue3 > 0,\n        hideChat: compareVersionValue3 > 0,\n        changePwdWithMD5: compareVersions(serverVersion, '2.0.0') > 0,\n    };\n};\n\n/**\n * 登录到服务器\n * @param {Object|User} user 要登录的用户\n * @return {Promise<User, Error>}\n */\nexport const login = (user) => {\n    user = setCurrentUser(createUser(user));\n\n    if (DEBUG) {\n        console.collapse('Server.login', 'tealBg', user.identify, 'tealPale');\n        console.log('user', user);\n        console.groupEnd();\n    }\n    if (!user) {\n        const error = new Error('User is not set.');\n        error.code = 'USER_INFO_REQUIRED';\n        return Promise.reject(error);\n    }\n    if (user.isLogging) {\n        const error = new Error('Last login request not finish, please wait a minute.');\n        error.code = 'SERVER_IS_BUSY';\n        return Promise.reject(error);\n    }\n\n    // 标记后台登录开始\n    user.beginLogin();\n\n    return limitTimePromise(requestServerInfo(user), TIMEOUT).then(user => {\n        const versionError = checkServerVersion(user.serverVersion);\n        if (versionError) {\n            return Promise.reject(versionError);\n        }\n        user.setVersionSupport(checkVersionSupport(user));\n        return socket.login(user, {\n            onClose: (_, code, reason, unexpected) => {\n                events.emit(EVENT.loginout, user, code, reason, unexpected);\n            }\n        });\n    }).then(() => {\n        user.endLogin(true);\n        events.emit(EVENT.login, user);\n        user.save();\n        return Promise.resolve(user);\n    }).catch(error => {\n        user.endLogin(false);\n        events.emit(EVENT.login, user, error);\n        return Promise.reject(error);\n    });\n};\n\n/**\n * 向服务器请求变更用户状态名称\n * @param {string} status 用户状态名称\n * @return {Promise}\n */\nexport const changeUserStatus = status => {\n    return socket.changeUserStatus(status);\n};\n\n/**\n * 绑定用户登录事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onUserLogin = listener => events.on(EVENT.login, listener);\n\n/**\n * 绑定用户退出登录事件\n * @param {Funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onUserLoginout = listener => events.on(EVENT.loginout, listener);\n\n/**\n * 向服务器主动请求获取系统用户数据\n * @param {?string} idList 要求请求的用户 ID，多个用户 ID 使用英文逗号拼接，如果不指定 ID 则获取系统所有用户数据\n * @return {Promise}\n */\nexport const fetchUserList = (idList) => {\n    return socket.sendAndListen({\n        method: 'usergetlist',\n        params: [idList || '']\n    });\n};\n\n/**\n * 临时用户 ID 表\n * @type {string[]}\n * @private\n */\nlet tempUserIdList = null;\n\n/**\n * 上次获取临时用户延迟任务标识\n * @type {number}\n * @private\n */\nlet lastGetTempUserCall = null;\n\n/**\n * 从服务器请求获取临时用户数据\n * @param {number} id 临时用户 ID\n * @return {void}\n */\nexport const tryGetTempUserInfo = id => {\n    if (!lastGetTempUserCall) {\n        clearTimeout(lastGetTempUserCall);\n    }\n    if (tempUserIdList) {\n        tempUserIdList.push(id);\n    } else {\n        tempUserIdList = [id];\n    }\n    lastGetTempUserCall = setTimeout(() => {\n        if (tempUserIdList.length) {\n            fetchUserList(tempUserIdList);\n            tempUserIdList = [];\n        }\n        lastGetTempUserCall = null;\n    }, 1000);\n};\n\n/**\n * 退出登录\n * @return {void}\n */\nexport const logout = () => {\n    notice.update();\n    socket.logout();\n    const currentUser = getCurrentUser();\n    if (currentUser) {\n        currentUser.markUnverified();\n    }\n};\n\nexport default {\n    login,\n    logout,\n    socket,\n    onUserLogin,\n    onUserLoginout,\n    changeUserStatus,\n    fetchUserList,\n    tryGetTempUserInfo\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/server/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1205,
    "kind": "variable",
    "name": "TIMEOUT",
    "memberof": "app/core/server/index.js",
    "static": true,
    "longname": "app/core/server/index.js~TIMEOUT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": null,
    "description": "判定服务器请求超时时间，单位毫秒",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1206,
    "kind": "variable",
    "name": "socket",
    "memberof": "app/core/server/index.js",
    "static": true,
    "longname": "app/core/server/index.js~socket",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": "{socket}",
    "description": "当前 Socket 管理类实例",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Socket"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1207,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/server/index.js",
    "static": true,
    "longname": "app/core/server/index.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": null,
    "description": "事件表",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1208,
    "kind": "variable",
    "name": "MIN_SUPPORT_VERSION",
    "memberof": "app/core/server/index.js",
    "static": true,
    "longname": "app/core/server/index.js~MIN_SUPPORT_VERSION",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": null,
    "description": "最小支持的服务器版本",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1209,
    "kind": "function",
    "name": "checkServerVersion",
    "memberof": "app/core/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/index.js~checkServerVersion",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": null,
    "description": "检查服务器版本是否受支持",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serverVersion",
        "description": "服务器版本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1210,
    "kind": "function",
    "name": "checkVersionSupport",
    "memberof": "app/core/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/index.js~checkVersionSupport",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": null,
    "description": "检查用户登录的服务器版本支持情况",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "当前用户"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, boolean>"
      ],
      "spread": false,
      "description": "返回一个功能支持情况表"
    }
  },
  {
    "__docId__": 1211,
    "kind": "function",
    "name": "login",
    "memberof": "app/core/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/index.js~login",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": "{login}",
    "description": "登录到服务器",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "要登录的用户"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<User, Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1212,
    "kind": "function",
    "name": "changeUserStatus",
    "memberof": "app/core/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/index.js~changeUserStatus",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": "{changeUserStatus}",
    "description": "向服务器请求变更用户状态名称",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "用户状态名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1213,
    "kind": "function",
    "name": "onUserLogin",
    "memberof": "app/core/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/index.js~onUserLogin",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": "{onUserLogin}",
    "description": "绑定用户登录事件",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1214,
    "kind": "function",
    "name": "onUserLoginout",
    "memberof": "app/core/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/index.js~onUserLoginout",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": "{onUserLoginout}",
    "description": "绑定用户退出登录事件",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "Funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1215,
    "kind": "function",
    "name": "fetchUserList",
    "memberof": "app/core/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/index.js~fetchUserList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": "{fetchUserList}",
    "description": "向服务器主动请求获取系统用户数据",
    "lineNumber": 183,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "idList",
        "description": "要求请求的用户 ID，多个用户 ID 使用英文逗号拼接，如果不指定 ID 则获取系统所有用户数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1216,
    "kind": "variable",
    "name": "tempUserIdList",
    "memberof": "app/core/server/index.js",
    "static": true,
    "longname": "app/core/server/index.js~tempUserIdList",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": null,
    "description": "临时用户 ID 表",
    "lineNumber": 195,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1217,
    "kind": "variable",
    "name": "lastGetTempUserCall",
    "memberof": "app/core/server/index.js",
    "static": true,
    "longname": "app/core/server/index.js~lastGetTempUserCall",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": null,
    "description": "上次获取临时用户延迟任务标识",
    "lineNumber": 202,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1218,
    "kind": "function",
    "name": "tryGetTempUserInfo",
    "memberof": "app/core/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/index.js~tryGetTempUserInfo",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": "{tryGetTempUserInfo}",
    "description": "从服务器请求获取临时用户数据",
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "临时用户 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1219,
    "kind": "function",
    "name": "logout",
    "memberof": "app/core/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/index.js~logout",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/server/index.js",
    "importStyle": "{logout}",
    "description": "退出登录",
    "lineNumber": 231,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1220,
    "kind": "file",
    "name": "app/core/server/server-handlers.js",
    "content": "import members from '../members';\nimport Lang from '../../lang';\nimport Member from '../models/member';\nimport events from '../events';\n\n/**\n * 事件表\n * @type {Object<string, string>}\n * @private\n */\nconst EVENT = {\n    showMessage: 'ui.showMessage',\n};\n\n/**\n * 处理服务器用户登录推送消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {any} 如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理\n * @private\n */\nconst chatLogin = (msg, socket) => {\n    if (msg.isSuccess) {\n        const {user} = socket;\n        if (user.isLogging || msg.data.id === user.id) {\n            user.$set(msg.data);\n            return true;\n        }\n        const member = members.get(msg.data.id);\n        if (member) {\n            member.status = msg.data.status;\n            members.update(member);\n        }\n    }\n    return false;\n};\n\n/**\n * 处理服务器用户退出登录推送消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {any} 如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理\n * @private\n */\nconst chatLogout = (msg, socket) => {\n    if (msg.isSuccess) {\n        const {user} = socket;\n        if (msg.data.id === user.id && socket.isConnecting) {\n            user.markUnverified();\n            socket.close();\n        } else {\n            const member = members.get(msg.data.id);\n            if (member) {\n                member.status = Member.STATUS.unverified;\n                members.update(member);\n            }\n        }\n    }\n};\n\n/**\n * 处理服务器提示错误推送消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {any} 如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理\n * @private\n */\nconst chatError = (msg, socket) => {\n    const message = Lang.error(msg);\n    if (message) {\n        events.emit(EVENT.showMessage, message);\n    }\n};\n\n/**\n * 处理服务器返回用户个人配置推送消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {any} 如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理\n * @private\n */\nconst chatSettings = (msg, socket) => {\n    if (msg.isSuccess) {\n        const {user} = socket;\n        if (msg.data && msg.data.lastSaveTime > user.config.lastSaveTime && user.config.hash !== msg.data.hash) {\n            user.config.reset(msg.data);\n        }\n    }\n};\n\n/**\n * 处理服务器通知变更用户状态推送消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {any} 如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理\n * @private\n */\nconst chatUserChangeStatus = (msg, socket) => {\n    if (msg.isSuccess) {\n        const {user} = socket;\n        if (!msg.data.id || msg.data.id === user.id) {\n            user.status = msg.data.status;\n        }\n\n        if (msg.data.id) {\n            const member = members.get(msg.data.id);\n            if (member) {\n                member.status = msg.data.status;\n                members.update(member);\n            }\n        }\n    }\n};\n\n/**\n * 处理服务器用户信息变更推送消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {any} 如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理\n * @private\n */\nconst chatUserchange = (msg, socket) => {\n    if (msg.isSuccess && msg.data) {\n        const {user} = socket;\n        if (!msg.data.id || msg.data.id === user.id) {\n            user.$set(msg.data);\n            if (msg.data.status) {\n                user.status = msg.data.status;\n            }\n        }\n\n        if (msg.data.id) {\n            const member = members.get(msg.data.id);\n            if (member) {\n                member.$set(msg.data);\n                if (msg.data.status) {\n                    member.status = msg.data.status;\n                }\n                members.update(member);\n                return member;\n            }\n        }\n    }\n};\n\n/**\n * 处理服务器当前用户被踢出推送消息（通常因为用户在其他地方登录）\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {any} 如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理\n * @private\n */\nconst chatKickoff = (msg, socket) => {\n    socket.close(null, 'KICKOFF');\n};\n\n/**\n * 处理服务器推送系统用户列表消息\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {any} 如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理\n * @private\n */\nconst chatUsergetlist = (msg, socket) => {\n    if (msg.isSuccess) {\n        if (msg.partial) {\n            members.update(msg.data);\n        } else {\n            members.init(msg.data, msg.roles, msg.depts);\n        }\n    }\n};\n\n/**\n * 处理服务器推送当前用户 SessionID 消息\n * SessionID 用于发起 http 请求时免登录\n * @param {SocketMessage} msg Socket 消息对象\n * @param {Socket} socket Socket 连接实例\n * @return {any} 如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理\n * @private\n */\nconst chatSessionID = (msg, socket) => {\n    if (msg.isSuccess || msg.sessionID) {\n        const {user} = socket;\n        user.sessionID = msg.data || msg.sessionID;\n    }\n};\n\n/**\n * Socket 服务器推送消息处理函数\n * @type {Object<string, Function(msg: SocketMessage, socket: Socket)>}\n */\nexport default {\n    'chat/login': chatLogin,\n    'chat/logout': chatLogout,\n    'chat/error': chatError,\n    'chat/settings': chatSettings,\n    'chat/userchangestatus': chatUserChangeStatus,\n    'chat/userchange': chatUserchange,\n    'chat/kickoff': chatKickoff,\n    'chat/usergetlist': chatUsergetlist,\n    'chat/sessionid': chatSessionID,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/server/server-handlers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1221,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/server/server-handlers.js",
    "static": true,
    "longname": "app/core/server/server-handlers.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/server-handlers.js",
    "importStyle": null,
    "description": "事件表",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1222,
    "kind": "function",
    "name": "chatLogin",
    "memberof": "app/core/server/server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/server-handlers.js~chatLogin",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/server-handlers.js",
    "importStyle": null,
    "description": "处理服务器用户登录推送消息",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理"
    }
  },
  {
    "__docId__": 1223,
    "kind": "function",
    "name": "chatLogout",
    "memberof": "app/core/server/server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/server-handlers.js~chatLogout",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/server-handlers.js",
    "importStyle": null,
    "description": "处理服务器用户退出登录推送消息",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理"
    }
  },
  {
    "__docId__": 1224,
    "kind": "function",
    "name": "chatError",
    "memberof": "app/core/server/server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/server-handlers.js~chatError",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/server-handlers.js",
    "importStyle": null,
    "description": "处理服务器提示错误推送消息",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理"
    }
  },
  {
    "__docId__": 1225,
    "kind": "function",
    "name": "chatSettings",
    "memberof": "app/core/server/server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/server-handlers.js~chatSettings",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/server-handlers.js",
    "importStyle": null,
    "description": "处理服务器返回用户个人配置推送消息",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理"
    }
  },
  {
    "__docId__": 1226,
    "kind": "function",
    "name": "chatUserChangeStatus",
    "memberof": "app/core/server/server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/server-handlers.js~chatUserChangeStatus",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/server-handlers.js",
    "importStyle": null,
    "description": "处理服务器通知变更用户状态推送消息",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理"
    }
  },
  {
    "__docId__": 1227,
    "kind": "function",
    "name": "chatUserchange",
    "memberof": "app/core/server/server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/server-handlers.js~chatUserchange",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/server-handlers.js",
    "importStyle": null,
    "description": "处理服务器用户信息变更推送消息",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理"
    }
  },
  {
    "__docId__": 1228,
    "kind": "function",
    "name": "chatKickoff",
    "memberof": "app/core/server/server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/server-handlers.js~chatKickoff",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/server-handlers.js",
    "importStyle": null,
    "description": "处理服务器当前用户被踢出推送消息（通常因为用户在其他地方登录）",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理"
    }
  },
  {
    "__docId__": 1229,
    "kind": "function",
    "name": "chatUsergetlist",
    "memberof": "app/core/server/server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/server-handlers.js~chatUsergetlist",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送系统用户列表消息",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理"
    }
  },
  {
    "__docId__": 1230,
    "kind": "function",
    "name": "chatSessionID",
    "memberof": "app/core/server/server-handlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/server/server-handlers.js~chatSessionID",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/server/server-handlers.js",
    "importStyle": null,
    "description": "处理服务器推送当前用户 SessionID 消息\nSessionID 用于发起 http 请求时免登录",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 消息对象"
      },
      {
        "nullable": null,
        "types": [
          "Socket"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket 连接实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "如果返回 `false`，表示此消息处理失败或者无法处理，如果为 `true` 或其他数据则表示已经处理"
    }
  },
  {
    "__docId__": 1231,
    "kind": "file",
    "name": "app/core/todo/index.js",
    "content": "import removeMarkdown from 'remove-markdown';\nimport {socket} from '../server';\nimport Markdown from '../../utils/markdown';\n\n/**\n * 将待办存储对象提交到服务器进行存储\n * @param {Object} todo 待办存储对象\n * @return {Promise}\n */\nexport const createTodo = todo => {\n    if (!todo.type) {\n        todo.type = 'custom';\n    }\n    if (todo.desc) {\n        todo.desc = `${Markdown(todo.desc)}<div class=\"hidden xxc-todo-source\" style=\"display: none\">${todo.desc}</div>`;\n    }\n\n    return socket.sendAndListen({\n        method: 'upserttodo',\n        params: [todo]\n    });\n};\n\n/**\n * 请求将聊天消息转换为待办\n * @param {ChatMessage} message 聊天消息\n * @return {Object} 待办存储对象\n */\nexport const createTodoFromMessage = message => {\n    const {content} = message;\n    const todo = {desc: content};\n    const plainContent = removeMarkdown(content);\n    const selectedText = document.getSelection().toString();\n    let todoName = plainContent;\n    if (selectedText && plainContent.includes(selectedText)) {\n        todoName = selectedText;\n    } else {\n        const breakIndex = plainContent.indexOf('\\n');\n        if (breakIndex > 0) {\n            todoName = plainContent.substr(0, breakIndex);\n        }\n    }\n    if (todoName.length > 145) {\n        todoName = todoName.sub(0, 144);\n    }\n    todo.name = todoName;\n    return todo;\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/todo/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1232,
    "kind": "function",
    "name": "createTodo",
    "memberof": "app/core/todo/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/todo/index.js~createTodo",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/todo/index.js",
    "importStyle": "{createTodo}",
    "description": "将待办存储对象提交到服务器进行存储",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "todo",
        "description": "待办存储对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1233,
    "kind": "function",
    "name": "createTodoFromMessage",
    "memberof": "app/core/todo/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/todo/index.js~createTodoFromMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/todo/index.js",
    "importStyle": "{createTodoFromMessage}",
    "description": "请求将聊天消息转换为待办",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "聊天消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "待办存储对象"
    }
  },
  {
    "__docId__": 1234,
    "kind": "file",
    "name": "app/core/ui.js",
    "content": "import Platform from 'Platform'; // eslint-disable-line\nimport Config from '../config'; // eslint-disable-line\nimport Server from './server';\nimport MemberProfileDialog from '../views/common/member-profile-dialog';\nimport Messager from '../components/messager';\nimport ContextMenu from '../components/context-menu';\nimport modal from '../components/modal';\nimport {isWebUrl, getSearchParam} from '../utils/html-helper';\nimport Lang from '../lang';\nimport events from './events';\nimport profile from './profile';\nimport Notice from './notice';\nimport ImageViewer from '../components/image-viewer';\nimport Store from '../utils/store';\nimport {executeCommandLine, registerCommand} from './commander';\nimport WebViewDialog from '../views/common/webview-dialog';\nimport {addContextMenuCreator, showContextMenu} from './context-menu';\n\n/**\n * 事件表\n * @type {Object<string, string>}\n * @private\n */\nconst EVENT = {\n    app_link: 'app.link',\n    net_online: 'app.net.online',\n    net_offline: 'app.net.offline',\n    ready: 'app.ready'\n};\n\n// 添加图片上下文菜单生成器\naddContextMenuCreator('image', ({url, dataType}) => {\n    const items = [{\n        label: Lang.string('menu.image.view'),\n        click: () => {\n            ImageViewer.show(url);\n        }\n    }];\n    if (Platform.clipboard && Platform.clipboard.writeImageFromUrl) {\n        items.push({\n            label: Lang.string('menu.image.copy'),\n            click: () => {\n                Platform.clipboard.writeImageFromUrl(url, dataType);\n            }\n        });\n    }\n    if (Platform.dialog && Platform.dialog.saveAsImageFromUrl) {\n        items.push({\n            label: Lang.string('menu.image.saveAs'),\n            click: () => {\n                if (url.startsWith('file://')) {\n                    url = url.substr(7);\n                }\n                return Platform.dialog.saveAsImageFromUrl(url, dataType).then(filename => {\n                    if (filename) {\n                        Messager.show(Lang.format('file.fileSavedAt.format', filename), {\n                            actions: Platform.ui.openFileItem ? [{\n                                label: Lang.string('file.open'),\n                                click: () => {\n                                    Platform.ui.openFileItem(filename);\n                                }\n                            }, {\n                                label: Lang.string('file.openFolder'),\n                                click: () => {\n                                    Platform.ui.showItemInFolder(filename);\n                                }\n                            }] : null\n                        });\n                    }\n                });\n            }\n        });\n    }\n    if (Platform.ui.openFileItem && dataType !== 'base64') {\n        items.push({\n            label: Lang.string('menu.image.open'),\n            click: () => {\n                if (url.startsWith('file://')) {\n                    url = url.substr(7);\n                }\n                Platform.ui.openFileItem(url);\n            }\n        });\n    }\n\n    return items;\n});\n\n// 添加成员上下文菜单生成器\naddContextMenuCreator('member', ({member}) => {\n    return [{\n        label: Lang.string('member.profile.view'),\n        click: () => {\n            MemberProfileDialog.show(member);\n        }\n    }];\n});\n\n/**\n * 绑定界面上链接点击事件\n * @param {string} type 链接目标类型\n * @param {function(target: string, element: Element)} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onAppLinkClick = (type, listener) => {\n    return events.on(`${EVENT.app_link}.${type}`, listener);\n};\n\n/**\n * 触发界面上链接点击事件\n * @param {Element} element 触发元素\n * @param {string} type 链接目标类型\n * @param {string} target  链接目标\n * @param  {...any} params 其他参数\n * @return {void}\n */\nexport const emitAppLinkClick = (element, type, target, ...params) => {\n    return events.emit(`${EVENT.app_link}.${type}`, target, element, ...params);\n};\n\n// 处理点击成员名称链接事件（弹出个人资料对话框）\nonAppLinkClick('Member', target => {\n    MemberProfileDialog.show(target);\n});\n\n/**\n * 自动清除拷贝成功提示计时器 ID\n * @type {number}\n * @private\n */\nlet clearCopyCodeTip = null;\nif (Platform.clipboard && Platform.clipboard.writeText) {\n    // 注册处理拷贝代码命令\n    registerCommand('copyCode', context => {\n        const element = context.targetElement;\n        if (element) {\n            if (clearCopyCodeTip) {\n                clearTimeout(clearCopyCodeTip);\n                clearCopyCodeTip = null;\n            }\n            const code = element.nextElementSibling.innerText;\n            Platform.clipboard.writeText(code);\n            element.setAttribute('data-hint', Lang.string('common.copied'));\n            element.classList.add('hint--success');\n            clearCopyCodeTip = setTimeout(() => {\n                clearCopyCodeTip = null;\n                element.setAttribute('data-hint', Lang.string('common.copyCode'));\n                element.classList.remove('hint--success');\n            }, 2000);\n            return true;\n        }\n        return false;\n    });\n}\n\n// 处理用户登录事件\nServer.onUserLogin((user, loginError) => {\n    if (!loginError && user.isFirstSignedToday) {\n        Messager.show(Lang.string('login.signed'), {\n            type: 'success',\n            icon: 'calendar-check',\n            autoHide: true,\n        });\n    }\n    if (typeof Pace !== 'undefined') {\n        Pace.stop();\n    }\n});\n\n// 处理用户退出登录事件\nServer.onUserLoginout((user, code, reason, unexpected) => {\n    if (user) {\n        let errorCode = null;\n        if (reason === 'KICKOFF') {\n            errorCode = 'KICKOFF';\n        }\n        if (errorCode) {\n            Messager.show(Lang.error(errorCode), {\n                type: 'danger',\n                icon: 'alert',\n                actions: [{\n                    label: Lang.string('login.retry'),\n                    click: () => {\n                        Server.login(user);\n                    }\n                }]\n            });\n            if (Notice.requestAttention) {\n                Notice.requestAttention();\n            }\n        }\n    }\n});\n\n// 为 `<body>` 添加操作系统辅助类，例如 `'os-mac'` 或 `'os-win'`\ndocument.body.classList.add(`os-${Platform.env.os}`);\n\n/**\n * 在扩展应用中功能打开链接\n * @param {string} url 要打开的地址\n * @param {string} appName 应用名称\n * @return {void}\n */\nexport const openUrlInApp = (url, appName) => {\n    executeCommandLine(`openInApp/${appName}/${encodeURIComponent(appName)}`, {appName, url});\n};\n\n/**\n * 在对话框中打开链接\n * @param {string} url 要打开的链接\n * @param {Object} options 选项\n * @param {function} callback 对话框显示后的回调函数\n * @return {void}\n */\nexport const openUrlInDialog = (url, options, callback) => {\n    options = Object.assign({url}, options);\n    WebViewDialog.show(url, options, callback);\n};\n\n// 注册在对话框中打开链接命令\nregisterCommand('openUrlInDialog', (context, url) => {\n    if (!url && context.options && context.options.url) {\n        url = context.options.url;\n    }\n    const options = context.options;\n    if (url) {\n        openUrlInDialog(url, options);\n        return true;\n    }\n    return false;\n});\n\n/**\n * 在系统默认浏览器中打开链接\n * @param {stirng} url 要打开的链接\n * @return {void}\n */\nexport const openUrlInBrowser = url => {\n    return Platform.ui.openExternal(url);\n};\n\n// 注册在系统默认浏览器中打开链接命令\nregisterCommand('openUrlInBrowser', (context, url) => {\n    if (!url && context.options && context.options.url) {\n        url = context.options.url;\n    }\n    if (url) {\n        openUrlInBrowser(url);\n        return true;\n    }\n    return false;\n});\n\n/**\n * 根据界面事件打开链接，自动选择打开的方式\n * @param {string} url 要打开的链接\n * @param {Element} targetElement 触发事件元素\n * @param {Event} event 界面事件对象\n * @returns {boolean} 如果返回 `true` 则打开成功，否则为打开失败\n */\nexport const openUrl = (url, targetElement, event) => {\n    if (isWebUrl(url)) {\n        if (global.ExtsRuntime) {\n            const extInspector = global.ExtsRuntime.getUrlOpener(url, targetElement);\n            if (extInspector && extInspector) {\n                const openResult = extInspector.open(url);\n                if (openResult === true || openResult === false) {\n                    return openResult;\n                } else if (typeof openResult === 'string') {\n                    if (isWebUrl(openResult)) {\n                        return openUrlInBrowser(openResult);\n                    }\n                    return openUrl(openResult, targetElement);\n                }\n            }\n        }\n        openUrlInBrowser(url);\n        return true;\n    } else if (url[0] === '@') {\n        const params = url.substr(1).split('/').map(decodeURIComponent);\n        emitAppLinkClick(targetElement, ...params);\n        return true;\n    } else if (url[0] === '!') {\n        executeCommandLine(url.substr(1), {targetElement, event});\n        return true;\n    }\n};\n\n// 监听页面上的点击事件\ndocument.addEventListener('click', e => {\n    let {target} = e;\n    while (target && !((target.classList && target.classList.contains('app-link')) || (target.tagName === 'A' && target.attributes.href))) {\n        target = target.parentNode;\n    }\n\n    if (target && (target.tagName === 'A' || target.classList.contains('app-link')) && (target.attributes.href || target.attributes['data-url'])) {\n        const link = (target.attributes['data-url'] || target.attributes.href).value;\n        if (openUrl(link, target, e)) {\n            e.preventDefault();\n        }\n    }\n});\n\n// 监听网络成功连接事件\nwindow.addEventListener('online', () => {\n    if (profile.user) {\n        if (!Server.socket.isLogging) {\n            Server.login(profile.user);\n        }\n    }\n});\n\n// 监听网络连接断开事件\nwindow.addEventListener('offline', () => {\n    if (profile.isUserOnline) {\n        profile.user.markDisconnect();\n        Server.socket.close(null, 'net_offline');\n    }\n});\n\n/**\n * 检查拖拽结束计时任务 ID\n * @type {number}\n * @private\n */\nlet dragLeaveTask;\n\n/**\n * 完成拖拽事件\n * @return {void}\n * @private\n */\nconst completeDragNDrop = () => {\n    document.body.classList.remove('drag-n-drop-over-in');\n    setTimeout(() => {\n        document.body.classList.remove('drag-n-drop-over');\n    }, 350);\n};\n\n// 监听界面上拖拽过程中事件\nwindow.ondragover = e => {\n    clearTimeout(dragLeaveTask);\n    if (e.dataTransfer && e.dataTransfer.types.includes('Files')) {\n        document.body.classList.add('drag-n-drop-over');\n        setTimeout(() => {\n            document.body.classList.add('drag-n-drop-over-in');\n        }, 10);\n    }\n    e.preventDefault();\n    return false;\n};\n\n// 监听界面上拖拽离开\nwindow.ondragleave = e => {\n    clearTimeout(dragLeaveTask);\n    dragLeaveTask = setTimeout(completeDragNDrop, 300);\n    e.preventDefault();\n    return false;\n};\n\n// 监听界面上拖拽完成\nwindow.ondrop = e => {\n    clearTimeout(dragLeaveTask);\n    completeDragNDrop();\n    if (DEBUG) {\n        console.collapse('DRAG FILE', 'redBg', (e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files.length ? e.dataTransfer.files[0].path : ''), 'redPale');\n        console.log(e);\n        console.groupEnd();\n    }\n    e.preventDefault();\n    return false;\n};\n\n// 如果平台支持自主处理退出策略则询问用户如何退出\nif (Platform.ui.onRequestQuit) {\n    Platform.ui.onRequestQuit(closeReason => {\n        if (closeReason !== 'quit') {\n            const user = profile.user;\n            if (user && !user.isUnverified) {\n                const appCloseOption = user.config.appCloseOption;\n                if (appCloseOption === 'minimize' || !Platform.ui.showQuitConfirmDialog) {\n                    Platform.ui.hideWindow();\n                    return false;\n                } else if (appCloseOption !== 'close' && Platform.ui.showQuitConfirmDialog) {\n                    Platform.ui.showQuitConfirmDialog((result, checked) => {\n                        if (checked && result) {\n                            user.config.appCloseOption = result;\n                        }\n                        if (result === 'close') {\n                            Server.logout();\n                        }\n                        return result;\n                    });\n                    return false;\n                }\n            }\n        }\n        Server.logout();\n    });\n}\n\n/**\n * 立即退出应用\n * @private\n * @type {function}\n */\nlet _quit = null;\nif (Platform.ui.quit) {\n    _quit = (delay = 1000, ignoreListener = true) => {\n        if (ignoreListener) {\n            Server.logout();\n        }\n        Platform.ui.quit(delay, ignoreListener);\n    };\n}\n\n/**\n * 立即退出应用\n * @type {function}\n */\nexport const quit = _quit;\n\n// 监听应用窗口最小化事件\nif (Platform.ui.onWindowMinimize) {\n    Platform.ui.onWindowMinimize(() => {\n        const {userConfig} = profile;\n        if (userConfig && userConfig.removeFromTaskbarOnHide) {\n            Platform.ui.setShowInTaskbar(false);\n        }\n    });\n}\n\n// 监听应用窗口失去焦点事件\nif (Platform.ui.onWindowBlur && Platform.ui.hideWindow) {\n    Platform.ui.onWindowBlur(() => {\n        const {userConfig} = profile;\n        if (userConfig && userConfig.hideWindowOnBlur) {\n            Platform.ui.hideWindow();\n        }\n    });\n}\n\n/**\n * 重新加载窗口\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const reloadWindow = () => {\n    return modal.confirm(Lang.string('dialog.reloadWindowConfirmTip'), {title: Lang.string('dialog.reloadWindowConfirm')}).then(confirmed => {\n        if (confirmed) {\n            Server.logout();\n            setTimeout(() => {\n                Store.set('autoLoginNextTime', true);\n                if (Platform.ui.reloadWindow) {\n                    Platform.ui.reloadWindow();\n                } else {\n                    window.location.reload();\n                }\n            }, 1000);\n        }\n        return Promise.resolve(confirm);\n    });\n};\n\n/**\n * 判断是否在下次启动自动登录\n * @returns {boolean} 如果返回 `true` 则为下次启动自动登录，否则为不自动登录\n */\nexport const isAutoLoginNextTime = () => {\n    const autoLoginNextTime = Store.get('autoLoginNextTime');\n    if (autoLoginNextTime) {\n        Store.remove('autoLoginNextTime');\n    }\n    return autoLoginNextTime;\n};\n\n/**\n * 通过浏览器查询字符串传入的登录参数\n * @type {object}\n */\nexport const entryParams = getSearchParam();\n\n/**\n * 触发界面准备就绪事件\n * @return {void}\n */\nexport const triggerReady = () => {\n    events.emit(EVENT.ready);\n};\n\n/**\n * 绑定界面准备就绪事件\n * @param {funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onReady = listener => {\n    return events.on(EVENT.ready, listener);\n};\n\n/**\n * 设置应用窗口标题\n * @param {string} title 窗口标题\n * @return {void}\n */\nexport const setTitle = title => {\n    document.title = title;\n};\n\n// 设置默认标题\nsetTitle(Lang.string('app.title'));\n\n/**\n * 浏览器地址解析缓存\n * @private\n * @type {Object}\n */\nconst urlMetaCaches = {};\n\n/**\n * 最大浏览器解析缓存大小\n * @type {number}\n * @private\n */\nconst maxUrlCacheSize = 20;\n\n/**\n * 解析浏览器地址信息\n * @param {string} url 要解析的地址\n * @param {boolean} [disableCache=false] 是否禁止使用缓存\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const getUrlMeta = (url, disableCache = false) => {\n    if (!Config.ui['chat.urlInspector']) {\n        return Promise.resolve({url, title: url});\n    }\n    if (!disableCache) {\n        const urlMetaCache = urlMetaCaches[url];\n        if (urlMetaCache) {\n            return Promise.resolve(urlMetaCache.meta);\n        }\n    }\n    if (Platform.ui.getUrlMeta) {\n        let extInspector = null;\n        if (global.ExtsRuntime) {\n            extInspector = global.ExtsRuntime.getUrlInspector(url);\n        }\n        const getUrl = () => {\n            if (extInspector && extInspector.getUrl) {\n                const urlResult = extInspector.getUrl(url);\n                if (urlResult instanceof Promise) {\n                    return urlResult;\n                }\n                return Promise.resolve(urlResult);\n            }\n            return Promise.resolve(url);\n        };\n        if (extInspector && extInspector.noMeta && extInspector.inspect) {\n            return getUrl().then(url => {\n                const cardMeta = extInspector.inspect(url);\n                if (cardMeta instanceof Promise) {\n                    return cardMeta;\n                }\n                return Promise.resolve(cardMeta);\n            });\n        }\n        return getUrl().then(Platform.ui.getUrlMeta).then(meta => {\n            const {favicon} = meta;\n            let cardMeta = {\n                url,\n                title: meta.title,\n                image: meta.image,\n                subtitle: (meta.title && meta.title !== url) ? url : null,\n                content: meta.description && meta.description.length > 200 ? `${meta.description.substring(0, 150)}...` : meta.description,\n                icon: favicon ? favicon.href : null\n            };\n            if (meta.isImage) {\n                cardMeta.contentUrl = url;\n                cardMeta.contentType = 'image';\n                cardMeta.icon = 'mdi-image text-green icon-2x';\n            } else if (meta.isVideo) {\n                cardMeta.contentUrl = url;\n                cardMeta.contentType = 'video';\n                cardMeta.clickable = 'title';\n                cardMeta.icon = 'mdi-video text-red icon-2x';\n            }\n            if (cardMeta.image && cardMeta.image.startsWith('//')) {\n                cardMeta.image = `https:${cardMeta.image}`;\n            }\n            if (cardMeta.icon && cardMeta.icon.startsWith('//')) {\n                cardMeta.icon = `https:${cardMeta.icon}`;\n            }\n            if (extInspector && extInspector.inspect) {\n                try {\n                    cardMeta = extInspector.inspect(meta, cardMeta, url);\n                } catch (err) {\n                    if (DEBUG) {\n                        console.error('Inspect url error', {\n                            err,\n                            meta,\n                            cardMeta,\n                            extInspector\n                        });\n                    }\n                }\n                if (cardMeta instanceof Promise) {\n                    return cardMeta.then(cardMeta => {\n                        cardMeta.provider = extInspector.provider;\n                        return Promise.resolve(cardMeta);\n                    });\n                } else if (cardMeta) {\n                    cardMeta.provider = extInspector.provider;\n                    return Promise.resolve(cardMeta);\n                }\n            }\n\n            // Save cache\n            let cacheKeys = Object.keys(urlMetaCaches);\n            if (cacheKeys.length > maxUrlCacheSize) {\n                cacheKeys = cacheKeys.sort((x, y) => {\n                    return x.time - y.time;\n                });\n                for (let i = 0; i < (cacheKeys.length - maxUrlCacheSize); ++i) {\n                    delete urlMetaCaches[cacheKeys[i]];\n                }\n            }\n            urlMetaCaches[url] = {meta: cardMeta, time: new Date().getTime()};\n\n            return Promise.resolve(cardMeta);\n        });\n    }\n    return Promise.resolve({url, title: url});\n};\n\n/**\n * 全局快捷键是否可用\n * @type {boolean}\n * @private\n */\nlet isGlobalShortcutDisabled = false;\n\n/**\n * 全局快捷键表\n * @private\n * @type {Object}\n */\nlet globalHotkeys = null;\n\n/**\n * 注册全局快捷键\n * @param {User} loginUser 当前登录的用户\n * @param {Error} loginError 登录错误信息\n * @return {void}\n * @private\n */\nconst registerShortcut = (loginUser, loginError) => {\n    if (!Platform.shortcut) {\n        return;\n    }\n    if (loginError) {\n        return;\n    }\n    const {userConfig} = profile;\n    if (userConfig) {\n        // eslint-disable-next-line prefer-destructuring\n        globalHotkeys = userConfig.globalHotkeys;\n        Object.keys(globalHotkeys).forEach(name => {\n            Platform.shortcut.registerGlobalShortcut(name, globalHotkeys[name], () => {\n                if (!isGlobalShortcutDisabled) {\n                    executeCommandLine(`shortcut.${name}`);\n                } else if (DEBUG) {\n                    console.log(`Global shortcut command '${name}' skiped.`);\n                }\n            });\n        });\n    }\n};\n\n/**\n * 取消注册全局快捷键\n * @return {void}\n * @private\n */\nconst unregisterGlobalShortcut = () => {\n    if (!Platform.shortcut) {\n        return;\n    }\n    if (globalHotkeys) {\n        Object.keys(globalHotkeys).forEach(name => {\n            Platform.shortcut.unregisterGlobalShortcut(name);\n        });\n        globalHotkeys = null;\n    }\n};\n\n// 处理全局快捷键注册和反注册\nif (Platform.shortcut) {\n    profile.onUserConfigChange((change, config) => {\n        if (change && Object.keys(change).some(x => x.startsWith('shortcut.'))) {\n            registerShortcut();\n        }\n        if (config.needSave) {\n            Server.socket.uploadUserSettings();\n        }\n    });\n    Server.onUserLogin(registerShortcut);\n    Server.onUserLoginout(unregisterGlobalShortcut);\n\n    if (Platform.ui.showAndFocusWindow) {\n        registerCommand('shortcut.focusWindowHotkey', () => {\n            if (Platform.ui.hideWindow && Platform.ui.isWindowOpenAndFocus) {\n                Platform.ui.hideWindow();\n            } else {\n                Platform.ui.showAndFocusWindow();\n            }\n        });\n    }\n}\n\n// 注册显示上下文菜单命令\nregisterCommand('showContextMenu', (context, name) => {\n    const {options, event} = context;\n    showContextMenu(name, {options, event})\n});\n\n/**\n * 判断当前应用窗口是否是小窗口模式\n * @returns {boolean} 如果返回 `true` 则为是小窗口模式，否则为不是小窗口模式\n */\nexport const isSmallScreen = () => {\n    return window.innerWidth < 768;\n};\n\n/**\n * 切换显示小窗口模式，实际是在 `<body>` 元素上切换添加 `'app-show-chats-menu'` 类，用于应用不同的 CSS 样式\n * @param {boolean} [toggle=null] 是否显示小窗口模式，如果为 `true` 则切换为小窗口模式，如果为 `false` 则取消切换小窗口模式，如果为其他值则根据当前的模式自动切换（到另一种模式）\n * @return {void}\n */\nexport const showMobileChatsMenu = (toggle = null) => {\n    if (!isSmallScreen()) {\n        return;\n    }\n    const {classList} = document.body;\n    if (toggle === true) {\n        classList.add('app-show-chats-menu');\n    } else if (toggle === false) {\n        classList.remove('app-show-chats-menu');\n    } else {\n        classList.toggle('app-show-chats-menu');\n    }\n};\n\n/**\n * 禁用全局快捷键\n * @param {boolean} [disabled=true] 是否禁用全局快捷键，如果为 `false` 则为取消禁用，否则为禁用\n * @return {void}\n */\nexport const disableGlobalShortcut = (disabled = true) => {\n    isGlobalShortcutDisabled = disabled;\n    unregisterGlobalShortcut();\n};\n\n/**\n * 启用全局快捷键\n * @return {void}\n */\nexport const enableGlobalShortcut = () => {\n    isGlobalShortcutDisabled = false;\n    registerShortcut();\n};\n\n// 监听浏览器地址栏 hash 参数变更事件\nwindow.addEventListener('hashchange', () => {\n    const hash = window.location.hash;\n    if (DEBUG) {\n        console.color('➜', 'orangeBg', hash.substr(1), 'orangePale');\n    }\n    if (hash.includes('/:filterType/')) {\n        window.location.hash = hash.replace('/:filterType/', '/recents/');\n    }\n}, false);\n\nexport default {\n    entryParams,\n    get canQuit() {\n        return !!Platform.ui.quit;\n    },\n    isSmallScreen,\n    showMobileChatsMenu,\n    disableGlobalShortcut,\n    enableGlobalShortcut,\n    onAppLinkClick,\n    emitAppLinkClick,\n    quit,\n    showMessger: Messager.show,\n    showContextMenu: ContextMenu.show,\n    modal,\n    reloadWindow,\n    triggerReady,\n    onReady,\n    isAutoLoginNextTime,\n    openUrl,\n    getUrlMeta,\n    openUrlInDialog,\n    openUrlInBrowser,\n    openUrlInApp\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/core/ui.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1235,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/core/ui.js",
    "static": true,
    "longname": "app/core/ui.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": null,
    "description": "事件表",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1236,
    "kind": "function",
    "name": "onAppLinkClick",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~onAppLinkClick",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{onAppLinkClick}",
    "description": "绑定界面上链接点击事件",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "链接目标类型"
      },
      {
        "nullable": null,
        "types": [
          "function(target: string, element: Element)"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1237,
    "kind": "function",
    "name": "emitAppLinkClick",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~emitAppLinkClick",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{emitAppLinkClick}",
    "description": "触发界面上链接点击事件",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "触发元素"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "链接目标类型"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "链接目标"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "params",
        "description": "其他参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1238,
    "kind": "variable",
    "name": "clearCopyCodeTip",
    "memberof": "app/core/ui.js",
    "static": true,
    "longname": "app/core/ui.js~clearCopyCodeTip",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": null,
    "description": "自动清除拷贝成功提示计时器 ID",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1239,
    "kind": "function",
    "name": "openUrlInApp",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~openUrlInApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{openUrlInApp}",
    "description": "在扩展应用中功能打开链接",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "要打开的地址"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "appName",
        "description": "应用名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1240,
    "kind": "function",
    "name": "openUrlInDialog",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~openUrlInDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{openUrlInDialog}",
    "description": "在对话框中打开链接",
    "lineNumber": 215,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "要打开的链接"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "选项"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "对话框显示后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1241,
    "kind": "function",
    "name": "openUrlInBrowser",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~openUrlInBrowser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{openUrlInBrowser}",
    "description": "在系统默认浏览器中打开链接",
    "lineNumber": 238,
    "params": [
      {
        "nullable": null,
        "types": [
          "stirng"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "要打开的链接"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1242,
    "kind": "function",
    "name": "openUrl",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~openUrl",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{openUrl}",
    "description": "根据界面事件打开链接，自动选择打开的方式",
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则打开成功，否则为打开失败"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "要打开的链接"
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "targetElement",
        "description": "触发事件元素"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "界面事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则打开成功，否则为打开失败"
    }
  },
  {
    "__docId__": 1243,
    "kind": "function",
    "name": "completeDragNDrop",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~completeDragNDrop",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": null,
    "description": "完成拖拽事件",
    "lineNumber": 333,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1244,
    "kind": "variable",
    "name": "_quit",
    "memberof": "app/core/ui.js",
    "static": true,
    "longname": "app/core/ui.js~_quit",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": null,
    "description": "立即退出应用",
    "lineNumber": 407,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1245,
    "kind": "variable",
    "name": "quit",
    "memberof": "app/core/ui.js",
    "static": true,
    "longname": "app/core/ui.js~quit",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{quit}",
    "description": "立即退出应用",
    "lineNumber": 421,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1246,
    "kind": "function",
    "name": "reloadWindow",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~reloadWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{reloadWindow}",
    "description": "重新加载窗口",
    "lineNumber": 447,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    },
    "params": []
  },
  {
    "__docId__": 1247,
    "kind": "function",
    "name": "isAutoLoginNextTime",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~isAutoLoginNextTime",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{isAutoLoginNextTime}",
    "description": "判断是否在下次启动自动登录",
    "lineNumber": 468,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为下次启动自动登录，否则为不自动登录"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为下次启动自动登录，否则为不自动登录"
    },
    "params": []
  },
  {
    "__docId__": 1248,
    "kind": "variable",
    "name": "entryParams",
    "memberof": "app/core/ui.js",
    "static": true,
    "longname": "app/core/ui.js~entryParams",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{entryParams}",
    "description": "通过浏览器查询字符串传入的登录参数",
    "lineNumber": 480,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1249,
    "kind": "function",
    "name": "triggerReady",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~triggerReady",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{triggerReady}",
    "description": "触发界面准备就绪事件",
    "lineNumber": 486,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1250,
    "kind": "function",
    "name": "onReady",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~onReady",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{onReady}",
    "description": "绑定界面准备就绪事件",
    "lineNumber": 495,
    "params": [
      {
        "nullable": null,
        "types": [
          "funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1251,
    "kind": "function",
    "name": "setTitle",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~setTitle",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{setTitle}",
    "description": "设置应用窗口标题",
    "lineNumber": 504,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "窗口标题"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1252,
    "kind": "variable",
    "name": "urlMetaCaches",
    "memberof": "app/core/ui.js",
    "static": true,
    "longname": "app/core/ui.js~urlMetaCaches",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": null,
    "description": "浏览器地址解析缓存",
    "lineNumber": 516,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1253,
    "kind": "variable",
    "name": "maxUrlCacheSize",
    "memberof": "app/core/ui.js",
    "static": true,
    "longname": "app/core/ui.js~maxUrlCacheSize",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": null,
    "description": "最大浏览器解析缓存大小",
    "lineNumber": 523,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1254,
    "kind": "function",
    "name": "getUrlMeta",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~getUrlMeta",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{getUrlMeta}",
    "description": "解析浏览器地址信息",
    "lineNumber": 531,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "要解析的地址"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "disableCache",
        "description": "是否禁止使用缓存"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1255,
    "kind": "variable",
    "name": "isGlobalShortcutDisabled",
    "memberof": "app/core/ui.js",
    "static": true,
    "longname": "app/core/ui.js~isGlobalShortcutDisabled",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": null,
    "description": "全局快捷键是否可用",
    "lineNumber": 638,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1256,
    "kind": "variable",
    "name": "globalHotkeys",
    "memberof": "app/core/ui.js",
    "static": true,
    "longname": "app/core/ui.js~globalHotkeys",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": null,
    "description": "全局快捷键表",
    "lineNumber": 645,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1257,
    "kind": "function",
    "name": "registerShortcut",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~registerShortcut",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": null,
    "description": "注册全局快捷键",
    "lineNumber": 654,
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "loginUser",
        "description": "当前登录的用户"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "loginError",
        "description": "登录错误信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1258,
    "kind": "function",
    "name": "unregisterGlobalShortcut",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~unregisterGlobalShortcut",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": null,
    "description": "取消注册全局快捷键",
    "lineNumber": 682,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1259,
    "kind": "function",
    "name": "isSmallScreen",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~isSmallScreen",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{isSmallScreen}",
    "description": "判断当前应用窗口是否是小窗口模式",
    "lineNumber": 728,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是小窗口模式，否则为不是小窗口模式"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是小窗口模式，否则为不是小窗口模式"
    },
    "params": []
  },
  {
    "__docId__": 1260,
    "kind": "function",
    "name": "showMobileChatsMenu",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~showMobileChatsMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{showMobileChatsMenu}",
    "description": "切换显示小窗口模式，实际是在 `<body>` 元素上切换添加 `'app-show-chats-menu'` 类，用于应用不同的 CSS 样式",
    "lineNumber": 737,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "toggle",
        "description": "是否显示小窗口模式，如果为 `true` 则切换为小窗口模式，如果为 `false` 则取消切换小窗口模式，如果为其他值则根据当前的模式自动切换（到另一种模式）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1261,
    "kind": "function",
    "name": "disableGlobalShortcut",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~disableGlobalShortcut",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{disableGlobalShortcut}",
    "description": "禁用全局快捷键",
    "lineNumber": 756,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "disabled",
        "description": "是否禁用全局快捷键，如果为 `false` 则为取消禁用，否则为禁用"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1262,
    "kind": "function",
    "name": "enableGlobalShortcut",
    "memberof": "app/core/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/core/ui.js~enableGlobalShortcut",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/core/ui.js",
    "importStyle": "{enableGlobalShortcut}",
    "description": "启用全局快捷键",
    "lineNumber": 765,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1263,
    "kind": "file",
    "name": "app/exts/app-extension.js",
    "content": "import Path from 'path';\nimport Extension from './base-extension';\nimport {isWebUrl} from '../utils/html-helper';\n\n/**\n * 应用扩展类型\n * @type {Map<string, string>}\n * @private\n */\nexport const APP_TYPES = {\n    insideView: 'insideView',\n    webView: 'webView'\n};\n\n/**\n * 应用扩展类\n *\n * @export\n * @class AppExtension\n * @extends {Extension}\n */\nexport default class AppExtension extends Extension {\n    /**\n     * 创建一个应用扩展类实例\n     * @param {Object} pkg 扩展的 package.json 文件数据\n     * @param {Object} data 扩展的运行时数据\n     * @memberof AppExtension\n     */\n    constructor(pkg, data) {\n        super(pkg, data);\n\n        if (!this.isApp) {\n            throw new Error(`Cannot create a app extension from the type '${this.type}'.`);\n        }\n\n        /**\n         * 应用类型缓存变量\n         * @type {string}\n         * @private\n         */\n        this._appType = APP_TYPES[pkg.appType];\n\n        if (!this._appType) {\n            this._appType = pkg.webViewUrl ? APP_TYPES.webView : APP_TYPES.insideView;\n            this.addError('appType', `AppType (${pkg.appType}) must be one of '${Object.keys(APP_TYPES).join(',')}', set to ‘${this._appType}’ temporarily.`);\n        }\n\n        if (this._appType === APP_TYPES.webView && !pkg.webViewUrl) {\n            this.addError('webViewUrl', 'The webViewUrl attribute must be set when appType is \\'webView\\'.');\n        }\n    }\n\n    /**\n     * 获取应用类型是否是内嵌网页应用\n     * @memberof AppExtension\n     * @type {boolean}\n     */\n    get isWebview() {\n        return this._appType === APP_TYPES.webView;\n    }\n\n    /**\n     * 获取应用类型\n     * @memberof AppExtension\n     * @type {string}\n     */\n    get appType() {\n        return this._appType;\n    }\n\n    /**\n     * 获取内嵌网页应用地址\n     * @memberof AppExtension\n     * @type {string}\n     */\n    get webViewUrl() {\n        if (this._appType !== APP_TYPES.webView) {\n            return null;\n        }\n        if (this.auth) {\n            return this.auth;\n        }\n        const webViewUrl = this._pkg.webViewUrl;\n        if (webViewUrl && !this._webViewUrl) {\n            if (!isWebUrl(webViewUrl)) {\n                this._isLocalWebView = true;\n                this._webViewUrl = `file://${Path.join(this.localPath, webViewUrl)}`;\n            } else {\n                this._isLocalWebView = false;\n                this._webViewUrl = webViewUrl;\n            }\n        }\n        return this._webViewUrl;\n    }\n\n    /**\n     * 获取应用的免登录地址\n     * @param {string} referer 要访问的地址，如果留空使用应用主页地址\n     * @param {string} entryID 入口 ID，如果留空使用应用的 ID\n     * @returns {Promise} 使用 Promise 异步返回处理结果\n     */\n    getEntryUrl(referer = null, entryID = null) {\n        if (this.hasServerEntry) {\n            return super.getEntryUrl(referer, entryID);\n        }\n        return Promise.resolve(this.webViewUrl);\n    }\n\n    /**\n     * 获取内嵌网页预加载脚本\n     * @memberof AppExtension\n     * @type {string}\n     */\n    get webViewPreloadScript() {\n        if (this._appType !== APP_TYPES.webView) {\n            return null;\n        }\n        const webViewPreloadScript = this._pkg.webViewPreloadScript;\n        if (webViewPreloadScript && !this._webViewPreloadScript) {\n            /**\n             * 内嵌网页预加载脚本缓存变量\n             * @type {string}\n             * @private\n             */\n            this._webViewPreloadScript = `file://${Path.join(this.localPath, webViewPreloadScript)}`;\n        }\n        return this._webViewPreloadScript;\n    }\n\n    /**\n     * 获取内嵌网页注入 CSS\n     * @memberof AppExtension\n     * @type {string}\n     */\n    get injectCSS() {\n        return this._pkg.injectCSS;\n    }\n\n    /**\n     * 获取内嵌网页注入脚本\n     * @memberof AppExtension\n     * @type {string}\n     */\n    get injectScript() {\n        return this._pkg.injectScript;\n    }\n\n    /**\n     * 获取是否是本地内嵌网页\n     * @memberof AppExtension\n     * @type {boolean}\n     */\n    get isLocalWebView() {\n        // 调用 webViewUrl 属性，确保 _isLocalWebView 变量被赋值\n        const webViewUrl = this.webViewUrl;\n        return this._isLocalWebView;\n    }\n\n    /**\n     * 获取应用配色\n     * @memberof AppExtension\n     * @type {string}\n     */\n    get appAccentColor() {return this._pkg.appAccentColor || this._pkg.accentColor;}\n\n    /**\n     * 获取应用背景色\n     * @memberof AppExtension\n     * @type {string}\n     */\n    get appBackColor() {return this._pkg.appBackColor;}\n\n    /**\n     * 获取应用图标\n     * @memberof AppExtension\n     * @type {string}\n     */\n    get appIcon() {\n        const appIcon = this._pkg.appIcon;\n        if (appIcon && !this._appIcon) {\n            if (appIcon.length > 1 && !appIcon.startsWith('http://') && !appIcon.startsWith('https://') && !appIcon.startsWith('mdi-') && !appIcon.startsWith('icon')) {\n                this._appIcon = Path.join(this.localPath, appIcon);\n            } else {\n                this._appIcon = appIcon;\n            }\n        }\n        return this._appIcon || super.icon;\n    }\n\n    /**\n     * 获取扩展图标\n     * @memberof AppExtension\n     * @type {string}\n     */\n    get icon() {return this._pkg.icon ? super.icon : this.appIcon;}\n\n    /**\n     * 获取扩展配色\n     * @memberof AppExtension\n     * @type {string}\n     */\n    get accentColor() {return this._pkg.accentColor || this._pkg.appAccentColor;}\n\n    /**\n     * 获取应用内部视图入口组件\n     * @memberof AppExtension\n     * @type {Class<Component>}\n     */\n    get MainView() {\n        const theModule = this.module;\n        return theModule && theModule.MainView;\n    }\n\n    /**\n     * 获取是否为内置应用\n     * @memberof AppExtension\n     * @type {boolean}\n     */\n    get buildIn() {\n        return this._pkg.buildIn;\n    }\n\n    /**\n     * 获取是否是默认应用\n     * @memberof AppExtension\n     * @type {boolean}\n     */\n    get isDefault() {\n        const buildIn = this.buildIn;\n        return buildIn && buildIn.asDefault;\n    }\n\n    /**\n     * 获取是否是固定显示的应用\n     * @memberof AppExtension\n     * @type {boolean}\n     */\n    get isFixed() {\n        const buildIn = this.buildIn;\n        return buildIn && (buildIn.asDefault || buildIn.fixed);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/app-extension.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1264,
    "kind": "variable",
    "name": "APP_TYPES",
    "memberof": "app/exts/app-extension.js",
    "static": true,
    "longname": "app/exts/app-extension.js~APP_TYPES",
    "access": "private",
    "export": true,
    "importPath": "xuanxuan/app/exts/app-extension.js",
    "importStyle": "{APP_TYPES}",
    "description": "应用扩展类型",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1265,
    "kind": "class",
    "name": "AppExtension",
    "memberof": "app/exts/app-extension.js",
    "static": true,
    "longname": "app/exts/app-extension.js~AppExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/app-extension.js",
    "importStyle": "AppExtension",
    "description": "应用扩展类",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AppExtension"
      }
    ],
    "interface": false,
    "extends": [
      "Extension"
    ]
  },
  {
    "__docId__": 1266,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#constructor",
    "access": "public",
    "description": "创建一个应用扩展类实例",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pkg",
        "description": "扩展的 package.json 文件数据"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "扩展的运行时数据"
      }
    ]
  },
  {
    "__docId__": 1267,
    "kind": "member",
    "name": "_appType",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#_appType",
    "access": "private",
    "description": "应用类型缓存变量",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1269,
    "kind": "get",
    "name": "isWebview",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#isWebview",
    "access": "public",
    "description": "获取应用类型是否是内嵌网页应用",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1270,
    "kind": "get",
    "name": "appType",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#appType",
    "access": "public",
    "description": "获取应用类型",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1271,
    "kind": "get",
    "name": "webViewUrl",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#webViewUrl",
    "access": "public",
    "description": "获取内嵌网页应用地址",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1272,
    "kind": "member",
    "name": "_isLocalWebView",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#_isLocalWebView",
    "access": "private",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1273,
    "kind": "member",
    "name": "_webViewUrl",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#_webViewUrl",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1276,
    "kind": "method",
    "name": "getEntryUrl",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#getEntryUrl",
    "access": "public",
    "description": "获取应用的免登录地址",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "referer",
        "description": "要访问的地址，如果留空使用应用主页地址"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entryID",
        "description": "入口 ID，如果留空使用应用的 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1277,
    "kind": "get",
    "name": "webViewPreloadScript",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#webViewPreloadScript",
    "access": "public",
    "description": "获取内嵌网页预加载脚本",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1278,
    "kind": "member",
    "name": "_webViewPreloadScript",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#_webViewPreloadScript",
    "access": "private",
    "description": "内嵌网页预加载脚本缓存变量",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1279,
    "kind": "get",
    "name": "injectCSS",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#injectCSS",
    "access": "public",
    "description": "获取内嵌网页注入 CSS",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1280,
    "kind": "get",
    "name": "injectScript",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#injectScript",
    "access": "public",
    "description": "获取内嵌网页注入脚本",
    "lineNumber": 144,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1281,
    "kind": "get",
    "name": "isLocalWebView",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#isLocalWebView",
    "access": "public",
    "description": "获取是否是本地内嵌网页",
    "lineNumber": 153,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1282,
    "kind": "get",
    "name": "appAccentColor",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#appAccentColor",
    "access": "public",
    "description": "获取应用配色",
    "lineNumber": 164,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1283,
    "kind": "get",
    "name": "appBackColor",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#appBackColor",
    "access": "public",
    "description": "获取应用背景色",
    "lineNumber": 171,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1284,
    "kind": "get",
    "name": "appIcon",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#appIcon",
    "access": "public",
    "description": "获取应用图标",
    "lineNumber": 178,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1285,
    "kind": "member",
    "name": "_appIcon",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#_appIcon",
    "access": "private",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1287,
    "kind": "get",
    "name": "icon",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#icon",
    "access": "public",
    "description": "获取扩展图标",
    "lineNumber": 195,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1288,
    "kind": "get",
    "name": "accentColor",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#accentColor",
    "access": "public",
    "description": "获取扩展配色",
    "lineNumber": 202,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1289,
    "kind": "get",
    "name": "MainView",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#MainView",
    "access": "public",
    "description": "获取应用内部视图入口组件",
    "lineNumber": 209,
    "type": {
      "nullable": null,
      "types": [
        "Class<Component>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1290,
    "kind": "get",
    "name": "buildIn",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#buildIn",
    "access": "public",
    "description": "获取是否为内置应用",
    "lineNumber": 219,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1291,
    "kind": "get",
    "name": "isDefault",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#isDefault",
    "access": "public",
    "description": "获取是否是默认应用",
    "lineNumber": 228,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1292,
    "kind": "get",
    "name": "isFixed",
    "memberof": "app/exts/app-extension.js~AppExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/app-extension.js~AppExtension#isFixed",
    "access": "public",
    "description": "获取是否是固定显示的应用",
    "lineNumber": 238,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1293,
    "kind": "file",
    "name": "app/exts/base-extension.js",
    "content": "import Path from 'path';\nimport StringHelper from '../utils/string-helper';\nimport ExtensionConfig from './extension-config';\nimport timeSequence from '../utils/time-sequence';\nimport {matchScore} from '../utils/search-score';\nimport PinYin from '../utils/pinyin';\nimport Store from '../utils/store';\n\n/**\n * 扩展类型表\n * @type {Map<string, string>}\n * @private\n */\nexport const TYPES = {\n    app: 'app',\n    theme: 'theme',\n    plugin: 'plugin',\n};\n\n/**\n * 搜索匹配分值表\n * @type {Object[]}\n * @private\n */\nconst MATCH_SCORE_MAP = [\n    {name: 'name', equal: 100, include: 50},\n    {name: 'displayName', equal: 100, include: 50},\n    {\n        name: 'pinyinNames', equal: 50, include: 25, array: true\n    },\n    {name: 'description', include: 25},\n    {\n        name: 'keywords', equal: 50, include: 10, array: true\n    },\n    {name: 'type', equal: 100, prefix: '#'},\n    {name: 'author', equal: 100, prefix: '@'},\n    {name: 'publisher', equal: 100, prefix: '@'},\n    {name: 'homepage', include: 25},\n];\n\n/**\n * 扩展基础类\n *\n * @export\n * @class Extension\n */\nexport default class Extension {\n    /**\n     * 扩展类型表\n     * @type {Map<string, string>}\n     * @static\n     * @memberof Extension\n     */\n    static TYPES = TYPES;\n\n    /**\n     * 创建一个扩展基础类实例\n     * @param {Object} pkgData 扩展的 package.json 文件数据\n     * @param {Object} data 扩展的运行时数据\n     * @memberof Extension\n     */\n    constructor(pkgData, data) {\n        this.initPkg(pkgData);\n\n        /**\n         * 扩展配置对象\n         * @type {ExtensionConfig}\n         * @private\n         */\n        this._config = new ExtensionConfig(this.name, this.configurations);\n\n        /**\n         * 扩展运行时数据对象\n         * @type {Object}\n         * @private\n         */\n        this._data = Object.assign({}, data);\n    }\n\n    /**\n     * 从扩展的 package.json 文件数据初始化扩展信息\n     * @param {Object} pkgData 扩展的 package.json 文件数据\n     * @return {void}\n     */\n    initPkg(pkgData) {\n        const pkg = Object.assign({}, pkgData, pkgData.xext);\n        if (pkg.xext) {\n            delete pkg.xext;\n        }\n\n        this._type = TYPES[pkg.type];\n        if (!this._type) {\n            this._type = TYPES.plugin;\n            this.addError('type', `Unknown extension type (${pkg.type}), set to ‘${this._type}’ temporarily.`);\n        }\n        this._name = pkg.name;\n        if (StringHelper.isEmpty(pkg.name) || !(/[A-Za-z0-9_-]+/.test(pkg.name))) {\n            this._safeName = `extension-${timeSequence()}`;\n            this.addError('name', `Extension name(${pkg.name}) is not valid, use random name '${this._safeName}'.`);\n        }\n\n        if (StringHelper.isEmpty(pkg.version)) {\n            this.addError('version', 'Extension version not set.');\n        }\n\n        this._pkg = pkg;\n    }\n\n    /**\n     * 添加一个该扩展的错误信息\n     * @param {string} name 错误名称\n     * @param {string} error 错误信息\n     * @return {void}\n     */\n    addError(name, error) {\n        if (!error) {\n            error = name;\n            name = '_';\n        }\n\n        if (!this._errors) {\n            this._errors = [];\n        }\n        if (DEBUG) {\n            console.color(`Extension.${this.name}`, 'greenBg', name, 'greenPale', error, 'red');\n        }\n        this._errors.push({name, error});\n    }\n\n    /**\n     * 获取错误信息清单\n     * @memberof Extension\n     * @type {Object[]}\n     */\n    get errors() {\n        return this._errors;\n    }\n\n    /**\n     * 获取是否有错误信息\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get hasError() {\n        return this._errors && this._errors.length;\n    }\n\n    /**\n     * 获取扩展名称的拼音字符串\n     * @memberof Extension\n     * @type {string}\n     */\n    get pinyinNames() {\n        if (!this._pinyinName) {\n            this._pinyinName = PinYin(this.displayName, 'default', false);\n        }\n        return this._pinyinName;\n    }\n\n    /**\n     * 获取扩展配置数据\n     * @memberof Extension\n     * @type {Object}\n     */\n    get config() {\n        return this._config;\n    }\n\n    /**\n     * 获取扩展显示名称\n     * @memberof Extension\n     * @type {string}\n     */\n    get displayName() {\n        return StringHelper.ifEmptyThen(this._pkg.displayName, this._name);\n    }\n\n    /**\n     * 获取扩展类型\n     * @memberof Extension\n     * @type {string}\n     */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * 获取内部名称\n     * @memberof Extension\n     * @type {string}\n     */\n    get name() {\n        return this._safeName || this._name;\n    }\n\n    /**\n     * 获取是否主题类型扩展\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get isTheme() {\n        return this._type === TYPES.theme;\n    }\n\n    /**\n     * 获取是否插件类型扩展\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get isPlugin() {\n        return this._type === TYPES.plugin;\n    }\n\n    /**\n     * 获取是否是应用类型扩展\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get isApp() {\n        return this._type === TYPES.app;\n    }\n\n    /**\n     * 获取是否内置扩展\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get buildIn() {\n        return this._pkg.buildIn;\n    }\n\n    /**\n     * 获取扩展内置配置信息\n     * @memberof Extension\n     * @type {{name: string}[]}\n     */\n    get configurations() {\n        return this._pkg.configurations || [];\n    }\n\n    /**\n     * 获取扩展的 package.json 文件数据\n     * @memberof Extension\n     * @type {Object}\n     */\n    get pkg() {return this._pkg;}\n\n    /**\n     * 获取扩展描述信息\n     * @memberof Extension\n     * @type {string}\n     */\n    get description() {return this._pkg.description;}\n\n    /**\n     * 获取扩展版本信息\n     * @memberof Extension\n     * @type {string}\n     */\n    get version() {return this._pkg.version;}\n\n    /**\n     * 获取扩展作者信息\n     * @memberof Extension\n     * @type {{name: string, email: string}}\n     */\n    get author() {return this._pkg.author;}\n\n    /**\n     * 获取发布者信息\n     * @memberof Extension\n     * @type {{name: string, email: string}}\n     */\n    get publisher() {return this._pkg.publisher;}\n\n    /**\n     * 获取扩展版权信息\n     * @memberof Extension\n     * @type {string}\n     */\n    get license() {return this._pkg.license;}\n\n    /**\n     * 获取扩展主页链接\n     * @memberof Extension\n     * @type {string}\n     */\n    get homepage() {return this._pkg.homepage;}\n\n    /**\n     * 获取扩展关键字清单\n     * @memberof Extension\n     * @type {string[]}\n     */\n    get keywords() {return this._pkg.keywords;}\n\n    /**\n     * 获取扩展扩展要求的运行环境\n     * @memberof Extension\n     * @type {{xuanxuan: string, platform: string, extensions: string[]}}\n     */\n    get engines() {return this._pkg.engines;}\n\n    /**\n     * 获取版本库信息\n     * @memberof Extension\n     * @type {{type: string, url: string}}\n     */\n    get repository() {return this._pkg.repository;}\n\n    /**\n     * 获取问题反馈地址\n     * @memberof Extension\n     * @type {{url: string}}\n     */\n    get bugs() {return this._pkg.bugs;}\n\n    /**\n     * 获取扩展是否支持热加载\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get hot() {return !!this._pkg.hot;}\n\n    /**\n     * 获取远程免登录入口地址\n     * @memberof Extension\n     * @type {string}\n     */\n    get entryUrl() {return this._pkg.entryUrl;}\n\n    /**\n     * 获取远程免登录入口 ID\n     * @memberof Extension\n     * @type {string}\n     */\n    get entryID() {return this._pkg.entryID;}\n\n    /**\n     * 获取远程免登录入口地址\n     *\n     * @param {string} [referer=''] 要访问的地址\n     * @param {string} [entryID=null] 远程免登录入口 ID\n     * @returns {Promise} 使用 Promise 异步返回处理结果\n     * @memberof Extension\n     */\n    getEntryUrl(referer = '', entryID = null) {\n        if (global.ExtsRuntime) {\n            const {getEntryVisitUrl} = global.ExtsRuntime;\n            if (getEntryVisitUrl) {\n                return getEntryVisitUrl(entryID || this, referer);\n            }\n        }\n        return Promise.resolve(this.entryUrl);\n    }\n\n    /**\n     * 获取是否支持远程免登录\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get hasServerEntry() {\n        return this.entryID || this._pkg.entry;\n    }\n\n    /**\n     * 获取远程额外数据\n     * @memberof Extension\n     * @type {any}\n     */\n    get serverData() {\n        return this._data.serverData;\n    }\n\n    /**\n     * 获取远程扩展下载地址\n     * @memberof Extension\n     * @type {string}\n     */\n    get download() {return this._pkg.download;}\n\n    /**\n     * 获取是否是远程扩展\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get isRemote() {return this._data.remote;}\n\n    /**\n     * 获取远程扩展是否加载完毕\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get isRemoteLoaded() {return this._data.remoteLoaded;}\n\n    /**\n     * 获取远程 MD5 值\n     * @memberof Extension\n     * @type {string}\n     */\n    get md5() {return this._pkg.md5;}\n\n    /**\n     * 获取扩展所属的用户\n     * @memberof Extension\n     * @type {string}\n     */\n    get user() {return this._data.user;}\n\n    /**\n     * 获取远程扩展缓存路径\n     * @memberof Extension\n     * @type {string}\n     */\n    get remoteCachePath() {return this._data.remoteCachePath;}\n\n    /**\n     * 获取远程扩展是否加载失败\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get loadRemoteFailed() {return this._data.loadRemoteFailed;}\n\n    /**\n     * 获取远程扩展下载进度，百分比，取值范围 0~100\n     * @memberof Extension\n     * @type {number}\n     */\n    get downloadProgress() {\n        if (this.isRemoteLoaded) {\n            return 1;\n        }\n        if (!this._data.downloadProgress) {\n            return 0;\n        }\n        return this._data.downloadProgress;\n    }\n\n    /**\n     * 设置远程扩展下载进度，百分比，取值范围 0~100\n     * @param {number} progress 远程扩展下载进度\n     * @memberof Extension\n     */\n    set downloadProgress(progress) {\n        this._data.downloadProgress = progress;\n    }\n\n    /**\n     * 设置远程扩展加载结果\n     *\n     * @param {boolean} result 是否加载失败\n     * @param {Error} [error=null] 设置加载失败的错误信息\n     * @return {void}\n     * @memberof Extension\n     */\n    setLoadRemoteResult(result, error = null) {\n        this._data.loadRemoteFailed = !result;\n        this._data.remoteLoaded = !!result;\n        if (error) {\n            this.addError(error);\n        }\n    }\n\n    /**\n     * 获取扩展配色\n     * @memberof Extension\n     * @type {string}\n     */\n    get accentColor() {\n        return this._pkg.accentColor || '#f50057';\n    }\n\n    /**\n     * 获取扩展模块入口文件路径\n     * @memberof Extension\n     * @type {string}\n     */\n    get mainFile() {\n        if (!this._mainFile) {\n            const {buildIn} = this;\n            if (buildIn && buildIn.module) {\n                this._mainFile = 'BUILD-IN';\n            } else if (this.pkg.main) {\n                this._mainFile = Path.join(this.localPath, this.pkg.main);\n            }\n        }\n        return this._mainFile;\n    }\n\n    /**\n     * 获取扩展图标\n     * @memberof Extension\n     * @type {string}\n     */\n    get icon() {\n        const {icon} = this._pkg;\n        if (icon && !this._icon) {\n            if (icon.length > 1 && !icon.startsWith('http://') && !icon.startsWith('https://') && !icon.startsWith('mdi-') && !icon.startsWith('icon')) {\n                this._icon = Path.join(this.localPath, icon);\n            } else {\n                this._icon = icon;\n            }\n        }\n        return this._icon || 'mdi-cube';\n    }\n\n    /**\n     * 获取扩展作者名称\n     * @memberof Extension\n     * @type {string}\n     */\n    get authorName() {\n        const {author} = this;\n        return author && (author.name || author);\n    }\n\n    /**\n     * 获取扩展存储数据\n     * @memberof Extension\n     * @type {{data: Object, pkg: Object}}\n     */\n    get storeData() {\n        return {\n            data: this._data,\n            pkg: this._pkg\n        };\n    }\n\n    /**\n     * 获取扩展运行时数据\n     * @memberof Extension\n     * @type {Object}\n     */\n    get data() {\n        return this._data;\n    }\n\n    /**\n     * 获取扩展安装时间（时间戳形式）\n     * @memberof Extension\n     * @type {number}\n     */\n    get installTime() {\n        return this._data.installTime;\n    }\n\n    /**\n     * 设置扩展安装时间\n     * @param {number} time 扩展安装时间（时间戳形式）\n     * @memberof Extension\n     */\n    set installTime(time) {\n        this._data.installTime = time;\n        this.updateTime = time;\n    }\n\n    /**\n     * 获取是否已禁用扩展\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get disabled() {\n        return this._data.disabled === true;\n    }\n\n    /**\n     * 设置是否禁用扩展\n     * @param {boolean} disabled 禁用扩展\n     * @memberof Extension\n     */\n    set disabled(disabled) {\n        if (this._data.disabled !== disabled && !this.hot) {\n            this._needRestart = true;\n        }\n        this._data.disabled = disabled;\n    }\n\n    /**\n     * 获取扩展是否可用\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get avaliable() {\n        return !this.disabled && !this.needRestart && (!this.isRemote || this.isRemoteLoaded);\n    }\n\n    /**\n     * 获取扩展上次更新的时间（时间戳）\n     * @memberof Extension\n     * @type {number}\n     */\n    get updateTime() {\n        return this._data.updateTime;\n    }\n\n    /**\n     * 设置扩展上次更新的时间（时间戳）\n     * @param {number} time 扩展上次更新的时间（时间戳）\n     * @memberof Extension\n     */\n    set updateTime(time) {\n        this._data.updateTime = time;\n    }\n\n    /**\n     * 获取扩展本地文件路径\n     * @memberof Extension\n     * @type {string}\n     */\n    get localPath() {\n        return this._data.localPath;\n    }\n\n    /**\n     * 设置扩展本地文件路径\n     * @param {string} localPath 扩展本地文件路径\n     * @memberof Extension\n     */\n    set localPath(localPath) {\n        this._data.localPath = localPath;\n    }\n\n    /**\n     * 获取是否为正在开发中的扩展\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get isDev() {\n        return this._data.isDev;\n    }\n\n    /**\n     * 设置是否为正在开发中的扩展\n     * @param {boolean} flag 为正在开发中的扩展\n     * @memberof Extension\n     */\n    set isDev(flag) {\n        this._data.isDev = flag;\n    }\n\n    /**\n     * 获取是否有 JS 模块\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get hasModule() {\n        return this.mainFile;\n    }\n\n    /**\n     * 获取扩展配置项值\n     *\n     * @param {?string} key 配置名称\n     * @return {any} 扩展配置值\n     * @memberof Extension\n     */\n    getConfig(key) {\n        if (!this._config) {\n            this._config = Store.get(`EXTENSION::${this.id}::config`, {});\n        }\n        return key === undefined ? this._config : this._config[key];\n    }\n\n    /**\n     * 设置扩展配置项\n     *\n     * @param {string|Object} key 配置名称或者配置对象\n     * @param {any} value 配置值，如果 `key` 为 `Object` 则忽略此参数\n     * @memberof Extension\n     * @return {void}\n     */\n    setConfig(key, value) {\n        const config = this.getConfig();\n        if (typeof key === 'object') {\n            Object.assign(config, key);\n        } else {\n            config[key] = value;\n        }\n        this._config = config;\n        Store.set(`EXTENSION::${this.id}::config`, this._config);\n    }\n\n    /**\n     * 获取扩展用户配置项值\n     *\n     * @param {string} key 配置名称\n     * @param {any} defualtValue 默认值\n     * @return {any} 扩展配置值\n     * @memberof Extension\n     */\n    getUserConfig(key, defualtValue) {\n        if (Extension.user) {\n            return Extension.user.config.getForExtension(this.name, key, defualtValue);\n        }\n        if (DEBUG) {\n            console.warn('Cannot set user config for the exteions, because current user is not logined.', this);\n        }\n    }\n\n    /**\n     * 设置扩展用户配置项\n     *\n     * @param {string|Object} key 配置名称或者配置对象\n     * @param {any} value 配置值，如果 `key` 为 `Object` 则忽略此参数\n     * @memberof Extension\n     * @return {void}\n     */\n    setUserConfig(key, value) {\n        if (Extension.user) {\n            return Extension.user.config.setForExtension(this.name, key, value);\n        }\n        if (DEBUG) {\n            console.warn('Cannot set user config for the exteions, because current user is not logined.', this);\n        }\n    }\n\n    /**\n     * 重新载入扩展模块\n     *\n     * @return {any} 扩展模块\n     * @memberof Extension\n     */\n    loadModule() {\n        if (this.disabled) {\n            if (DEBUG) {\n                console.warn('The extension has been disbaled.', this);\n            }\n            return null;\n        }\n        const {mainFile} = this;\n        if (mainFile) {\n            const start = new Date().getTime();\n\n            if (mainFile === 'BUILD-IN') {\n                this._module = this.buildIn.module;\n            } else {\n                try {\n                    this._module = __non_webpack_require__(this.mainFile); // eslint-disable-line\n                } catch (err) {\n                    if (DEBUG) {\n                        console.collapse('Extension Attach', 'greenBg', this.name, 'redPale', 'load module error', 'red');\n                        console.error('error', err);\n                        console.log('extension', this);\n                        console.groupEnd();\n                    }\n                    this._module = {};\n                }\n            }\n\n            if (this._module) {\n                this.callModuleMethod('onAttach', this);\n            }\n\n            this._loadTime = new Date().getTime() - start;\n            this._loaded = true;\n\n            if (DEBUG) {\n                console.collapse('Extension Attach', 'greenBg', this.name, 'greenPale', `spend time: ${this._loadTime}ms`, 'orange');\n                console.trace('extension', this);\n                console.log('module', this._module);\n                console.groupEnd();\n            }\n        }\n        return this._module;\n    }\n\n    /**\n     * 获取扩展模块是否已经加载\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get isModuleLoaded() {\n        return this._loaded;\n    }\n\n    /**\n     * 获取扩展是否需要重新载入才能启用\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get needRestart() {\n        return this._needRestart || (!this.disabled && this.hasModule && !this._loaded && !this.hot);\n    }\n\n    /**\n     * 加载并启用扩展\n     *\n     * @return {boolean} 如果为 `true` 表示加载成功，否则表示加载失败\n     * @memberof Extension\n     */\n    attach() {\n        if (!this.disabled && !this._loaded && this.hasModule) {\n            this.loadModule();\n            return true;\n        }\n    }\n\n    /**\n     * 热加载并启用扩展\n     *\n     * @return {boolean} 如果为 `true` 表示加载成功，否则表示加载失败\n     * @memberof Extension\n     */\n    hotAttach() {\n        if (this.hot && this.attach()) {\n            this.callModuleMethod('onReady', this);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 停用并卸载扩展\n     *\n     * @return {void}\n     * @memberof Extension\n     */\n    detach() {\n        if (this._module && this._loaded) {\n            this.callModuleMethod('onDetach', this);\n        }\n        const {mainFile} = this;\n        // eslint-disable-next-line no-undef\n        if (mainFile && mainFile !== 'BUILD-IN' && __non_webpack_require__.cache) {\n            delete __non_webpack_require__.cache[mainFile]; // eslint-disable-line\n        }\n        this._module = null;\n        this._loaded = false;\n        if (DEBUG) {\n            console.collapse('Extension Detach', 'greenBg', this.name, 'greenPale');\n            console.trace('extension', this);\n            console.groupEnd();\n        }\n    }\n\n    /**\n     * 获取是否拥有 React 视图替换组件\n     * @memberof Extension\n     * @type {boolean}\n     */\n    get hasReplaceViews() {\n        if (this.disabled) {\n            if (DEBUG) {\n                console.warn('The extension has been disbaled.', this);\n            }\n            return false;\n        }\n        const extModule = this.module;\n        return extModule && extModule.replaceViews;\n    }\n\n    /**\n     * 获取 React 视图替换组件清单\n     * @memberof Extension\n     * @type {Map<string, Class<Component>>}\n     */\n    get replaceViews() {\n        if (this.disabled) {\n            if (DEBUG) {\n                console.warn('The extension has been disbaled.', this);\n            }\n            return null;\n        }\n        const extModule = this.module;\n        return extModule && extModule.replaceViews;\n    }\n\n    /**\n     * 获取上次加载此扩展所花费的时间，单位为毫秒\n     * @memberof Extension\n     * @type {number}\n     */\n    get loadTime() {\n        return this._loadTime;\n    }\n\n    /**\n     * 获取加载后的扩展模块\n     * @memberof Extension\n     * @type {any}\n     */\n    get module() {\n        if (this.disabled) {\n            if (DEBUG) {\n                console.warn('The extension has been disbaled.', this);\n            }\n            return false;\n        }\n        return this._module || this.loadModule();\n    }\n\n    /**\n     * 调用扩展模块方法\n     *\n     * @param {string} methodName 方法名称\n     * @param {...any} params 方法参数\n     * @return {any} 如果返回所调用的方法返回值\n     * @memberof Extension\n     */\n    callModuleMethod(methodName, ...params) {\n        if (this.disabled) {\n            if (DEBUG) {\n                console.warn('The extension has been disbaled.', this);\n            }\n            return;\n        }\n        const extModule = this._module;\n        if (extModule && extModule[methodName]) {\n            try {\n                return extModule[methodName].apply(this, params);\n            } catch (err) {\n                if (DEBUG) {\n                    console.collapse('Extension Attach', 'greenBg', this.name, 'redPale', `call module method '${methodName}' error`, 'red');\n                    console.log('methodName', methodName);\n                    console.log('params', params);\n                    console.log('error', err);\n                    console.log('extension', this);\n                    console.groupEnd();\n                }\n            }\n        }\n    }\n\n    /**\n     * 获取扩展支持的命令\n     * @memberof Extension\n     * @type {Map<string, any>}\n     */\n    get commands() {\n        if (this.disabled) {\n            if (DEBUG) {\n                console.warn('The extension has been disbaled.', this);\n            }\n            return null;\n        }\n        const extModule = this.module;\n        return extModule && extModule.commands;\n    }\n\n    /**\n     * 获取指定名称的扩展命令\n     *\n     * @param {string} commandName 命令名称\n     * @return {any} 扩展命令\n     * @memberof Extension\n     */\n    getCommand(commandName) {\n        const {commands} = this;\n        let command = commands && commands[commandName];\n        if (command) {\n            if (typeof command === 'function') {\n                command = {func: command, name: commandName};\n            }\n        }\n        command.name = `extension/${commandName}`;\n        return command;\n    }\n\n    /**\n     * 获取网址解析器\n     *\n     * @param {string} url 要解析的网址\n     * @param {string} [type='inspect'] 解析类型，包括 `'inspect'` 和 `'open'`\n     * @return {any} 网址解析器对象\n     * @memberof Extension\n     */\n    getUrlInspector(url, type = 'inspect') {\n        if (this.disabled) {\n            if (DEBUG) {\n                console.warn('The extension has been disbaled.', this);\n            }\n            return null;\n        }\n        const extModule = this.module;\n        let urlInspectors = extModule && extModule.urlInspectors;\n        if (urlInspectors) {\n            const urlObj = new URL(url);\n            if (!Array.isArray(urlInspectors)) {\n                urlInspectors = [urlInspectors];\n            }\n            const urlInspector = urlInspectors.find(x => {\n                if (!x[type]) {\n                    return false;\n                }\n                if (typeof x.test === 'function') {\n                    return x.test(url, urlObj);\n                }\n                if (Array.isArray(x.test)) {\n                    x.test = new Set(x.test);\n                } else if (typeof x.test === 'string') {\n                    x.test = new RegExp(x.test, 'i');\n                }\n                if (x.test instanceof Set) {\n                    return x.test.has(urlObj.host);\n                }\n                return x.test.test(url);\n            });\n            if (urlInspector && !urlInspector.provider) {\n                urlInspector.provider = {\n                    icon: this.icon,\n                    name: this.name,\n                    label: this.displayName,\n                    url: `!showExtensionDialog/${this.name}`\n                };\n            }\n            return urlInspector;\n        }\n        return null;\n    }\n\n\n    /**\n     * 获取网址打开处理器\n     *\n     * @param {string} url 要打开的网址\n     * @return {any} 网址打开处理器对象\n     * @memberof Extension\n     */\n    getUrlOpener(url) {\n        return this.getUrlInspector(url, 'open');\n    }\n\n    /**\n     * 格式化上下文菜单条目\n     *\n     * @param {Object} menuItem 要格式化的上下文菜单条目\n     * @param {Object} urlFormatObject 网址格式化对象\n     * @return {Object} 上下文菜单条目\n     * @memberof Extension\n     */\n    formatContextMenuItem(menuItem, urlFormatObject) {\n        urlFormatObject = Object.assign({}, urlFormatObject, {EXTENSION: `extension/${this.name}`});\n        menuItem = Object.assign({}, menuItem);\n        if (menuItem.url) {\n            menuItem.url = StringHelper.format(menuItem.url, urlFormatObject);\n        }\n        menuItem.label = `${this.displayName}: ${menuItem.label || menuItem.url}`;\n        if (!menuItem.icon) {\n            menuItem.icon = this.icon;\n        }\n        return menuItem;\n    }\n\n    /**\n     * 获取上下文菜单生成器\n     *\n     * @return {Object[]} 上下文菜单生成器列表\n     * @memberof Extension\n     */\n    getContextMenuCreators() {\n        const creators = this._pkg.contextMenuCreators || [];\n        const extModule = this.module;\n        if (extModule && extModule.contextMenuCreators) {\n            creators.push(...extModule.contextMenuCreators);\n        }\n        return creators;\n    }\n\n    /**\n     * 获取扩展与给定的关键字匹配分值\n     * @memberof Extension\n     * @param {string[]} keys 关键字列表\n     * @return {number} 匹配的分值\n     */\n    getMatchScore(keys) {\n        return matchScore(MATCH_SCORE_MAP, this, keys);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/base-extension.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1294,
    "kind": "variable",
    "name": "TYPES",
    "memberof": "app/exts/base-extension.js",
    "static": true,
    "longname": "app/exts/base-extension.js~TYPES",
    "access": "private",
    "export": true,
    "importPath": "xuanxuan/app/exts/base-extension.js",
    "importStyle": "{TYPES}",
    "description": "扩展类型表",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1295,
    "kind": "variable",
    "name": "MATCH_SCORE_MAP",
    "memberof": "app/exts/base-extension.js",
    "static": true,
    "longname": "app/exts/base-extension.js~MATCH_SCORE_MAP",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/base-extension.js",
    "importStyle": null,
    "description": "搜索匹配分值表",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1296,
    "kind": "class",
    "name": "Extension",
    "memberof": "app/exts/base-extension.js",
    "static": true,
    "longname": "app/exts/base-extension.js~Extension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/base-extension.js",
    "importStyle": "Extension",
    "description": "扩展基础类",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Extension"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 1297,
    "kind": "member",
    "name": "TYPES",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": true,
    "longname": "app/exts/base-extension.js~Extension.TYPES",
    "access": "public",
    "description": "扩展类型表",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1298,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#constructor",
    "access": "public",
    "description": "创建一个扩展基础类实例",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pkgData",
        "description": "扩展的 package.json 文件数据"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "扩展的运行时数据"
      }
    ]
  },
  {
    "__docId__": 1299,
    "kind": "member",
    "name": "_config",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_config",
    "access": "private",
    "description": "扩展配置对象",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "ExtensionConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1300,
    "kind": "member",
    "name": "_data",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_data",
    "access": "private",
    "description": "扩展运行时数据对象",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1301,
    "kind": "method",
    "name": "initPkg",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#initPkg",
    "access": "public",
    "description": "从扩展的 package.json 文件数据初始化扩展信息",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pkgData",
        "description": "扩展的 package.json 文件数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1302,
    "kind": "member",
    "name": "_type",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_type",
    "access": "private",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1304,
    "kind": "member",
    "name": "_name",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_name",
    "access": "private",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1305,
    "kind": "member",
    "name": "_safeName",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_safeName",
    "access": "private",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1306,
    "kind": "member",
    "name": "_pkg",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_pkg",
    "access": "private",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1307,
    "kind": "method",
    "name": "addError",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#addError",
    "access": "public",
    "description": "添加一个该扩展的错误信息",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "错误名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "错误信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1308,
    "kind": "member",
    "name": "_errors",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_errors",
    "access": "private",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1309,
    "kind": "get",
    "name": "errors",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#errors",
    "access": "public",
    "description": "获取错误信息清单",
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1310,
    "kind": "get",
    "name": "hasError",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#hasError",
    "access": "public",
    "description": "获取是否有错误信息",
    "lineNumber": 144,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1311,
    "kind": "get",
    "name": "pinyinNames",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#pinyinNames",
    "access": "public",
    "description": "获取扩展名称的拼音字符串",
    "lineNumber": 153,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1312,
    "kind": "member",
    "name": "_pinyinName",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_pinyinName",
    "access": "private",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1313,
    "kind": "get",
    "name": "config",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#config",
    "access": "public",
    "description": "获取扩展配置数据",
    "lineNumber": 165,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1314,
    "kind": "get",
    "name": "displayName",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#displayName",
    "access": "public",
    "description": "获取扩展显示名称",
    "lineNumber": 174,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1315,
    "kind": "get",
    "name": "type",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#type",
    "access": "public",
    "description": "获取扩展类型",
    "lineNumber": 183,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1316,
    "kind": "get",
    "name": "name",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#name",
    "access": "public",
    "description": "获取内部名称",
    "lineNumber": 192,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1317,
    "kind": "get",
    "name": "isTheme",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#isTheme",
    "access": "public",
    "description": "获取是否主题类型扩展",
    "lineNumber": 201,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1318,
    "kind": "get",
    "name": "isPlugin",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#isPlugin",
    "access": "public",
    "description": "获取是否插件类型扩展",
    "lineNumber": 210,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1319,
    "kind": "get",
    "name": "isApp",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#isApp",
    "access": "public",
    "description": "获取是否是应用类型扩展",
    "lineNumber": 219,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1320,
    "kind": "get",
    "name": "buildIn",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#buildIn",
    "access": "public",
    "description": "获取是否内置扩展",
    "lineNumber": 228,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1321,
    "kind": "get",
    "name": "configurations",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#configurations",
    "access": "public",
    "description": "获取扩展内置配置信息",
    "lineNumber": 237,
    "type": {
      "nullable": null,
      "types": [
        "{name: string}[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1322,
    "kind": "get",
    "name": "pkg",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#pkg",
    "access": "public",
    "description": "获取扩展的 package.json 文件数据",
    "lineNumber": 246,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1323,
    "kind": "get",
    "name": "description",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#description",
    "access": "public",
    "description": "获取扩展描述信息",
    "lineNumber": 253,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1324,
    "kind": "get",
    "name": "version",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#version",
    "access": "public",
    "description": "获取扩展版本信息",
    "lineNumber": 260,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1325,
    "kind": "get",
    "name": "author",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#author",
    "access": "public",
    "description": "获取扩展作者信息",
    "lineNumber": 267,
    "type": {
      "nullable": null,
      "types": [
        "{name: string, email: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1326,
    "kind": "get",
    "name": "publisher",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#publisher",
    "access": "public",
    "description": "获取发布者信息",
    "lineNumber": 274,
    "type": {
      "nullable": null,
      "types": [
        "{name: string, email: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1327,
    "kind": "get",
    "name": "license",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#license",
    "access": "public",
    "description": "获取扩展版权信息",
    "lineNumber": 281,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1328,
    "kind": "get",
    "name": "homepage",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#homepage",
    "access": "public",
    "description": "获取扩展主页链接",
    "lineNumber": 288,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1329,
    "kind": "get",
    "name": "keywords",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#keywords",
    "access": "public",
    "description": "获取扩展关键字清单",
    "lineNumber": 295,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1330,
    "kind": "get",
    "name": "engines",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#engines",
    "access": "public",
    "description": "获取扩展扩展要求的运行环境",
    "lineNumber": 302,
    "type": {
      "nullable": null,
      "types": [
        "{xuanxuan: string, platform: string, extensions: string[]}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1331,
    "kind": "get",
    "name": "repository",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#repository",
    "access": "public",
    "description": "获取版本库信息",
    "lineNumber": 309,
    "type": {
      "nullable": null,
      "types": [
        "{type: string, url: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1332,
    "kind": "get",
    "name": "bugs",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#bugs",
    "access": "public",
    "description": "获取问题反馈地址",
    "lineNumber": 316,
    "type": {
      "nullable": null,
      "types": [
        "{url: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1333,
    "kind": "get",
    "name": "hot",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#hot",
    "access": "public",
    "description": "获取扩展是否支持热加载",
    "lineNumber": 323,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1334,
    "kind": "get",
    "name": "entryUrl",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#entryUrl",
    "access": "public",
    "description": "获取远程免登录入口地址",
    "lineNumber": 330,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1335,
    "kind": "get",
    "name": "entryID",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#entryID",
    "access": "public",
    "description": "获取远程免登录入口 ID",
    "lineNumber": 337,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1336,
    "kind": "method",
    "name": "getEntryUrl",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#getEntryUrl",
    "access": "public",
    "description": "获取远程免登录入口地址",
    "lineNumber": 347,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "referer",
        "description": "要访问的地址"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "entryID",
        "description": "远程免登录入口 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1337,
    "kind": "get",
    "name": "hasServerEntry",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#hasServerEntry",
    "access": "public",
    "description": "获取是否支持远程免登录",
    "lineNumber": 362,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1338,
    "kind": "get",
    "name": "serverData",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#serverData",
    "access": "public",
    "description": "获取远程额外数据",
    "lineNumber": 371,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1339,
    "kind": "get",
    "name": "download",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#download",
    "access": "public",
    "description": "获取远程扩展下载地址",
    "lineNumber": 380,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1340,
    "kind": "get",
    "name": "isRemote",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#isRemote",
    "access": "public",
    "description": "获取是否是远程扩展",
    "lineNumber": 387,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1341,
    "kind": "get",
    "name": "isRemoteLoaded",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#isRemoteLoaded",
    "access": "public",
    "description": "获取远程扩展是否加载完毕",
    "lineNumber": 394,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1342,
    "kind": "get",
    "name": "md5",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#md5",
    "access": "public",
    "description": "获取远程 MD5 值",
    "lineNumber": 401,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1343,
    "kind": "get",
    "name": "user",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#user",
    "access": "public",
    "description": "获取扩展所属的用户",
    "lineNumber": 408,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1344,
    "kind": "get",
    "name": "remoteCachePath",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#remoteCachePath",
    "access": "public",
    "description": "获取远程扩展缓存路径",
    "lineNumber": 415,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1345,
    "kind": "get",
    "name": "loadRemoteFailed",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#loadRemoteFailed",
    "access": "public",
    "description": "获取远程扩展是否加载失败",
    "lineNumber": 422,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1346,
    "kind": "get",
    "name": "downloadProgress",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#downloadProgress",
    "access": "public",
    "description": "获取远程扩展下载进度，百分比，取值范围 0~100",
    "lineNumber": 429,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1347,
    "kind": "set",
    "name": "downloadProgress",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#downloadProgress",
    "access": "public",
    "description": "设置远程扩展下载进度，百分比，取值范围 0~100",
    "lineNumber": 444,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "远程扩展下载进度"
      }
    ]
  },
  {
    "__docId__": 1348,
    "kind": "method",
    "name": "setLoadRemoteResult",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#setLoadRemoteResult",
    "access": "public",
    "description": "设置远程扩展加载结果",
    "lineNumber": 456,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "是否加载失败"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "error",
        "description": "设置加载失败的错误信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1349,
    "kind": "get",
    "name": "accentColor",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#accentColor",
    "access": "public",
    "description": "获取扩展配色",
    "lineNumber": 469,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1350,
    "kind": "get",
    "name": "mainFile",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#mainFile",
    "access": "public",
    "description": "获取扩展模块入口文件路径",
    "lineNumber": 478,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1351,
    "kind": "member",
    "name": "_mainFile",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_mainFile",
    "access": "private",
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1353,
    "kind": "get",
    "name": "icon",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#icon",
    "access": "public",
    "description": "获取扩展图标",
    "lineNumber": 495,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1354,
    "kind": "member",
    "name": "_icon",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_icon",
    "access": "private",
    "description": null,
    "lineNumber": 499,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1356,
    "kind": "get",
    "name": "authorName",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#authorName",
    "access": "public",
    "description": "获取扩展作者名称",
    "lineNumber": 512,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1357,
    "kind": "get",
    "name": "storeData",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#storeData",
    "access": "public",
    "description": "获取扩展存储数据",
    "lineNumber": 522,
    "type": {
      "nullable": null,
      "types": [
        "{data: Object, pkg: Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1358,
    "kind": "get",
    "name": "data",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#data",
    "access": "public",
    "description": "获取扩展运行时数据",
    "lineNumber": 534,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1359,
    "kind": "get",
    "name": "installTime",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#installTime",
    "access": "public",
    "description": "获取扩展安装时间（时间戳形式）",
    "lineNumber": 543,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1360,
    "kind": "set",
    "name": "installTime",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#installTime",
    "access": "public",
    "description": "设置扩展安装时间",
    "lineNumber": 552,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "扩展安装时间（时间戳形式）"
      }
    ]
  },
  {
    "__docId__": 1362,
    "kind": "get",
    "name": "disabled",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#disabled",
    "access": "public",
    "description": "获取是否已禁用扩展",
    "lineNumber": 562,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1363,
    "kind": "set",
    "name": "disabled",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#disabled",
    "access": "public",
    "description": "设置是否禁用扩展",
    "lineNumber": 571,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "disabled",
        "description": "禁用扩展"
      }
    ]
  },
  {
    "__docId__": 1364,
    "kind": "member",
    "name": "_needRestart",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_needRestart",
    "access": "private",
    "description": null,
    "lineNumber": 573,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1365,
    "kind": "get",
    "name": "avaliable",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#avaliable",
    "access": "public",
    "description": "获取扩展是否可用",
    "lineNumber": 583,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1366,
    "kind": "get",
    "name": "updateTime",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#updateTime",
    "access": "public",
    "description": "获取扩展上次更新的时间（时间戳）",
    "lineNumber": 592,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1367,
    "kind": "set",
    "name": "updateTime",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#updateTime",
    "access": "public",
    "description": "设置扩展上次更新的时间（时间戳）",
    "lineNumber": 601,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "扩展上次更新的时间（时间戳）"
      }
    ]
  },
  {
    "__docId__": 1368,
    "kind": "get",
    "name": "localPath",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#localPath",
    "access": "public",
    "description": "获取扩展本地文件路径",
    "lineNumber": 610,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1369,
    "kind": "set",
    "name": "localPath",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#localPath",
    "access": "public",
    "description": "设置扩展本地文件路径",
    "lineNumber": 619,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "localPath",
        "description": "扩展本地文件路径"
      }
    ]
  },
  {
    "__docId__": 1370,
    "kind": "get",
    "name": "isDev",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#isDev",
    "access": "public",
    "description": "获取是否为正在开发中的扩展",
    "lineNumber": 628,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1371,
    "kind": "set",
    "name": "isDev",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#isDev",
    "access": "public",
    "description": "设置是否为正在开发中的扩展",
    "lineNumber": 637,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "为正在开发中的扩展"
      }
    ]
  },
  {
    "__docId__": 1372,
    "kind": "get",
    "name": "hasModule",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#hasModule",
    "access": "public",
    "description": "获取是否有 JS 模块",
    "lineNumber": 646,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1373,
    "kind": "method",
    "name": "getConfig",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#getConfig",
    "access": "public",
    "description": "获取扩展配置项值",
    "lineNumber": 657,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "配置名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "扩展配置值"
    }
  },
  {
    "__docId__": 1375,
    "kind": "method",
    "name": "setConfig",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#setConfig",
    "access": "public",
    "description": "设置扩展配置项",
    "lineNumber": 672,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "配置名称或者配置对象"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "配置值，如果 `key` 为 `Object` 则忽略此参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1377,
    "kind": "method",
    "name": "getUserConfig",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#getUserConfig",
    "access": "public",
    "description": "获取扩展用户配置项值",
    "lineNumber": 691,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "配置名称"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "defualtValue",
        "description": "默认值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "扩展配置值"
    }
  },
  {
    "__docId__": 1378,
    "kind": "method",
    "name": "setUserConfig",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#setUserConfig",
    "access": "public",
    "description": "设置扩展用户配置项",
    "lineNumber": 708,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "配置名称或者配置对象"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "配置值，如果 `key` 为 `Object` 则忽略此参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1379,
    "kind": "method",
    "name": "loadModule",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#loadModule",
    "access": "public",
    "description": "重新载入扩展模块",
    "lineNumber": 723,
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "扩展模块"
    },
    "params": []
  },
  {
    "__docId__": 1380,
    "kind": "member",
    "name": "_module",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_module",
    "access": "private",
    "description": null,
    "lineNumber": 735,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1383,
    "kind": "member",
    "name": "_loadTime",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_loadTime",
    "access": "private",
    "description": null,
    "lineNumber": 754,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1384,
    "kind": "member",
    "name": "_loaded",
    "memberof": "app/exts/base-extension.js~Extension",
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#_loaded",
    "access": "private",
    "description": null,
    "lineNumber": 755,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1385,
    "kind": "get",
    "name": "isModuleLoaded",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#isModuleLoaded",
    "access": "public",
    "description": "获取扩展模块是否已经加载",
    "lineNumber": 772,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1386,
    "kind": "get",
    "name": "needRestart",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#needRestart",
    "access": "public",
    "description": "获取扩展是否需要重新载入才能启用",
    "lineNumber": 781,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1387,
    "kind": "method",
    "name": "attach",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#attach",
    "access": "public",
    "description": "加载并启用扩展",
    "lineNumber": 791,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 表示加载成功，否则表示加载失败"
    },
    "params": []
  },
  {
    "__docId__": 1388,
    "kind": "method",
    "name": "hotAttach",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#hotAttach",
    "access": "public",
    "description": "热加载并启用扩展",
    "lineNumber": 804,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 表示加载成功，否则表示加载失败"
    },
    "params": []
  },
  {
    "__docId__": 1389,
    "kind": "method",
    "name": "detach",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#detach",
    "access": "public",
    "description": "停用并卸载扩展",
    "lineNumber": 818,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1392,
    "kind": "get",
    "name": "hasReplaceViews",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#hasReplaceViews",
    "access": "public",
    "description": "获取是否拥有 React 视图替换组件",
    "lineNumber": 841,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1393,
    "kind": "get",
    "name": "replaceViews",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#replaceViews",
    "access": "public",
    "description": "获取 React 视图替换组件清单",
    "lineNumber": 857,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, Class<Component>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1394,
    "kind": "get",
    "name": "loadTime",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#loadTime",
    "access": "public",
    "description": "获取上次加载此扩展所花费的时间，单位为毫秒",
    "lineNumber": 873,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1395,
    "kind": "get",
    "name": "module",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#module",
    "access": "public",
    "description": "获取加载后的扩展模块",
    "lineNumber": 882,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1396,
    "kind": "method",
    "name": "callModuleMethod",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#callModuleMethod",
    "access": "public",
    "description": "调用扩展模块方法",
    "lineNumber": 900,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "methodName",
        "description": "方法名称"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "params",
        "description": "方法参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "如果返回所调用的方法返回值"
    }
  },
  {
    "__docId__": 1397,
    "kind": "get",
    "name": "commands",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#commands",
    "access": "public",
    "description": "获取扩展支持的命令",
    "lineNumber": 929,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1398,
    "kind": "method",
    "name": "getCommand",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#getCommand",
    "access": "public",
    "description": "获取指定名称的扩展命令",
    "lineNumber": 947,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "commandName",
        "description": "命令名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "扩展命令"
    }
  },
  {
    "__docId__": 1399,
    "kind": "method",
    "name": "getUrlInspector",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#getUrlInspector",
    "access": "public",
    "description": "获取网址解析器",
    "lineNumber": 967,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "要解析的网址"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'inspect'",
        "defaultRaw": "'inspect'",
        "name": "type",
        "description": "解析类型，包括 `'inspect'` 和 `'open'`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "网址解析器对象"
    }
  },
  {
    "__docId__": 1400,
    "kind": "method",
    "name": "getUrlOpener",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#getUrlOpener",
    "access": "public",
    "description": "获取网址打开处理器",
    "lineNumber": 1019,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "要打开的网址"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "网址打开处理器对象"
    }
  },
  {
    "__docId__": 1401,
    "kind": "method",
    "name": "formatContextMenuItem",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#formatContextMenuItem",
    "access": "public",
    "description": "格式化上下文菜单条目",
    "lineNumber": 1031,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "menuItem",
        "description": "要格式化的上下文菜单条目"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "urlFormatObject",
        "description": "网址格式化对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "上下文菜单条目"
    }
  },
  {
    "__docId__": 1402,
    "kind": "method",
    "name": "getContextMenuCreators",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#getContextMenuCreators",
    "access": "public",
    "description": "获取上下文菜单生成器",
    "lineNumber": 1050,
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "上下文菜单生成器列表"
    },
    "params": []
  },
  {
    "__docId__": 1403,
    "kind": "method",
    "name": "getMatchScore",
    "memberof": "app/exts/base-extension.js~Extension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/base-extension.js~Extension#getMatchScore",
    "access": "public",
    "description": "获取扩展与给定的关键字匹配分值",
    "lineNumber": 1065,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "关键字列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "匹配的分值"
    }
  },
  {
    "__docId__": 1404,
    "kind": "file",
    "name": "app/exts/build-in/index.js",
    "content": "// eslint-disable-next-line import/no-unresolved\nimport {env, fs as fse} from 'Platform';\nimport path from 'path';\nimport Config, {updateConfig} from '../../config';\nimport Lang from '../../lang';\n\n/**\n * 内置扩展清单\n * @type {Object[]}\n */\nconst exts = [{\n    name: 'home',\n    displayName: Lang.string('exts.home.label'),\n    description: Lang.string('exts.home.desc'),\n    buildIn: {\n        fixed: true,\n        asDefault: true,\n    },\n    type: 'app',\n    appIcon: 'mdi-apps',\n    appAccentColor: '#3f51b5',\n    appType: 'insideView',\n}, {\n    name: 'extensions',\n    displayName: Lang.string('exts.extensions.label'),\n    description: Lang.string('exts.extensions.desc'),\n    buildIn: {},\n    type: 'app',\n    appIcon: 'mdi-puzzle',\n    appAccentColor: '#00c853',\n    appType: 'insideView',\n}, {\n    name: 'themes',\n    displayName: Lang.string('exts.themes.label'),\n    description: Lang.string('exts.themes.desc'),\n    buildIn: {},\n    type: 'app',\n    appIcon: 'mdi-airballoon',\n    appAccentColor: '#f50057',\n    appType: 'insideView',\n}, {\n    name: 'files',\n    displayName: Lang.string('exts.files.label'),\n    description: Lang.string('exts.files.desc'),\n    buildIn: {},\n    type: 'app',\n    appIcon: 'mdi-folder',\n    appAccentColor: '#ff9100',\n    appType: 'insideView',\n}];\n\n/**\n * 从运行时配置中加载内置扩展\n * @type {Object[]}\n * @private\n */\nconst internals = Config.exts && Config.exts.internals;\nif (Array.isArray(internals) && internals.length) {\n    exts.push(...internals);\n}\n\n/**\n * 内置扩展存储根路径\n * @type {string}\n * @private\n */\nconst buildInsPath = path.join(process.env.HOT ? env.appRoot : env.appPath, 'build-in');\n\n/**\n * 内置扩展清单文件路径：`extensions.json`\n * @type {string}\n * @private\n */\nconst buildInsFile = path.join(buildInsPath, 'extensions.json');\n\n/**\n * 内置扩展清单文件读取的内置扩展列表\n * @type {Object[]}\n * @private\n */\nconst buildIns = fse.readJsonSync(buildInsFile, {throws: false});\n\nif (buildIns && Array.isArray(buildIns)) {\n    buildIns.forEach(extConfig => {\n        if (typeof extConfig === 'string') {\n            const extPkgPath = path.join(buildInsPath, extConfig, 'package.json');\n            const extPkg = fse.readJsonSync(extPkgPath, {throws: false});\n            if (extPkg && extPkg.name === extConfig) {\n                extConfig = extPkg;\n            }\n        }\n        if (extConfig && (typeof extConfig === 'object')) {\n            extConfig.buildIn = {\n                localPath: path.join(buildInsPath, extConfig.name)\n            };\n            exts.push(extConfig);\n            if (DEBUG) {\n                console.collapse('Extension local', 'greenBg', extConfig.name, 'greenPale');\n                console.log('ext', extConfig);\n                console.groupEnd();\n            }\n        }\n    });\n}\n\n/**\n * 内置扩展存储根路径内的运行时配置文件路径\n * @type {string}\n * @private\n */\nconst buildInConfigFile = path.join(buildInsPath, 'config.json');\n\n/**\n * 内置扩展存储根路径内的运行时配置\n * @type {string}\n * @private\n */\nconst buildInConfig = fse.readJsonSync(buildInConfigFile, {throws: false});\n\n// 更新扩展的运行时配置\nif (buildInConfig) {\n    updateConfig(buildInConfig);\n}\n\nexport default exts;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/build-in/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1405,
    "kind": "variable",
    "name": "internals",
    "memberof": "app/exts/build-in/index.js",
    "static": true,
    "longname": "app/exts/build-in/index.js~internals",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/build-in/index.js",
    "importStyle": null,
    "description": "从运行时配置中加载内置扩展",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1406,
    "kind": "variable",
    "name": "buildInsPath",
    "memberof": "app/exts/build-in/index.js",
    "static": true,
    "longname": "app/exts/build-in/index.js~buildInsPath",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/build-in/index.js",
    "importStyle": null,
    "description": "内置扩展存储根路径",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1407,
    "kind": "variable",
    "name": "buildInsFile",
    "memberof": "app/exts/build-in/index.js",
    "static": true,
    "longname": "app/exts/build-in/index.js~buildInsFile",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/build-in/index.js",
    "importStyle": null,
    "description": "内置扩展清单文件路径：`extensions.json`",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1408,
    "kind": "variable",
    "name": "buildIns",
    "memberof": "app/exts/build-in/index.js",
    "static": true,
    "longname": "app/exts/build-in/index.js~buildIns",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/build-in/index.js",
    "importStyle": null,
    "description": "内置扩展清单文件读取的内置扩展列表",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1409,
    "kind": "variable",
    "name": "buildInConfigFile",
    "memberof": "app/exts/build-in/index.js",
    "static": true,
    "longname": "app/exts/build-in/index.js~buildInConfigFile",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/build-in/index.js",
    "importStyle": null,
    "description": "内置扩展存储根路径内的运行时配置文件路径",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1410,
    "kind": "variable",
    "name": "buildInConfig",
    "memberof": "app/exts/build-in/index.js",
    "static": true,
    "longname": "app/exts/build-in/index.js~buildInConfig",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/build-in/index.js",
    "importStyle": null,
    "description": "内置扩展存储根路径内的运行时配置",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1411,
    "kind": "variable",
    "name": "exts",
    "memberof": "app/exts/build-in/index.js",
    "static": true,
    "longname": "app/exts/build-in/index.js~exts",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/build-in/index.js",
    "importStyle": "exts",
    "description": "内置扩展清单",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1412,
    "kind": "file",
    "name": "app/exts/extension-config.js",
    "content": "import Store from '../utils/store';\n\nconst KEY_EXT_PREFIX = 'EXTENSION::';\n\nexport default class ExtensionConfig {\n    constructor(extension) {\n        const {name, configurations} = extension;\n        const configMap = {};\n        if (configurations) {\n            configurations.forEach(cfg => {\n                configMap[cfg.name] = cfg;\n            });\n        }\n        const storeName = `${KEY_EXT_PREFIX}${name}`;\n        const configData = Store.get(this._storeName, {});\n\n        this._name = name;\n        this._configurations = configurations;\n        this._storeName = storeName;\n        this._map = configMap;\n        this.$ = configData;\n    }\n\n    get(key, defaultValue) {\n        const value = this.$[key];\n        if (value === undefined) {\n            if (defaultValue === undefined) {\n                // eslint-disable-next-line prefer-destructuring\n                defaultValue = this.map[key].defaultValue;\n            }\n            return defaultValue;\n        }\n        return value;\n    }\n\n    set(key, value) {\n        const mapItem = this.map[key];\n        if (mapItem && mapItem.matchReg && !new RegExp(mapItem.matchReg).test(value)) {\n            throw new Error(`The value '${value}' for the key '${key}' is not valid, must match the regexp '${mapItem.matchReg}'.`);\n        }\n        this.$[key] = value;\n        Store.set(this._storeName, this.$);\n        return this;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/extension-config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1413,
    "kind": "variable",
    "name": "KEY_EXT_PREFIX",
    "memberof": "app/exts/extension-config.js",
    "static": true,
    "longname": "app/exts/extension-config.js~KEY_EXT_PREFIX",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/exts/extension-config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1414,
    "kind": "class",
    "name": "ExtensionConfig",
    "memberof": "app/exts/extension-config.js",
    "static": true,
    "longname": "app/exts/extension-config.js~ExtensionConfig",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extension-config.js",
    "importStyle": "ExtensionConfig",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 1415,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/exts/extension-config.js~ExtensionConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/extension-config.js~ExtensionConfig#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 1416,
    "kind": "member",
    "name": "_name",
    "memberof": "app/exts/extension-config.js~ExtensionConfig",
    "static": false,
    "longname": "app/exts/extension-config.js~ExtensionConfig#_name",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1417,
    "kind": "member",
    "name": "_configurations",
    "memberof": "app/exts/extension-config.js~ExtensionConfig",
    "static": false,
    "longname": "app/exts/extension-config.js~ExtensionConfig#_configurations",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1418,
    "kind": "member",
    "name": "_storeName",
    "memberof": "app/exts/extension-config.js~ExtensionConfig",
    "static": false,
    "longname": "app/exts/extension-config.js~ExtensionConfig#_storeName",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1419,
    "kind": "member",
    "name": "_map",
    "memberof": "app/exts/extension-config.js~ExtensionConfig",
    "static": false,
    "longname": "app/exts/extension-config.js~ExtensionConfig#_map",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1420,
    "kind": "member",
    "name": "$",
    "memberof": "app/exts/extension-config.js~ExtensionConfig",
    "static": false,
    "longname": "app/exts/extension-config.js~ExtensionConfig#$",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1421,
    "kind": "method",
    "name": "get",
    "memberof": "app/exts/extension-config.js~ExtensionConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/extension-config.js~ExtensionConfig#get",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1422,
    "kind": "method",
    "name": "set",
    "memberof": "app/exts/extension-config.js~ExtensionConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/extension-config.js~ExtensionConfig#set",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1423,
    "kind": "file",
    "name": "app/exts/extension.js",
    "content": "import Extension, {TYPES} from './base-extension';\nimport AppExtension from './app-extension';\nimport PluginExtension from './plugin-extension';\nimport ThemeExtension from './theme-extension';\n\n/**\n * 创建一个扩展类实例\n * @param {Object} pkg 扩展的 package.json 文件数据\n * @param {Object} [data=null] 扩展的运行时数据\n * @param {boolean} [buildIn=false] 是否为内置扩展\n * @return {Extension|AppExtension|PluginExtension|ThemeExtension} 扩展类实例\n */\nexport const createExtension = (pkg, data = null, buildIn = false) => {\n    if (pkg.pkg && !data) {\n        data = pkg.data;\n        pkg = pkg.pkg;\n    }\n\n    if (buildIn !== true) {\n        if (pkg && pkg.buildIn) {\n            delete pkg.buildIn;\n        }\n        if (data && data.buildIn) {\n            delete data.buildIn;\n        }\n    } else if (pkg.buildIn && pkg.buildIn.localPath) {\n        data.localPath = pkg.buildIn.localPath;\n    }\n\n    if (typeof data !== 'object') {\n        data = null;\n    }\n\n    switch (pkg.type) {\n    case TYPES.app:\n        return new AppExtension(pkg, data);\n    case TYPES.plugin:\n        return new PluginExtension(pkg, data);\n    case TYPES.theme:\n        return new ThemeExtension(pkg, data);\n    default:\n        return new Extension(pkg, data);\n    }\n};\n\n/**\n * 设置扩展所属的用户\n * @param {User} user 用户对象\n * @return {void}\n */\nexport const setExtensionUser = user => {\n    Extension.user = user;\n};\n\nexport {AppExtension, PluginExtension, ThemeExtension};\nexport default Extension;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/extension.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1424,
    "kind": "function",
    "name": "createExtension",
    "memberof": "app/exts/extension.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/extension.js~createExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extension.js",
    "importStyle": "{createExtension}",
    "description": "创建一个扩展类实例",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pkg",
        "description": "扩展的 package.json 文件数据"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "data",
        "description": "扩展的运行时数据"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "buildIn",
        "description": "是否为内置扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Extension",
        "AppExtension",
        "PluginExtension",
        "ThemeExtension"
      ],
      "spread": false,
      "description": "扩展类实例"
    }
  },
  {
    "__docId__": 1425,
    "kind": "function",
    "name": "setExtensionUser",
    "memberof": "app/exts/extension.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/extension.js~setExtensionUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extension.js",
    "importStyle": "{setExtensionUser}",
    "description": "设置扩展所属的用户",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "用户对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1426,
    "kind": "file",
    "name": "app/exts/extensions-db.js",
    "content": "import Store from '../utils/store';\nimport {createExtension} from './extension';\n\n/** 扩展数据库管理 */\n\n/**\n * 扩展数据库本地存储键前缀\n * @type {string}\n * @private\n */\nconst STORE_KEY = 'EXTENSIONS::database';\n\n/**\n * 扩展变更回调函数\n * @type {function}\n * @private\n */\nlet onChangeListener = null;\n\n/**\n * 存储本地数据中的所有扩展\n * @type {Extension[]}\n * @private\n */\nconst installs = Store.get(STORE_KEY, []).map(data => {\n    return createExtension(data);\n});\n\n/**\n * 获取已安装的所有扩展\n * @return {Extension[]} 已安装的所有扩展列表\n */\nexport const getInstalledExtensions = () => installs;\n\n/**\n * 将已安装的扩展保存到本地存储\n * @return {void}\n */\nexport const saveExtensionsToStore = () => {\n    Store.set(STORE_KEY, installs.map(x => x.storeData));\n};\n\n/**\n * 获取指定名称的扩展\n * @param {stirng} name 扩展名称\n * @return {Extension} 扩展对象\n */\nexport const getInstalledExtension = name => {\n    return installs.find(x => x.name === name);\n};\n\n/**\n * 获取扩展存储索引\n * @param {stirng} name 扩展名称\n * @return {number} 扩展索引\n */\nexport const getIndexOfInstallExtension = name => {\n    return installs.findIndex(x => x.name === name);\n};\n\n/**\n * 安装扩展并保存到数据库\n * @param {Extension} extension 扩展\n * @param {boolean} [override=false] 是否覆盖已安装的同名扩展\n * @param {function} beforeSave 在保存之前的回调函数\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const saveInstalledExtension = (extension, override = false, beforeSave = null) => {\n    if (extension.isRemote) {\n        if (onChangeListener) {\n            onChangeListener(extension, 'update');\n        }\n        return Promise.resolve(extension);\n    }\n    const oldExtensionIndex = getIndexOfInstallExtension(extension.name);\n    if (oldExtensionIndex > -1) {\n        if (!override) {\n            return Promise.reject(new Error('EXT_NAME_ALREADY_INSTALLED'));\n        }\n        const oldExtension = installs[oldExtensionIndex];\n        extension._data = Object.assign(oldExtension.data, extension._data);\n        extension.updateTime = new Date().getTime();\n        installs.splice(oldExtensionIndex, 1, extension);\n    } else {\n        if (extension.installTime === undefined) {\n            extension.installTime = new Date().getTime();\n        }\n        installs.push(extension);\n    }\n    if (beforeSave) {\n        beforeSave(extension);\n    }\n    saveExtensionsToStore();\n    if (onChangeListener) {\n        onChangeListener(extension, oldExtensionIndex > -1 ? 'update' : 'add');\n    }\n    return Promise.resolve(extension);\n};\n\n/**\n * 从已安装的扩展中移除\n * @param {Extension} extension 扩展\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const removeInstalledExtension = extension => {\n    const index = getIndexOfInstallExtension(extension.name);\n    if (index < 0) {\n        return Promise.reject(new Error('EXT_NOT_FOUND'));\n    }\n    installs.splice(index, 1);\n    saveExtensionsToStore();\n    if (onChangeListener) {\n        onChangeListener(extension, 'remove');\n    }\n    return Promise.resolve();\n};\n\n/**\n * 根据名称从已安装的扩展中移除\n * @param {string} name 扩展名称\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const removeInstalledExtensionByName = name => {\n    const extension = getInstalledExtension(name);\n    if (extension) {\n        return removeInstalledExtension(extension);\n    }\n    return Promise.reject(new Error('EXT_NOT_FOUND'));\n};\n\n/**\n * 设置扩展变更回调函数\n * @param {function} listener 回调函数\n * @return {void}\n */\nexport const setOnInstalledExtensionChangeListener = listener => {\n    onChangeListener = listener;\n};\n\nexport default {\n    get installs() {\n        return installs;\n    },\n\n    getInstall: getInstalledExtension,\n    saveInstall: saveInstalledExtension,\n    removeInstall: removeInstalledExtension,\n    setOnChangeListener: setOnInstalledExtensionChangeListener,\n    removeInstallByName: removeInstalledExtensionByName,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/extensions-db.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1427,
    "kind": "variable",
    "name": "STORE_KEY",
    "memberof": "app/exts/extensions-db.js",
    "static": true,
    "longname": "app/exts/extensions-db.js~STORE_KEY",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": null,
    "description": "扩展数据库本地存储键前缀",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1428,
    "kind": "variable",
    "name": "onChangeListener",
    "memberof": "app/exts/extensions-db.js",
    "static": true,
    "longname": "app/exts/extensions-db.js~onChangeListener",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": null,
    "description": "扩展变更回调函数",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1429,
    "kind": "variable",
    "name": "installs",
    "memberof": "app/exts/extensions-db.js",
    "static": true,
    "longname": "app/exts/extensions-db.js~installs",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": null,
    "description": "存储本地数据中的所有扩展",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Extension[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1430,
    "kind": "function",
    "name": "getInstalledExtensions",
    "memberof": "app/exts/extensions-db.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/extensions-db.js~getInstalledExtensions",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": "{getInstalledExtensions}",
    "description": "获取已安装的所有扩展",
    "lineNumber": 33,
    "return": {
      "nullable": null,
      "types": [
        "Extension[]"
      ],
      "spread": false,
      "description": "已安装的所有扩展列表"
    },
    "params": []
  },
  {
    "__docId__": 1431,
    "kind": "function",
    "name": "saveExtensionsToStore",
    "memberof": "app/exts/extensions-db.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/extensions-db.js~saveExtensionsToStore",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": "{saveExtensionsToStore}",
    "description": "将已安装的扩展保存到本地存储",
    "lineNumber": 39,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1432,
    "kind": "function",
    "name": "getInstalledExtension",
    "memberof": "app/exts/extensions-db.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/extensions-db.js~getInstalledExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": "{getInstalledExtension}",
    "description": "获取指定名称的扩展",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "stirng"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "扩展名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Extension"
      ],
      "spread": false,
      "description": "扩展对象"
    }
  },
  {
    "__docId__": 1433,
    "kind": "function",
    "name": "getIndexOfInstallExtension",
    "memberof": "app/exts/extensions-db.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/extensions-db.js~getIndexOfInstallExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": "{getIndexOfInstallExtension}",
    "description": "获取扩展存储索引",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "stirng"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "扩展名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "扩展索引"
    }
  },
  {
    "__docId__": 1434,
    "kind": "function",
    "name": "saveInstalledExtension",
    "memberof": "app/exts/extensions-db.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/extensions-db.js~saveInstalledExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": "{saveInstalledExtension}",
    "description": "安装扩展并保存到数据库",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "扩展"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "override",
        "description": "是否覆盖已安装的同名扩展"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "beforeSave",
        "description": "在保存之前的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1435,
    "kind": "function",
    "name": "removeInstalledExtension",
    "memberof": "app/exts/extensions-db.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/extensions-db.js~removeInstalledExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": "{removeInstalledExtension}",
    "description": "从已安装的扩展中移除",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1436,
    "kind": "function",
    "name": "removeInstalledExtensionByName",
    "memberof": "app/exts/extensions-db.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/extensions-db.js~removeInstalledExtensionByName",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": "{removeInstalledExtensionByName}",
    "description": "根据名称从已安装的扩展中移除",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "扩展名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1437,
    "kind": "function",
    "name": "setOnInstalledExtensionChangeListener",
    "memberof": "app/exts/extensions-db.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/extensions-db.js~setOnInstalledExtensionChangeListener",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/extensions-db.js",
    "importStyle": "{setOnInstalledExtensionChangeListener}",
    "description": "设置扩展变更回调函数",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1438,
    "kind": "file",
    "name": "app/exts/external-api.js",
    "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactSplitPane from 'react-split-pane';\nimport EmojionePicker from 'emojione-picker';\nimport marked from 'marked';\nimport md5 from 'md5';\nimport extractZip from 'extract-zip';\nimport emojione from 'emojione';\nimport DraftJs from 'draft-js';\nimport compareVersions from 'compare-versions';\nimport hotkeys from 'hotkeys-js';\nimport pinyin from 'pinyin';\nimport uuid from 'uuid';\nimport HTMLParser from 'htmlparser';\nimport platform from 'Platform';\nimport components from '../components';\nimport lang from '../lang';\nimport utils from '../utils';\nimport app from '../core';\nimport views from '../views/external';\n\n/**\n * 所有第三方 node 模块\n * @type {Map<string, any>}\n */\nconst nodeModules = {\n    React,\n    ReactDOM,\n    ReactSplitPane,\n    EmojionePicker,\n    marked,\n    md5,\n    fs: platform.fs,\n    extractZip,\n    emojione,\n    DraftJs,\n    HTMLParser,\n    compareVersions,\n    hotkeys,\n    pinyin,\n    uuid,\n    get jquery() {\n        return __non_webpack_require__('jquery'); // eslint-disable-line\n    }\n};\n\n/**\n * 导出开放给扩展的模块\n * @type {Map<string, any>}\n */\nexport default {\n    lang,\n    components,\n    utils,\n    platform,\n    app,\n    views,\n    nodeModules,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/external-api.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1439,
    "kind": "variable",
    "name": "nodeModules",
    "memberof": "app/exts/external-api.js",
    "static": true,
    "longname": "app/exts/external-api.js~nodeModules",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/exts/external-api.js",
    "importStyle": null,
    "description": "所有第三方 node 模块",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1440,
    "kind": "file",
    "name": "app/exts/exts.js",
    "content": "import Config from '../config';\nimport buildIns from './build-in';\nimport {createExtension} from './extension';\nimport {setOnInstalledExtensionChangeListener, getInstalledExtensions} from './extensions-db';\nimport events from '../core/events';\nimport {setServerOnChangeListener} from './server';\n\n/**\n * 事件名称表\n * @type {Object}\n * @private\n */\nconst EVENT = {\n    onChange: 'Extension.onChange'\n};\n\n/**\n * 扩展清单\n * @type {Extension[]}\n * @private\n */\nconst exts = [];\n\n/**\n * 应用 package.json 文件数据\n * @type {Object}\n * @private\n */\nconst PKG = Config.pkg;\n\n// 安装内置扩展\nbuildIns.forEach((buildIn, idx) => {\n    if (!buildIn.publisher) {\n        buildIn.publisher = Config.exts.buildInPublisher || Config.pkg.company;\n    }\n    if (!buildIn.author) {\n        buildIn.author = Config.exts.buildInAuthor || Config.pkg.company;\n    }\n    ['version', 'license', 'homepage', 'bugs', 'repository'].forEach(key => {\n        buildIn[key] = PKG[key];\n    });\n    exts.push(createExtension(buildIn, {installTime: idx}, true));\n});\n\n// 从数据库中加载用户安装的扩展\nexts.push(...getInstalledExtensions());\n\n/**\n * 扩展排序函数\n * @return {void}\n */\nconst sortExts = () => {\n    exts.sort((x, y) => {\n        let result = (y.isDev ? 1 : 0) - (x.isDev ? 1 : 0);\n        if (result === 0) {\n            result = (y.disabled ? 0 : 1) - (x.disabled ? 0 : 1);\n        }\n        if (result === 0) {\n            result = (y.isRemote ? 1 : 0) - (x.isRemote ? 1 : 0);\n        }\n        if (result === 0) {\n            result = y.installTime - x.installTime;\n        }\n        return result;\n    });\n};\n\n// 对扩展进行排序\nsortExts();\n\n/**\n * 应用扩展列表\n * @type {AppExtension}\n * @private\n */\nlet apps;\n\n/**\n * 主题扩展列表\n * @type {ThemeExtension}\n * @private\n */\nlet themes;\n\n/**\n * 插件扩展列表\n * @type {PluginExtension}\n * @private\n */\nlet plugins;\n\n/**\n * 对扩展进行分组\n * @return {void}\n * @private\n */\nconst groupExts = () => {\n    apps = exts.filter(x => x.type === 'app');\n    themes = exts.filter(x => x.type === 'theme');\n    plugins = exts.filter(x => x.type === 'plugin');\n};\n\n// 对扩展进行分组\ngroupExts();\n\n/**\n * 扩展变更事件回调函数\n * @param {Extension[]} changedExts 变更的扩展清单\n * @param {string} changeAction 变更操作类型\n * @return {void}\n */\nconst onChangeListener = (changedExts, changeAction) => {\n    if (!Array.isArray(changedExts)) {\n        changedExts = [changedExts];\n    }\n    if (changeAction === 'remove') {\n        changedExts.forEach(ext => {\n            const findIndex = exts.findIndex(x => x.name === ext.name);\n            if (findIndex > -1) {\n                exts.splice(findIndex, 1);\n            }\n        });\n    } else if (changeAction === 'update' || changeAction === 'add' || changeAction === 'upsert') {\n        let hasExtAdd = false;\n        changedExts.forEach(ext => {\n            const findIndex = exts.findIndex(x => x.name === ext.name);\n            if (findIndex > -1) {\n                exts.splice(findIndex, 1, ext);\n            } else {\n                exts.splice(0, 0, ext);\n                hasExtAdd = true;\n            }\n        });\n        if (hasExtAdd) {\n            sortExts();\n        }\n    }\n    groupExts();\n    events.emit(EVENT.onChange, changedExts, changeAction);\n};\n\n// 设置已安装扩展变更事件回调函数\nsetOnInstalledExtensionChangeListener(onChangeListener);\n\n// 设置服务器扩展变更事件回调函数\nsetServerOnChangeListener(onChangeListener);\n\n/**\n * 根据扩展类型获取扩展列表\n * @param {string} type 类型名称\n * @return {Extension[]} 扩展列表\n */\nexport const getTypeList = type => {\n    switch (type) {\n    case 'app':\n        return apps;\n    case 'theme':\n        return themes;\n    case 'plugin':\n        return plugins;\n    default:\n        return exts;\n    }\n};\n\n/**\n * 根据扩展名称和类型获取扩展\n * @param {string} name 扩展名称\n * @param {?string} type 扩展类型\n * @return {Extension} 扩展\n */\nexport const getExt = (name, type) => getTypeList(type).find(x => x.name === name);\n\n/**\n * 默认扩展\n * @type {Extension}\n */\nexport const defaultApp = apps.find(x => x.buildIn && x.buildIn.asDefault) || exts.apps[0];\n\n/**\n * 根据名称获取应用扩展\n * @param {string} name 扩展名称\n * @return {AppExtension} 应用扩展\n */\nexport const getAppExt = name => (getExt(name, 'app'));\n\n/**\n * 根据名称获取插件扩展\n * @param {string} name 扩展名称\n * @return {PluginExtension} 插件扩展\n */\nexport const getPluginExt = name => (getExt(name, 'plugin'));\n\n/**\n * 根据名称获取主题扩展\n * @param {string} name 扩展名称\n * @return {ThemeExtension} 主题扩展\n */\nexport const getThemeExt = name => (getExt(name, 'theme'));\n\n/**\n * 搜索扩展\n * @param {string} keys 搜索关键字\n * @param {string} [type='app'] 搜索的扩展类型\n * @return {Extension[]} 搜索到的扩展列表\n */\nexport const searchExts = (keys, type = 'app') => {\n    keys = keys.trim().toLowerCase().split(' ');\n    const result = [];\n    getTypeList(type).forEach(theExt => {\n        const score = theExt.getMatchScore(keys);\n        if (score) {\n            result.push({score, ext: theExt});\n        }\n    });\n    result.sort((x, y) => y.score - x.score);\n    return result.map(x => x.ext);\n};\n\n/**\n * 搜索应用扩展\n * @param {string} keys 搜索关键字\n * @return {AppExtension[]} 搜索到的应用扩展列表\n */\nexport const searchApps = keys => searchExts(keys);\n\n/**\n * 绑定扩展变更事件\n * @param {funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onExtensionChange = listener => events.on(EVENT.onChange, listener);\n\n/**\n * 遍历已安装的扩展\n * @param {function(ext: Extension)} callback 遍历回调函数\n * @param {boolean} [includeDisabled=false] 是否包含已禁用的扩展\n * @return {void}\n */\nexport const forEachExtension = (callback, includeDisabled = false) => {\n    exts.forEach(x => {\n        if (!x.disabled || includeDisabled) {\n            callback(x);\n        }\n    });\n};\n\nif (DEBUG) {\n    console.collapse('Extensions Init', 'greenBg', `Total: ${exts.length}, Apps: ${apps.length}, Plugins: ${plugins.length}, Themes: ${themes.length}`, 'greenPale');\n    console.log('exts', exts);\n    console.log('apps', apps);\n    console.log('themes', themes);\n    console.log('plugins', plugins);\n    console.groupEnd();\n}\n\n/**\n * 获取扩展列表\n * @return {Extension[]} 扩展列表\n */\nexport const getExts = () => exts;\n\n/**\n * 获取应用扩展列表\n * @return {Extension[]} 应用扩展列表\n */\nexport const getAppExts = () => apps;\n\n/**\n * 获取主题扩展列表\n * @return {Extension[]} 主题扩展列表\n */\nexport const getThemeExts = () => themes;\n\n/**\n * 获取插件扩展列表\n * @return {Extension[]} 插件扩展列表\n */\nexport const getPluginExts = () => plugins;\n\nexport default {\n    get exts() {\n        return exts;\n    },\n    get apps() {\n        return apps;\n    },\n    get themes() {\n        return themes;\n    },\n    get plugins() {\n        return plugins;\n    },\n    get defaultApp() {\n        return defaultApp;\n    },\n\n    getTypeList,\n    getExt,\n    getApp: getAppExt,\n    getPlugin: getPluginExt,\n    getTheme: getThemeExt,\n\n    search: searchExts,\n    searchApps,\n    onExtensionChange,\n    forEach: forEachExtension,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/exts.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1441,
    "kind": "variable",
    "name": "EVENT",
    "memberof": "app/exts/exts.js",
    "static": true,
    "longname": "app/exts/exts.js~EVENT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": null,
    "description": "事件名称表",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1442,
    "kind": "variable",
    "name": "exts",
    "memberof": "app/exts/exts.js",
    "static": true,
    "longname": "app/exts/exts.js~exts",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": null,
    "description": "扩展清单",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Extension[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1443,
    "kind": "variable",
    "name": "PKG",
    "memberof": "app/exts/exts.js",
    "static": true,
    "longname": "app/exts/exts.js~PKG",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": null,
    "description": "应用 package.json 文件数据",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1444,
    "kind": "function",
    "name": "sortExts",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~sortExts",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": null,
    "description": "扩展排序函数",
    "lineNumber": 52,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1445,
    "kind": "function",
    "name": "groupExts",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~groupExts",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": null,
    "description": "对扩展进行分组",
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1446,
    "kind": "function",
    "name": "onChangeListener",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~onChangeListener",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": null,
    "description": "扩展变更事件回调函数",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension[]"
        ],
        "spread": false,
        "optional": false,
        "name": "changedExts",
        "description": "变更的扩展清单"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "changeAction",
        "description": "变更操作类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1447,
    "kind": "function",
    "name": "getTypeList",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~getTypeList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{getTypeList}",
    "description": "根据扩展类型获取扩展列表",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "类型名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Extension[]"
      ],
      "spread": false,
      "description": "扩展列表"
    }
  },
  {
    "__docId__": 1448,
    "kind": "function",
    "name": "getExt",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~getExt",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{getExt}",
    "description": "根据扩展名称和类型获取扩展",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "扩展名称"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "扩展类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Extension"
      ],
      "spread": false,
      "description": "扩展"
    }
  },
  {
    "__docId__": 1449,
    "kind": "variable",
    "name": "defaultApp",
    "memberof": "app/exts/exts.js",
    "static": true,
    "longname": "app/exts/exts.js~defaultApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{defaultApp}",
    "description": "默认扩展",
    "lineNumber": 178,
    "type": {
      "nullable": null,
      "types": [
        "Extension"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1450,
    "kind": "function",
    "name": "getAppExt",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~getAppExt",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{getAppExt}",
    "description": "根据名称获取应用扩展",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "扩展名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AppExtension"
      ],
      "spread": false,
      "description": "应用扩展"
    }
  },
  {
    "__docId__": 1451,
    "kind": "function",
    "name": "getPluginExt",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~getPluginExt",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{getPluginExt}",
    "description": "根据名称获取插件扩展",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "扩展名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PluginExtension"
      ],
      "spread": false,
      "description": "插件扩展"
    }
  },
  {
    "__docId__": 1452,
    "kind": "function",
    "name": "getThemeExt",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~getThemeExt",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{getThemeExt}",
    "description": "根据名称获取主题扩展",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "扩展名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ThemeExtension"
      ],
      "spread": false,
      "description": "主题扩展"
    }
  },
  {
    "__docId__": 1453,
    "kind": "function",
    "name": "searchExts",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~searchExts",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{searchExts}",
    "description": "搜索扩展",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "搜索关键字"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'app'",
        "defaultRaw": "'app'",
        "name": "type",
        "description": "搜索的扩展类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Extension[]"
      ],
      "spread": false,
      "description": "搜索到的扩展列表"
    }
  },
  {
    "__docId__": 1454,
    "kind": "function",
    "name": "searchApps",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~searchApps",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{searchApps}",
    "description": "搜索应用扩展",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "搜索关键字"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AppExtension[]"
      ],
      "spread": false,
      "description": "搜索到的应用扩展列表"
    }
  },
  {
    "__docId__": 1455,
    "kind": "function",
    "name": "onExtensionChange",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~onExtensionChange",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{onExtensionChange}",
    "description": "绑定扩展变更事件",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1456,
    "kind": "function",
    "name": "forEachExtension",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~forEachExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{forEachExtension}",
    "description": "遍历已安装的扩展",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(ext: Extension)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "遍历回调函数"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "includeDisabled",
        "description": "是否包含已禁用的扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1457,
    "kind": "function",
    "name": "getExts",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~getExts",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{getExts}",
    "description": "获取扩展列表",
    "lineNumber": 261,
    "return": {
      "nullable": null,
      "types": [
        "Extension[]"
      ],
      "spread": false,
      "description": "扩展列表"
    },
    "params": []
  },
  {
    "__docId__": 1458,
    "kind": "function",
    "name": "getAppExts",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~getAppExts",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{getAppExts}",
    "description": "获取应用扩展列表",
    "lineNumber": 267,
    "return": {
      "nullable": null,
      "types": [
        "Extension[]"
      ],
      "spread": false,
      "description": "应用扩展列表"
    },
    "params": []
  },
  {
    "__docId__": 1459,
    "kind": "function",
    "name": "getThemeExts",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~getThemeExts",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{getThemeExts}",
    "description": "获取主题扩展列表",
    "lineNumber": 273,
    "return": {
      "nullable": null,
      "types": [
        "Extension[]"
      ],
      "spread": false,
      "description": "主题扩展列表"
    },
    "params": []
  },
  {
    "__docId__": 1460,
    "kind": "function",
    "name": "getPluginExts",
    "memberof": "app/exts/exts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/exts.js~getPluginExts",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/exts.js",
    "importStyle": "{getPluginExts}",
    "description": "获取插件扩展列表",
    "lineNumber": 279,
    "return": {
      "nullable": null,
      "types": [
        "Extension[]"
      ],
      "spread": false,
      "description": "插件扩展列表"
    },
    "params": []
  },
  {
    "__docId__": 1461,
    "kind": "file",
    "name": "app/exts/index.js",
    "content": "import all from './exts';\nimport ui from './ui';\nimport manager from './manager';\nimport themes from './themes';\n\nconst exts = {\n    all,\n    ui,\n    manager,\n    themes,\n};\n\nif (DEBUG) {\n    global.$.exts = exts;\n}\n\nexport default exts;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1462,
    "kind": "variable",
    "name": "exts",
    "memberof": "app/exts/index.js",
    "static": true,
    "longname": "app/exts/index.js~exts",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/index.js",
    "importStyle": "exts",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{\"all\": *, \"ui\": *, \"manager\": *, \"themes\": *}"
      ]
    }
  },
  {
    "__docId__": 1463,
    "kind": "file",
    "name": "app/exts/manager.js",
    "content": "import {env, dialog, fs as fse} from 'Platform';\nimport Path from 'path';\nimport compareVersions from 'compare-versions';\nimport uuid from 'uuid/v4';\nimport extractZip from 'extract-zip';\nimport db, {removeInstalledExtension, saveInstalledExtension, getInstalledExtension} from './extensions-db';\nimport {createExtension} from './extension';\nimport Modal from '../components/modal';\nimport Lang from '../lang';\n\n/**\n * 生成扩展本地保存路径\n * @param {Extension} extension 扩展\n * @return {string} 扩展本地保存路径\n */\nexport const createExtensionSavePath = extension => {\n    return extension.localPath || Path.join(env.dataPath, 'xexts', extension.name);\n};\n\n/**\n * 卸载扩展\n * @param {Extension} extension 要卸载的扩展\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const uninstallExtension = extension => {\n    return removeInstalledExtension(extension).then(() => {\n        extension.detach();\n        if (extension.isDev) {\n            return Promise.resolve();\n        }\n        const savedPath = createExtensionSavePath(extension);\n        return fse.remove(savedPath);\n    });\n};\n\n/**\n * 解压扩展压缩文件\n * @param {string} filePath 扩展压缩文件路径\n * @returns {Promise} 使用 Promise 异步返回处理结果\n * @private\n */\nconst extractInstallFile = filePath => {\n    return new Promise((resolve, reject) => {\n        const tmpPath = Path.join(env.tmpPath, uuid());\n        extractZip(filePath, {dir: tmpPath}, err => {\n            if (err) {\n                err.code = 'EXT_UNZIP_ERROR';\n                reject(err);\n            } else {\n                resolve(tmpPath);\n            }\n        });\n    });\n};\n\n/**\n * 安装扩展，并尝试进行热加载\n * @param {Extension} extension 要加载的扩展\n * @param {boolean} [override=true] 是否覆盖数据库中已有的扩展\n * @param {boolean} [tryHotAttach=true] 是否安装后尝试进行热加载\n * @returns {Promise} 使用 Promise 异步返回处理结果\n * @private\n */\nconst saveAndAttach = (extension, override = true, tryHotAttach = true) => {\n    return saveInstalledExtension(extension, override, tryHotAttach ? ext => {\n        ext.hotAttach();\n    } : null);\n};\n\n/**\n * 安装扩展\n * @param {Extension} extension 要加载的扩展\n * @param {boolean} [override=true] 是否覆盖数据库中已有的扩展\n * @returns {Promise} 使用 Promise 异步返回处理结果\n * @private\n */\nconst saveExtension = (extension, override = true) => {\n    return saveAndAttach(extension, override, false);\n};\n\n/**\n * 重新加载正在开发的扩展\n * @param {Extension} extension 要重新加载的扩展\n * @returns {boolean|Extension} 如果返回 `Extension` 实例则操作成功，否则操作失败\n */\nexport const reloadDevExtension = extension => {\n    const path = extension.localPath;\n    if (extension.isModuleLoaded) {\n        extension.detach();\n    }\n    if (path) {\n        const pkgFilePath = Path.join(path, 'package.json');\n        const pkg = fse.readJSONSync(pkgFilePath, {throws: false});\n        if (pkg) {\n            extension = createExtension(pkg, extension.data);\n            saveAndAttach(extension);\n            if (DEBUG) {\n                console.collapse('Extension Reload for Dev', 'greenBg', extension.name, 'greenPale');\n                console.log('extension', extension);\n                console.groupEnd();\n            }\n            return extension;\n        }\n    }\n    return false;\n};\n\n/**\n * 从指定目录安装扩展\n * @param {string} dir 扩展目录\n * @param {boolean} [deleteDir=false] 是否在安装完成后删除扩展目录\n * @param {boolean} [devMode=false] 是否是开发模式\n * @returns {Promise} 使用 Promise 异步返回处理结果\n * @private\n */\nconst installFromDir = (dir, deleteDir = false, devMode = false) => {\n    const pkgFilePath = Path.join(dir, 'package.json');\n    let extension = null;\n    return fse.readJSON(pkgFilePath).then(pkg => {\n        extension = createExtension(pkg, {\n            isDev: devMode\n        });\n        const savedPath = devMode ? dir : createExtensionSavePath(extension);\n        extension.localPath = savedPath;\n        if (extension.hasModule) {\n            return Modal.confirm(Lang.format('exts.installWarning', extension.displayName), {\n                actions: [{label: Lang.string('exts.continuneInsatll'), type: 'submit'}, {type: 'cancel'}]\n            }).then(confirmed => {\n                if (confirmed) {\n                    return Promise.resolve(extension);\n                }\n                return Promise.reject();\n            });\n        }\n        return Promise.resolve(extension);\n    }).then(() => {\n        const dbExt = getInstalledExtension(extension.name);\n        if (dbExt) {\n            if (dbExt.version && extension.version && compareVersions(dbExt.version, extension.version) < 0) {\n                return Modal.confirm(Lang.format('ext.updateInstall.format', dbExt.displayName, dbExt.version, extension.version)).then(confirmed => {\n                    if (confirmed) {\n                        return saveExtension(extension);\n                    }\n                    return Promise.reject();\n                });\n            }\n            return Modal.confirm(Lang.format('ext.overrideInstall.format', dbExt.displayName, dbExt.version || '*', extension.displayName, extension.version || '*')).then(confirmed => {\n                if (confirmed) {\n                    return saveExtension(extension);\n                }\n                return Promise.reject();\n            });\n        }\n        return saveExtension(extension, false);\n    }).then(() => {\n        if (!devMode) {\n            return fse.emptyDir(extension.localPath).then(() => {\n                return fse.copy(dir, extension.localPath);\n            });\n        }\n        return Promise.resolve(extension);\n    }).then(() => {\n        if (deleteDir) {\n            return fse.remove(dir).then(() => {\n                return Promise.resolve(extension);\n            });\n        }\n        saveExtension(extension, true);\n        return Promise.resolve(extension);\n    }).catch(error => {\n        if (deleteDir) {\n            return fse.remove(dir).then(() => {\n                return Promise.reject(error);\n            });\n        }\n        return Promise.reject(error);\n    });\n};\n\n/**\n * 从扩展开发目录加载开发中的扩展\n * @param {string} dir 扩展开发目录\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const installExtensionFromDevDir = (dir) => {\n    return installFromDir(dir, false, true);\n};\n\n/**\n * 从扩展压缩包文件安装扩展，支持 `.zip` 文件和 `.xext` 文件\n * @param {string} filePath 扩展压缩包文件路径\n * @param {boolean} [deleteFile=false] 是否在安装完成后删除扩展压缩包文件\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const installExtensionFromFile = (filePath, deleteFile = false) => {\n    return extractInstallFile(filePath).then(tmpPath => {\n        if (deleteFile) {\n            fse.removeSync(filePath);\n        }\n        return installFromDir(tmpPath, true);\n    });\n};\n\n/**\n * 打开一个路径选择对话框从用户选择的路径安装扩展，支持从扩展压缩包文件（.zip 或 .xext）或 `package.json` 文件进行安装\n * 如果启用开发模式安装，则必须选择开发目录内的 `package.json` 文件进行安装\n * @param {function} callback 安装完成后的回调函数\n * @param {boolean} [devMode=false] 是否是开发模式\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const openInstallExtensionDialog = (callback, devMode = false) => {\n    dialog.showOpenDialog(devMode ? '.json' : '.xext,.zip', files => {\n        if (files && files.length) {\n            const filePath = files[0].path;\n            const extName = Path.extname(filePath).toLowerCase();\n            if (extName === '.json' && Path.basename(filePath) === 'package.json') {\n                installFromDir(Path.dirname(filePath), false, devMode).then(extension => {\n                    if (callback) {\n                        callback(extension);\n                    }\n                }).catch(error => {\n                    if (callback) {\n                        callback(false, error);\n                    }\n                });\n            } else if (extName === '.xext' || extName === '.zip') {\n                installExtensionFromFile(filePath).then(extension => {\n                    if (callback) {\n                        callback(extension);\n                    }\n                }).catch(error => {\n                    if (callback) {\n                        callback(false, error);\n                    }\n                });\n            } else {\n                if (callback) {\n                    callback(false, 'EXT_NOT_EXT_SOURCE');\n                }\n            }\n        } else {\n            if (callback) {\n                callback(false);\n            }\n        }\n    });\n};\n\n/**\n * 加载扩展的 `README.md` 文件\n * @param {Extension} extension 扩展\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const loadExtensionReadmeFile = extension => {\n    const filePath = Path.join(createExtensionSavePath(extension), 'README.md');\n    return fse.readFile(filePath, 'utf8');\n};\n\n/**\n * 启用或禁用扩展\n * @param {Extension} extension 要设置的扩展对象\n * @param {boolean} [disabled=true] 如果为 true，则启用扩展，否则禁用扩展\n * @return {void}\n */\nexport const setExtensionDisabled = (extension, disabled = true) => {\n    disabled = !!disabled;\n    if (extension.disabled !== disabled) {\n        if (disabled) {\n            extension.detach();\n            extension.disabled = true;\n        } else {\n            extension.disabled = false;\n            extension.hotAttach();\n        }\n    }\n    saveInstalledExtension(extension, true);\n};\n\n/**\n * 启用扩展\n *\n * @param {Extension} extension 要启用的扩展对象\n * @return {void}\n */\nexport const setExtensionEnabled = extension => {\n    return setExtensionDisabled(extension, false);\n};\n\n\nexport default {\n    db,\n    createSavePath: createExtensionSavePath,\n    uninstall: uninstallExtension,\n    installExtensionFromFile,\n    openInstallDialog: openInstallExtensionDialog,\n    loadReadmeMarkdown: loadExtensionReadmeFile,\n    installFromDevDir: installExtensionFromDevDir,\n    reloadDevExtension,\n    setExtensionDisabled,\n    setExtensionEnabled\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1464,
    "kind": "function",
    "name": "createExtensionSavePath",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~createExtensionSavePath",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": "{createExtensionSavePath}",
    "description": "生成扩展本地保存路径",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "扩展本地保存路径"
    }
  },
  {
    "__docId__": 1465,
    "kind": "function",
    "name": "uninstallExtension",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~uninstallExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": "{uninstallExtension}",
    "description": "卸载扩展",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要卸载的扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1466,
    "kind": "function",
    "name": "extractInstallFile",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~extractInstallFile",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": null,
    "description": "解压扩展压缩文件",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "扩展压缩文件路径"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1467,
    "kind": "function",
    "name": "saveAndAttach",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~saveAndAttach",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": null,
    "description": "安装扩展，并尝试进行热加载",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要加载的扩展"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "override",
        "description": "是否覆盖数据库中已有的扩展"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "tryHotAttach",
        "description": "是否安装后尝试进行热加载"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1468,
    "kind": "function",
    "name": "saveExtension",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~saveExtension",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": null,
    "description": "安装扩展",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要加载的扩展"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "override",
        "description": "是否覆盖数据库中已有的扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1469,
    "kind": "function",
    "name": "reloadDevExtension",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~reloadDevExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": "{reloadDevExtension}",
    "description": "重新加载正在开发的扩展",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean|Extension} 如果返回 `Extension` 实例则操作成功，否则操作失败"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要重新加载的扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "Extension"
      ],
      "spread": false,
      "description": "如果返回 `Extension` 实例则操作成功，否则操作失败"
    }
  },
  {
    "__docId__": 1470,
    "kind": "function",
    "name": "installFromDir",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~installFromDir",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": null,
    "description": "从指定目录安装扩展",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "扩展目录"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "deleteDir",
        "description": "是否在安装完成后删除扩展目录"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "devMode",
        "description": "是否是开发模式"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1471,
    "kind": "function",
    "name": "installExtensionFromDevDir",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~installExtensionFromDevDir",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": "{installExtensionFromDevDir}",
    "description": "从扩展开发目录加载开发中的扩展",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "扩展开发目录"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1472,
    "kind": "function",
    "name": "installExtensionFromFile",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~installExtensionFromFile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": "{installExtensionFromFile}",
    "description": "从扩展压缩包文件安装扩展，支持 `.zip` 文件和 `.xext` 文件",
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "扩展压缩包文件路径"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "deleteFile",
        "description": "是否在安装完成后删除扩展压缩包文件"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1473,
    "kind": "function",
    "name": "openInstallExtensionDialog",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~openInstallExtensionDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": "{openInstallExtensionDialog}",
    "description": "打开一个路径选择对话框从用户选择的路径安装扩展，支持从扩展压缩包文件（.zip 或 .xext）或 `package.json` 文件进行安装\n如果启用开发模式安装，则必须选择开发目录内的 `package.json` 文件进行安装",
    "lineNumber": 211,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "安装完成后的回调函数"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "devMode",
        "description": "是否是开发模式"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1474,
    "kind": "function",
    "name": "loadExtensionReadmeFile",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~loadExtensionReadmeFile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": "{loadExtensionReadmeFile}",
    "description": "加载扩展的 `README.md` 文件",
    "lineNumber": 254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1475,
    "kind": "function",
    "name": "setExtensionDisabled",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~setExtensionDisabled",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": "{setExtensionDisabled}",
    "description": "启用或禁用扩展",
    "lineNumber": 265,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要设置的扩展对象"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "disabled",
        "description": "如果为 true，则启用扩展，否则禁用扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1476,
    "kind": "function",
    "name": "setExtensionEnabled",
    "memberof": "app/exts/manager.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/manager.js~setExtensionEnabled",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/manager.js",
    "importStyle": "{setExtensionEnabled}",
    "description": "启用扩展",
    "lineNumber": 285,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要启用的扩展对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1477,
    "kind": "file",
    "name": "app/exts/opened-app.js",
    "content": "// eslint-disable-next-line import/no-unresolved\nimport Platform from 'Platform';\nimport {ifEmptyStringThen} from '../utils/string-helper';\nimport {getSearchParam} from '../utils/html-helper';\n\n/**\n * 用户打开的扩展应用类\n *\n * @export\n * @class OpenedApp\n */\nexport default class OpenedApp {\n    /**\n     * 创建用户打开的应用 ID\n     *\n     * @static\n     * @memberof OpenedApp\n     * @param {string} name 应用名称\n     * @param {string} pageName 子界面页面名称\n     * @return {string} 用户打开的应用 ID\n     */\n    static createId = (name, pageName) => (pageName ? `${name}@${pageName}` : name);\n\n    /**\n     * 创建一个打开的应用实例\n     *\n     * @param {AppExtension} app 要打开的应用实例\n     * @param {?string} [pageName=null] 子界面名称\n     * @param {?(Object|string)} [params=null] 界面访问参数\n     */\n    constructor(app, pageName = null, params = null) {\n        this._app = app;\n        this._pageName = pageName;\n        this.params = params;\n\n        const now = new Date().getTime();\n        this._createTime = now;\n        this._openTime = now;\n    }\n\n    /**\n     * 获取打开的应用 ID\n     * @memberof OpenedApp\n     * @type {string}\n     */\n    get id() {\n        if (!this._id) {\n            this._id = this._pageName ? `${this._app.name}@${this._pageName}` : this._app.name;\n        }\n        return this._id;\n    }\n\n    /**\n     * 获取子界面名称\n     * @memberof OpenedApp\n     * @type {string}\n     */\n    get pageName() {\n        return this._pageName;\n    }\n\n    /**\n     * 获取标识名称\n     * @deprecated 使用 `id` 属性代替\n     * @memberof OpenedApp\n     * @type {string}\n     */\n    get name() {\n        return this.id;\n    }\n\n    /**\n     * 获取应用对象\n     * @memberof OpenedApp\n     * @type {AppExtension}\n     */\n    get app() {\n        return this._app;\n    }\n\n    /**\n     * 获取应用名\n     * @memberof OpenedApp\n     * @type {string}\n     */\n    get appName() {\n        return this._app.name;\n    }\n\n    /**\n     * 获取在界面上显示的名称\n     * @memberof OpenedApp\n     * @type {string}\n     */\n    get displayName() {\n        return ifEmptyStringThen(this._displayName, this._app.displayName);\n    }\n\n    /**\n     * 设置显示的名称\n     * @memberof OpenedApp\n     * @param {string} displayName 示的名称\n     */\n    set displayName(displayName) {\n        this._displayName = displayName;\n    }\n\n    /**\n     * 获取上次打开的时间戳\n     * @memberof OpenedApp\n     * @type {number}\n     */\n    get openTime() {\n        return this._openTime;\n    }\n\n    /**\n     * 获取第一次打开的时间戳\n     * @memberof OpenedApp\n     * @type {number}\n     */\n    get createTime() {\n        return this._createTime;\n    }\n\n    /**\n     * 获取是否是固定的应用（无法被关闭）\n     * @memberof OpenedApp\n     * @type {boolean}\n     */\n    get isFixed() {\n        return this._app.isFixed;\n    }\n\n    /**\n     * 获取是否默认打开的应用\n     * @memberof OpenedApp\n     * @type {boolean}\n     */\n    get isDefault() {\n        return this._app.isDefault;\n    }\n\n    /**\n     * 获取界面访问参数\n     * @memberof OpenedApp\n     * @type {Object}\n     */\n    get params() {\n        return this._params;\n    }\n\n    /**\n     * 设置应用访问的参数\n     * @memberof OpenedApp\n     * @param {Object|string} params 访问的参数对象或者 `key=val1&key=val2` 格式的参数字符串\n     */\n    set params(params) {\n        if (typeof params === 'string') {\n            params = getSearchParam(null, params);\n        }\n        this._params = params;\n    }\n\n    /**\n     * 获取 Hash 格式的路由地址\n     * @memberof OpenedApp\n     * @type {string}\n     */\n    get hashRoute() {\n        return `#${this.routePath}`;\n    }\n\n    /**\n     * 获取路由地址\n     * @memberof OpenedApp\n     * @type {string}\n     */\n    get routePath() {\n        let route = `/exts/app/${this.id}`;\n        if (this.params) {\n            const params = Object.keys(this.params).map(x => `${x}=${encodeURIComponent(this.params[x])}`).join('&');\n            route += `/${params}`;\n        }\n        return route;\n    }\n\n    /**\n     * 获取直接访问地址\n     * @memberof OpenedApp\n     * @type {string}\n     */\n    get directUrl() {\n        const direct = this.params && this.params.DIRECT;\n        return direct || this.app.webViewUrl;\n    }\n\n    /**\n     * 更新最后打开的时间\n     *\n     * @param {number} time 最后打开的时间戳\n     * @memberof OpenedApp\n     * @return {void}\n     */\n    updateOpenTime(time) {\n        this._openTime = time || new Date().getTime();\n    }\n\n    /**\n     * 获取应用对应的 Webview 对象\n     * @memberof OpenedApp\n     * @type {Electron.Webview}\n     */\n    get webview() {\n        return this._webview;\n    }\n\n    /**\n     * 设置应用对应的 Webview 对象\n     * @memberof OpenedApp\n     * @param {Electron.Webview} webview Webview 对象\n     */\n    set webview(webview) {\n        if (!this._webview && Platform.webview) {\n            Platform.webview.initWebview(webview);\n        }\n        this._webview = webview;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/opened-app.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1478,
    "kind": "class",
    "name": "OpenedApp",
    "memberof": "app/exts/opened-app.js",
    "static": true,
    "longname": "app/exts/opened-app.js~OpenedApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/opened-app.js",
    "importStyle": "OpenedApp",
    "description": "用户打开的扩展应用类",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "OpenedApp"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 1479,
    "kind": "member",
    "name": "createId",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "static": true,
    "longname": "app/exts/opened-app.js~OpenedApp.createId",
    "access": "public",
    "description": "创建用户打开的应用 ID",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "应用名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pageName",
        "description": "子界面页面名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "用户打开的应用 ID"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1480,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#constructor",
    "access": "public",
    "description": "创建一个打开的应用实例",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "AppExtension"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "要打开的应用实例"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "pageName",
        "description": "子界面名称"
      },
      {
        "nullable": true,
        "types": [
          "Object",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "params",
        "description": "界面访问参数"
      }
    ]
  },
  {
    "__docId__": 1481,
    "kind": "member",
    "name": "_app",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#_app",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1482,
    "kind": "member",
    "name": "_pageName",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#_pageName",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1484,
    "kind": "member",
    "name": "_createTime",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#_createTime",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1485,
    "kind": "member",
    "name": "_openTime",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#_openTime",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1486,
    "kind": "get",
    "name": "id",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#id",
    "access": "public",
    "description": "获取打开的应用 ID",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1487,
    "kind": "member",
    "name": "_id",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#_id",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1488,
    "kind": "get",
    "name": "pageName",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#pageName",
    "access": "public",
    "description": "获取子界面名称",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1489,
    "kind": "get",
    "name": "name",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#name",
    "access": "public",
    "description": "获取标识名称",
    "lineNumber": 68,
    "deprecated": "使用 `id` 属性代替",
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1490,
    "kind": "get",
    "name": "app",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#app",
    "access": "public",
    "description": "获取应用对象",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "AppExtension"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1491,
    "kind": "get",
    "name": "appName",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#appName",
    "access": "public",
    "description": "获取应用名",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1492,
    "kind": "get",
    "name": "displayName",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#displayName",
    "access": "public",
    "description": "获取在界面上显示的名称",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1493,
    "kind": "set",
    "name": "displayName",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#displayName",
    "access": "public",
    "description": "设置显示的名称",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "displayName",
        "description": "示的名称"
      }
    ]
  },
  {
    "__docId__": 1494,
    "kind": "member",
    "name": "_displayName",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#_displayName",
    "access": "private",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1495,
    "kind": "get",
    "name": "openTime",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#openTime",
    "access": "public",
    "description": "获取上次打开的时间戳",
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1496,
    "kind": "get",
    "name": "createTime",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#createTime",
    "access": "public",
    "description": "获取第一次打开的时间戳",
    "lineNumber": 122,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1497,
    "kind": "get",
    "name": "isFixed",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#isFixed",
    "access": "public",
    "description": "获取是否是固定的应用（无法被关闭）",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1498,
    "kind": "get",
    "name": "isDefault",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#isDefault",
    "access": "public",
    "description": "获取是否默认打开的应用",
    "lineNumber": 140,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1499,
    "kind": "get",
    "name": "params",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#params",
    "access": "public",
    "description": "获取界面访问参数",
    "lineNumber": 149,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1500,
    "kind": "set",
    "name": "params",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#params",
    "access": "public",
    "description": "设置应用访问的参数",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "访问的参数对象或者 `key=val1&key=val2` 格式的参数字符串"
      }
    ]
  },
  {
    "__docId__": 1501,
    "kind": "member",
    "name": "_params",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#_params",
    "access": "private",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1502,
    "kind": "get",
    "name": "hashRoute",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#hashRoute",
    "access": "public",
    "description": "获取 Hash 格式的路由地址",
    "lineNumber": 170,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1503,
    "kind": "get",
    "name": "routePath",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#routePath",
    "access": "public",
    "description": "获取路由地址",
    "lineNumber": 179,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1504,
    "kind": "get",
    "name": "directUrl",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#directUrl",
    "access": "public",
    "description": "获取直接访问地址",
    "lineNumber": 193,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1505,
    "kind": "method",
    "name": "updateOpenTime",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#updateOpenTime",
    "access": "public",
    "description": "更新最后打开的时间",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "最后打开的时间戳"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1507,
    "kind": "get",
    "name": "webview",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#webview",
    "access": "public",
    "description": "获取应用对应的 Webview 对象",
    "lineNumber": 214,
    "type": {
      "nullable": null,
      "types": [
        "Electron.Webview"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1508,
    "kind": "set",
    "name": "webview",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#webview",
    "access": "public",
    "description": "设置应用对应的 Webview 对象",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "Electron.Webview"
        ],
        "spread": false,
        "optional": false,
        "name": "webview",
        "description": "Webview 对象"
      }
    ]
  },
  {
    "__docId__": 1509,
    "kind": "member",
    "name": "_webview",
    "memberof": "app/exts/opened-app.js~OpenedApp",
    "static": false,
    "longname": "app/exts/opened-app.js~OpenedApp#_webview",
    "access": "private",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1510,
    "kind": "file",
    "name": "app/exts/plugin-extension.js",
    "content": "import Extension from './base-extension';\n\n/**\n * 插件扩展类\n *\n * @export\n * @class PluginExtension\n * @extends {Extension}\n */\nexport default class PluginExtension extends Extension {\n    /**\n     * 创建一个插件扩展类实例\n     * @param {Object} pkg 扩展的 package.json 文件数据\n     * @param {Object} [data=null] 扩展的运行时数据\n     * @memberof PluginExtension\n     */\n    constructor(pkg, data = null) {\n        super(pkg, data);\n\n        if (!this.isPlugin) {\n            throw new Error(`Cannot create a plugin extension from the type '${this.type}'.`);\n        }\n\n        if (!pkg.main && !(pkg.buildIn && pkg.buildIn.module)) {\n            this.pkg.main = 'index.js';\n            this.addError('main', 'The main attribute must be set when the extension type is plugin, set to \"index.js\" temporarily.');\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/plugin-extension.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1511,
    "kind": "class",
    "name": "PluginExtension",
    "memberof": "app/exts/plugin-extension.js",
    "static": true,
    "longname": "app/exts/plugin-extension.js~PluginExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/plugin-extension.js",
    "importStyle": "PluginExtension",
    "description": "插件扩展类",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "PluginExtension"
      }
    ],
    "interface": false,
    "extends": [
      "Extension"
    ]
  },
  {
    "__docId__": 1512,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/exts/plugin-extension.js~PluginExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/plugin-extension.js~PluginExtension#constructor",
    "access": "public",
    "description": "创建一个插件扩展类实例",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pkg",
        "description": "扩展的 package.json 文件数据"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "data",
        "description": "扩展的运行时数据"
      }
    ]
  },
  {
    "__docId__": 1513,
    "kind": "file",
    "name": "app/exts/runtime.js",
    "content": "import Xext from './external-api';\nimport Exts, {forEachExtension, getExt, getExts} from './exts';\nimport ui from './ui';\nimport {reloadDevExtension} from './manager';\nimport App from '../core';\nimport {setExtensionUser} from './extension';\nimport {registerCommand, executeCommand, createCommandObject} from '../core/commander';\nimport {fetchServerExtensions, detachServerExtensions, getEntryVisitUrl} from './server';\n\n// 将开放给扩展的模块设置为全局可访问\nglobal.Xext = Xext;\n\n/**\n * 保存扩展中提供的所有可替换组件类\n * @type {Map<string, Class<Component>>}\n * @private\n */\nconst replaceViews = {};\n\n/**\n * 加载所有扩展模块\n * @return {void}\n */\nexport const loadExtensionsModules = () => {\n    forEachExtension(ext => {\n        if (ext.isDev) {\n            const reloadExt = reloadDevExtension(ext);\n            if (reloadExt) {\n                ext = reloadExt;\n            }\n        } else {\n            ext.attach();\n        }\n        if (ext.hasReplaceViews) {\n            Object.assign(replaceViews, ext.replaceViews);\n        }\n    });\n};\n\n// 监听应用的准备就绪事件，触发扩展的 `onReady` 回调函数\nApp.ui.onReady(() => {\n    forEachExtension(ext => {\n        ext.callModuleMethod('onReady', ext);\n    });\n});\n\n// 监听用户登录事件，触发扩展的 `onUserLogin` 回调函数\nApp.server.onUserLogin((user, error) => {\n    if (!error) {\n        setExtensionUser(user);\n        forEachExtension(ext => {\n            ext.callModuleMethod('onUserLogin', user);\n        });\n    }\n    fetchServerExtensions(user);\n});\n\n// 监听用户退出事件，触发扩展的 `onUserLoginout` 回调函数\nApp.server.onUserLoginout((user, code, reason, unexpected) => {\n    setExtensionUser(null);\n    forEachExtension(ext => {\n        ext.callModuleMethod('onUserLoginout', user, code, reason, unexpected);\n    });\n    detachServerExtensions(user);\n});\n\n// 监听用户状态变更事件，触发扩展的 `onUserStatusChange` 回调函数\nApp.profile.onUserStatusChange((status, oldStatus, user) => {\n    forEachExtension(ext => {\n        ext.callModuleMethod('onUserStatusChange', status, oldStatus, user);\n    });\n});\n\n// 监听用户发送聊天消息事件，触发扩展的 `onSendChatMessages` 回调函数\nApp.im.server.onSendChatMessages((messages, chat) => {\n    forEachExtension(ext => {\n        ext.callModuleMethod('onSendChatMessages', messages, chat, App.profile.user);\n    });\n});\n\n// 监听用户接收到聊天消息事件，触发扩展的 `onReceiveChatMessages` 回调函数\nApp.im.server.onReceiveChatMessages((messages) => {\n    forEachExtension(ext => {\n        ext.callModuleMethod('onReceiveChatMessages', messages, App.profile.user);\n    });\n});\n\n// 监听界面渲染消息事件，触发扩展的 `onRenderChatMessageContent` 回调函数\nApp.im.ui.onRenderChatMessageContent(content => {\n    forEachExtension(ext => {\n        const result = ext.callModuleMethod('onRenderChatMessageContent', content);\n        if (result !== undefined) {\n            content = result;\n        }\n    });\n    return content;\n});\n\n// 注册扩展命令\nregisterCommand('extension', (context, extName, commandName, ...params) => {\n    const ext = getExt(extName);\n    if (ext) {\n        const command = ext.getCommand(commandName);\n        if (command) {\n            return executeCommand(createCommandObject(command, null, {extension: ext}), ...params);\n        }\n        if (DEBUG) {\n            console.collapse('Command.execute.extension', 'redBg', commandName, 'redPale', 'command not found', 'redBg');\n            console.log('ext', ext);\n            console.log('params', params);\n            console.log('context', context);\n            console.groupEnd();\n        }\n    } else if (DEBUG) {\n        console.collapse('Command.execute.extension', 'redBg', commandName, 'redPale', 'extension not found', 'redBg');\n        console.log('extName', extName);\n        console.log('params', params);\n        console.log('context', context);\n        console.groupEnd();\n    }\n});\n\n// 注册 `showExtensionDialog` 命令，用于使用命令显示扩展详情对话框\nregisterCommand('showExtensionDialog', (context, extName) => {\n    const ext = getExt(extName);\n    if (ext) {\n        return ui.showExtensionDetailDialog(ext);\n    }\n});\n\n// 注册 `openInApp` 命令，用于使用命令在扩展应用中打开链接\nregisterCommand('openInApp', (context, appName, url) => {\n    ui.openAppWithUrl(appName, url);\n});\n\n/**\n * 获取扩展中定义的网址解析器\n *\n * @param {string} url 要解析的网址\n * @param {string} [type='inspect'] 解析类型，包括 `'inspect'` 和 `'open'`\n * @return {any} 网址解析器对象\n * @memberof Extension\n */\nexport const getExtensionUrlInspector = (url, type = 'inspect') => {\n    let urlInspector = null;\n    if (getExts().some(x => {\n        if (!x.disabled) {\n            const xInspector = x.getUrlInspector(url, type);\n            if (xInspector) {\n                urlInspector = xInspector;\n                return true;\n            }\n        }\n        return false;\n    })) {\n        return urlInspector;\n    }\n};\n\n/**\n * 获取扩展中定义的网址打开处理器\n *\n * @param {string} url 要打开的网址\n * @return {any} 网址打开处理器对象\n * @memberof Extension\n */\nexport const getExtensionUrlOpener = url => {\n    return getExtensionUrlInspector(url, 'open');\n};\n\n// 将扩展中提供的所有可替换组件类设置为全局可访问\nglobal.replaceViews = Object.assign(global.replaceViews || {}, replaceViews);\n\nexport default {\n    loadModules: loadExtensionsModules,\n    ui,\n    getUrlInspector: getExtensionUrlInspector,\n    getUrlOpener: getExtensionUrlOpener,\n    exts: Exts,\n    getEntryVisitUrl\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/runtime.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1514,
    "kind": "variable",
    "name": "replaceViews",
    "memberof": "app/exts/runtime.js",
    "static": true,
    "longname": "app/exts/runtime.js~replaceViews",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/runtime.js",
    "importStyle": null,
    "description": "保存扩展中提供的所有可替换组件类",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, Class<Component>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1515,
    "kind": "function",
    "name": "loadExtensionsModules",
    "memberof": "app/exts/runtime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/runtime.js~loadExtensionsModules",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/runtime.js",
    "importStyle": "{loadExtensionsModules}",
    "description": "加载所有扩展模块",
    "lineNumber": 24,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1516,
    "kind": "function",
    "name": "getExtensionUrlInspector",
    "memberof": "app/exts/runtime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/runtime.js~getExtensionUrlInspector",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/runtime.js",
    "importStyle": "{getExtensionUrlInspector}",
    "description": "获取扩展中定义的网址解析器",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "要解析的网址"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'inspect'",
        "defaultRaw": "'inspect'",
        "name": "type",
        "description": "解析类型，包括 `'inspect'` 和 `'open'`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "网址解析器对象"
    }
  },
  {
    "__docId__": 1517,
    "kind": "function",
    "name": "getExtensionUrlOpener",
    "memberof": "app/exts/runtime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/runtime.js~getExtensionUrlOpener",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/runtime.js",
    "importStyle": "{getExtensionUrlOpener}",
    "description": "获取扩展中定义的网址打开处理器",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "要打开的网址"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": "网址打开处理器对象"
    }
  },
  {
    "__docId__": 1518,
    "kind": "file",
    "name": "app/exts/server/index.js",
    "content": "import Platform from 'Platform';\nimport extractZip from 'extract-zip';\nimport Path from 'path';\nimport server, {socket} from '../../core/server';\nimport {createExtension} from '../extension';\n\n/**\n * 服务器扩展变更回调函数\n * @type {function}\n * @private\n */\nlet onChangeListener = null;\n\n/**\n * 当前登录的用户\n * @type {User}\n * @private\n */\nlet currentUser = null;\n\n/**\n * 当前登录的用户拥有的服务器扩展列表\n * @type {Extension[]}\n * @private\n */\nlet exts = null;\n\n/**\n * 是否正在处理服务器扩展\n * @type {boolean}\n * @private\n */\nlet isProcessing = false;\n\n/**\n * 获取服务器扩展延迟任务 ID\n * @type {number}\n * @private\n */\nlet nextFetchTask = null;\n\n/**\n * 获取服务器扩展延迟时间，单位毫秒\n * @type {number}\n * @private\n */\nconst fetchTaskInterval = 1000 * 60 * 60 * 1.5;\n\n/**\n * 检查服务器扩展在本地是否存在\n * @param {Extension} ext 扩展对象\n * @returns {Promise<boolean>} 使用 Promise 异步返回处理结果\n */\nconst checkLocalCache = ext => {\n    return new Promise(resolve => {\n        // 检查是否存在本地扩展包目录\n        Platform.fs.pathExists(ext.localPath).then(isLocalPathExists => {\n            if (isLocalPathExists) {\n                // 如果本地扩展包目录已经存在则检查 md5 值是否一致\n                const md5Obj = Platform.fs.readJsonSync(Path.join(ext.localPath, 'md5.json'), {throws: false});\n                if (md5Obj && md5Obj.md5 === ext.md5) {\n                    return resolve(true);\n                } else {\n                    Platform.fs.emptyDirSync(ext.localPath);\n                }\n            }\n            return resolve(false);\n        }).catch(() => (resolve(false)));\n    });\n};\n\n/**\n * 从服务器下载远程扩展\n * @param {Extension} ext 服务器扩展配置\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nconst downloadRemoteExtension = ext => {\n    return Platform.net.downloadFile(currentUser, {\n        url: ext.download,\n        path: ext.remoteCachePath,\n    }, progress => {\n        ext.downloadProgress = progress / 100;\n        if (onChangeListener) {\n            onChangeListener(ext, 'update');\n        }\n    }).then(file => {\n        if (file.localPath) {\n            return new Promise((resolve, reject) => {\n                extractZip(file.localPath, {dir: ext.localPath}, err => {\n                    Platform.fs.removeSync(file.localPath);\n                    if (err) {\n                        err.code = 'EXT_UNZIP_ERROR';\n                        reject(err);\n                    } else {\n                        Platform.fs.outputJsonSync(Path.join(ext.localPath, 'md5.json'), {md5: ext.md5, download: ext.download, downloadTime: new Date().getTime()});\n                        resolve(ext);\n                    }\n                });\n            });\n        }\n        return Promise.reject(`Cannot download extension package form remote server ${ext.download}.`);\n    });\n};\n\n/**\n * 加载服务器扩展在本地的 package.json 文件\n * @param {Extension} ext 服务器扩展\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nconst loadRemoteExtension = ext => {\n    return Platform.fs.readJson(Path.join(ext.localPath, 'package.json'), {throws: false});\n};\n\n/**\n * 处理服务器推送的远程扩展\n * @return {void}\n */\nconst processExtensions = async () => {\n    if (!exts || !exts.length || isProcessing) {\n        return;\n    }\n    const theExt = exts.find(x => !x.isRemoteLoaded && !x.loadRemoteFailed);\n    if (theExt) {\n        isProcessing = true;\n\n        try {\n            const isLocalCacheOk = await checkLocalCache(theExt);\n            if (!isLocalCacheOk) {\n                await downloadRemoteExtension(theExt);\n            }\n            // load package json\n            const pkgJson = await loadRemoteExtension(theExt);\n            if (pkgJson && pkgJson.name) {\n                if (pkgJson.name === theExt.name) {\n                    if (DEBUG) {\n                        console.warn(`The package name(${pkgJson.name}) is not match the server name(${theExt.name})`);\n                    }\n                }\n                if (onChangeListener) {\n                    onChangeListener(theExt, 'remove');\n                }\n                const findIndex = exts.findIndex(x => x.name === theExt.name);\n                theExt.setLoadRemoteResult(pkgJson);\n                theExt.delete = true;\n                const newExt = createExtension(Object.assign({\n                    icon: theExt.icon,\n                    serverEntry: theExt.serverEntry\n                }, pkgJson, {\n                    download: theExt.download,\n                    md5: theExt.md5,\n                    entryUrl: theExt.entryUrl,\n                    entryID: theExt.entryID\n                }), theExt.data);\n                newExt.hotAttach();\n                exts.splice(findIndex, 1, newExt);\n                if (onChangeListener) {\n                    onChangeListener(newExt, 'add');\n                }\n            } else {\n                theExt.setLoadRemoteResult(false, new Error('Cannot read package.json from ' + theExt.localPath));\n            }\n        } catch (error) {\n            theExt.setLoadRemoteResult(false, error);\n        }\n\n        if (!theExt.delete && onChangeListener) {\n            onChangeListener(theExt, 'update');\n        }\n\n        isProcessing = false;\n        processExtensions();\n    }\n};\n\n/**\n * 获取远程扩展的免登录地址\n * @param {Extension|string} extOrEntryID 远程扩展对象或者远程入口 ID\n * @param {string} [referer=''] 要访问的链接，如果留空则使用远程扩展的主页链接\n * @returns {Promise<string>} 使用 Promise 异步返回处理结果\n */\nexport const getEntryVisitUrl = (extOrEntryID, referer = '') => {\n    return server.socket.sendAndListen({\n        module: 'entry',\n        method: 'visit',\n        params: {entryID: typeof extOrEntryID === 'object' ? (extOrEntryID.entryID || extOrEntryID.name) : extOrEntryID, referer}\n    });\n};\n\n/**\n * 处理 Socket 推送的服务器扩展列表消息事件\n * @param {SocketMessage} msg Socket 连接消息\n * @return {void}\n */\nconst handleChatExtensions = msg => {\n    if (currentUser && msg.isSuccess && msg.data.length) {\n        const baseUserExtsDir = Platform.ui.createUserDataPath(currentUser, '', 'extensions');\n        msg.data.forEach(item => {\n            item = Object.assign({}, item);\n            const extPkg = Object.assign(Object.assign(item, {\n                icon: item.logo,\n                entryUrl: item.entryUrl || item.webViewUrl\n            }));\n            if (!item.download && item.webViewUrl) {\n                extPkg.type = 'app';\n                extPkg.appType = 'webView';\n                extPkg.webViewUrl = item.webViewUrl;\n            }\n            const extData = {remote: true, serverData: item.data};\n            if (item.download) {\n                extData.remoteCachePath = Path.join(baseUserExtsDir, `${item.name}.zip`);\n                extData.localPath = Path.join(baseUserExtsDir, item.name);\n            } else if (item.webViewUrl) {\n                extData.remoteLoaded = true;\n            }\n            const ext = createExtension(extPkg, extData);\n            const findIndex = exts.findIndex(x => x.name === ext.name);\n            if (findIndex > -1) {\n                exts.splice(findIndex, 1, ext);\n            } else {\n                exts.splice(0, 0, ext);\n            }\n        });\n        if (onChangeListener) {\n            onChangeListener(exts, 'add');\n        }\n        processExtensions();\n    }\n};\n\n/**\n * 处理 Socket 推送的入口免登录地址消息事件\n * @param {SocketMessage} msg Socket 连接消息\n * @return {boolean|any} 如果返回 `false`，则表示处理失败，否则返回处理后的数据\n */\nconst handleEntryVisit = msg => {\n    if (currentUser && msg.isSuccess && msg.data) {\n        return msg.data;\n    }\n    return false;\n};\n\n// 设置 Socket 消息处理函数\nsocket.setHandler({\n    'chat/extensions': handleChatExtensions,\n    'entry/visit': handleEntryVisit\n});\n\n/**\n * 卸载已安装的服务器扩展\n * @param {User} user 当前用户\n * @return {void}\n */\nexport const detachServerExtensions = user => {\n    currentUser = null;\n    if (exts) {\n        exts.forEach(ext => {\n            ext.detach();\n        });\n        if (onChangeListener) {\n            onChangeListener(exts, 'remove');\n        }\n        exts = null;\n    }\n};\n\n/**\n * 从服务器获取远程扩展清单并安装服务器扩展\n * @param {User} user 当前用户\n * @return {void}\n */\nexport const fetchServerExtensions = (user) => {\n    if (nextFetchTask) {\n        clearTimeout(nextFetchTask);\n        nextFetchTask = null;\n    }\n\n    if (!user && currentUser) {\n        user = currentUser;\n    }\n    detachServerExtensions();\n\n    if (!user) {\n        return;\n    }\n\n    if (user.isVersionSupport('remoteExtension')) {\n        currentUser = user;\n        exts = [];\n        socket.send('extensions');\n    }\n\n    nextFetchTask = setTimeout(() => {\n        if (currentUser) {\n            fetchServerExtensions(currentUser);\n        }\n    }, fetchTaskInterval);\n};\n\n/**\n * 设置服务器扩展变更事件回调函数\n * @param {function} listener 回调函数\n * @return {void}\n */\nexport const setServerOnChangeListener = listener => {\n    onChangeListener = listener;\n};\n\nexport default {\n    getEntryVisitUrl,\n    fetchServerExtensions,\n    setServerOnChangeListener,\n    detachServerExtensions\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/server/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1519,
    "kind": "variable",
    "name": "onChangeListener",
    "memberof": "app/exts/server/index.js",
    "static": true,
    "longname": "app/exts/server/index.js~onChangeListener",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "服务器扩展变更回调函数",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1520,
    "kind": "variable",
    "name": "currentUser",
    "memberof": "app/exts/server/index.js",
    "static": true,
    "longname": "app/exts/server/index.js~currentUser",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "当前登录的用户",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "User"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1521,
    "kind": "variable",
    "name": "exts",
    "memberof": "app/exts/server/index.js",
    "static": true,
    "longname": "app/exts/server/index.js~exts",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "当前登录的用户拥有的服务器扩展列表",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Extension[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1522,
    "kind": "variable",
    "name": "isProcessing",
    "memberof": "app/exts/server/index.js",
    "static": true,
    "longname": "app/exts/server/index.js~isProcessing",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "是否正在处理服务器扩展",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1523,
    "kind": "variable",
    "name": "nextFetchTask",
    "memberof": "app/exts/server/index.js",
    "static": true,
    "longname": "app/exts/server/index.js~nextFetchTask",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "获取服务器扩展延迟任务 ID",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1524,
    "kind": "variable",
    "name": "fetchTaskInterval",
    "memberof": "app/exts/server/index.js",
    "static": true,
    "longname": "app/exts/server/index.js~fetchTaskInterval",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "获取服务器扩展延迟时间，单位毫秒",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1525,
    "kind": "function",
    "name": "checkLocalCache",
    "memberof": "app/exts/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/server/index.js~checkLocalCache",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "检查服务器扩展在本地是否存在",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "ext",
        "description": "扩展对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1526,
    "kind": "function",
    "name": "downloadRemoteExtension",
    "memberof": "app/exts/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/server/index.js~downloadRemoteExtension",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "从服务器下载远程扩展",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "ext",
        "description": "服务器扩展配置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1527,
    "kind": "function",
    "name": "loadRemoteExtension",
    "memberof": "app/exts/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/server/index.js~loadRemoteExtension",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "加载服务器扩展在本地的 package.json 文件",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "ext",
        "description": "服务器扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1528,
    "kind": "function",
    "name": "processExtensions",
    "memberof": "app/exts/server/index.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "app/exts/server/index.js~processExtensions",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "处理服务器推送的远程扩展",
    "lineNumber": 118,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1529,
    "kind": "function",
    "name": "getEntryVisitUrl",
    "memberof": "app/exts/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/server/index.js~getEntryVisitUrl",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": "{getEntryVisitUrl}",
    "description": "获取远程扩展的免登录地址",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "extOrEntryID",
        "description": "远程扩展对象或者远程入口 ID"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "referer",
        "description": "要访问的链接，如果留空则使用远程扩展的主页链接"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1530,
    "kind": "function",
    "name": "handleChatExtensions",
    "memberof": "app/exts/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/server/index.js~handleChatExtensions",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "处理 Socket 推送的服务器扩展列表消息事件",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 连接消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1531,
    "kind": "function",
    "name": "handleEntryVisit",
    "memberof": "app/exts/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/server/index.js~handleEntryVisit",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": null,
    "description": "处理 Socket 推送的入口免登录地址消息事件",
    "lineNumber": 235,
    "params": [
      {
        "nullable": null,
        "types": [
          "SocketMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "Socket 连接消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "any"
      ],
      "spread": false,
      "description": "如果返回 `false`，则表示处理失败，否则返回处理后的数据"
    }
  },
  {
    "__docId__": 1532,
    "kind": "function",
    "name": "detachServerExtensions",
    "memberof": "app/exts/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/server/index.js~detachServerExtensions",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": "{detachServerExtensions}",
    "description": "卸载已安装的服务器扩展",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "当前用户"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1533,
    "kind": "function",
    "name": "fetchServerExtensions",
    "memberof": "app/exts/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/server/index.js~fetchServerExtensions",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": "{fetchServerExtensions}",
    "description": "从服务器获取远程扩展清单并安装服务器扩展",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "当前用户"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1534,
    "kind": "function",
    "name": "setServerOnChangeListener",
    "memberof": "app/exts/server/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/server/index.js~setServerOnChangeListener",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/server/index.js",
    "importStyle": "{setServerOnChangeListener}",
    "description": "设置服务器扩展变更事件回调函数",
    "lineNumber": 304,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1535,
    "kind": "file",
    "name": "app/exts/theme-extension.js",
    "content": "import Extension from './base-extension';\nimport Theme from './theme';\n\n/**\n * 主题扩展类\n *\n * @export\n * @class ThemeExtension\n * @extends {Extension}\n */\nexport default class ThemeExtension extends Extension {\n    /**\n     * 创建一个主题扩展类实例\n     * @param {Object} pkg 扩展的 package.json 文件数据\n     * @param {Object} data 扩展的运行时数据\n     * @memberof ThemeExtension\n     */\n    constructor(pkg, data) {\n        super(pkg, data);\n\n        if (!this.isTheme) {\n            throw new Error(`Cannot create a theme extension from the type '${this.type}'.`);\n        }\n\n        /**\n         * 主题扩展中定义的所有主题\n         * @type {Theme[]}\n         * @private\n         */\n        this._themes = [];\n\n        const {themes} = this._pkg;\n        if (themes && themes.length) {\n            this._themes = themes.map(themeData => {\n                return new Theme(themeData, this);\n            });\n        } else {\n            this.addError('themes', 'At least one theme must be set with \"themes\" attribute in package.json for theme extension.');\n        }\n    }\n\n    /**\n     * 获取主题扩展中定义的所有主题\n     * @memberof ThemeExtension\n     * @type {Theme[]}\n     */\n    get themes() {\n        return this._themes;\n    }\n\n    /**\n     * 根据主题名称获取主题对象\n     *\n     * @param {string} name 主题名称\n     * @return {Theme} 主题对象\n     * @memberof ThemeExtension\n     */\n    getTheme(name) {\n        return this.themes.find(x => x.name === name);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/theme-extension.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1536,
    "kind": "class",
    "name": "ThemeExtension",
    "memberof": "app/exts/theme-extension.js",
    "static": true,
    "longname": "app/exts/theme-extension.js~ThemeExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/theme-extension.js",
    "importStyle": "ThemeExtension",
    "description": "主题扩展类",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ThemeExtension"
      }
    ],
    "interface": false,
    "extends": [
      "Extension"
    ]
  },
  {
    "__docId__": 1537,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/exts/theme-extension.js~ThemeExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme-extension.js~ThemeExtension#constructor",
    "access": "public",
    "description": "创建一个主题扩展类实例",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pkg",
        "description": "扩展的 package.json 文件数据"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "扩展的运行时数据"
      }
    ]
  },
  {
    "__docId__": 1538,
    "kind": "member",
    "name": "_themes",
    "memberof": "app/exts/theme-extension.js~ThemeExtension",
    "static": false,
    "longname": "app/exts/theme-extension.js~ThemeExtension#_themes",
    "access": "private",
    "description": "主题扩展中定义的所有主题",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Theme[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1540,
    "kind": "get",
    "name": "themes",
    "memberof": "app/exts/theme-extension.js~ThemeExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme-extension.js~ThemeExtension#themes",
    "access": "public",
    "description": "获取主题扩展中定义的所有主题",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Theme[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1541,
    "kind": "method",
    "name": "getTheme",
    "memberof": "app/exts/theme-extension.js~ThemeExtension",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme-extension.js~ThemeExtension#getTheme",
    "access": "public",
    "description": "根据主题名称获取主题对象",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "主题名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Theme"
      ],
      "spread": false,
      "description": "主题对象"
    }
  },
  {
    "__docId__": 1542,
    "kind": "file",
    "name": "app/exts/theme.js",
    "content": "import Path from 'path';\nimport StringHelper from '../utils/string-helper';\nimport PinYin from '../utils/pinyin';\nimport {matchScore} from '../utils/search-score';\n\n/**\n * 主题样式表注入类型：\n * - 追加方式（`append`）：将 css 文件作为默认样式表的补充，即挂在在默认主题样式的后面；\n * - 覆盖方式（`override`）：将 css 文件替换原来的默认样式表。\n * @type {Map<string, string>}\n * @private\n */\nconst INJECT_TYPE = {\n    append: 'append',\n    override: 'override',\n};\n\n/**\n * 搜索匹配分值表\n * @type {Object[]}\n * @private\n */\nconst MATCH_SCORE_MAP = [\n    {\n        name: 'name', equal: 100, include: 50\n    }, {\n        name: 'displayName', equal: 100, include: 50\n    }, {\n        name: 'pinyinNames', equal: 50, include: 25, array: true\n    }, {\n        name: 'description', include: 25\n    }, {\n        name: 'author', equal: 100, prefix: '@'\n    }, {\n        name: 'publisher', equal: 100, prefix: '@'\n    }, {\n        name: 'extKeywords', equal: 50, include: 10, array: true\n    }, {\n        name: 'extDisplayName', equal: 50, include: 25\n    }, {\n        name: 'extName', equal: 50, include: 25\n    }, {\n        name: 'extPinyinNames', equal: 50, include: 25, array: true\n    },\n];\n\n/**\n * 界面主题类\n *\n * @export\n * @class Theme\n */\nexport default class Theme {\n    /**\n     * 创建一个界面主题类实例\n     * @param {Object} data 主题属性对象\n     * @param {string} data.name 主题的名称，同一个扩展中的主题名称不能相同\n     * @param {string} data.displayName 主题在界面上显示的名称\n     * @param {string} data.color 主题的主色调\n     * @param {string} data.style 主题对应的 css 文件\n     * @param {string} data.inject 主题的载入方式\n     * @param {ThemeExtension} extension 主题所属的扩展\n     * @memberof Theme\n     */\n    constructor(data, extension) {\n        if (!data) {\n            throw new Error('Theme error: The \"data\" prama can not be empty.');\n        }\n        if (!extension) {\n            throw new Error('Theme error: The \"extension\" prama can not be empty.');\n        }\n\n        this._extension = extension;\n        this._data = data;\n    }\n\n    /**\n     * 获取主题的主色调\n     * @memberof Theme\n     * @type {string}\n     */\n    get color() {\n        return this._data.color;\n    }\n\n    /**\n     * 获取主题所属的扩展\n     * @memberof Theme\n     * @type {ThemeExtension}\n     */\n    get extension() {\n        return this._extension;\n    }\n\n    /**\n     * 获取主题的名称，同一个扩展中的主题名称不能相同\n     * @memberof Theme\n     * @type {string}\n     */\n    get name() {\n        return this._data.name;\n    }\n\n    /**\n     * 获取主题在界面上显示的名称\n     * @memberof Theme\n     * @type {string}\n     */\n    get displayName() {\n        return StringHelper.ifEmptyThen(this._data.displayName, this.name);\n    }\n\n    /**\n     * 获取主题名称的拼音形式字符串\n     * @type {string}\n     * @readonly\n     * @memberof Theme\n     */\n    get pinyinNames() {\n        if (!this._pinyinName) {\n            this._pinyinName = PinYin(this.displayName, 'default', false);\n        }\n        return this._pinyinName;\n    }\n\n    /**\n     * 获取主题编号\n     * @memberof Theme\n     * @type {string}\n     */\n    get id() {\n        if (!this._id) {\n            this._id = `${this.extension.name}:${this.name}`;\n        }\n        return this._id;\n    }\n\n    /**\n     * 获取主题的载入方式，目前支持 `'inject'` 和 `'append'`\n     * @memberof Theme\n     * @type {string}\n     */\n    get inject() {\n        return INJECT_TYPE[this._data.inject] || INJECT_TYPE.append;\n    }\n\n    /**\n     * 获取是否为追加载入方式（`append`）\n     * @memberof Theme\n     * @type {boolean}\n     */\n    get isAppend() {\n        return this.inject === INJECT_TYPE.append;\n    }\n\n    /**\n     * 获取是否为覆盖载入方式（`override`）\n     * @memberof Theme\n     * @type {boolean}\n     */\n    get isOverride() {\n        return this.inject === INJECT_TYPE.override;\n    }\n\n    /**\n     * 获取主题对应的 CSS 样式表文件路径\n     * @memberof Theme\n     * @type {string}\n     */\n    get styleFile() {\n        const {style} = this._data;\n        if (style && !this._styleFile) {\n            if (!style.startsWith('https://') && !style.startsWith('http://')) {\n                this._styleFile = `file://${Path.join(this.extension.localPath, style)}`;\n            } else {\n                this._styleFile = style;\n            }\n        }\n        return this._styleFile;\n    }\n\n    /**\n     * 获取预览图片地址\n     *\n     * @readonly\n     * @memberof Theme\n     * @type {string}\n     */\n    get preview() {\n        const {preview} = this._data;\n        if (preview && !this._preview) {\n            if (!preview.startsWith('https://') && !preview.startsWith('http://')) {\n                this._preview = Path.join(this.extension.localPath, preview);\n            } else {\n                this._preview = preview;\n            }\n        }\n        return this._preview;\n    }\n\n    /**\n     * 获取主题作者（实际为主题所属扩展的作者）\n     * @memberof Theme\n     * @type {string}\n     */\n    get author() {return this.extension.author;}\n\n    /**\n     * 获取主题发布者（实际为主题所属扩展的发布者）\n     * @memberof Theme\n     * @type {string}\n     */\n    get publisher() {return this.extension.publisher;}\n\n    /**\n     * 获取主题关键字（实际为主题所属扩展的关键字）\n     * @memberof Theme\n     * @type {string[]}\n     */\n    get extKeywords() {return this.extension.keywords;}\n\n    /**\n     * 获取主题扩展显示名称\n     * @memberof Theme\n     * @type {string}\n     */\n    get extDisplayName() {return this.extension.displayName;}\n\n    /**\n     * 获取主题扩展扩展名称\n     * @memberof Theme\n     * @type {string}\n     */\n    get extName() {return this.extension.name;}\n\n    /**\n     * 获取主题扩展扩展名称拼音字符串\n     * @memberof Theme\n     * @type {string}\n     */\n    get extPinyinNames() {return this.extension.pinyinNames;}\n\n    /**\n     * 获取主题扩展描述\n     * @memberof Theme\n     * @type {string}\n     */\n    get extDescription() {return this.extension.description;}\n\n    /**\n     * 获取主题与给定的关键字匹配分值\n     * @memberof Member\n     * @param {string[]} keys 关键字列表\n     * @return {number} 匹配的分值\n     */\n    getMatchScore(keys) {\n        return matchScore(MATCH_SCORE_MAP, this, keys);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/theme.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1543,
    "kind": "variable",
    "name": "INJECT_TYPE",
    "memberof": "app/exts/theme.js",
    "static": true,
    "longname": "app/exts/theme.js~INJECT_TYPE",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/theme.js",
    "importStyle": null,
    "description": "主题样式表注入类型：\n- 追加方式（`append`）：将 css 文件作为默认样式表的补充，即挂在在默认主题样式的后面；\n- 覆盖方式（`override`）：将 css 文件替换原来的默认样式表。",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1544,
    "kind": "variable",
    "name": "MATCH_SCORE_MAP",
    "memberof": "app/exts/theme.js",
    "static": true,
    "longname": "app/exts/theme.js~MATCH_SCORE_MAP",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/theme.js",
    "importStyle": null,
    "description": "搜索匹配分值表",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1545,
    "kind": "class",
    "name": "Theme",
    "memberof": "app/exts/theme.js",
    "static": true,
    "longname": "app/exts/theme.js~Theme",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/theme.js",
    "importStyle": "Theme",
    "description": "界面主题类",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Theme"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 1546,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#constructor",
    "access": "public",
    "description": "创建一个界面主题类实例",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "主题属性对象"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.name",
        "description": "主题的名称，同一个扩展中的主题名称不能相同"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.displayName",
        "description": "主题在界面上显示的名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.color",
        "description": "主题的主色调"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.style",
        "description": "主题对应的 css 文件"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data.inject",
        "description": "主题的载入方式"
      },
      {
        "nullable": null,
        "types": [
          "ThemeExtension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "主题所属的扩展"
      }
    ]
  },
  {
    "__docId__": 1547,
    "kind": "member",
    "name": "_extension",
    "memberof": "app/exts/theme.js~Theme",
    "static": false,
    "longname": "app/exts/theme.js~Theme#_extension",
    "access": "private",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1548,
    "kind": "member",
    "name": "_data",
    "memberof": "app/exts/theme.js~Theme",
    "static": false,
    "longname": "app/exts/theme.js~Theme#_data",
    "access": "private",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1549,
    "kind": "get",
    "name": "color",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#color",
    "access": "public",
    "description": "获取主题的主色调",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1550,
    "kind": "get",
    "name": "extension",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#extension",
    "access": "public",
    "description": "获取主题所属的扩展",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "ThemeExtension"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1551,
    "kind": "get",
    "name": "name",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#name",
    "access": "public",
    "description": "获取主题的名称，同一个扩展中的主题名称不能相同",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1552,
    "kind": "get",
    "name": "displayName",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#displayName",
    "access": "public",
    "description": "获取主题在界面上显示的名称",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1553,
    "kind": "get",
    "name": "pinyinNames",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#pinyinNames",
    "access": "public",
    "description": "获取主题名称的拼音形式字符串",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1554,
    "kind": "member",
    "name": "_pinyinName",
    "memberof": "app/exts/theme.js~Theme",
    "static": false,
    "longname": "app/exts/theme.js~Theme#_pinyinName",
    "access": "private",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1555,
    "kind": "get",
    "name": "id",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#id",
    "access": "public",
    "description": "获取主题编号",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1556,
    "kind": "member",
    "name": "_id",
    "memberof": "app/exts/theme.js~Theme",
    "static": false,
    "longname": "app/exts/theme.js~Theme#_id",
    "access": "private",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1557,
    "kind": "get",
    "name": "inject",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#inject",
    "access": "public",
    "description": "获取主题的载入方式，目前支持 `'inject'` 和 `'append'`",
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1558,
    "kind": "get",
    "name": "isAppend",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#isAppend",
    "access": "public",
    "description": "获取是否为追加载入方式（`append`）",
    "lineNumber": 152,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1559,
    "kind": "get",
    "name": "isOverride",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#isOverride",
    "access": "public",
    "description": "获取是否为覆盖载入方式（`override`）",
    "lineNumber": 161,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1560,
    "kind": "get",
    "name": "styleFile",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#styleFile",
    "access": "public",
    "description": "获取主题对应的 CSS 样式表文件路径",
    "lineNumber": 170,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1561,
    "kind": "member",
    "name": "_styleFile",
    "memberof": "app/exts/theme.js~Theme",
    "static": false,
    "longname": "app/exts/theme.js~Theme#_styleFile",
    "access": "private",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1563,
    "kind": "get",
    "name": "preview",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#preview",
    "access": "public",
    "description": "获取预览图片地址",
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1564,
    "kind": "member",
    "name": "_preview",
    "memberof": "app/exts/theme.js~Theme",
    "static": false,
    "longname": "app/exts/theme.js~Theme#_preview",
    "access": "private",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1566,
    "kind": "get",
    "name": "author",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#author",
    "access": "public",
    "description": "获取主题作者（实际为主题所属扩展的作者）",
    "lineNumber": 206,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1567,
    "kind": "get",
    "name": "publisher",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#publisher",
    "access": "public",
    "description": "获取主题发布者（实际为主题所属扩展的发布者）",
    "lineNumber": 213,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1568,
    "kind": "get",
    "name": "extKeywords",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#extKeywords",
    "access": "public",
    "description": "获取主题关键字（实际为主题所属扩展的关键字）",
    "lineNumber": 220,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1569,
    "kind": "get",
    "name": "extDisplayName",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#extDisplayName",
    "access": "public",
    "description": "获取主题扩展显示名称",
    "lineNumber": 227,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1570,
    "kind": "get",
    "name": "extName",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#extName",
    "access": "public",
    "description": "获取主题扩展扩展名称",
    "lineNumber": 234,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1571,
    "kind": "get",
    "name": "extPinyinNames",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#extPinyinNames",
    "access": "public",
    "description": "获取主题扩展扩展名称拼音字符串",
    "lineNumber": 241,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1572,
    "kind": "get",
    "name": "extDescription",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#extDescription",
    "access": "public",
    "description": "获取主题扩展描述",
    "lineNumber": 248,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1573,
    "kind": "method",
    "name": "getMatchScore",
    "memberof": "app/exts/theme.js~Theme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/exts/theme.js~Theme#getMatchScore",
    "access": "public",
    "description": "获取主题与给定的关键字匹配分值",
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "关键字列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "匹配的分值"
    }
  },
  {
    "__docId__": 1574,
    "kind": "file",
    "name": "app/exts/themes.js",
    "content": "import {getThemeExt, getThemeExts} from './exts';\nimport Store from '../utils/store';\n\n/**\n * 当前主题本地存储键前缀\n * @type {string}\n * @private\n */\nconst STORE_KEY = 'EXTENSIONS::theme.current';\n\n/**\n * 当前主题\n * @type {Theme}\n * @private\n */\nlet currentTheme;\n\n/**\n * 获取当前使用的主题\n * @return {Theme} 当前使用的主题\n */\nexport const getCurrentTheme = () => {\n    if (currentTheme === undefined) {\n        const currentThemeSetting = Store.get(STORE_KEY);\n        if (currentThemeSetting) {\n            const themeExt = getThemeExt(currentThemeSetting.extension);\n            if (themeExt) {\n                currentTheme = themeExt.getTheme(currentThemeSetting.name);\n            }\n        }\n        if (!currentTheme) {\n            currentTheme = null;\n        }\n    }\n    return currentTheme;\n};\n\n/**\n * 默认主题样式表文件路径\n * @type {string}\n * @private\n */\nlet theDefaultThemeStyle;\n\n/**\n * 主题在界面上所使用的 `<link>` 元素\n * @type {HTMLLinkElement}\n * @private\n */\nlet themeLinkElement = null;\n\n\nif (process.env.HOT) {\n    themeLinkElement = document.querySelector('link[href^=\"blob:\"]');\n    theDefaultThemeStyle = themeLinkElement.href;\n} else {\n    themeLinkElement = document.getElementById('theme');\n    theDefaultThemeStyle = themeLinkElement.href;\n}\n\n/**\n * 主题切换动画效果定时任务 ID\n * @type {number}\n * @private\n */\nlet changingThemeTimer = null;\n\n/**\n * 应用主题\n * @param {string|Theme} theme 要应用的主题名称或者主题对象\n * @return {void}\n */\nexport const applyTheme = theme => {\n    theme = theme || currentTheme;\n    clearTimeout(changingThemeTimer);\n    document.body.classList.add('theme-changing');\n    if (!theme || theme === 'default') {\n        if (themeLinkElement.href !== theDefaultThemeStyle) {\n            themeLinkElement.href = theDefaultThemeStyle;\n        }\n        const appendLinkElement = document.getElementById('appendTheme');\n        if (appendLinkElement) {\n            appendLinkElement.remove();\n        }\n    } else {\n        const {styleFile} = theme;\n        if (!styleFile) {\n            applyTheme('');\n            return 'THEME_HAS_NO_CSS_FILE';\n        }\n        if (theme.isAppend) {\n            if (themeLinkElement.href !== theDefaultThemeStyle) {\n                themeLinkElement.href = theDefaultThemeStyle;\n            }\n            let appendLinkElement = document.getElementById('appendTheme');\n            if (!appendLinkElement) {\n                appendLinkElement = document.createElement('link');\n                appendLinkElement.rel = 'stylesheet';\n                appendLinkElement.href = styleFile;\n                appendLinkElement.id = 'appendTheme';\n                document.getElementsByTagName('head')[0].appendChild(appendLinkElement);\n            } else {\n                appendLinkElement.href = styleFile;\n            }\n        } else {\n            themeLinkElement.href = styleFile;\n            const appendLinkElement = document.getElementById('appendTheme');\n            if (appendLinkElement) {\n                appendLinkElement.remove();\n            }\n        }\n    }\n    document.body.setAttribute('data-theme', theme ? theme.id : null);\n\n    changingThemeTimer = setTimeout(() => {\n        document.body.classList.remove('theme-changing');\n    }, 800);\n\n    if (DEBUG) {\n        console.collapse('Extension Apply Theme', 'greenBg', theme ? theme.displayName : (theme || 'default'), 'greenPale');\n        console.log('theme', theme);\n        console.groupEnd();\n    }\n};\n\n// 获取当前设置的主题，如果有则应用主题\nif (getCurrentTheme()) {\n    applyTheme();\n}\n\n/**\n * 设置当前所使用的主题\n * @param {string|Theme} theme 要应用的主题名称或者主题对象，`'default'` 为应用默认主题\n * @return {void}\n */\nexport const setCurrentTheme = theme => {\n    if (theme === 'default') {\n        theme = null;\n    }\n    currentTheme = theme;\n    if (theme) {\n        const currentThemeSetting = {\n            extension: theme.extension.name,\n            name: theme.name\n        };\n        Store.set(STORE_KEY, currentThemeSetting);\n    } else {\n        Store.remove(STORE_KEY);\n    }\n    return applyTheme(theme);\n};\n\n/**\n * 检查指定的主题编号是否是当前设置的主题\n * @param {string} themeId 主题编号\n * @returns {boolean} 如果返回 `true` 则为是当前设置的主题，否则为不是当前设置的主题\n */\nexport const isCurrentTheme = themeId => (themeId === 'default' && !currentTheme) || (currentTheme && currentTheme.id === themeId);\n\n/**\n * 搜索主题\n * @param {string} keys 搜索字符串\n * @return {Theme[]} 搜索到的主题列表\n */\nexport const searchThemes = (keys) => {\n    keys = keys.trim().toLowerCase().split(' ');\n    const result = [];\n    getThemeExts().forEach(theExt => {\n        const extThemes = theExt.themes;\n        if (extThemes.length) {\n            const searchGroup = {\n                name: theExt.name,\n                displayName: theExt.displayName,\n                icon: theExt.icon,\n                accentColor: theExt.accentColor,\n                score: 0,\n            };\n            const themes = [];\n            extThemes.forEach(extTheme => {\n                const themeScore = extTheme.getMatchScore(keys);\n                if (themeScore) {\n                    searchGroup.score += themeScore;\n                    extTheme.matchScore = themeScore;\n                    themes.push(extTheme);\n                }\n            });\n            if (themes.length) {\n                themes.sort((x, y) => y.matchScore - x.matchScore);\n                searchGroup.themes = themes;\n                if (searchGroup.score) {\n                    result.push(searchGroup);\n                }\n            }\n        }\n    });\n    result.sort((x, y) => y.score - x.score);\n    return result;\n};\n\nexport default {\n    get all() {\n        return getThemeExts();\n    },\n\n    search: searchThemes,\n    isCurrentTheme,\n    getCurrentTheme,\n    setCurrentTheme,\n    applyTheme,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/themes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1575,
    "kind": "variable",
    "name": "STORE_KEY",
    "memberof": "app/exts/themes.js",
    "static": true,
    "longname": "app/exts/themes.js~STORE_KEY",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/themes.js",
    "importStyle": null,
    "description": "当前主题本地存储键前缀",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1576,
    "kind": "function",
    "name": "getCurrentTheme",
    "memberof": "app/exts/themes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/themes.js~getCurrentTheme",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/themes.js",
    "importStyle": "{getCurrentTheme}",
    "description": "获取当前使用的主题",
    "lineNumber": 22,
    "return": {
      "nullable": null,
      "types": [
        "Theme"
      ],
      "spread": false,
      "description": "当前使用的主题"
    },
    "params": []
  },
  {
    "__docId__": 1577,
    "kind": "variable",
    "name": "themeLinkElement",
    "memberof": "app/exts/themes.js",
    "static": true,
    "longname": "app/exts/themes.js~themeLinkElement",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/themes.js",
    "importStyle": null,
    "description": "主题在界面上所使用的 `<link>` 元素",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "HTMLLinkElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1578,
    "kind": "variable",
    "name": "changingThemeTimer",
    "memberof": "app/exts/themes.js",
    "static": true,
    "longname": "app/exts/themes.js~changingThemeTimer",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/themes.js",
    "importStyle": null,
    "description": "主题切换动画效果定时任务 ID",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1579,
    "kind": "function",
    "name": "applyTheme",
    "memberof": "app/exts/themes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/themes.js~applyTheme",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/themes.js",
    "importStyle": "{applyTheme}",
    "description": "应用主题",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Theme"
        ],
        "spread": false,
        "optional": false,
        "name": "theme",
        "description": "要应用的主题名称或者主题对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1580,
    "kind": "function",
    "name": "setCurrentTheme",
    "memberof": "app/exts/themes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/themes.js~setCurrentTheme",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/themes.js",
    "importStyle": "{setCurrentTheme}",
    "description": "设置当前所使用的主题",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Theme"
        ],
        "spread": false,
        "optional": false,
        "name": "theme",
        "description": "要应用的主题名称或者主题对象，`'default'` 为应用默认主题"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1581,
    "kind": "function",
    "name": "isCurrentTheme",
    "memberof": "app/exts/themes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/themes.js~isCurrentTheme",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/themes.js",
    "importStyle": "{isCurrentTheme}",
    "description": "检查指定的主题编号是否是当前设置的主题",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是当前设置的主题，否则为不是当前设置的主题"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "themeId",
        "description": "主题编号"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是当前设置的主题，否则为不是当前设置的主题"
    }
  },
  {
    "__docId__": 1582,
    "kind": "function",
    "name": "searchThemes",
    "memberof": "app/exts/themes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/themes.js~searchThemes",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/themes.js",
    "importStyle": "{searchThemes}",
    "description": "搜索主题",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "搜索字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Theme[]"
      ],
      "spread": false,
      "description": "搜索到的主题列表"
    }
  },
  {
    "__docId__": 1583,
    "kind": "file",
    "name": "app/exts/ui.js",
    "content": "// eslint-disable-next-line import/no-unresolved\nimport Platform from 'Platform';\nimport Path from 'path';\nimport {defaultApp, getAppExt} from './exts';\nimport OpenedApp from './opened-app';\nimport Lang from '../lang';\nimport {setExtensionDisabled, openInstallExtensionDialog, uninstallExtension} from './manager';\nimport Modal from '../components/modal';\nimport Messager from '../components/messager';\nimport ExtensionDetailDialog from '../views/exts/extension-detail-dialog';\n\n/**\n * 默认打开的应用\n * @type {OpenedApp}\n * @private\n */\nconst defaultOpenedApp = new OpenedApp(defaultApp);\n\n/**\n * 已打开的应用清单\n * @type {OpenedApp[]}\n * @private\n */\nconst openedApps = [\n    defaultOpenedApp,\n];\n\n/**\n * 获取已打开的应用清单\n * @return {OpenedApp[]} 已打开的应用清单\n */\nexport const getOpenedApps = () => openedApps;\n\n/**\n * 判断指定 ID 的应用是否是默认打开的应用\n * @param {string} id 应用 ID\n * @returns {boolean} 如果返回 `true` 则为是默认打开的应用，否则为不是默认打开的应用\n */\nexport const isDefaultOpenedApp = id => id === defaultOpenedApp.id;\n\n/**\n * 判断应用是否已经打开\n * @param {string} id 应用 ID\n * @returns {boolean} 如果返回 `true` 则为已经打开，否则为没有打开\n * @private\n */\nconst isAppOpen = id => openedApps.find(x => x.id === id);\n\n/**\n * 获取打开的应用索引\n * @param {string} id 应用 ID\n * @returns {number} 应用索引\n * @private\n */\nconst getOpenedAppIndex = id => openedApps.findIndex(x => x.id === id);\n\n/**\n * 当前已经激活的应用\n * @type {OpenedApp}\n * @private\n */\nlet currentOpenedApp = null;\n\n/**\n * 判断给定 ID 的应用是否激活\n * @param {string} id 应用 ID\n * @returns {boolean} 如果返回 `true` 则为已经激活，否则为没有激活\n */\nexport const isCurrentOpenedApp = id => (currentOpenedApp && currentOpenedApp.id === id);\n\n/**\n * 获取当前激活的应用\n * @return {OpenedApp} 当前激活的应用\n */\nexport const getCurrentOpenedApp = () => currentOpenedApp;\n\n/**\n * 打开应用，如果应用已经打开则激活应用\n * @param {string} name 应用名称\n * @param {?string} [pageName=null] 子界面名称\n * @param {?(Object|string)} [params=null] 界面访问参数\n * @returns {boolean} 如果返回 `true` 则为操作成功，否则为操作失败\n */\nexport const openApp = (name, pageName = null, params = null) => {\n    if (name instanceof OpenedApp) {\n        const app = name;\n        name = app.appName;\n        params = pageName;\n        // eslint-disable-next-line prefer-destructuring\n        pageName = app.pageName;\n    }\n\n    const id = OpenedApp.createId(name, pageName);\n    let theOpenedApp = isAppOpen(id);\n    if (!theOpenedApp) {\n        const theApp = getAppExt(name);\n        if (theApp) {\n            theOpenedApp = new OpenedApp(theApp, pageName, params);\n            openedApps.push(theOpenedApp);\n            if (DEBUG) {\n                console.collapse('Extension Open App', 'greenBg', id, 'greenPale');\n                console.trace('app', theOpenedApp);\n                console.groupEnd();\n            }\n        } else {\n            if (DEBUG) {\n                console.color('Extension', 'greenBg', name, 'redPale', `Cannot open app '${name}', because cannot find it.`);\n            }\n            return false;\n        }\n    } if (params !== null) {\n        theOpenedApp.params = params;\n    }\n    theOpenedApp.updateOpenTime();\n    const appHashRoute = theOpenedApp.hashRoute;\n    if (window.location.hash !== appHashRoute) {\n        window.location.hash = appHashRoute;\n    }\n    currentOpenedApp = theOpenedApp;\n    if (DEBUG) {\n        console.collapse('Extension Active App', 'greenBg', id, 'greenPale');\n        console.trace('app', theOpenedApp);\n        console.groupEnd();\n    }\n    return true;\n};\n\n/**\n * 打开应用指定地址，如果应用已经打开则激活应用\n * @param {string} name 应用名称\n * @param {string} url 应用内部地址\n * @param {?string} [pageName=null] 子界面名称\n * @returns {boolean} 如果返回 `true` 则为操作成功，否则为操作失败\n */\nexport const openAppWithUrl = (name, url, pageName = null) => {\n    openApp(name, pageName, `DIRECT=${url}`);\n};\n\n/**\n * 根据应用 ID 打开应用，如果应用已经打开则激活应用\n * @param {string} id 应用 ID\n * @param {?(Object|string)} [params=null] 界面访问参数\n * @returns {boolean} 如果返回 `true` 则为操作成功，否则为操作失败\n */\nexport const openAppById = (id, params = null) => {\n    let name = id;\n    let pageName = null;\n    const indexOfAt = id.indexOf('@');\n    if (indexOfAt > 0) {\n        name = id.substr(0, indexOfAt);\n        pageName = id.substr(indexOfAt + 1);\n    }\n    return openApp(name, pageName, params);\n};\n\n/**\n * 激活下一个打开的应用\n * @return {void}\n */\nexport const openNextApp = () => {\n    let theMaxOpenTimeApp = null;\n    openedApps.forEach(theOpenedApp => {\n        if (!theMaxOpenTimeApp || theOpenedApp.openTime > theMaxOpenTimeApp.openTime) {\n            theMaxOpenTimeApp = theOpenedApp;\n        }\n    });\n    theMaxOpenTimeApp = theMaxOpenTimeApp || defaultOpenedApp;\n    openApp(theMaxOpenTimeApp);\n};\n\n/**\n * 关闭应用\n * @param {string} id 应用 ID\n * @param {boolean} [openNext=true] 是否关闭应用之后激活下一个打开的应用\n * @returns {boolean} 如果返回 `true` 则为操作成功，否则为操作失败\n */\nexport const closeApp = (id, openNext = true) => {\n    const theOpenedAppIndex = getOpenedAppIndex(id);\n    if (theOpenedAppIndex > -1) {\n        openedApps.splice(theOpenedAppIndex, 1);\n        if (isCurrentOpenedApp(id)) {\n            currentOpenedApp = null;\n            if (openNext) {\n                openNextApp();\n                return true;\n            }\n        }\n        return 'refresh';\n    }\n    return false;\n};\n\n/**\n * 关闭所有已经打开的应用（除了在界面上固定的应用）\n * @return {void}\n */\nexport const closeAllApp = () => {\n    openedApps.map(x => x.name).forEach(theOpenedApp => {\n        if (!theOpenedApp.fixed) {\n            closeApp(theOpenedApp.name, false);\n        }\n    });\n};\n\n/**\n * 尝试卸载应用，默认会弹出对话框询问用户是否确定卸载\n * @param {Extension} extension 要卸载的扩展\n * @param {boolean} [confirm=true] 是否在卸载之前询问用户\n * @param {function} callback 操作完成后的回调函数\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const tryUninstallExtension = (extension, confirm = true, callback = null) => {\n    if (typeof confirm === 'function') {\n        callback = confirm;\n        confirm = true;\n    }\n    if (confirm) {\n        return Modal.confirm(Lang.format('ext.uninstallConfirm.format', extension.displayName)).then(confirmed => {\n            if (confirmed) {\n                return uninstallExtension(extension, false, callback);\n            }\n            return Promise.reject();\n        });\n    }\n    return uninstallExtension(extension).then(() => {\n        Messager.show(Lang.format('ext.uninstallSuccess.format', extension.displayName), {type: 'success'});\n        if (callback) {\n            callback();\n        }\n    }).catch(error => {\n        if (error) {\n            Messager.show(Lang.error(error), {type: 'danger'});\n        }\n    });\n};\n\n/**\n * 安装扩展\n * @param {boolean} [devMode=false] 是否为开发模式\n * @return {void}\n */\nexport const installExtension = (devMode = false) => {\n    openInstallExtensionDialog((extension, error) => {\n        if (extension) {\n            Messager.show(Lang.format('ext.installSuccess.format', extension.displayName), {type: 'success'});\n        } else if (error) {\n            let msg = Lang.string('ext.installFail');\n            if (error) {\n                msg += Lang.error(error);\n            }\n            Messager.show(msg, {type: 'danger'});\n        }\n    }, devMode);\n};\n\n/**\n * 显示扩展详情对话框\n * @param {Extension} extension 扩展对象\n * @param {function} callback 对话框显示完成后的回调函数\n * @return {void}\n */\nexport const showExtensionDetailDialog = (extension, callback) => ExtensionDetailDialog.show(extension, callback);\n\n/**\n * 创建扩展上下文菜单项清单\n * @param {Extension} extension 扩展对象\n * @return {Object[]} 上下文菜单项清单\n */\nexport const createSettingContextMenu = extension => {\n    const items = [];\n\n    if (extension.disabled) {\n        if (!extension.buildIn && !extension.isRemote) {\n            items.push({\n                label: Lang.string('ext.enable'),\n                click: setExtensionDisabled.bind(null, extension, false, null)\n            });\n        }\n    } else {\n        if (extension.isApp) {\n            items.push(extension.avaliable ? {\n                label: Lang.string('ext.openApp'),\n                click: openApp.bind(null, extension.name, null, null)\n            } : {\n                disabled: true,\n                label: `${Lang.string('ext.openApp')} (${Lang.string(extension.needRestart ? 'ext.extension.needRestart' : 'ext.unavailable')})`,\n            });\n        }\n        if (!extension.buildIn && !extension.isRemote) {\n            items.push({\n                label: Lang.string('ext.disable'),\n                click: setExtensionDisabled.bind(null, extension, true, null)\n            });\n        }\n    }\n    if (extension.buildIn) {\n        items.push({\n            label: Lang.string('ext.cannotUninstallBuidIn'),\n            disabled: true,\n        });\n    } else if (extension.isRemote) {\n        items.push({\n            label: Lang.string('ext.cannotUninstallRemote'),\n            disabled: true,\n        });\n    } else {\n        items.push({\n            label: Lang.string('ext.uninstall'),\n            click: () => {\n                tryUninstallExtension(extension);\n            }\n        });\n    }\n    return items;\n};\n\n/**\n * 显示（在用户系统桌面打开）开发中的扩展所在的文件夹\n * @param {Extension} extension 扩展对象\n * @returns {boolean} 如果返回 `true` 则操作成功，否则操作失败\n */\nexport const showDevFolder = extension => {\n    const {localPath} = extension;\n    if (localPath) {\n        Platform.ui.showItemInFolder(Path.join(localPath, 'package.json'));\n        return true;\n    }\n    return false;\n};\n\n/**\n * 创建应用扩展上下文菜单项清单\n * @param {AppExtension} appExt 应用扩展\n * @return {Object[]} 上下文菜单项清单\n */\nexport const createAppContextMenu = appExt => {\n    const items = [];\n    items.push({\n        label: Lang.string('ext.app.open'),\n        click: () => {\n            openApp(appExt.name);\n        }\n    });\n    if (appExt.webViewUrl && !appExt.isLocalWebView) {\n        items.push({\n            label: Lang.string('ext.app.openInBrowser'),\n            click: () => {\n                Platform.ui.openExternal(appExt.webViewUrl);\n            }\n        });\n    }\n\n    if (!appExt.buildIn && !appExt.isRemote) {\n        if (items.length && items[items.length - 1].type !== 'separator') {\n            items.push({type: 'separator'});\n        }\n        items.push({\n            label: Lang.string('ext.uninstall'),\n            click: () => {\n                tryUninstallExtension(appExt);\n            }\n        });\n    }\n\n    if (items.length && items[items.length - 1].type !== 'separator') {\n        items.push({type: 'separator'});\n    }\n    items.push({\n        label: Lang.string('ext.app.about'),\n        click: () => {\n            showExtensionDetailDialog(appExt);\n        }\n    });\n    return items;\n};\n\n/**\n * 创建打开的应用上下文菜单项清单\n * @param {OpenedApp} theOpenedApp 打开的应用\n * @param {function} refreshUI 请求刷新界面的回调函数\n * @return {Object[]} 上下文菜单项清单\n */\nexport const createOpenedAppContextMenu = (theOpenedApp, refreshUI) => {\n    const items = [];\n    if (theOpenedApp.webview) {\n        items.push({\n            label: Lang.string('ext.app.refresh'),\n            click: () => {\n                if (theOpenedApp.webview) {\n                    theOpenedApp.webview.reload();\n                }\n            }\n        });\n        items.push({\n            label: Lang.string('ext.app.goBack'),\n            disabled: !theOpenedApp.webview.canGoBack(),\n            click: () => {\n                if (theOpenedApp.webview) {\n                    theOpenedApp.webview.goBack();\n                }\n            }\n        });\n        items.push({\n            label: Lang.string('ext.app.goForward'),\n            disabled: !theOpenedApp.webview.canGoForward(),\n            click: () => {\n                if (theOpenedApp.webview) {\n                    theOpenedApp.webview.goForward();\n                }\n            }\n        });\n    }\n    if (theOpenedApp.id !== defaultOpenedApp.id) {\n        if (items.length) {\n            items.push({type: 'separator'});\n        }\n        items.push({\n            label: Lang.string('ext.app.close'),\n            click: () => {\n                const closeAppResult = closeApp(theOpenedApp.name);\n                if (closeAppResult && closeAppResult !== true && refreshUI) {\n                    refreshUI();\n                }\n            }\n        });\n    }\n    const appExt = theOpenedApp.app;\n    if (appExt.webViewUrl && !appExt.isLocalWebView) {\n        if (items.length && items[items.length - 1].type !== 'separator') {\n            items.push({type: 'separator'});\n        }\n        items.push({\n            label: Lang.string('ext.app.openInBrowser'),\n            click: () => {\n                Platform.ui.openExternal(appExt.webViewUrl);\n            }\n        });\n    }\n\n    if (DEBUG && theOpenedApp.webview) {\n        if (items.length && items[items.length - 1].type !== 'separator') {\n            items.push({type: 'separator'});\n        }\n        items.push({\n            label: Lang.string('ext.app.openDevTools'),\n            click: () => {\n                theOpenedApp.webview.openDevTools();\n            }\n        });\n    }\n    return items;\n};\n\nexport default {\n    get openedApps() {\n        return openedApps;\n    },\n\n    get currentOpenedApp() {\n        return currentOpenedApp || defaultOpenedApp;\n    },\n\n    get defaultOpenedApp() {\n        return defaultOpenedApp;\n    },\n\n    isDefaultApp: isDefaultOpenedApp,\n    isCurrentOpenedApp,\n    openApp,\n    openAppById,\n    closeApp,\n    closeAllApp,\n    openAppWithUrl,\n\n    createSettingContextMenu,\n\n    typeColors: {\n        app: '#304ffe',\n        theme: '#f50057',\n        plugin: '#00c853',\n    },\n\n    installExtension,\n    uninstallExtension: tryUninstallExtension,\n\n    showDevFolder,\n    createAppContextMenu,\n    showExtensionDetailDialog,\n    createOpenedAppContextMenu,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/exts/ui.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1584,
    "kind": "variable",
    "name": "defaultOpenedApp",
    "memberof": "app/exts/ui.js",
    "static": true,
    "longname": "app/exts/ui.js~defaultOpenedApp",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": null,
    "description": "默认打开的应用",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "OpenedApp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1585,
    "kind": "variable",
    "name": "openedApps",
    "memberof": "app/exts/ui.js",
    "static": true,
    "longname": "app/exts/ui.js~openedApps",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": null,
    "description": "已打开的应用清单",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "OpenedApp[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1586,
    "kind": "function",
    "name": "getOpenedApps",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~getOpenedApps",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{getOpenedApps}",
    "description": "获取已打开的应用清单",
    "lineNumber": 32,
    "return": {
      "nullable": null,
      "types": [
        "OpenedApp[]"
      ],
      "spread": false,
      "description": "已打开的应用清单"
    },
    "params": []
  },
  {
    "__docId__": 1587,
    "kind": "function",
    "name": "isDefaultOpenedApp",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~isDefaultOpenedApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{isDefaultOpenedApp}",
    "description": "判断指定 ID 的应用是否是默认打开的应用",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是默认打开的应用，否则为不是默认打开的应用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "应用 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是默认打开的应用，否则为不是默认打开的应用"
    }
  },
  {
    "__docId__": 1588,
    "kind": "function",
    "name": "isAppOpen",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~isAppOpen",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": null,
    "description": "判断应用是否已经打开",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为已经打开，否则为没有打开"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "应用 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为已经打开，否则为没有打开"
    }
  },
  {
    "__docId__": 1589,
    "kind": "function",
    "name": "getOpenedAppIndex",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~getOpenedAppIndex",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": null,
    "description": "获取打开的应用索引",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} 应用索引"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "应用 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "应用索引"
    }
  },
  {
    "__docId__": 1590,
    "kind": "variable",
    "name": "currentOpenedApp",
    "memberof": "app/exts/ui.js",
    "static": true,
    "longname": "app/exts/ui.js~currentOpenedApp",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": null,
    "description": "当前已经激活的应用",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "OpenedApp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1591,
    "kind": "function",
    "name": "isCurrentOpenedApp",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~isCurrentOpenedApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{isCurrentOpenedApp}",
    "description": "判断给定 ID 的应用是否激活",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为已经激活，否则为没有激活"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "应用 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为已经激活，否则为没有激活"
    }
  },
  {
    "__docId__": 1592,
    "kind": "function",
    "name": "getCurrentOpenedApp",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~getCurrentOpenedApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{getCurrentOpenedApp}",
    "description": "获取当前激活的应用",
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "OpenedApp"
      ],
      "spread": false,
      "description": "当前激活的应用"
    },
    "params": []
  },
  {
    "__docId__": 1593,
    "kind": "function",
    "name": "openApp",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~openApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{openApp}",
    "description": "打开应用，如果应用已经打开则激活应用",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为操作成功，否则为操作失败"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "应用名称"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "pageName",
        "description": "子界面名称"
      },
      {
        "nullable": true,
        "types": [
          "Object",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "params",
        "description": "界面访问参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为操作成功，否则为操作失败"
    }
  },
  {
    "__docId__": 1594,
    "kind": "function",
    "name": "openAppWithUrl",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~openAppWithUrl",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{openAppWithUrl}",
    "description": "打开应用指定地址，如果应用已经打开则激活应用",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为操作成功，否则为操作失败"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "应用名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "应用内部地址"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "pageName",
        "description": "子界面名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为操作成功，否则为操作失败"
    }
  },
  {
    "__docId__": 1595,
    "kind": "function",
    "name": "openAppById",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~openAppById",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{openAppById}",
    "description": "根据应用 ID 打开应用，如果应用已经打开则激活应用",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为操作成功，否则为操作失败"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "应用 ID"
      },
      {
        "nullable": true,
        "types": [
          "Object",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "params",
        "description": "界面访问参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为操作成功，否则为操作失败"
    }
  },
  {
    "__docId__": 1596,
    "kind": "function",
    "name": "openNextApp",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~openNextApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{openNextApp}",
    "description": "激活下一个打开的应用",
    "lineNumber": 160,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1597,
    "kind": "function",
    "name": "closeApp",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~closeApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{closeApp}",
    "description": "关闭应用",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为操作成功，否则为操作失败"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "应用 ID"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "openNext",
        "description": "是否关闭应用之后激活下一个打开的应用"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为操作成功，否则为操作失败"
    }
  },
  {
    "__docId__": 1598,
    "kind": "function",
    "name": "closeAllApp",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~closeAllApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{closeAllApp}",
    "description": "关闭所有已经打开的应用（除了在界面上固定的应用）",
    "lineNumber": 197,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1599,
    "kind": "function",
    "name": "tryUninstallExtension",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~tryUninstallExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{tryUninstallExtension}",
    "description": "尝试卸载应用，默认会弹出对话框询问用户是否确定卸载",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要卸载的扩展"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "confirm",
        "description": "是否在卸载之前询问用户"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "操作完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1600,
    "kind": "function",
    "name": "installExtension",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~installExtension",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{installExtension}",
    "description": "安装扩展",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "devMode",
        "description": "是否为开发模式"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1601,
    "kind": "function",
    "name": "showExtensionDetailDialog",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~showExtensionDetailDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{showExtensionDetailDialog}",
    "description": "显示扩展详情对话框",
    "lineNumber": 262,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "扩展对象"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "对话框显示完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1602,
    "kind": "function",
    "name": "createSettingContextMenu",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~createSettingContextMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{createSettingContextMenu}",
    "description": "创建扩展上下文菜单项清单",
    "lineNumber": 269,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "扩展对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "上下文菜单项清单"
    }
  },
  {
    "__docId__": 1603,
    "kind": "function",
    "name": "showDevFolder",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~showDevFolder",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{showDevFolder}",
    "description": "显示（在用户系统桌面打开）开发中的扩展所在的文件夹",
    "lineNumber": 322,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则操作成功，否则操作失败"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "扩展对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则操作成功，否则操作失败"
    }
  },
  {
    "__docId__": 1604,
    "kind": "function",
    "name": "createAppContextMenu",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~createAppContextMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{createAppContextMenu}",
    "description": "创建应用扩展上下文菜单项清单",
    "lineNumber": 336,
    "params": [
      {
        "nullable": null,
        "types": [
          "AppExtension"
        ],
        "spread": false,
        "optional": false,
        "name": "appExt",
        "description": "应用扩展"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "上下文菜单项清单"
    }
  },
  {
    "__docId__": 1605,
    "kind": "function",
    "name": "createOpenedAppContextMenu",
    "memberof": "app/exts/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/exts/ui.js~createOpenedAppContextMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/exts/ui.js",
    "importStyle": "{createOpenedAppContextMenu}",
    "description": "创建打开的应用上下文菜单项清单",
    "lineNumber": 383,
    "params": [
      {
        "nullable": null,
        "types": [
          "OpenedApp"
        ],
        "spread": false,
        "optional": false,
        "name": "theOpenedApp",
        "description": "打开的应用"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "refreshUI",
        "description": "请求刷新界面的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "上下文菜单项清单"
    }
  },
  {
    "__docId__": 1606,
    "kind": "file",
    "name": "app/index.js",
    "content": "/**\n * 入口文件：index.js\n * 这是 Electron 渲染进程启动的主窗口入口文件\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/app.less';\nimport './utils/debug';\nimport './utils/react-debug';\nimport {HomeIndex} from './views/index';\nimport {ready} from './core/runtime';\nimport {triggerReady} from './core/ui';\n\n// 喧喧运行时管理程序就绪时加载 React 界面组件\nready(() => {\n    const appElement = document.getElementById('appContainer');\n    ReactDOM.render(<HomeIndex />, appElement, () => {\n        const loadingElement = document.getElementById('loading');\n        loadingElement.parentNode.removeChild(loadingElement);\n\n        // 触发界面就绪事件\n        triggerReady();\n    });\n});\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1607,
    "kind": "file",
    "name": "app/lang/index.js",
    "content": "import LANG_ZH_CN from './zh-cn.json';\nimport {formatString} from '../utils/string-helper';\n\n/**\n * 默认语言代号\n * @type {string}\n * @private\n */\nconst DEFAULT_LANG = 'zh-cn';\n\n/**\n * 当前语言代号\n * @type {string}\n */\nexport const currentLangName = DEFAULT_LANG;\n\n/**\n * 语言表对象\n * @private\n * @type {Object<string, string>}\n */\nlet langData = Object.assign({}, LANG_ZH_CN);\n\n/**\n * 更新语言表\n * @param {Object<string, string>} newLangData 新的语言表\n * @return {void}\n */\nexport const updateLangData = (newLangData) => {\n    langData = Object.assign(langData, newLangData);\n};\n\n/**\n * 根据语言配置名称获取语言文本\n * @param  {string} name 语言配置名称\n * @param  {string} defaultValue 默认语言文本，如果没有在语言表中找到语言文本则返回此值\n * @return {string} 语言文本\n */\nexport const langString = (name, defaultValue) => {\n    const value = langData[name];\n    return value === undefined ? defaultValue : value;\n};\n\n/**\n * 获取使用参数格式化的语言文本\n *\n * @param {string} name 语言配置名称\n * @param {...any} args 格式化参数\n * @return {string} 语言文本\n */\nexport const langFormat = (name, ...args) => {\n    const str = langString(name);\n    if (args && args.length) {\n        try {\n            return formatString(str, ...args);\n        } catch (e) {\n            throw new Error(`Cannot format lang string with key '${name}', the lang string is '${str}'.`);\n        }\n    }\n    return str;\n};\n\n/**\n * 获取错误信息对应的语言文本\n *\n * @param {string|Error} err 错误信息或错误对象本身\n * @return {string}\n */\nexport const langError = err => {\n    if (typeof err === 'string') {\n        return langString(`error.${err}`, err);\n    }\n    let message = '';\n    if (err.code) {\n        message += langString(`error.${err.code}`, `[Code: ${err.code}]`);\n    }\n    if (err.message && err.message !== err.code) {\n        message += '(' + langString(`error.${err.message}`, err.message) + ')';\n    }\n    if (err.formats) {\n        if (!Array.isArray(err.formats)) {\n            err.formats = [err.formats];\n        }\n        message = formatString(message, ...err.formats);\n    }\n    if (DEBUG) {\n        console.collapse('LANG.error', 'redBg', message, 'redPale');\n        console.error(err);\n        console.groupEnd();\n    }\n    return message;\n};\n\nexport default {\n    update: updateLangData,\n    format: langFormat,\n    string: langString,\n    error: langError,\n\n    get data() {\n        return langData;\n    },\n\n    get name() {\n        return currentLangName;\n    }\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/lang/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1608,
    "kind": "variable",
    "name": "DEFAULT_LANG",
    "memberof": "app/lang/index.js",
    "static": true,
    "longname": "app/lang/index.js~DEFAULT_LANG",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/lang/index.js",
    "importStyle": null,
    "description": "默认语言代号",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1609,
    "kind": "variable",
    "name": "currentLangName",
    "memberof": "app/lang/index.js",
    "static": true,
    "longname": "app/lang/index.js~currentLangName",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/lang/index.js",
    "importStyle": "{currentLangName}",
    "description": "当前语言代号",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1610,
    "kind": "variable",
    "name": "langData",
    "memberof": "app/lang/index.js",
    "static": true,
    "longname": "app/lang/index.js~langData",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/lang/index.js",
    "importStyle": null,
    "description": "语言表对象",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1611,
    "kind": "function",
    "name": "updateLangData",
    "memberof": "app/lang/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/lang/index.js~updateLangData",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/lang/index.js",
    "importStyle": "{updateLangData}",
    "description": "更新语言表",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, string>"
        ],
        "spread": false,
        "optional": false,
        "name": "newLangData",
        "description": "新的语言表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1612,
    "kind": "function",
    "name": "langString",
    "memberof": "app/lang/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/lang/index.js~langString",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/lang/index.js",
    "importStyle": "{langString}",
    "description": "根据语言配置名称获取语言文本",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "语言配置名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "默认语言文本，如果没有在语言表中找到语言文本则返回此值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "语言文本"
    }
  },
  {
    "__docId__": 1613,
    "kind": "function",
    "name": "langFormat",
    "memberof": "app/lang/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/lang/index.js~langFormat",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/lang/index.js",
    "importStyle": "{langFormat}",
    "description": "获取使用参数格式化的语言文本",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "语言配置名称"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "格式化参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "语言文本"
    }
  },
  {
    "__docId__": 1614,
    "kind": "function",
    "name": "langError",
    "memberof": "app/lang/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/lang/index.js~langError",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/lang/index.js",
    "importStyle": "{langError}",
    "description": "获取错误信息对应的语言文本",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "错误信息或错误对象本身"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1615,
    "kind": "file",
    "name": "app/main.development.js",
    "content": "/**\n * 入口文件：main.development.js\n * 这是 Electron 主进程的入口文件\n */\n\nimport {app as ElectronApp, Menu, shell} from 'electron';\nimport pkg from './package.json';\nimport application from './platform/electron/app-remote';\nimport Lang from './lang';\n\n// 禁用自签发证书警告\nElectronApp.commandLine.appendSwitch('ignore-certificate-errors');\n\n// 记录入口文件所在目录\napplication.init(__dirname);\n\nif (process.env.NODE_ENV === 'production') {\n    // 启用 Source Map 支持，方便跟踪调试\n    const sourceMapSupport = require('source-map-support'); // eslint-disable-line\n    sourceMapSupport.install();\n}\n\nif (DEBUG && DEBUG !== 'production') {\n    // 启用 electron-debug https://github.com/sindresorhus/electron-debug\n    require('electron-debug')(); // eslint-disable-line global-require\n\n    // 使得 app/node_modules 内的模块可以直接使用\n    const path = require('path'); // eslint-disable-line\n    const p = path.join(__dirname, '..', 'app', 'node_modules'); // eslint-disable-line\n    require('module').globalPaths.push(p); // eslint-disable-line\n}\n\n// 当所有窗口关闭时退出应用\nElectronApp.on('window-all-closed', () => {\n    ElectronApp.quit();\n});\n\n/**\n * 安装调试模式所使用的 Electron 开发工具扩展\n * @private\n * @ignore\n * @return {void}\n */\nconst installExtensions = async () => {\n    if (process.env.SKIP_INSTALL_EXTENSIONS) {\n        console.log('>> 已跳过安装 Electron 调试扩展。');\n        return;\n    }\n    console.log('>> 正在安装 Electron 调试扩展...首次启动可能需要花费几分钟时间，如果长时间没有出现主界面窗口，请尝试退出此命令行任务，然后执行 \"npm run start-hot-fast\" 来代替 \"npm run start-hot\" 命令。');\n    if (process.env.NODE_ENV === 'development') {\n        const installer = require('electron-devtools-installer'); // eslint-disable-line global-require\n        const extensions = [\n            'REACT_DEVELOPER_TOOLS'\n        ];\n        const forceDownload = !!process.env.UPGRADE_EXTENSIONS;\n        for (const name of extensions) { // eslint-disable-line\n            try {\n                await installer.default(installer[name], forceDownload); // eslint-disable-line\n            } catch (e) {} // eslint-disable-line\n        }\n    }\n};\n\n/**\n * 创建窗口菜单\n * @private\n * @ignore\n * @return {void}\n */\nconst createMenu = () => {\n    // Create application menu\n    if (process.platform === 'darwin') {\n        const template = [{\n            label: Lang.string('app.title'),\n            submenu: [{\n                label: Lang.string('menu.about'),\n                selector: 'orderFrontStandardAboutPanel:'\n            }, {\n                type: 'separator'\n            }, {\n                label: 'Services',\n                submenu: []\n            }, {\n                type: 'separator'\n            }, {\n                label: Lang.string('menu.hideCurrentWindow'),\n                accelerator: 'Command+H',\n                selector: 'hide:'\n            }, {\n                label: Lang.string('menu.hideOtherWindows'),\n                accelerator: 'Command+Shift+H',\n                selector: 'hideOtherApplications:'\n            }, {\n                label: Lang.string('menu.showAllWindows'),\n                selector: 'unhideAllApplications:'\n            }, {\n                type: 'separator'\n            }, {\n                label: Lang.string('menu.quit'),\n                accelerator: 'Command+Q',\n                click() {\n                    application.quit();\n                }\n            }]\n        }, {\n            label: Lang.string('menu.edit'),\n            submenu: [{\n                label: Lang.string('menu.undo'),\n                accelerator: 'Command+Z',\n                selector: 'undo:'\n            }, {\n                label: Lang.string('menu.redo'),\n                accelerator: 'Shift+Command+Z',\n                selector: 'redo:'\n            }, {\n                type: 'separator'\n            }, {\n                label: Lang.string('menu.cut'),\n                accelerator: 'Command+X',\n                selector: 'cut:'\n            }, {\n                label: Lang.string('menu.copy'),\n                accelerator: 'Command+C',\n                selector: 'copy:'\n            }, {\n                label: Lang.string('menu.paste'),\n                accelerator: 'Command+V',\n                selector: 'paste:'\n            }, {\n                label: Lang.string('menu.selectAll'),\n                accelerator: 'Command+A',\n                selector: 'selectAll:'\n            }]\n        }, {\n            label: Lang.string('menu.view'),\n            submenu: (DEBUG) ? [{\n                label: Lang.string('menu.reload'),\n                accelerator: 'Command+R',\n                click() {\n                    application.mainWindow.webContents.reload();\n                }\n            }, {\n                label: Lang.string('menu.toggleFullscreen'),\n                accelerator: 'Ctrl+Command+F',\n                click() {\n                    application.mainWindow.setFullScreen(!application.mainWindow.isFullScreen());\n                }\n            }, {\n                label: Lang.string('menu.toggleDeveloperTool'),\n                accelerator: 'Alt+Command+I',\n                click() {\n                    application.mainWindow.toggleDevTools();\n                }\n            }] : [{\n                label: Lang.string('menu.toggleFullscreen'),\n                accelerator: 'Ctrl+Command+F',\n                click() {\n                    application.mainWindow.setFullScreen(!application.mainWindow.isFullScreen());\n                }\n            }]\n        }, {\n            label: Lang.string('menu.window'),\n            submenu: [{\n                label: Lang.string('menu.minimize'),\n                accelerator: 'Command+M',\n                selector: 'performMiniaturize:'\n            }, {\n                label: Lang.string('menu.close'),\n                accelerator: 'Command+W',\n                selector: 'performClose:'\n            }, {\n                type: 'separator'\n            }, {\n                label: Lang.string('menu.bringAllToFront'),\n                selector: 'arrangeInFront:'\n            }]\n        }, {\n            label: Lang.string('menu.help'),\n            submenu: [{\n                label: Lang.string('menu.website'),\n                click() {\n                    shell.openExternal(pkg.homepage);\n                }\n            }, {\n                label: Lang.string('menu.project'),\n                click() {\n                    shell.openExternal('https://github.com/easysoft/xuanxuan');\n                }\n            }, {\n                label: Lang.string('menu.community'),\n                click() {\n                    shell.openExternal('https://github.com/easysoft/xuanxuan');\n                }\n            }, {\n                label: Lang.string('menu.issues'),\n                click() {\n                    shell.openExternal('https://github.com/easysoft/xuanxuan/issues');\n                }\n            }]\n        }];\n\n        const menu = Menu.buildFromTemplate(template);\n        Menu.setApplicationMenu(menu);\n    }\n};\n\n// 当 Electron 初始化完毕且创建完窗口时调用\nElectronApp.on('ready', async () => {\n    // 安装 Electron 调试扩展\n    await installExtensions();\n\n    // 通知应用管理程序就绪\n    application.ready();\n\n    // 创建应用窗口菜单\n    createMenu();\n});\n\n// 当 Electron 应用被激活时调用\nElectronApp.on('activate', () => {\n    // 在 OS X 系统上，可能存在所有应用窗口关闭了，但是程序还没关闭，此时如果收到激活应用请求需要\n    // 重新打开应用窗口并创建应用菜单\n    application.openMainWindow();\n    createMenu();\n});\n\n// 设置关于窗口\nif (typeof ElectronApp.setAboutPanelOptions === 'function') {\n    ElectronApp.setAboutPanelOptions({\n        applicationName: Lang.title,\n        applicationVersion: pkg.version,\n        copyright: 'Copyright (C) 2017 cnezsoft.com',\n        credits: `Licence: ${pkg.license}`,\n        version: DEBUG ? '[debug]' : ''\n    });\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/main.development.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1616,
    "kind": "function",
    "name": "installExtensions",
    "memberof": "app/main.development.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "app/main.development.js~installExtensions",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/main.development.js",
    "importStyle": null,
    "description": "安装调试模式所使用的 Electron 开发工具扩展",
    "lineNumber": 44,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1617,
    "kind": "function",
    "name": "createMenu",
    "memberof": "app/main.development.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/main.development.js~createMenu",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/main.development.js",
    "importStyle": null,
    "description": "创建窗口菜单",
    "lineNumber": 70,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1618,
    "kind": "file",
    "name": "app/platform/browser/clipboard.js",
    "content": "import clipboard from 'clipboard-js'; // 考虑升级到 https://github.com/lgarron/clipboard-polyfill\n\n/**\n * 将文本复制到剪切板\n * @param {string} text 要复制的文本\n * @return {void}\n */\nexport const writeText = text => {\n    clipboard.copy(text);\n};\n\n/**\n * 将 HTML 文本复制到剪切板\n * @param {string} html 要复制的 HTML 文本\n * @return {void}\n */\nexport const writeHTML = html => {\n    clipboard.copy({'text/html': html});\n};\n\nexport default {\n    writeText,\n    // readText: clipboard.readText,\n    writeHTML,\n    // readHTML: clipboard.readHTML,\n    // readImage: clipboard.readImage,\n    // saveImage,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/clipboard.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1619,
    "kind": "function",
    "name": "writeText",
    "memberof": "app/platform/browser/clipboard.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/browser/clipboard.js~writeText",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/browser/clipboard.js",
    "importStyle": "{writeText}",
    "description": "将文本复制到剪切板",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "要复制的文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1620,
    "kind": "function",
    "name": "writeHTML",
    "memberof": "app/platform/browser/clipboard.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/browser/clipboard.js~writeHTML",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/browser/clipboard.js",
    "importStyle": "{writeHTML}",
    "description": "将 HTML 文本复制到剪切板",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": "要复制的 HTML 文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1621,
    "kind": "file",
    "name": "app/platform/browser/crypto.js",
    "content": "import AES from 'aes-js';\n\n/**\n * 使用 AES 加密文本\n * @param  {string} data 要加密的文本字符串\n * @param  {string} token AES key\n * @param  {string} cipherIV AES token\n * @return {Buffer} 返回加密后的 Buffer 数据\n */\nconst easEncrypt = (data, token, cipherIV) => {\n    const key = AES.utils.utf8.toBytes(token);\n    const iv = AES.utils.utf8.toBytes(cipherIV);\n    // eslint-disable-next-line new-cap\n    const aesCbc = new AES.ModeOfOperation.cbc(key, iv);\n    const dataBytes = AES.utils.utf8.toBytes(data);\n    const paddedData = AES.padding.pkcs7.pad(dataBytes);\n    const encryptedBytes = aesCbc.encrypt(paddedData);\n    return encryptedBytes;\n};\n\n/**\n * 使用 AES 解密文本\n * @param  {Buffer} data 要解密的 Buffer 数据\n * @param  {string} token AES key\n * @param  {string} cipherIV AES token\n * @return {string} 返回解密后的文本\n */\nconst aesDecrypt = (data, token, cipherIV) => {\n    const key = AES.utils.utf8.toBytes(token);\n    const iv = AES.utils.utf8.toBytes(cipherIV);\n    // eslint-disable-next-line new-cap\n    const aesCbc = new AES.ModeOfOperation.cbc(key, iv);\n    const utf8Array = new Uint8Array(data);\n    const decryptedBytes = aesCbc.decrypt(utf8Array);\n    const decryptedText = AES.utils.utf8.fromBytes(AES.padding.pkcs7.strip(decryptedBytes));\n    return decryptedText;\n};\n\nexport default {\n    encrypt: easEncrypt,\n    decrypt: aesDecrypt,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/crypto.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1622,
    "kind": "function",
    "name": "easEncrypt",
    "memberof": "app/platform/browser/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/browser/crypto.js~easEncrypt",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/browser/crypto.js",
    "importStyle": null,
    "description": "使用 AES 加密文本",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "要加密的文本字符串"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "AES key"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cipherIV",
        "description": "AES token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "返回加密后的 Buffer 数据"
    }
  },
  {
    "__docId__": 1623,
    "kind": "function",
    "name": "aesDecrypt",
    "memberof": "app/platform/browser/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/browser/crypto.js~aesDecrypt",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/browser/crypto.js",
    "importStyle": null,
    "description": "使用 AES 解密文本",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "要解密的 Buffer 数据"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "AES key"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cipherIV",
        "description": "AES token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "返回解密后的文本"
    }
  },
  {
    "__docId__": 1624,
    "kind": "file",
    "name": "app/platform/browser/dialog.js",
    "content": "import {showOpenDialog} from '../common/open-file-button';\n\n/**\n * 显示文件保存对话框\n * @param {{fileUrl: string}} options 选项\n * @param {function(result: boolean)} callback 保存完成后的回调函数，其中参数 `result` 为是否成功保存文件\n * @return {void}\n */\nexport const showSaveDialog = (options, callback) => {\n    if (options.fileUrl) {\n        window.open(options.fileUrl);\n        callback(true);\n    } else {\n        if (DEBUG) {\n            console.warn('Cannot save file without file url defenition');\n        }\n        callback(false);\n    }\n};\n\nexport default {\n    showSaveDialog,\n    showOpenDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1625,
    "kind": "function",
    "name": "showSaveDialog",
    "memberof": "app/platform/browser/dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/browser/dialog.js~showSaveDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/browser/dialog.js",
    "importStyle": "{showSaveDialog}",
    "description": "显示文件保存对话框",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "{fileUrl: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "选项"
      },
      {
        "nullable": null,
        "types": [
          "function(result: boolean)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "保存完成后的回调函数，其中参数 `result` 为是否成功保存文件"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1626,
    "kind": "file",
    "name": "app/platform/browser/env.js",
    "content": "/**\n * 操作系统平台\n * @type {string}\n * @private\n */\nlet osPlatform = null;\n\n/**\n * 浏览器 userAgent 字符串\n * @private\n * @type {string}\n */\nconst {userAgent} = window.navigator;\n\n\n/**\n * 当前运行的操作系统是否是 Mac\n * @type {boolean}\n * @private\n */\nconst isOSX = userAgent.includes('Mac OS');\n\n/**\n * 当前运行的操作系统是否是 Windows\n * @type {boolean}\n * @private\n */\nconst isWindowsOS = userAgent.includes('Windows');\n\n/**\n * 当前运行的操作系统是否是 Linux\n * @type {boolean}\n * @private\n */\nconst isLinux = userAgent.includes('Linux');\n\nif (isOSX) {\n    osPlatform = 'osx';\n} else if (isWindowsOS) {\n    osPlatform = 'windows';\n} else if (isLinux) {\n    osPlatform = 'linux';\n}\n\n/**\n * 当前操作系统运行环境信息\n * @type {Object}\n * @property {string} os 操作系统类型，包括 MacOS(`'osx'`)，Windows(`'windows'`) 或 Linux(`'linux'`)\n * @property {boolean} isWindowsOS 当前运行的操作系统是否是 Windows\n * @property {boolean} isOSX 当前运行的操作系统是否是 Mac OS\n * @property {boolean} isLinux 当前运行的操作系统是否是 Linux\n */\nexport default {\n    os: osPlatform,\n    isWindowsOS,\n    isOSX,\n    isLinux,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/env.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1627,
    "kind": "variable",
    "name": "osPlatform",
    "memberof": "app/platform/browser/env.js",
    "static": true,
    "longname": "app/platform/browser/env.js~osPlatform",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/browser/env.js",
    "importStyle": null,
    "description": "操作系统平台",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1628,
    "kind": "variable",
    "name": "userAgent",
    "memberof": "app/platform/browser/env.js",
    "static": true,
    "longname": "app/platform/browser/env.js~userAgent",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/browser/env.js",
    "importStyle": null,
    "description": "浏览器 userAgent 字符串",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1629,
    "kind": "variable",
    "name": "isOSX",
    "memberof": "app/platform/browser/env.js",
    "static": true,
    "longname": "app/platform/browser/env.js~isOSX",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/browser/env.js",
    "importStyle": null,
    "description": "当前运行的操作系统是否是 Mac",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1630,
    "kind": "variable",
    "name": "isWindowsOS",
    "memberof": "app/platform/browser/env.js",
    "static": true,
    "longname": "app/platform/browser/env.js~isWindowsOS",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/browser/env.js",
    "importStyle": null,
    "description": "当前运行的操作系统是否是 Windows",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1631,
    "kind": "variable",
    "name": "isLinux",
    "memberof": "app/platform/browser/env.js",
    "static": true,
    "longname": "app/platform/browser/env.js~isLinux",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/browser/env.js",
    "importStyle": null,
    "description": "当前运行的操作系统是否是 Linux",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1632,
    "kind": "file",
    "name": "app/platform/browser/event-emitter.js",
    "content": "import EventEmitter from 'wolfy87-eventemitter';\n\n/**\n * EventEmitter 类\n */\nexport default EventEmitter;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/event-emitter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1633,
    "kind": "file",
    "name": "app/platform/browser/exts.js",
    "content": "/**\n * 浏览器不同不支持扩展机制，此模块永远返回 `false`\n */\nexport default false;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/exts.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1634,
    "kind": "file",
    "name": "app/platform/browser/index.js",
    "content": "import Socket from './socket';\nimport clipboard from './clipboard';\nimport sound from '../common/sound';\nimport crypto from './crypto';\nimport EventEmitter from './event-emitter';\nimport env from './env';\nimport ui from './ui';\nimport dialog from './dialog';\nimport notify from './notify';\nimport config from '../common/config';\nimport net from './net';\nimport setting from './setting';\n\n/**\n * 浏览器平台上所有可用的模块\n */\nexport default {\n    type: 'browser',\n    setting,\n    Socket,\n    clipboard,\n    crypto,\n    EventEmitter,\n    env,\n    ui,\n    notify,\n    config,\n    sound,\n    net,\n    dialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1635,
    "kind": "file",
    "name": "app/platform/browser/net.js",
    "content": "import network from '../common/network';\n\n// 浏览器上下载文件直接在浏览器中打开下载地址即可\nnetwork.downloadFile = (user, file, onProgress) => {\n    if (!file.url) {\n        file.makeUrl(user);\n    }\n    return Promise.resolve(file);\n};\n\n/**\n * 备份文件上传功能\n * @private\n * @type {function}\n */\nconst uploadFileOrigin = network.uploadFile;\n\n// 重构浏览器上文件上传功能\nnetwork.uploadFile = (user, file, data = {}, onProgress = null) => {\n    const originFile = file.originFile;\n    if (!originFile) {\n        return console.warn('Upload file fail, cannot get origin file object.', file);\n    }\n    const serverUrl = user.uploadUrl;\n    const form = new FormData();\n    form.append('file', file.originData, file.name);\n    form.append('userID', user.id);\n    form.append('gid', file.cgid);\n    file.form = form;\n    return uploadFileOrigin(file, serverUrl, xhr => {\n        xhr.setRequestHeader('ServerName', user.serverName);\n        xhr.setRequestHeader('Authorization', user.token);\n    }, onProgress);\n};\n\nexport default network;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/net.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1636,
    "kind": "variable",
    "name": "uploadFileOrigin",
    "memberof": "app/platform/browser/net.js",
    "static": true,
    "longname": "app/platform/browser/net.js~uploadFileOrigin",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/browser/net.js",
    "importStyle": null,
    "description": "备份文件上传功能",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1637,
    "kind": "file",
    "name": "app/platform/browser/notify.js",
    "content": "import {showNotification} from '../common/notification';\nimport {playSound} from '../common/sound';\n\nexport default {\n    showNotification,\n    playSound\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/notify.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1638,
    "kind": "file",
    "name": "app/platform/browser/setting/index.js",
    "content": "import system from './system.json';\nimport {updateConfig} from '../../../config';\n\n// 更新平台特有配置\nconst config = updateConfig({system});\n\nexport default config;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/setting/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1639,
    "kind": "variable",
    "name": "config",
    "memberof": "app/platform/browser/setting/index.js",
    "static": true,
    "longname": "app/platform/browser/setting/index.js~config",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/browser/setting/index.js",
    "importStyle": "config",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1640,
    "kind": "file",
    "name": "app/platform/browser/socket.js",
    "content": "import crypto from './crypto';\nimport Status from '../../utils/status';\n\n/**\n * Socket 连接状态管理器\n * @type {Status}\n * @private\n */\nconst STATUS = new Status({\n    CONNECTING: 0, // 连接还没开启。\n    OPEN: 1, // 连接已开启并准备好进行通信。\n    CLOSING: 2, // 连接正在关闭的过程中。\n    CLOSED: 3, // 连接已经关闭，或者连接无法建立。\n    UNCONNECT: 4, // 未连接\n}, 4);\n\n/**\n * Socket 连接管理类（Browser）\n *\n * @export\n * @class Socket\n */\nexport default class Socket {\n    /**\n     * Socket 连接状态管理器\n     * @type {Status}\n     * @static\n     * @memberof Socket\n     */\n    static STATUS = STATUS;\n\n    /**\n     * 创建一个 Socket 类实例\n     * @param {string} url Socket 连接地址\n     * @param {Object} options Socket 连接选项\n     * @memberof Socket\n     */\n    constructor(url, options) {\n        /**\n         * Socket 连接状态\n         * @type {StatusKeeper}\n         * @private\n         */\n        this._status = STATUS.create(STATUS.UNCONNECT);\n\n        this._status.onChange = (newStatus, oldStatus) => {\n            if (this.onStatusChange) {\n                this.onStatusChange(newStatus, oldStatus);\n            }\n        };\n\n        if (url) {\n            this.init(url, options);\n        }\n    }\n\n    /**\n     * 初始化 Socket 连接\n     * @param {string} url Socket 连接地址\n     * @param {Object} options Socket 连接选项\n     * @return {void}\n     */\n    init(url, options) {\n        // Close socket before init\n        this.close();\n\n        options = Object.assign({\n            connent: true,\n            userToken: '',\n            cipherIV: '',\n            encryptEnable: true\n        }, options);\n\n        this.options = options;\n        this.url = url;\n        this._status.change(STATUS.UNCONNECT);\n\n        if (options.connect && this.url) {\n            this.connect();\n        }\n\n        if (this.onInit) {\n            this.onInit();\n        }\n    }\n\n    /**\n     * 获取状态值\n     * @memberof Member\n     * @type {number}\n     */\n    get status() {\n        return this._status.value;\n    }\n\n    /**\n     * 获取状态名称\n     * @memberof Member\n     * @type {string}\n     * @readonly\n     */\n    get statusName() {\n        return this._status.name;\n    }\n\n    /**\n     * 设置状态\n     * @param {string|number} newStatus 状态值或名称\n     * @memberof Member\n     */\n    set status(newStatus) {\n        this._status.change(newStatus);\n        this.renewUpdateId();\n    }\n\n    /**\n     * 获取是否连接成功\n     * @memberof Socket\n     * @type {boolean}\n     */\n    get isConnected() {\n        return this.isStatus(STATUS.OPEN);\n    }\n\n    /**\n     * 获取是否正在连接中\n     * @memberof Socket\n     * @type {boolean}\n     */\n    get isConnecting() {\n        return this.isStatus(STATUS.CONNECTING);\n    }\n\n    /**\n     * 判断当前状态是否是给定的状态\n     * @memberof Member\n     * @param {number|string} status 要判断的状态值或状态名称\n     * @return {boolean} 如果为 `true` 则为给定的状态，否则不是\n     */\n    isStatus(status) {\n        return this._status.is(status);\n    }\n\n    /**\n     * 从 WebSocket 实例更新状态信息\n     *\n     * @memberof Socket\n     * @return {void}\n     */\n    updateStatusFromClient() {\n        if (this.client) {\n            this.status = this.client.readyState;\n        } else {\n            this.status = STATUS.UNCONNECT;\n        }\n    }\n\n    /**\n     * 开始连接\n     *\n     * @memberof Socket\n     * @return {void}\n     */\n    connect() {\n        this.close();\n\n        this.status = STATUS.CONNECTING;\n\n        const client = new WebSocket(this.url);\n        client.binaryType = 'arraybuffer';\n        client.onopen = this.handleConnect.bind(this);\n        client.onmessage = e => {\n            this.handleData(e.data, {binary: true});\n        };\n        client.onclose = e => {\n            if (!this.isConnected) {\n                this.handleConnectFail(e);\n            }\n            this.handleClose(e.code, e.reason);\n        };\n        client.onerror = e => {\n            this.handleError(e);\n        };\n\n        this.client = client;\n    }\n\n    /**\n     * 重新连接\n     *\n     * @return {void}\n     * @memberof Socket\n     */\n    reconnect() {\n        return this.connect();\n    }\n\n    /**\n     * 处理连接失败事件\n     * @param {Event} e 连接失败事件对象\n     * @memberof Socket\n     * @return {void}\n     * @protected\n     */\n    handleConnectFail(e) {\n        if (this.onConnectFail) {\n            this.onConnectFail(e);\n        }\n        if (this.options && this.options.onConnectFail) {\n            this.options.onConnectFail(e);\n        }\n    }\n\n    /**\n     * 处理连接成功事件\n     * @memberof Socket\n     * @return {void}\n     * @protected\n     */\n    handleConnect() {\n        this.updateStatusFromClient();\n\n        if (DEBUG) {\n            console.collapse('SOCKET Connected', 'greenBg', this.url, 'greenPale');\n            console.log('socket', this);\n            console.groupEnd();\n        }\n\n        if (this.options && this.options.onConnect) {\n            this.options.onConnect(this);\n        }\n\n        if (this.onConnect) {\n            this.onConnect();\n        }\n    }\n\n    /**\n     * 处理连接关闭事件\n     *\n     * @param {number} code 关闭代码\n     * @param {string} reason 关闭原因\n     * @memberof Socket\n     * @protected\n     * @return {void}\n     */\n    handleClose(code, reason) {\n        const unexpected = !this._status.is(STATUS.CLOSING);\n        this.updateStatusFromClient();\n        this.client = null;\n\n        if (DEBUG) {\n            console.collapse('SOCKET Closed', 'greenBg', this.url, 'greenPale');\n            console.log('socket', this);\n            console.log('code', code);\n            console.log('reason', reason);\n            console.groupEnd();\n        }\n\n        if (this.options && this.options.onClose) {\n            this.options.onClose(this, code, reason, unexpected);\n        }\n\n        if (this.onClose) {\n            this.onClose(code, reason, unexpected);\n        }\n    }\n\n    /**\n     * 处理连接发生错误\n     *\n     * @param {Error} error 连接错误对象\n     * @memberof Socket\n     * @return {void}\n     * @protected\n     */\n    handleError(error) {\n        this.updateStatusFromClient();\n\n        if (DEBUG) {\n            console.collapse('SOCKET Error', 'redBg', this.url, 'redPale');\n            console.log('socket', this);\n            console.log('error', error);\n            console.groupEnd();\n        }\n\n        if (this.options && this.options.onError) {\n            this.options.onError(this, error);\n        }\n\n        if (this.onError) {\n            this.onError(error);\n        }\n    }\n\n    /**\n     * 处理接收到数据\n     *\n     * @param {Buffer|String} rawdata 接收到的数据\n     * @param {Options} flags 数据参数\n     * @memberof Socket\n     * @return {void}\n     * @protected\n     */\n    handleData(rawdata, flags) {\n        this.updateStatusFromClient();\n\n        let data = null;\n        if (flags && flags.binary) {\n            if (this.options && this.options.encryptEnable) {\n                data = crypto.decrypt(rawdata, this.options.userToken, this.options.cipherIV);\n            } else {\n                data = rawdata.toString();\n            }\n        }\n\n        // if(DEBUG) {\n        //     console.collapse('SOCKET Data', 'greenBg', this.url, 'greenPale');\n        //     console.log('socket', this);\n        //     console.log('rawdata', rawdata);\n        //     console.log('data', {data});\n        //     console.groupEnd();\n        // }\n\n        if (this.options && this.options.onData) {\n            this.options.onData(this, data, flags);\n        }\n\n        if (this.onData) {\n            this.onData(data, flags);\n        }\n    }\n\n    /**\n     * 通过 Socket 连接向服务器发送数据\n     *\n     * @param {string|Buffer} rawdata 要发送的数据\n     * @param {function} callback 发送完成后的回调函数\n     * @memberof Socket\n     * @return {void}\n     */\n    send(rawdata, callback) {\n        let data = null;\n        if (this.options && this.options.encryptEnable) {\n            data = crypto.encrypt(rawdata, this.options.userToken, this.options.cipherIV);\n            // if (DEBUG) {\n            //     console.collapse('ENCRYPT data', 'blueBg', `length: ${data.length}`, 'bluePale');\n            //     console.log('data', data);\n            //     console.log('rawdata', rawdata);\n            //     console.groupEnd();\n            // }\n        }\n\n        this.client.send(data, {\n            binary: this.options && this.options.encryptEnable\n        });\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     * 将连接标记为关闭\n     *\n     * @memberof Socket\n     * @return {void}\n     */\n    markClose() {\n        this.status = STATUS.CLOSING;\n    }\n\n    /**\n     * 移除所有监听的事件\n     * @private\n     * @memberof Socket\n     * @return {void}\n     */\n    removeAllListeners() {\n        this.client.onclose = null;\n        this.client.onerror = null;\n        this.client.onmessage = null;\n        this.client.onopen = null;\n    }\n\n    /**\n     * 关闭 Socket 连接\n     * @param {number} code 关闭代码\n     * @param {string} reason 关闭原因\n     * @return {void}\n     */\n    close(code, reason) {\n        if (this.client) {\n            if (reason === 'close' || reason === 'KICKOFF') {\n                this.markClose();\n            }\n            this.removeAllListeners();\n            this.client.close();\n            this.handleClose(code, reason);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1641,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "app/platform/browser/socket.js",
    "static": true,
    "longname": "app/platform/browser/socket.js~STATUS",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/browser/socket.js",
    "importStyle": null,
    "description": "Socket 连接状态管理器",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1642,
    "kind": "class",
    "name": "Socket",
    "memberof": "app/platform/browser/socket.js",
    "static": true,
    "longname": "app/platform/browser/socket.js~Socket",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/browser/socket.js",
    "importStyle": "Socket",
    "description": "Socket 连接管理类（Browser）",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Socket"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 1643,
    "kind": "member",
    "name": "STATUS",
    "memberof": "app/platform/browser/socket.js~Socket",
    "static": true,
    "longname": "app/platform/browser/socket.js~Socket.STATUS",
    "access": "public",
    "description": "Socket 连接状态管理器",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1644,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#constructor",
    "access": "public",
    "description": "创建一个 Socket 类实例",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Socket 连接地址"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Socket 连接选项"
      }
    ]
  },
  {
    "__docId__": 1645,
    "kind": "member",
    "name": "_status",
    "memberof": "app/platform/browser/socket.js~Socket",
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#_status",
    "access": "private",
    "description": "Socket 连接状态",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "StatusKeeper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1646,
    "kind": "method",
    "name": "init",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#init",
    "access": "public",
    "description": "初始化 Socket 连接",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Socket 连接地址"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Socket 连接选项"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1647,
    "kind": "member",
    "name": "options",
    "memberof": "app/platform/browser/socket.js~Socket",
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#options",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1648,
    "kind": "member",
    "name": "url",
    "memberof": "app/platform/browser/socket.js~Socket",
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#url",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1649,
    "kind": "get",
    "name": "status",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#status",
    "access": "public",
    "description": "获取状态值",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1650,
    "kind": "get",
    "name": "statusName",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#statusName",
    "access": "public",
    "description": "获取状态名称",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1651,
    "kind": "set",
    "name": "status",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#status",
    "access": "public",
    "description": "设置状态",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newStatus",
        "description": "状态值或名称"
      }
    ]
  },
  {
    "__docId__": 1652,
    "kind": "get",
    "name": "isConnected",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#isConnected",
    "access": "public",
    "description": "获取是否连接成功",
    "lineNumber": 121,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1653,
    "kind": "get",
    "name": "isConnecting",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#isConnecting",
    "access": "public",
    "description": "获取是否正在连接中",
    "lineNumber": 130,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1654,
    "kind": "method",
    "name": "isStatus",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#isStatus",
    "access": "public",
    "description": "判断当前状态是否是给定的状态",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "要判断的状态值或状态名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为给定的状态，否则不是"
    }
  },
  {
    "__docId__": 1655,
    "kind": "method",
    "name": "updateStatusFromClient",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#updateStatusFromClient",
    "access": "public",
    "description": "从 WebSocket 实例更新状态信息",
    "lineNumber": 150,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1658,
    "kind": "method",
    "name": "connect",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#connect",
    "access": "public",
    "description": "开始连接",
    "lineNumber": 164,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1660,
    "kind": "member",
    "name": "client",
    "memberof": "app/platform/browser/socket.js~Socket",
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#client",
    "access": "public",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1661,
    "kind": "method",
    "name": "reconnect",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#reconnect",
    "access": "public",
    "description": "重新连接",
    "lineNumber": 194,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1662,
    "kind": "method",
    "name": "handleConnectFail",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#handleConnectFail",
    "access": "protected",
    "description": "处理连接失败事件",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "连接失败事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1663,
    "kind": "method",
    "name": "handleConnect",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#handleConnect",
    "access": "protected",
    "description": "处理连接成功事件",
    "lineNumber": 220,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1664,
    "kind": "method",
    "name": "handleClose",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#handleClose",
    "access": "protected",
    "description": "处理连接关闭事件",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "关闭代码"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "关闭原因"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1666,
    "kind": "method",
    "name": "handleError",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#handleError",
    "access": "protected",
    "description": "处理连接发生错误",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "连接错误对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1667,
    "kind": "method",
    "name": "handleData",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#handleData",
    "access": "protected",
    "description": "处理接收到数据",
    "lineNumber": 305,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "rawdata",
        "description": "接收到的数据"
      },
      {
        "nullable": null,
        "types": [
          "Options"
        ],
        "spread": false,
        "optional": false,
        "name": "flags",
        "description": "数据参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1668,
    "kind": "method",
    "name": "send",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#send",
    "access": "public",
    "description": "通过 Socket 连接向服务器发送数据",
    "lineNumber": 342,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "rawdata",
        "description": "要发送的数据"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "发送完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1669,
    "kind": "method",
    "name": "markClose",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#markClose",
    "access": "public",
    "description": "将连接标记为关闭",
    "lineNumber": 368,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1671,
    "kind": "method",
    "name": "removeAllListeners",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#removeAllListeners",
    "access": "private",
    "description": "移除所有监听的事件",
    "lineNumber": 378,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1672,
    "kind": "method",
    "name": "close",
    "memberof": "app/platform/browser/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/browser/socket.js~Socket#close",
    "access": "public",
    "description": "关闭 Socket 连接",
    "lineNumber": 391,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "关闭代码"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "关闭原因"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1673,
    "kind": "file",
    "name": "app/platform/browser/ui.js",
    "content": "/**\n * 打开外部链接，在浏览器平台上处理方式是通过打开新标签页实现\n * @param {string} link 要打开的链接\n * @return {void}\n */\nexport const openExternal = link => {\n    window.open(link);\n};\n\n/**\n * 判断网页是否获得焦点\n * @private\n * @returns {boolean} 如果返回 `true` 则为获得焦点，否则为没有获得焦点\n */\nconst isDocumentHasFocus = () => {\n    return window.document.hasFocus();\n};\n\n/**\n * 绑定应用窗口激活事件\n * @param {funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onWindowFocus = listener => {\n    document.addEventListener('focus', listener);\n};\n\n/**\n * 当前应用窗口是否打开\n * 在浏览器平台上此值永远返回 `true`\n * @type {boolean}\n */\nexport const isWindowOpen = true;\n\n/**\n * 当前应用窗口是否打开并且激活\n * @returns {boolean} 如果返回 `true` 则为打开并且激活，否则为没有打开并且激活\n */\nexport const isWindowOpenAndFocus = isDocumentHasFocus;\n\n/**\n * 当前应用窗口是否处于激活状态\n * @returns {boolean} 如果返回 `true` 则为处于激活状态，否则为没有处于激活状态\n */\nexport const isWindowFocus = isDocumentHasFocus;\n\nexport default {\n    openExternal,\n    get isWindowOpenAndFocus() {\n        return isDocumentHasFocus();\n    },\n    get isWindowFocus() {\n        return isDocumentHasFocus();\n    },\n    isWindowOpen,\n    onWindowFocus,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/browser/ui.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1674,
    "kind": "function",
    "name": "openExternal",
    "memberof": "app/platform/browser/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/browser/ui.js~openExternal",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/browser/ui.js",
    "importStyle": "{openExternal}",
    "description": "打开外部链接，在浏览器平台上处理方式是通过打开新标签页实现",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "link",
        "description": "要打开的链接"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1675,
    "kind": "function",
    "name": "isDocumentHasFocus",
    "memberof": "app/platform/browser/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/browser/ui.js~isDocumentHasFocus",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/browser/ui.js",
    "importStyle": null,
    "description": "判断网页是否获得焦点",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为获得焦点，否则为没有获得焦点"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为获得焦点，否则为没有获得焦点"
    },
    "params": []
  },
  {
    "__docId__": 1676,
    "kind": "function",
    "name": "onWindowFocus",
    "memberof": "app/platform/browser/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/browser/ui.js~onWindowFocus",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/browser/ui.js",
    "importStyle": "{onWindowFocus}",
    "description": "绑定应用窗口激活事件",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1677,
    "kind": "variable",
    "name": "isWindowOpen",
    "memberof": "app/platform/browser/ui.js",
    "static": true,
    "longname": "app/platform/browser/ui.js~isWindowOpen",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/browser/ui.js",
    "importStyle": "{isWindowOpen}",
    "description": "当前应用窗口是否打开\n在浏览器平台上此值永远返回 `true`",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1678,
    "kind": "variable",
    "name": "isWindowOpenAndFocus",
    "memberof": "app/platform/browser/ui.js",
    "static": true,
    "longname": "app/platform/browser/ui.js~isWindowOpenAndFocus",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/browser/ui.js",
    "importStyle": "{isWindowOpenAndFocus}",
    "description": "当前应用窗口是否打开并且激活",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为打开并且激活，否则为没有打开并且激活"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为打开并且激活，否则为没有打开并且激活"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1679,
    "kind": "variable",
    "name": "isWindowFocus",
    "memberof": "app/platform/browser/ui.js",
    "static": true,
    "longname": "app/platform/browser/ui.js~isWindowFocus",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/browser/ui.js",
    "importStyle": "{isWindowFocus}",
    "description": "当前应用窗口是否处于激活状态",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为处于激活状态，否则为没有处于激活状态"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为处于激活状态，否则为没有处于激活状态"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1680,
    "kind": "file",
    "name": "app/platform/common/config.js",
    "content": "import Store from '../../utils/store';\nimport plainObject from '../../utils/plain';\n\n/**\n * 用户对象在本地存储中存储键值前缀\n * @private\n * @type {string}\n */\nconst KEY_USER_PREFIX = 'USER::';\n\n/**\n * 用户标识字符串清单在本地存储中存储键值前缀\n * @private\n * @type {string}\n */\nconst KEY_USER_LIST = 'USER_LIST';\n\n/**\n * 获取本地存储中保存的所有用户标识字符串清单\n * @return {string[]} 所有用户标识字符串清单\n */\nexport const allUsers = () => {\n    return Store.get(KEY_USER_LIST, {});\n};\n\n/**\n * 根据用户标识字符串获取本地存储中保存的用户对象\n * @param {string} identify 用户标识字符串\n * @returns {Object} 保存的用户对象\n */\nexport const getUser = (identify) => {\n    if (identify) {\n        const user = Store.get(`${KEY_USER_PREFIX}${identify}`);\n        if (user) {\n            user.identify = identify;\n            if (user.rememberPassword === undefined) {\n                user.rememberPassword = true;\n            }\n        }\n        return user;\n    }\n    const users = allUsers();\n    if (!users) {\n        return null;\n    }\n    let maxTime = 0;\n    let maxTimeIndentify = null;\n    Object.keys(users).forEach(identify => {\n        const time = users[identify];\n        if (time > maxTime) {\n            maxTime = time;\n            maxTimeIndentify = identify;\n        }\n    });\n    return maxTimeIndentify ? getUser(maxTimeIndentify) : null;\n};\n\n/**\n * 获取本地存储中保存的所有用户\n * @return {Object[]} 保存的用户列表\n */\nexport const userList = () => {\n    const users = allUsers();\n    return Object.keys(users).map(getUser).sort((x, y) => y.lastLoginTime - x.lastLoginTime);\n};\n\n/**\n * 将用户对象报错到本地存储\n * @param {Object} user 要保存的用户对象\n * @return {void}\n */\nexport const saveUser = (user) => {\n    const {identify} = user;\n    if (!identify) {\n        throw new Error('Cannot save user, because user.indentify property is not defined.');\n    }\n\n    const userData = typeof user.plain === 'function' ? user.plain() : plainObject(user);\n    if (!userData.rememberPassword) {\n        delete userData.password;\n    }\n\n    Store.set(`${KEY_USER_PREFIX}${identify}`, userData);\n\n    const users = allUsers();\n    users[identify] = new Date().getTime();\n    Store.set(KEY_USER_LIST, users);\n};\n\n/**\n * 从本地存储移除指定的用户\n * @param {string|{identify: string}} user 要移除的用户标识字符串或者用户对象\n * @return {void}\n */\nexport const removeUser = (user) => {\n    const identify = typeof user === 'object' ? user.identify : user;\n\n    if (!identify) {\n        throw new Error('Cannot remove user, because user.indentify property is not defined.');\n    }\n\n    Store.remove(`${KEY_USER_PREFIX}${identify}`);\n\n    const users = allUsers();\n    if (users[identify]) {\n        delete users[identify];\n        Store.set(KEY_USER_LIST, users);\n    }\n};\n\nexport default {\n    allUsers,\n    getUser,\n    userList,\n    saveUser,\n    removeUser,\n    store: Store\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/common/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1681,
    "kind": "variable",
    "name": "KEY_USER_PREFIX",
    "memberof": "app/platform/common/config.js",
    "static": true,
    "longname": "app/platform/common/config.js~KEY_USER_PREFIX",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/common/config.js",
    "importStyle": null,
    "description": "用户对象在本地存储中存储键值前缀",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1682,
    "kind": "variable",
    "name": "KEY_USER_LIST",
    "memberof": "app/platform/common/config.js",
    "static": true,
    "longname": "app/platform/common/config.js~KEY_USER_LIST",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/common/config.js",
    "importStyle": null,
    "description": "用户标识字符串清单在本地存储中存储键值前缀",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1683,
    "kind": "function",
    "name": "allUsers",
    "memberof": "app/platform/common/config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/config.js~allUsers",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/config.js",
    "importStyle": "{allUsers}",
    "description": "获取本地存储中保存的所有用户标识字符串清单",
    "lineNumber": 22,
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "所有用户标识字符串清单"
    },
    "params": []
  },
  {
    "__docId__": 1684,
    "kind": "function",
    "name": "getUser",
    "memberof": "app/platform/common/config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/config.js~getUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/config.js",
    "importStyle": "{getUser}",
    "description": "根据用户标识字符串获取本地存储中保存的用户对象",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} 保存的用户对象"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "identify",
        "description": "用户标识字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "保存的用户对象"
    }
  },
  {
    "__docId__": 1685,
    "kind": "function",
    "name": "userList",
    "memberof": "app/platform/common/config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/config.js~userList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/config.js",
    "importStyle": "{userList}",
    "description": "获取本地存储中保存的所有用户",
    "lineNumber": 62,
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "保存的用户列表"
    },
    "params": []
  },
  {
    "__docId__": 1686,
    "kind": "function",
    "name": "saveUser",
    "memberof": "app/platform/common/config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/config.js~saveUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/config.js",
    "importStyle": "{saveUser}",
    "description": "将用户对象报错到本地存储",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "要保存的用户对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1687,
    "kind": "function",
    "name": "removeUser",
    "memberof": "app/platform/common/config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/config.js~removeUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/config.js",
    "importStyle": "{removeUser}",
    "description": "从本地存储移除指定的用户",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "{identify: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "要移除的用户标识字符串或者用户对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1688,
    "kind": "file",
    "name": "app/platform/common/network.js",
    "content": "import limitTimePromise from '../../utils/limit-time-promise';\n\nconst TIMEOUT_DEFAULT = 15 * 1000;\nlet {fetch} = window;\nlet optionsFilter = null;\nconst getOptions = options => {\n    return optionsFilter ? optionsFilter(options) : options;\n};\n\nexport const request = (url, options) => {\n    return new Promise((resolve, reject) => {\n        options = getOptions(options);\n        fetch(url, options).then(response => {\n            if (response.ok) {\n                if (DEBUG) {\n                    console.collapse(`HTTP ${(options && options.method) || 'GET'}`, 'blueBg', url, 'bluePale', 'OK', 'greenPale');\n                    console.log('options', options);\n                    console.log('response', response);\n                    console.log('body', response.body);\n                    console.groupEnd();\n                }\n                resolve(response);\n            } else {\n                const error = new Error(response.statusMessage || `Status code is ${response.status}.`);\n                error.code = response.status === 401 ? 'STATUS_401' : (response.statusMessage || 'WRONG_STATUS');\n                if (DEBUG) {\n                    console.collapse(`HTTP ${(options && options.method) || 'GET'}`, 'blueBg', url, 'bluePale', error.code || 'ERROR', 'redPale');\n                    console.log('options', options);\n                    console.log('error', error);\n                    console.log('response', response);\n                    console.groupEnd();\n                }\n                reject(error);\n            }\n        }).catch(error => {\n            error.code = 'WRONG_CONNECT';\n            if (DEBUG) {\n                console.collapse(`HTTP ${(options && options.method) || 'GET'}`, 'blueBg', url, 'bluePale', error.code || 'ERROR', 'redPale');\n                console.log('options', options);\n                console.log('error', error);\n                console.groupEnd();\n            }\n            reject(error);\n        });\n    });\n};\n\nexport const getTextFromResponse = response => {\n    const contentType = response.headers.get('Content-Type');\n    if (contentType && contentType.toLowerCase().includes('charset=gb')) {\n        return response.blob().then(blob => {\n            return new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    resolve(reader.result);\n                };\n                reader.onerror = reject;\n                reader.readAsText(blob, 'GBK');\n            });\n        });\n    }\n    return response.text();\n};\n\nexport const getText = (url, options) => {\n    return request(url, options).then(getTextFromResponse);\n};\n\nexport const postText = (url, options) => {\n    if (options instanceof FormData) {\n        options = {body: options};\n    }\n    return request(url, Object.assign({method: 'POST'}, options)).then(response => {\n        return response.text();\n    });\n};\n\n\nexport const getJSON = (url, options) => {\n    return request(url, options).then(response => {\n        return response.json();\n    });\n};\n\nexport const postJSON = (url, options) => {\n    if (options instanceof FormData) {\n        options = {body: options};\n    }\n    return request(url, Object.assign({method: 'POST'}, options)).then(response => {\n        return response.json();\n    });\n};\n\nexport const getJSONData = (url, options) => {\n    return getJSON(url, options).then(json => {\n        if (json) {\n            const jsonResult = json.status || json.result;\n            if (jsonResult === 'success') {\n                return Promise.resolve(json.data);\n            } else {\n                const error = new Error(json.message || json.reason || `The server data result is ${jsonResult}`);\n                error.code = 'WRONG_RESULT';\n                return Promise.reject(error);\n            }\n        } else {\n            const error = new Error('Server return a null json.');\n            error.code = 'WRONG_DATA';\n            return Promise.reject(error);\n        }\n    });\n};\n\nexport const postJSONData = (url, options) => {\n    if (options instanceof FormData) {\n        options = {body: options};\n    }\n    return getJSONData(url, Object.assign({\n        method: 'POST',\n    }, options));\n};\n\nexport const downloadFile = (url, beforeSend, onprogress) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.onload = e => {\n            if (xhr.status === 200) {\n                const arrayBuffer = xhr.response;\n                if (arrayBuffer) {\n                    resolve(arrayBuffer);\n                } else {\n                    let error = new Error('File data is empty.');\n                    error = 'EMPTY_FILE_DATA';\n                    reject(error);\n                }\n            } else {\n                let error = new Error('Status code is not 200.');\n                error = 'WRONG_STATUS';\n                reject(error);\n            }\n        };\n        xhr.onprogress = e => {\n            if (e.lengthComputable && onprogress) {\n                onprogress((100 * e.loaded) / e.total);\n            }\n        };\n        xhr.onerror = e => {\n            const error = new Error('Download request error.');\n            error.event = e;\n            error.code = 'WRONG_CONNECT';\n            reject(error);\n        };\n        xhr.onabort = e => {\n            const error = new Error('Download request abort.');\n            error.event = e;\n            error.code = 'CONNECT_ABORT';\n            reject(error);\n        };\n\n        xhr.open('GET', url);\n        xhr.responseType = 'arraybuffer';\n        if (beforeSend) {\n            beforeSend(xhr);\n        }\n        xhr.send();\n    });\n};\n\n/**\n * Upload file to the server\n *\n * @param {object} file\n * @param {string} serverUrl\n * @param {Function} beforeSend\n * @param {Function} onProgress\n */\nexport const uploadFile = (file, serverUrl, beforeSend = null, onProgress = null) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.onload = e => {\n            if (xhr.status === 200) {\n                const bodyText = xhr.responseText;\n                try {\n                    const json = JSON.parse(bodyText);\n                    if (json.result === 'success' && json.data) {\n                        resolve(json.data);\n                    } else {\n                        const error = new Error(`The server returned wrong result: ${xhr.responseText}`);\n                        error.code = 'WRONG_RESULT';\n                        reject(error);\n                    }\n                } catch (err) {\n                    if (bodyText.indexOf('user-deny-attach-upload') > 0) {\n                        const error = new Error('Server denied the request.');\n                        error.code = 'USER_DENY_ATTACT_UPLOAD';\n                        reject(error);\n                    } else {\n                        const error = new Error('Unknown data content: ' + bodyText);\n                        error.code = 'WRONG_DATA';\n                        reject(error);\n                    }\n                }\n            } else {\n                let error = new Error('Status code is not 200.');\n                error = 'WRONG_STATUS';\n                reject(error);\n            }\n        };\n        xhr.upload.onprogress = e => {\n            if (e.lengthComputable && onProgress) {\n                onProgress((100 * e.loaded) / e.total);\n            }\n        };\n        xhr.onerror = e => {\n            const error = new Error('Upload request error.');\n            error.event = e;\n            error.code = 'WRONG_CONNECT';\n            reject(error);\n        };\n        xhr.onabort = e => {\n            const error = new Error('Upload request abort.');\n            error.event = e;\n            error.code = 'CONNECT_ABORT';\n            reject(error);\n        };\n\n        xhr.open('POST', serverUrl);\n        xhr.setRequestHeader('X-FILENAME', encodeURIComponent(file.name));\n        if (beforeSend) {\n            beforeSend(xhr);\n        }\n        xhr.send(file.form || file);\n    });\n};\n\nexport const timeout = (promise, timeout = TIMEOUT_DEFAULT, errorText = 'timeout') => {\n    return limitTimePromise(promise, timeout, errorText);\n};\n\nexport const setFetchObject = fObj => {\n    fetch = fObj;\n};\n\nexport const setOptionsFileter = filter => {\n    optionsFilter = filter;\n};\n\nexport default {\n    request,\n    getText,\n    postText,\n    getJSON,\n    postJSON,\n    getJSONData,\n    postJSONData,\n    downloadFile,\n    uploadFile,\n    timeout,\n    setFetchObject,\n    setOptionsFileter,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/common/network.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1689,
    "kind": "variable",
    "name": "TIMEOUT_DEFAULT",
    "memberof": "app/platform/common/network.js",
    "static": true,
    "longname": "app/platform/common/network.js~TIMEOUT_DEFAULT",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1690,
    "kind": "variable",
    "name": "fetch",
    "memberof": "app/platform/common/network.js",
    "static": true,
    "longname": "app/platform/common/network.js~fetch",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1691,
    "kind": "variable",
    "name": "optionsFilter",
    "memberof": "app/platform/common/network.js",
    "static": true,
    "longname": "app/platform/common/network.js~optionsFilter",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1692,
    "kind": "function",
    "name": "getOptions",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~getOptions",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1693,
    "kind": "function",
    "name": "request",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~request",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{request}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1694,
    "kind": "function",
    "name": "getTextFromResponse",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~getTextFromResponse",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{getTextFromResponse}",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1695,
    "kind": "function",
    "name": "getText",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~getText",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{getText}",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1696,
    "kind": "function",
    "name": "postText",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~postText",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{postText}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1697,
    "kind": "function",
    "name": "getJSON",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~getJSON",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{getJSON}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1698,
    "kind": "function",
    "name": "postJSON",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~postJSON",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{postJSON}",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1699,
    "kind": "function",
    "name": "getJSONData",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~getJSONData",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{getJSONData}",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1700,
    "kind": "function",
    "name": "postJSONData",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~postJSONData",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{postJSONData}",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1701,
    "kind": "function",
    "name": "downloadFile",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~downloadFile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{downloadFile}",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "beforeSend",
        "types": [
          "*"
        ]
      },
      {
        "name": "onprogress",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1702,
    "kind": "function",
    "name": "uploadFile",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~uploadFile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{uploadFile}",
    "description": "Upload file to the server",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serverUrl",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "beforeSend",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onProgress",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1703,
    "kind": "function",
    "name": "timeout",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~timeout",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{timeout}",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "params": [
      {
        "name": "promise",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeout",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "TIMEOUT_DEFAULT",
        "defaultValue": "TIMEOUT_DEFAULT"
      },
      {
        "name": "errorText",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "timeout",
        "defaultValue": "timeout"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1704,
    "kind": "function",
    "name": "setFetchObject",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~setFetchObject",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{setFetchObject}",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "fObj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1705,
    "kind": "function",
    "name": "setOptionsFileter",
    "memberof": "app/platform/common/network.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/network.js~setOptionsFileter",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/network.js",
    "importStyle": "{setOptionsFileter}",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "params": [
      {
        "name": "filter",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1706,
    "kind": "file",
    "name": "app/platform/common/notification.js",
    "content": "import Config from '../../config';\n\n/**\n * 创建一个桌面通知\n * @param {string} title 通知标题\n * @param {Object} options 通知选项\n * @param {function(event: Event)} onClick 通知被点击时的回调函数\n * @return {Notification} 桌面通知对象\n */\nexport const createNotification = (title, options, onClick) => {\n    if (typeof title === 'object') {\n        options = title;\n        // eslint-disable-next-line prefer-destructuring\n        title = options.title;\n        delete options.title;\n    }\n    if (!onClick && options) {\n        onClick = options.click;\n    }\n    const notification = new Notification(title, Object.assign({\n        icon: `${Config.media['image.path']}icon.png`\n    }, options));\n    if (onClick) {\n        notification.onclick = onClick;\n    }\n    return notification;\n};\n\n/**\n * 显示一个桌面通知\n * @param {string} title 通知标题\n * @param {Object} options 通知选项\n * @param {function(event: Event)} onClick 通知被点击时的回调函数\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const showNotification = (title, options, onClick) => {\n    if (Notification.permission === 'granted') {\n        return Promise.resolve(createNotification(title, options, onClick));\n    }\n    if (Notification.permission !== 'denied') {\n        return new Promise((resolve, reject) => {\n            Notification.requestPermission(permission => {\n                if (permission === 'granted') {\n                    resolve(createNotification(title, options, onClick));\n                } else {\n                    reject(new Error('denied'));\n                }\n            });\n        });\n    }\n    return Promise.reject(new Error('denied'));\n};\n\nexport default {\n    show: showNotification\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/common/notification.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1707,
    "kind": "function",
    "name": "createNotification",
    "memberof": "app/platform/common/notification.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/notification.js~createNotification",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/notification.js",
    "importStyle": "{createNotification}",
    "description": "创建一个桌面通知",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "通知标题"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "通知选项"
      },
      {
        "nullable": null,
        "types": [
          "function(event: Event)"
        ],
        "spread": false,
        "optional": false,
        "name": "onClick",
        "description": "通知被点击时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Notification"
      ],
      "spread": false,
      "description": "桌面通知对象"
    }
  },
  {
    "__docId__": 1708,
    "kind": "function",
    "name": "showNotification",
    "memberof": "app/platform/common/notification.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/notification.js~showNotification",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/notification.js",
    "importStyle": "{showNotification}",
    "description": "显示一个桌面通知",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "通知标题"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "通知选项"
      },
      {
        "nullable": null,
        "types": [
          "function(event: Event)"
        ],
        "spread": false,
        "optional": false,
        "name": "onClick",
        "description": "通知被点击时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1709,
    "kind": "file",
    "name": "app/platform/common/open-file-button.js",
    "content": "/**\n * 选择文件按钮\n * @type {Element}\n * @private\n */\nconst fileButton = document.getElementById('fileOpenButton');\n\n/**\n * 显示打开文件对话框\n * @param {?string|{filters: string[]}} acceptExts 可用选择的文件扩展名\n * @param {function(result: any)} callback 文件选择完成后的回调函数，如果返回 `false`，表示选择文件失败，否则为所选择的文件对象数组\n * @return {void}\n */\nexport const showOpenDialog = (acceptExts = '', callback) => {\n    if (typeof acceptExts === 'function') {\n        callback = acceptExts;\n        acceptExts = '';\n    }\n\n    if (typeof acceptExts === 'object') {\n        const options = acceptExts;\n        const extentions = [];\n        if (options && options.filters) {\n            options.filters.forEach(filter => {\n                if (filter.extensions) {\n                    filter.extensions.forEach(ext => {\n                        if (ext && ext !== '*') {\n                            extentions.push(`.${ext}`);\n                        }\n                    });\n                }\n            });\n        }\n        acceptExts = extentions.join(',');\n    }\n\n    fileButton.accept = acceptExts;\n    fileButton.onchange = () => {\n        const {files} = fileButton;\n        if (files.length) {\n            callback(files);\n            setTimeout(() => {\n                fileButton.onchange = null;\n                fileButton.value = '';\n            }, 500);\n        } else {\n            callback(false);\n        }\n    };\n    fileButton.click();\n};\n\nexport default {\n    showOpenDialog\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/common/open-file-button.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1710,
    "kind": "variable",
    "name": "fileButton",
    "memberof": "app/platform/common/open-file-button.js",
    "static": true,
    "longname": "app/platform/common/open-file-button.js~fileButton",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/common/open-file-button.js",
    "importStyle": null,
    "description": "选择文件按钮",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1711,
    "kind": "function",
    "name": "showOpenDialog",
    "memberof": "app/platform/common/open-file-button.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/open-file-button.js~showOpenDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/open-file-button.js",
    "importStyle": "{showOpenDialog}",
    "description": "显示打开文件对话框",
    "lineNumber": 14,
    "params": [
      {
        "nullable": true,
        "types": [
          "string",
          "{filters: string[]}"
        ],
        "spread": false,
        "optional": false,
        "name": "acceptExts",
        "description": "可用选择的文件扩展名"
      },
      {
        "nullable": null,
        "types": [
          "function(result: any)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "文件选择完成后的回调函数，如果返回 `false`，表示选择文件失败，否则为所选择的文件对象数组"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1712,
    "kind": "file",
    "name": "app/platform/common/sound.js",
    "content": "import 'ion-sound';\nimport Config from '../../config';\n\n/**\n * 初始化 ion-sound 声音播放模块\n * @param {string} soundPath 声音媒体文件路径\n * @return {void}\n */\nconst init = soundPath => {\n    window.ion.sound({\n        sounds: [\n            {name: 'message'}\n        ],\n        multiplay: true,\n        volume: 1,\n        path: soundPath,\n        preload: true,\n    });\n    if (DEBUG) {\n        console.groupCollapsed('%cSOUND inited', 'display: inline-block; font-size: 10px; color: #689F38; background: #CCFF90; border: 1px solid #CCFF90; padding: 1px 5px; border-radius: 2px;');\n        console.log('ion', window.ion);\n        console.groupEnd();\n    }\n};\n\n/**\n * 播放声音\n * @param {string} sound 声音名称\n * @return {void}\n */\nexport const playSound = sound => {\n    window.ion.sound.play(typeof sound === 'string' ? sound : null);\n};\n\n// 初始化 ion-sound 声音播放模块\ninit(Config.media['sound.path']);\n\nexport default {\n    play: playSound\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/common/sound.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1713,
    "kind": "function",
    "name": "init",
    "memberof": "app/platform/common/sound.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/sound.js~init",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/common/sound.js",
    "importStyle": null,
    "description": "初始化 ion-sound 声音播放模块",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "soundPath",
        "description": "声音媒体文件路径"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1714,
    "kind": "function",
    "name": "playSound",
    "memberof": "app/platform/common/sound.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/common/sound.js~playSound",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/common/sound.js",
    "importStyle": "{playSound}",
    "description": "播放声音",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sound",
        "description": "声音名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1715,
    "kind": "file",
    "name": "app/platform/electron/app-remote.js",
    "content": "import electron, {\n    BrowserWindow, app as ElectronApp, Tray, Menu, nativeImage, globalShortcut, ipcMain, dialog,\n} from 'electron';\nimport Lang from '../../lang';\nimport EVENT from './remote-events';\nimport Events from './events';\n\nif (typeof DEBUG === 'undefined') {\n    global.DEBUG = process.env.NODE_ENV === 'debug' || process.env.NODE_ENV === 'development';\n} else {\n    global.DEBUG = DEBUG;\n}\n\n/**\n * 是否是 Mac OS 系统\n * @type {boolean}\n * @private\n */\nconst IS_MAC_OSX = process.platform === 'darwin';\n\n/**\n * 是否显示调试日志信息\n * @type {boolean}\n * @private\n */\nconst SHOW_LOG = DEBUG;\n\nif (DEBUG && process.type === 'renderer') {\n    console.error('AppRemote must run in main process.');\n}\n\n/**\n * 文本选择右键菜单\n * @type {Menu}\n * @private\n */\nconst SELECT_MENU = Menu.buildFromTemplate([\n    {role: 'copy', label: Lang.string('menu.copy')},\n    {type: 'separator'},\n    {role: 'selectall', label: Lang.string('menu.selectAll')}\n]);\n\n/**\n * 文本输入框右键菜单\n * @type {Menu}\n * @private\n */\nconst INPUT_MENU = Menu.buildFromTemplate([\n    {role: 'undo', label: Lang.string('menu.undo')},\n    {role: 'redo', label: Lang.string('menu.redo')},\n    {type: 'separator'},\n    {role: 'cut', label: Lang.string('menu.cut')},\n    {role: 'copy', label: Lang.string('menu.copy')},\n    {role: 'paste', label: Lang.string('menu.paste')},\n    {type: 'separator'},\n    {role: 'selectall', label: Lang.string('menu.selectAll')}\n]);\n\n/**\n * Electron 主进程运行时管理类\n *\n * @class AppRemote\n */\nclass AppRemote {\n    /**\n     * 创建一个主进程运行时管理类实例\n     * @memberof AppRemote\n     */\n    constructor() {\n        /**\n         * 保存打开的所有窗口实例\n         * @type {Object<string, BrowserWindow>}\n         */\n        this.windows = {};\n\n        /**\n         * 保存应用运行时配置\n         * @type {Object}\n         */\n        this.appConfig = {};\n\n        // 绑定渲染进程请求退出事件\n        ipcMain.on(EVENT.app_quit, e => {\n            this.quit();\n        });\n\n        // 绑定与渲染进程通信事件\n        ipcMain.on(EVENT.remote, (e, method, callBackEventName, ...args) => {\n            let result = this[method];\n            if (typeof result === 'function') {\n                result = result.call(this, ...args);\n            }\n            if (method === 'quit') return;\n            if (result instanceof Promise) {\n                result.then(x => {\n                    e.sender.send(callBackEventName, x);\n                    return x;\n                }).catch(error => {\n                    console.warn('Remote error', error);\n                });\n            } else {\n                e.sender.send(callBackEventName, result);\n            }\n            if (DEBUG) {\n                console.info('\\n>> Accept remote call', `${callBackEventName}.${method}(`, args, ')');\n            }\n        });\n\n        // 绑定渲染进程请求发送消息到其他窗口渲染进程事件\n        ipcMain.on(EVENT.remote_send, (e, windowName, eventName, ...args) => {\n            const browserWindow = this.windows[windowName];\n            if (browserWindow) {\n                browserWindow.webContents.send(eventName, ...args);\n            }\n        });\n\n        // 绑定渲染进程请求绑定主进程事件\n        ipcMain.on(EVENT.remote_on, (e, eventId, event) => {\n            Events.on(event, (...args) => {\n                try {\n                    e.sender.send(eventId, ...args);\n                } catch (e) {\n                    this.off(eventId);\n                    if (SHOW_LOG) {\n                        console.error(`\\n>> Remote event '${event}' has be force removed, because window is closed.`, e);\n                    }\n                }\n            });\n            // this._eventsMap[eventId] = {remote: true, id: remoteOnEventId};\n            if (SHOW_LOG) console.log('\\n>> REMOTE EVENT on', event, eventId);\n        });\n\n        // 绑定渲染进程请求取消绑定主进程事件\n        ipcMain.on(EVENT.remote_off, (e, eventId) => {\n            Events.off(eventId);\n            if (SHOW_LOG) console.log('\\n>> REMOTE EVENT off', eventId);\n        });\n\n        // 绑定渲染进程请求触发主进程事件\n        ipcMain.on(EVENT.remote_emit, (e, eventId, ...args) => {\n            Events.emit(eventId, ...args);\n            if (SHOW_LOG) console.log('\\n>> REMOTE EVENT emit', eventId);\n        });\n\n        // 绑定渲染进程通知准备就绪事件\n        ipcMain.on(EVENT.app_ready, (e, config) => {\n            Object.assign(this.appConfig, config);\n            const langInConfig = config.lang && config.lang[Lang.name];\n            if (langInConfig) {\n                Lang.update(langInConfig);\n            }\n            this.initTrayIcon();\n            if (SHOW_LOG) console.log('\\n>> App ready.', config);\n        });\n\n        // 设置 Electron 应用标题\n        ElectronApp.setName(Lang.string('app.title'));\n    }\n\n    // 初始化并设置 Electron 应用入口路径\n    init(entryPath) {\n        if (!entryPath) {\n            throw new Error('Argument entryPath must be set on init app-remote.');\n        }\n\n        this.entryPath = entryPath;\n        global.entryPath = entryPath;\n    }\n\n    /**\n     * 通知主进程准备就绪并打开主界面窗口\n     * @memberof AppRemote\n     * @return {void}\n     */\n    ready() {\n        this.openMainWindow();\n    }\n\n    /**\n     * 初始化通知栏图标功能\n     * @memberof AppRemote\n     * @return {void}\n     */\n    initTrayIcon() {\n        if (this.tray) {\n            this.tray.destroy();\n        }\n\n        // 创建一个通知栏图标\n        const tray = new Tray(`${this.entryPath}/${this.appConfig.media['image.path']}tray-icon-16.png`);\n\n        // 设置通知栏图标右键菜单功能\n        const trayContextMenu = Menu.buildFromTemplate([\n            {\n                label: Lang.string('common.open'),\n                click: () => {\n                    this.showAndFocusWindow();\n                }\n            }, {\n                label: Lang.string('common.exit'),\n                click: () => {\n                    this.mainWindow.webContents.send(EVENT.remote_app_quit, 'quit');\n                }\n            }\n        ]);\n\n        // 设置通知栏图标鼠标提示\n        tray.setToolTip(Lang.string('app.title'));\n\n        // 绑定通知栏图标点击事件\n        tray.on('click', () => {\n            this.showAndFocusWindow();\n        });\n\n        // 绑定通知栏图标右键点击事件\n        tray.on('right-click', () => {\n            tray.popUpContextMenu(trayContextMenu);\n        });\n\n        /**\n         * 通知栏图标管理器\n         * @type {Tray}\n         */\n        this.tray = tray;\n\n        /**\n         * 通知栏图标图片缓存\n         * @type {string[]}\n         * @private\n         */\n        this._trayIcons = [\n            nativeImage.createFromPath(`${this.entryPath}/${this.appConfig.media['image.path']}tray-icon-16.png`),\n            nativeImage.createFromPath(`${this.entryPath}/${this.appConfig.media['image.path']}tray-icon-transparent.png`)\n        ];\n\n        /**\n         * 通知栏图标闪烁计数器\n         * @type {number}\n         * @private\n         */\n        this._trayIconCounter = 0;\n    }\n\n    /**\n     * 创建应用主窗口\n     *\n     * @param {Object} options Electron 窗口初始化选项\n     * @memberof AppRemote\n     * @return {void}\n     */\n    createMainWindow(options) {\n        options = Object.assign({\n            width: 900,\n            height: 650,\n            minWidth: 400,\n            minHeight: 650,\n            url: 'index.html',\n            hashRoute: '/index',\n            name: 'main',\n            resizable: true,\n            debug: true\n        }, options);\n\n        if (DEBUG) {\n            const display = electron.screen.getPrimaryDisplay();\n            options.height = display.workAreaSize.height;\n            options.width = 800;\n            options.x = display.workArea.x;\n            options.y = display.workArea.y;\n        }\n\n        /**\n         * 主窗口实例\n         * @type {BrowserWindow}\n         */\n        this.mainWindow = this.createWindow(options);\n    }\n\n    /**\n     * 创建应用窗口，所有可用的窗口初始化选项参考 @see https://electronjs.org/docs/api/browser-window#new-browserwindowoptions\n     * @param {string} name 窗口名称，用户内部查询窗口实例\n     * @param {Object} options Electron 窗口初始化选项\n     * @memberof AppRemote\n     * @return {BrowserWindow} 创建的应用窗口实例\n     */\n    createWindow(name, options) {\n        if (typeof name === 'object') {\n            options = name;\n            // eslint-disable-next-line prefer-destructuring\n            name = options.name;\n        }\n\n        options = Object.assign({\n            name,\n            showAfterLoad: true,\n            hashRoute: `/${name}`,\n            url: 'index.html',\n            autoHideMenuBar: !IS_MAC_OSX,\n            backgroundColor: '#ffffff',\n            show: DEBUG,\n            webPreferences: {webSecurity: false}\n        }, options);\n\n        let browserWindow = this.windows[name];\n        if (browserWindow) {\n            throw new Error(`The window with name '${name}' has already be created.`);\n        }\n\n        const windowSetting = Object.assign({}, options);\n        ['url', 'showAfterLoad', 'debug', 'hashRoute', 'onLoad', 'beforeShow', 'afterShow', 'onClosed'].forEach(optionName => {\n            delete windowSetting[optionName];\n        });\n        browserWindow = new BrowserWindow(windowSetting);\n        // if(DEBUG) console.log('\\n>> Create window with settings', windowSetting);\n        this.windows[name] = browserWindow;\n        browserWindow.on('closed', () => {\n            delete this.windows[name];\n            if (options.onClosed) {\n                options.onClosed(name);\n            }\n        });\n\n        browserWindow.webContents.on('did-finish-load', () => {\n            if (options.showAfterLoad) {\n                if (options.beforeShow) {\n                    options.beforeShow(browserWindow, name);\n                }\n                browserWindow.show();\n                browserWindow.focus();\n                if (options.afterShow) {\n                    options.afterShow(browserWindow, name);\n                }\n            }\n            if (options.onLoad) {\n                options.onLoad(browserWindow);\n            }\n        });\n\n        // 阻止应用窗口导航到其他地址\n        browserWindow.webContents.on('will-navigate', event => {\n            event.preventDefault();\n        });\n\n        let {url} = options;\n        if (url) {\n            if (!url.startsWith('file://') && !url.startsWith('http://') && !url.startsWith('https://')) {\n                url = `file://${this.entryPath}/${options.url}`;\n            }\n            if (DEBUG) {\n                url += '?react_perf';\n            }\n            if (options.hashRoute) {\n                url += `#${options.hashRoute}`;\n            }\n            browserWindow.loadURL(url);\n        }\n\n        if (options.debug && DEBUG) {\n            browserWindow.openDevTools();\n            browserWindow.webContents.on('context-menu', (e, props) => {\n                const {x, y} = props;\n                Menu.buildFromTemplate([{\n                    label: Lang.string('debug.inspectElement'),\n                    click() {\n                        browserWindow.inspectElement(x, y);\n                    }\n                }]).popup(browserWindow);\n            });\n\n            browserWindow.webContents.on('crashed', () => {\n                const messageBoxOptions = {\n                    type: 'info',\n                    title: 'Renderer process crashed.',\n                    message: 'The renderer process has been crashed, you can reload or close it.',\n                    buttons: ['Reload', 'Close']\n                };\n                dialog.showMessageBox(messageBoxOptions, (index) => {\n                    if (index === 0) {\n                        browserWindow.reload();\n                    } else {\n                        browserWindow.close();\n                    }\n                });\n            });\n        }\n\n        return browserWindow;\n    }\n\n    /**\n     * 打开主窗口\n     *\n     * @memberof AppRemote\n     * @return {void}\n     */\n    openMainWindow() {\n        const {mainWindow} = this;\n        if (!mainWindow) {\n            this.createMainWindow();\n        } else if (!mainWindow.isVisible()) {\n            mainWindow.show();\n            mainWindow.focus();\n        }\n    }\n\n    /**\n     * 获取主窗口实例\n     * @memberof AppRemote\n     * @type {BrowserWindow}\n     */\n    get mainWindow() {\n        return this.windows.main;\n    }\n\n    /**\n     * 设置主窗口实例\n     * @param {BrowserWindow} mainWindow 主窗口实例\n     * @memberof AppRemote\n     */\n    set mainWindow(mainWindow) {\n        if (!mainWindow) {\n            delete this.windows.main;\n        } else {\n            this.windows.main = mainWindow;\n            mainWindow.on('close', e => {\n                if (this.markClose) return;\n                const now = new Date().getTime();\n                if (this.lastRequestCloseTime && (now - this.lastRequestCloseTime) < 1000) {\n                    electron.dialog.showMessageBox(mainWindow, {\n                        buttons: [Lang.string('common.exitIM'), Lang.string('common.cancel')],\n                        defaultId: 0,\n                        type: 'question',\n                        message: Lang.string('common.comfirmQuiteIM')\n                    }, response => {\n                        if (response === 0) {\n                            setTimeout(() => {\n                                this.quit();\n                            }, 0);\n                        }\n                    });\n                } else {\n                    this.lastRequestCloseTime = now;\n                    mainWindow.webContents.send(EVENT.remote_app_quit);\n                }\n                e.preventDefault();\n                return false;\n            });\n\n            // 绑定右键菜单事件\n            mainWindow.webContents.on('context-menu', (e, props) => {\n                const {selectionText, isEditable} = props;\n                if (isEditable) {\n                    INPUT_MENU.popup(mainWindow);\n                }\n            });\n        }\n    }\n\n    /**\n     * 关闭主窗口\n     * @return {void}\n     * @memberof AppRemote\n     */\n    closeMainWindow() {\n        this.markClose = true;\n        const {mainWindow} = this;\n        if (mainWindow) {\n            mainWindow.close();\n        }\n    }\n\n    /**\n     * 通过 IPC 向所有应用窗口渲染渲染进程发送消息\n     *\n     * @param {string} channel 事件频道\n     * @param {...any} args 事件参数\n     * @return {void}\n     * @memberof AppRemote\n     */\n    sendToWindows(channel, ...args) {\n        Object.keys(this.windows).forEach(name => {\n            this.sendToWindow(name, channel, ...args);\n        });\n    }\n\n    /**\n     * 通过 IPC 向指定名称的应用窗口渲染渲染进程发送消息\n     *\n     * @param {string} name 应用窗口名称\n     * @param {string} channel 事件频道\n     * @param {...any} args 事件参数\n     * @return {void}\n     * @memberof AppRemote\n     */\n    sendToWindow(name, channel, ...args) {\n        const browserWindow = this.windows[name];\n        if (browserWindow) {\n            browserWindow.webContents.send(channel, ...args);\n        }\n    }\n\n    /**\n     * 设置通知栏图标工具提示（鼠标悬停显示）消息\n     *\n     * @param {string|boolean} tooltip 要设置的消息文本，如果设置为 `false`，则显示应用默认名称\n     * @memberof AppRemote\n     * @return {void}\n     */\n    trayTooltip(tooltip) {\n        this.tray.setToolTip(tooltip || Lang.string('app.title'));\n    }\n\n    /**\n     * 闪烁通知栏图标\n     *\n     * @param {boolean} [flash=true] 如果设置为 `true` 则闪烁图标；如果设置为 `false` 则取消闪烁图标\n     * @memberof AppRemote\n     * @return {void}\n     */\n    flashTrayIcon(flash = true) {\n        if (flash) {\n            if (!this._flashTrayIconTask) {\n                this._flashTrayIconTask = setInterval(() => {\n                    this.tray.setImage(this._trayIcons[(this._trayIconCounter++) % 2]);\n                }, 400);\n            }\n        } else {\n            if (this._flashTrayIconTask) {\n                clearInterval(this._flashTrayIconTask);\n                this._flashTrayIconTask = null;\n            }\n            this.tray.setImage(this._trayIcons[0]);\n        }\n    }\n\n    /**\n     * 显示并激活指定名称的窗口，如果不指定名称，则激活并显示主窗口\n     *\n     * @param {string} [windowName='main'] 窗口名称\n     * @memberof AppRemote\n     * @return {void}\n     */\n    showAndFocusWindow(windowName = 'main') {\n        const browserWindow = this.windows[windowName];\n        if (browserWindow) {\n            if (browserWindow.isMinimized()) {\n                browserWindow.restore();\n            } else {\n                browserWindow.show();\n            }\n            browserWindow.focus();\n        }\n    }\n\n    /**\n     * 立即关闭并退出应用程序\n     *\n     * @memberof AppRemote\n     * @return {void}\n     */\n    quit() {\n        this.closeMainWindow();\n        this.tray.destroy();\n        globalShortcut.unregisterAll();\n        ElectronApp.quit();\n    }\n\n    /**\n     * 设置 Mac Dock 栏应用图标上的原点提示文本\n     *\n     * @param {string} label 提示文本\n     * @memberof AppRemote\n     * @return {void}\n     */\n    dockBadgeLabel(label) {\n        if (IS_MAC_OSX) {\n            ElectronApp.dock.setBadge(label);\n        }\n    }\n\n    /**\n     * 使 Mac Dock 栏应用图标弹跳并引起用户注意\n     *\n     * @param {string} [type='informational'] 弹跳类型\n     * @memberof AppRemote\n     * @return {void}\n     */\n    dockBounce(type = 'informational') {\n        if (IS_MAC_OSX) {\n            ElectronApp.dock.bounce(type);\n        }\n    }\n}\n\n/**\n * Electron 主进程运行时管理类全局唯一实例\n * @type {AppRemote}\n */\nconst app = new AppRemote();\n\nif (DEBUG) console.info('App created.');\n\nexport default app;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/app-remote.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1716,
    "kind": "variable",
    "name": "IS_MAC_OSX",
    "memberof": "app/platform/electron/app-remote.js",
    "static": true,
    "longname": "app/platform/electron/app-remote.js~IS_MAC_OSX",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/app-remote.js",
    "importStyle": null,
    "description": "是否是 Mac OS 系统",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1717,
    "kind": "variable",
    "name": "SHOW_LOG",
    "memberof": "app/platform/electron/app-remote.js",
    "static": true,
    "longname": "app/platform/electron/app-remote.js~SHOW_LOG",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/app-remote.js",
    "importStyle": null,
    "description": "是否显示调试日志信息",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1718,
    "kind": "variable",
    "name": "SELECT_MENU",
    "memberof": "app/platform/electron/app-remote.js",
    "static": true,
    "longname": "app/platform/electron/app-remote.js~SELECT_MENU",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/app-remote.js",
    "importStyle": null,
    "description": "文本选择右键菜单",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1719,
    "kind": "variable",
    "name": "INPUT_MENU",
    "memberof": "app/platform/electron/app-remote.js",
    "static": true,
    "longname": "app/platform/electron/app-remote.js~INPUT_MENU",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/app-remote.js",
    "importStyle": null,
    "description": "文本输入框右键菜单",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1720,
    "kind": "class",
    "name": "AppRemote",
    "memberof": "app/platform/electron/app-remote.js",
    "static": true,
    "longname": "app/platform/electron/app-remote.js~AppRemote",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/app-remote.js",
    "importStyle": null,
    "description": "Electron 主进程运行时管理类",
    "lineNumber": 64,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AppRemote"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 1721,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#constructor",
    "access": "public",
    "description": "创建一个主进程运行时管理类实例",
    "lineNumber": 69
  },
  {
    "__docId__": 1722,
    "kind": "member",
    "name": "windows",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#windows",
    "access": "public",
    "description": "保存打开的所有窗口实例",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, BrowserWindow>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1723,
    "kind": "member",
    "name": "appConfig",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#appConfig",
    "access": "public",
    "description": "保存应用运行时配置",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1724,
    "kind": "method",
    "name": "init",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#init",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [
      {
        "name": "entryPath",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1725,
    "kind": "member",
    "name": "entryPath",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#entryPath",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1726,
    "kind": "method",
    "name": "ready",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#ready",
    "access": "public",
    "description": "通知主进程准备就绪并打开主界面窗口",
    "lineNumber": 175,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1727,
    "kind": "method",
    "name": "initTrayIcon",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#initTrayIcon",
    "access": "public",
    "description": "初始化通知栏图标功能",
    "lineNumber": 184,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1728,
    "kind": "member",
    "name": "tray",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#tray",
    "access": "public",
    "description": "通知栏图标管理器",
    "lineNumber": 224,
    "type": {
      "nullable": null,
      "types": [
        "Tray"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1729,
    "kind": "member",
    "name": "_trayIcons",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#_trayIcons",
    "access": "private",
    "description": "通知栏图标图片缓存",
    "lineNumber": 231,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1730,
    "kind": "member",
    "name": "_trayIconCounter",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#_trayIconCounter",
    "access": "private",
    "description": "通知栏图标闪烁计数器",
    "lineNumber": 241,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1731,
    "kind": "method",
    "name": "createMainWindow",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#createMainWindow",
    "access": "public",
    "description": "创建应用主窗口",
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Electron 窗口初始化选项"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1733,
    "kind": "method",
    "name": "createWindow",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#createWindow",
    "access": "public",
    "description": "创建应用窗口，所有可用的窗口初始化选项参考 @see https://electronjs.org/docs/api/browser-window#new-browserwindowoptions",
    "lineNumber": 286,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "窗口名称，用户内部查询窗口实例"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Electron 窗口初始化选项"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BrowserWindow"
      ],
      "spread": false,
      "description": "创建的应用窗口实例"
    }
  },
  {
    "__docId__": 1734,
    "kind": "method",
    "name": "openMainWindow",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#openMainWindow",
    "access": "public",
    "description": "打开主窗口",
    "lineNumber": 396,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1735,
    "kind": "get",
    "name": "mainWindow",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#mainWindow",
    "access": "public",
    "description": "获取主窗口实例",
    "lineNumber": 411,
    "type": {
      "nullable": null,
      "types": [
        "BrowserWindow"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1736,
    "kind": "set",
    "name": "mainWindow",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#mainWindow",
    "access": "public",
    "description": "设置主窗口实例",
    "lineNumber": 420,
    "params": [
      {
        "nullable": null,
        "types": [
          "BrowserWindow"
        ],
        "spread": false,
        "optional": false,
        "name": "mainWindow",
        "description": "主窗口实例"
      }
    ]
  },
  {
    "__docId__": 1737,
    "kind": "member",
    "name": "lastRequestCloseTime",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#lastRequestCloseTime",
    "access": "public",
    "description": null,
    "lineNumber": 442,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1738,
    "kind": "method",
    "name": "closeMainWindow",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#closeMainWindow",
    "access": "public",
    "description": "关闭主窗口",
    "lineNumber": 464,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1739,
    "kind": "member",
    "name": "markClose",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#markClose",
    "access": "public",
    "description": null,
    "lineNumber": 465,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1740,
    "kind": "method",
    "name": "sendToWindows",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#sendToWindows",
    "access": "public",
    "description": "通过 IPC 向所有应用窗口渲染渲染进程发送消息",
    "lineNumber": 480,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "channel",
        "description": "事件频道"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "事件参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1741,
    "kind": "method",
    "name": "sendToWindow",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#sendToWindow",
    "access": "public",
    "description": "通过 IPC 向指定名称的应用窗口渲染渲染进程发送消息",
    "lineNumber": 495,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "应用窗口名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "channel",
        "description": "事件频道"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "事件参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1742,
    "kind": "method",
    "name": "trayTooltip",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#trayTooltip",
    "access": "public",
    "description": "设置通知栏图标工具提示（鼠标悬停显示）消息",
    "lineNumber": 509,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "tooltip",
        "description": "要设置的消息文本，如果设置为 `false`，则显示应用默认名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1743,
    "kind": "method",
    "name": "flashTrayIcon",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#flashTrayIcon",
    "access": "public",
    "description": "闪烁通知栏图标",
    "lineNumber": 520,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "flash",
        "description": "如果设置为 `true` 则闪烁图标；如果设置为 `false` 则取消闪烁图标"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1744,
    "kind": "member",
    "name": "_flashTrayIconTask",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#_flashTrayIconTask",
    "access": "private",
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1746,
    "kind": "method",
    "name": "showAndFocusWindow",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#showAndFocusWindow",
    "access": "public",
    "description": "显示并激活指定名称的窗口，如果不指定名称，则激活并显示主窗口",
    "lineNumber": 543,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'main'",
        "defaultRaw": "'main'",
        "name": "windowName",
        "description": "窗口名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1747,
    "kind": "method",
    "name": "quit",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#quit",
    "access": "public",
    "description": "立即关闭并退出应用程序",
    "lineNumber": 561,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1748,
    "kind": "method",
    "name": "dockBadgeLabel",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#dockBadgeLabel",
    "access": "public",
    "description": "设置 Mac Dock 栏应用图标上的原点提示文本",
    "lineNumber": 575,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "提示文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1749,
    "kind": "method",
    "name": "dockBounce",
    "memberof": "app/platform/electron/app-remote.js~AppRemote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/app-remote.js~AppRemote#dockBounce",
    "access": "public",
    "description": "使 Mac Dock 栏应用图标弹跳并引起用户注意",
    "lineNumber": 588,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'informational'",
        "defaultRaw": "'informational'",
        "name": "type",
        "description": "弹跳类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1750,
    "kind": "variable",
    "name": "app",
    "memberof": "app/platform/electron/app-remote.js",
    "static": true,
    "longname": "app/platform/electron/app-remote.js~app",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/app-remote.js",
    "importStyle": "app",
    "description": null,
    "lineNumber": 603,
    "undocument": true,
    "type": {
      "types": [
        "app/platform/electron/app-remote.js~AppRemote"
      ]
    }
  },
  {
    "__docId__": 1751,
    "kind": "file",
    "name": "app/platform/electron/clipboard.js",
    "content": "import {clipboard, nativeImage} from 'electron';\n\n/**\n * 将指定的图片复制到剪切板\n * @param {string} url 图片地址\n * @param {string} [dataType='path'] 数据类型\n * @return {void}\n */\nexport const writeImageFromUrl = (url, dataType = 'path') => {\n    if (url.startsWith('file://')) {\n        url = url.substr(7);\n    }\n    const img = dataType === 'base64' ? nativeImage.createFromDataURL(url) : nativeImage.createFromPath(url);\n    clipboard.writeImage(img);\n};\n\n/**\n * 获取 NativeImage 图片信息\n * @param {NativeImage} nativeImg NativeImage 图片对象\n * @return {{name: string, type: string, base64: string, width: number, height: number, size: number}} 图片信息对象\n * @private\n */\nconst getImageData = nativeImg => {\n    if (nativeImg && !nativeImg.isEmpty()) {\n        const size = nativeImg.getSize();\n        const base64 = nativeImg.toDataURL();\n        const base64Length = base64.length;\n        return {\n            name: `clipboard-image-${size.width}x${size.height}.png`,\n            type: 'base64',\n            base64,\n            width: size.width,\n            height: size.height,\n            size: Math.ceil(((4 * (base64Length / 3))) + (base64Length % 3 !== 0 ? 4 : 0))\n        };\n    }\n    return null;\n};\n\n/**\n * 上次剪切板中的图片信息\n * @type {{name: string, type: string, base64: string, width: number, height: number, size: number}}\n * @private\n */\nlet lastNewImage = getImageData(clipboard.readImage());\n\n/**\n * 获取剪切板中的新的图片信息\n * @return {{name: string, type: string, base64: string, width: number, height: number, size: number}} 图片信息对象\n */\nexport const getNewImage = () => {\n    const currentImage = getImageData(clipboard.readImage());\n    if (!lastNewImage || !currentImage || currentImage.base64 !== lastNewImage.base64) {\n        lastNewImage = currentImage;\n        return currentImage;\n    }\n    return null;\n};\n\n/**\n * 获取剪切板中的文本内容\n * @param {?string} type 内容类型\n * @return {string} 剪贴板中的纯文本内容。\n */\nexport const readText = clipboard.readText;\n\n/**\n * 将文本内容写入剪切板中\n * @param {string} text 文本内容\n * @param {?string} type 内容类型\n * @return {void}\n */\nexport const writeText = clipboard.writeText;\n\n/**\n * 获取剪切板中的图片内容\n * @param {?string} type 内容类型\n * @return {NativeImage} 返回剪贴板中的图像内容\n */\nexport const readImage = clipboard.readImage;\n\n/**\n * 将图片内容写入剪切板中\n * @param {NativeImage} image 图片内容\n * @param {?string} type 内容类型\n * @return {void}\n */\nexport const writeImage = clipboard.writeImage;\n\n/**\n * 获取剪切板中的HTML内容\n * @param {?string} type 内容类型\n * @return {string} 返回剪贴板中的HTML内容\n */\nexport const readHTML = clipboard.readHTML;\n\n/**\n * 将HTML内容写入剪切板中\n * @param {string} markup HTML内容\n * @param {?string} type 内容类型\n * @return {void}\n */\nexport const writeHTML = clipboard.writeHTML;\n\n/**\n * 将内容写入剪切板中\n * @param {{text: string, html: string, image: NativeImage, rtf: string, bookmark: string}} data 内容\n * @param {?string} type 内容类型\n * @return {void}\n */\nexport const write = clipboard.write;\n\nexport default {\n    readText,\n    writeText,\n    readImage,\n    writeImage,\n    readHTML,\n    writeHTML,\n    write,\n    writeImageFromUrl,\n    getNewImage,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/clipboard.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1752,
    "kind": "function",
    "name": "writeImageFromUrl",
    "memberof": "app/platform/electron/clipboard.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/clipboard.js~writeImageFromUrl",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": "{writeImageFromUrl}",
    "description": "将指定的图片复制到剪切板",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "图片地址"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'path'",
        "defaultRaw": "'path'",
        "name": "dataType",
        "description": "数据类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1753,
    "kind": "function",
    "name": "getImageData",
    "memberof": "app/platform/electron/clipboard.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/clipboard.js~getImageData",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": null,
    "description": "获取 NativeImage 图片信息",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "NativeImage"
        ],
        "spread": false,
        "optional": false,
        "name": "nativeImg",
        "description": "NativeImage 图片对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{name: string, type: string, base64: string, width: number, height: number, size: number}"
      ],
      "spread": false,
      "description": "图片信息对象"
    }
  },
  {
    "__docId__": 1754,
    "kind": "variable",
    "name": "lastNewImage",
    "memberof": "app/platform/electron/clipboard.js",
    "static": true,
    "longname": "app/platform/electron/clipboard.js~lastNewImage",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": null,
    "description": "上次剪切板中的图片信息",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "{name: string, type: string, base64: string, width: number, height: number, size: number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1755,
    "kind": "function",
    "name": "getNewImage",
    "memberof": "app/platform/electron/clipboard.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/clipboard.js~getNewImage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": "{getNewImage}",
    "description": "获取剪切板中的新的图片信息",
    "lineNumber": 51,
    "return": {
      "nullable": null,
      "types": [
        "{name: string, type: string, base64: string, width: number, height: number, size: number}"
      ],
      "spread": false,
      "description": "图片信息对象"
    },
    "params": []
  },
  {
    "__docId__": 1756,
    "kind": "variable",
    "name": "readText",
    "memberof": "app/platform/electron/clipboard.js",
    "static": true,
    "longname": "app/platform/electron/clipboard.js~readText",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": "{readText}",
    "description": "获取剪切板中的文本内容",
    "lineNumber": 65,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "内容类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "剪贴板中的纯文本内容。"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1757,
    "kind": "variable",
    "name": "writeText",
    "memberof": "app/platform/electron/clipboard.js",
    "static": true,
    "longname": "app/platform/electron/clipboard.js~writeText",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": "{writeText}",
    "description": "将文本内容写入剪切板中",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "文本内容"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "内容类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1758,
    "kind": "variable",
    "name": "readImage",
    "memberof": "app/platform/electron/clipboard.js",
    "static": true,
    "longname": "app/platform/electron/clipboard.js~readImage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": "{readImage}",
    "description": "获取剪切板中的图片内容",
    "lineNumber": 80,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "内容类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NativeImage"
      ],
      "spread": false,
      "description": "返回剪贴板中的图像内容"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1759,
    "kind": "variable",
    "name": "writeImage",
    "memberof": "app/platform/electron/clipboard.js",
    "static": true,
    "longname": "app/platform/electron/clipboard.js~writeImage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": "{writeImage}",
    "description": "将图片内容写入剪切板中",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "NativeImage"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "图片内容"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "内容类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1760,
    "kind": "variable",
    "name": "readHTML",
    "memberof": "app/platform/electron/clipboard.js",
    "static": true,
    "longname": "app/platform/electron/clipboard.js~readHTML",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": "{readHTML}",
    "description": "获取剪切板中的HTML内容",
    "lineNumber": 95,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "内容类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "返回剪贴板中的HTML内容"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1761,
    "kind": "variable",
    "name": "writeHTML",
    "memberof": "app/platform/electron/clipboard.js",
    "static": true,
    "longname": "app/platform/electron/clipboard.js~writeHTML",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": "{writeHTML}",
    "description": "将HTML内容写入剪切板中",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "markup",
        "description": "HTML内容"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "内容类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1762,
    "kind": "variable",
    "name": "write",
    "memberof": "app/platform/electron/clipboard.js",
    "static": true,
    "longname": "app/platform/electron/clipboard.js~write",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/clipboard.js",
    "importStyle": "{write}",
    "description": "将内容写入剪切板中",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "{text: string, html: string, image: NativeImage, rtf: string, bookmark: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "内容"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "内容类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1763,
    "kind": "file",
    "name": "app/platform/electron/contextmenu.js",
    "content": "import {remote} from 'electron';\nimport ui from './ui';\nimport Lang from '../../lang';\n\n/**\n * Electron 上下文菜单类\n * @private\n */\nconst {Menu} = remote;\n\n/**\n * 创建上下文菜单实例\n * @param {Object[]} menu 要创建的上下文菜单项清单\n * @return {Menu} 上下文菜单类\n */\nexport const createContextMenu = menu => {\n    if (Array.isArray(menu) && !menu.popup) {\n        menu = Menu.buildFromTemplate(menu);\n    }\n    return menu;\n};\n\n/**\n * 显示右键上下文菜单\n * @param {Menu|Object[]} menu 要创建的上下文菜单项清单或者上下文菜单实例\n * @param {number} x 菜单显示在 X 轴上的位置\n * @param {number} y 菜单显示在 Y 轴上的位置\n * @param {BrowserWindow} browserWindow 应用窗口实例\n * @return {void}\n */\nexport const popupContextMenu = (menu, x, y, browserWindow) => {\n    if (typeof x === 'object') {\n        y = x.clientY;\n        x = x.clientX;\n    }\n    menu = createContextMenu(menu);\n    menu.popup(browserWindow || ui.browserWindow, x, y);\n};\n\n/**\n * 文本选择右键菜单\n * @type {Menu}\n * @private\n */\nconst SELECT_MENU = [\n    {role: 'copy', label: Lang.string('menu.copy')},\n    {type: 'separator'},\n    {role: 'selectall', label: Lang.string('menu.selectAll')}\n];\n\n/**\n * 文本输入框右键菜单\n * @type {Menu}\n * @private\n */\nconst INPUT_MENU = [\n    {role: 'undo', label: Lang.string('menu.undo')},\n    {role: 'redo', label: Lang.string('menu.redo')},\n    {type: 'separator'},\n    {role: 'cut', label: Lang.string('menu.cut')},\n    {role: 'copy', label: Lang.string('menu.copy')},\n    {role: 'paste', label: Lang.string('menu.paste')},\n    {type: 'separator'},\n    {role: 'selectall', label: Lang.string('menu.selectAll')}\n];\n\n/**\n * 显示文本输入框右键上下文菜单\n * @param {BrowserWindow} windowObj 应用窗口实例\n * @param {number} x 菜单显示在 X 轴上的位置\n * @param {number} y 菜单显示在 Y 轴上的位置\n * @return {void}\n */\nexport const showInputContextMenu = (windowObj, x, y) => {\n    popupContextMenu(INPUT_MENU, x, y, windowObj);\n};\n\n/**\n * 显示选中的文本右键上下文菜单\n * @param {BrowserWindow} windowObj 应用窗口实例\n * @param {number} x 菜单显示在 X 轴上的位置\n * @param {number} y 菜单显示在 Y 轴上的位置\n * @return {void}\n */\nexport const showSelectionContextMenu = (windowObj, x, y) => {\n    popupContextMenu(SELECT_MENU, x, y, windowObj);\n};\n\nexport default {\n    createContextMenu,\n    popupContextMenu,\n    showSelectionContextMenu,\n    showInputContextMenu\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/contextmenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1764,
    "kind": "variable",
    "name": "Menu",
    "memberof": "app/platform/electron/contextmenu.js",
    "static": true,
    "longname": "app/platform/electron/contextmenu.js~Menu",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/contextmenu.js",
    "importStyle": null,
    "description": "Electron 上下文菜单类",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1765,
    "kind": "function",
    "name": "createContextMenu",
    "memberof": "app/platform/electron/contextmenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/contextmenu.js~createContextMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/contextmenu.js",
    "importStyle": "{createContextMenu}",
    "description": "创建上下文菜单实例",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "menu",
        "description": "要创建的上下文菜单项清单"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": "上下文菜单类"
    }
  },
  {
    "__docId__": 1766,
    "kind": "function",
    "name": "popupContextMenu",
    "memberof": "app/platform/electron/contextmenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/contextmenu.js~popupContextMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/contextmenu.js",
    "importStyle": "{popupContextMenu}",
    "description": "显示右键上下文菜单",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Menu",
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "menu",
        "description": "要创建的上下文菜单项清单或者上下文菜单实例"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "菜单显示在 X 轴上的位置"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "菜单显示在 Y 轴上的位置"
      },
      {
        "nullable": null,
        "types": [
          "BrowserWindow"
        ],
        "spread": false,
        "optional": false,
        "name": "browserWindow",
        "description": "应用窗口实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1767,
    "kind": "variable",
    "name": "SELECT_MENU",
    "memberof": "app/platform/electron/contextmenu.js",
    "static": true,
    "longname": "app/platform/electron/contextmenu.js~SELECT_MENU",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/contextmenu.js",
    "importStyle": null,
    "description": "文本选择右键菜单",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1768,
    "kind": "variable",
    "name": "INPUT_MENU",
    "memberof": "app/platform/electron/contextmenu.js",
    "static": true,
    "longname": "app/platform/electron/contextmenu.js~INPUT_MENU",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/contextmenu.js",
    "importStyle": null,
    "description": "文本输入框右键菜单",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1769,
    "kind": "function",
    "name": "showInputContextMenu",
    "memberof": "app/platform/electron/contextmenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/contextmenu.js~showInputContextMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/contextmenu.js",
    "importStyle": "{showInputContextMenu}",
    "description": "显示文本输入框右键上下文菜单",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "BrowserWindow"
        ],
        "spread": false,
        "optional": false,
        "name": "windowObj",
        "description": "应用窗口实例"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "菜单显示在 X 轴上的位置"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "菜单显示在 Y 轴上的位置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1770,
    "kind": "function",
    "name": "showSelectionContextMenu",
    "memberof": "app/platform/electron/contextmenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/contextmenu.js~showSelectionContextMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/contextmenu.js",
    "importStyle": "{showSelectionContextMenu}",
    "description": "显示选中的文本右键上下文菜单",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "BrowserWindow"
        ],
        "spread": false,
        "optional": false,
        "name": "windowObj",
        "description": "应用窗口实例"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "菜单显示在 X 轴上的位置"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "菜单显示在 Y 轴上的位置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1771,
    "kind": "file",
    "name": "app/platform/electron/crypto.js",
    "content": "import crypto from 'crypto';\n\n/**\n * 使用 AES 加密文本\n * @param  {string} data 要加密的文本字符串\n * @param  {string} token AES key\n * @param  {string} cipherIV AES token\n * @return {Buffer} 返回加密后的 Buffer 数据\n */\nconst encrypt = (data, token, cipherIV) => {\n    const cipher = crypto.createCipheriv('aes-256-cbc', token, cipherIV);\n    let crypted = cipher.update(data, 'utf8', 'binary');\n    crypted += cipher.final('binary');\n    crypted = new Buffer(crypted, 'binary');\n    return crypted;\n};\n\n/**\n * 使用 AES 解密文本\n * @param  {Buffer} data 要解密的 Buffer 数据\n * @param  {string} token AES key\n * @param  {string} cipherIV AES token\n * @return {string} 返回解密后的文本\n */\nconst decrypt = (data, token, cipherIV) => {\n    const decipher = crypto.createDecipheriv('aes-256-cbc', token, cipherIV);\n    let decoded = decipher.update(data, 'binary', 'utf8');\n    decoded += decipher.final('utf8');\n    return decoded;\n};\n\nexport default {\n    encrypt,\n    decrypt\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/crypto.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1772,
    "kind": "function",
    "name": "encrypt",
    "memberof": "app/platform/electron/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/crypto.js~encrypt",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/crypto.js",
    "importStyle": null,
    "description": "使用 AES 加密文本",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "要加密的文本字符串"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "AES key"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cipherIV",
        "description": "AES token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "返回加密后的 Buffer 数据"
    }
  },
  {
    "__docId__": 1773,
    "kind": "function",
    "name": "decrypt",
    "memberof": "app/platform/electron/crypto.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/crypto.js~decrypt",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/crypto.js",
    "importStyle": null,
    "description": "使用 AES 解密文本",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "要解密的 Buffer 数据"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "AES key"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cipherIV",
        "description": "AES token"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "返回解密后的文本"
    }
  },
  {
    "__docId__": 1774,
    "kind": "file",
    "name": "app/platform/electron/dialog.js",
    "content": "import {remote as Remote, nativeImage} from 'electron';\nimport Path from 'path';\nimport fs from 'fs-extra';\nimport env from './env';\nimport Lang from '../../lang';\nimport ui from './ui';\nimport {showOpenDialog} from '../common/open-file-button';\nimport {downloadFileWithRequest} from './net';\n\n/**\n * 上次在文件保存对话框中选择的文件保存位置\n * @type {string}\n * @private\n */\nlet lastFileSavePath = '';\n\n/**\n * 显示文件保存对话框\n * @param {{sourceFilePath: string}} options 选项\n * @param {function(result: boolean)} callback 保存完成后的回调函数，其中参数 `result` 为是否成功保存文件\n * @return {void}\n */\nexport const showSaveDialog = (options, callback) => {\n    if (options.sourceFilePath) {\n        const {sourceFilePath} = options;\n        delete options.sourceFilePath;\n        return showSaveDialog(options, filename => {\n            if (filename) {\n                if (sourceFilePath === filename) {\n                    callback(filename);\n                } else {\n                    fs.copy(sourceFilePath, filename)\n                        .then(() => {\n                            if (callback) {\n                                callback(filename);\n                            }\n                        }).catch(callback);\n                }\n            } else if (callback) {\n                callback();\n            }\n        });\n    }\n\n    let filename = options.filename || '';\n    delete options.filename;\n    if (filename) {\n        filename = Path.basename(filename);\n    }\n\n    options = Object.assign({\n        title: Lang.string('dialog.fileSaveTo'),\n        defaultPath: Path.join(lastFileSavePath || env.desktopPath, filename)\n    }, options);\n    Remote.dialog.showSaveDialog(ui.browserWindow, options, filename => {\n        if (filename) {\n            lastFileSavePath = Path.dirname(filename);\n        }\n        if (callback) {\n            callback(filename);\n        }\n    });\n};\n\n/**\n * 显示 Electron 内置的文件保存对话框\n * @param {{title: string, defaultPath: string, properties: string[]}} options 选项\n * @param {function(result: boolean)} callback 保存完成后的回调函数，其中参数 `result` 为是否成功保存文件\n * @return {void}\n */\nexport const showRemoteOpenDialog = (options, callback) => {\n    options = Object.assign({\n        title: Lang.string('dialog.openFile'),\n        defaultPath: env.desktopPath,\n        properties: ['openFile']\n    }, options);\n    Remote.dialog.showOpenDialog(ui.browserWindow, options, callback);\n};\n\n/**\n * 根据图片地址和存储类型保存图片\n * @param {string} url 图片地址\n * @param {string} dataType 图片类型\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const saveAsImageFromUrl = (url, dataType) => new Promise((resolve, reject) => {\n    const isBase64Image = url.startsWith('data:image/') || dataType === 'base64';\n    const isBlob = url.startsWith('blob:');\n    if (isBlob) {\n        throw new Error('Cannot support save blob image in electron.');\n    } else if (!isBase64Image && url.startsWith('file://')) {\n        url = url.substr(7);\n    }\n    showSaveDialog({\n        filename: (isBase64Image || isBlob) ? 'xuanxuan-image.png' : Path.basename(url),\n        sourceFilePath: (isBase64Image || isBlob) ? null : url\n    }, filename => {\n        if (filename) {\n            if (isBase64Image) {\n                const image = nativeImage.createFromDataURL(url);\n                fs.outputFileSync(filename, image.toPNG());\n            } else if (isBlob) {\n                return downloadFileWithRequest(url, filename).then(() => {\n                    resolve(filename);\n                }).catch(reject);\n            }\n            resolve(filename);\n        } else {\n            reject();\n        }\n    });\n});\n\nexport default {\n    showRemoteOpenDialog,\n    showSaveDialog,\n    showOpenDialog,\n    saveAsImageFromUrl\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1775,
    "kind": "variable",
    "name": "lastFileSavePath",
    "memberof": "app/platform/electron/dialog.js",
    "static": true,
    "longname": "app/platform/electron/dialog.js~lastFileSavePath",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/dialog.js",
    "importStyle": null,
    "description": "上次在文件保存对话框中选择的文件保存位置",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1776,
    "kind": "function",
    "name": "showSaveDialog",
    "memberof": "app/platform/electron/dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/dialog.js~showSaveDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/dialog.js",
    "importStyle": "{showSaveDialog}",
    "description": "显示文件保存对话框",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "{sourceFilePath: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "选项"
      },
      {
        "nullable": null,
        "types": [
          "function(result: boolean)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "保存完成后的回调函数，其中参数 `result` 为是否成功保存文件"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1777,
    "kind": "function",
    "name": "showRemoteOpenDialog",
    "memberof": "app/platform/electron/dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/dialog.js~showRemoteOpenDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/dialog.js",
    "importStyle": "{showRemoteOpenDialog}",
    "description": "显示 Electron 内置的文件保存对话框",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "{title: string, defaultPath: string, properties: string[]}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "选项"
      },
      {
        "nullable": null,
        "types": [
          "function(result: boolean)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "保存完成后的回调函数，其中参数 `result` 为是否成功保存文件"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1778,
    "kind": "function",
    "name": "saveAsImageFromUrl",
    "memberof": "app/platform/electron/dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/dialog.js~saveAsImageFromUrl",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/dialog.js",
    "importStyle": "{saveAsImageFromUrl}",
    "description": "根据图片地址和存储类型保存图片",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "图片地址"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "图片类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1779,
    "kind": "file",
    "name": "app/platform/electron/env.js",
    "content": "import os from 'os';\nimport {remote as Remote} from 'electron';\nimport path from 'path';\n\n/**\n * 操作系统平台\n * @type {string}\n * @private\n */\nconst OS_PLATFORM = os.platform();\n\n/**\n * 用户个人数据文件夹路径\n * @type {string}\n * @private\n */\nconst dataPath = Remote.app.getPath('userData');\n\n/**\n * 用户临时文件存储路径\n * @type {string}\n * @private\n */\nconst tmpPath = path.join(dataPath, 'temp');\n\n/**\n * 用户桌面文件夹路径\n * @type {string}\n * @private\n */\nconst desktopPath = Remote.app.getPath('desktop');\n\n/**\n * 当前运行的操作系统是否是 Mac\n * @type {boolean}\n * @private\n */\nconst isOSX = OS_PLATFORM === 'osx' || OS_PLATFORM === 'darwin';\n\n/**\n * 当前运行的操作系统是否是 Windows\n * @type {boolean}\n * @private\n */\nconst isWindowsOS = OS_PLATFORM === 'win32' || OS_PLATFORM === 'win64';\n\n/**\n * 当前运行的操作系统是否是 Linux\n * @type {boolean}\n * @private\n */\nconst isLinux = !isOSX && !isWindowsOS;\n\n/**\n * 当前操作系统运行环境信息\n * @type {Object}\n * @property {string} os 操作系统类型，包括 MacOS(`'osx'`)，Windows(`'windows'`) 或 Linux(`'linux'`)\n * @property {boolean} isWindowsOS 当前运行的操作系统是否是 Windows\n * @property {boolean} isOSX 当前运行的操作系统是否是 Mac OS\n * @property {boolean} isLinux 当前运行的操作系统是否是 Linux\n * @property {string} arch 当前运行的操作系统架构类型\n * @property {string} desktopPath 用户桌面文件夹路径\n * @property {string} tmpPath 用户临时文件存储路径\n * @property {string} dataPath 用户个人数据文件夹路径\n * @property {string} appPath Electron 应用文件程序夹路径\n * @property {string} appRoot Electron 应用根目录路径\n */\nexport default {\n    arch: process.arch,\n    os: isOSX ? 'mac' : isWindowsOS ? 'windows' : OS_PLATFORM,\n    isWindowsOS,\n    isOSX,\n    isLinux,\n    dataPath,\n    desktopPath,\n    tmpPath,\n    get appPath() {\n        return path.resolve(Remote.app.getAppPath(), '..');\n    },\n    appRoot: Remote.getGlobal('entryPath')\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/env.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1780,
    "kind": "variable",
    "name": "OS_PLATFORM",
    "memberof": "app/platform/electron/env.js",
    "static": true,
    "longname": "app/platform/electron/env.js~OS_PLATFORM",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/env.js",
    "importStyle": null,
    "description": "操作系统平台",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1781,
    "kind": "variable",
    "name": "dataPath",
    "memberof": "app/platform/electron/env.js",
    "static": true,
    "longname": "app/platform/electron/env.js~dataPath",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/env.js",
    "importStyle": null,
    "description": "用户个人数据文件夹路径",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1782,
    "kind": "variable",
    "name": "tmpPath",
    "memberof": "app/platform/electron/env.js",
    "static": true,
    "longname": "app/platform/electron/env.js~tmpPath",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/env.js",
    "importStyle": null,
    "description": "用户临时文件存储路径",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1783,
    "kind": "variable",
    "name": "desktopPath",
    "memberof": "app/platform/electron/env.js",
    "static": true,
    "longname": "app/platform/electron/env.js~desktopPath",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/env.js",
    "importStyle": null,
    "description": "用户桌面文件夹路径",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1784,
    "kind": "variable",
    "name": "isOSX",
    "memberof": "app/platform/electron/env.js",
    "static": true,
    "longname": "app/platform/electron/env.js~isOSX",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/env.js",
    "importStyle": null,
    "description": "当前运行的操作系统是否是 Mac",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1785,
    "kind": "variable",
    "name": "isWindowsOS",
    "memberof": "app/platform/electron/env.js",
    "static": true,
    "longname": "app/platform/electron/env.js~isWindowsOS",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/env.js",
    "importStyle": null,
    "description": "当前运行的操作系统是否是 Windows",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1786,
    "kind": "variable",
    "name": "isLinux",
    "memberof": "app/platform/electron/env.js",
    "static": true,
    "longname": "app/platform/electron/env.js~isLinux",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/env.js",
    "importStyle": null,
    "description": "当前运行的操作系统是否是 Linux",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1787,
    "kind": "file",
    "name": "app/platform/electron/event-emitter.js",
    "content": "import EventEmitter from 'events';\n\nexport default EventEmitter;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/event-emitter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1788,
    "kind": "file",
    "name": "app/platform/electron/events.js",
    "content": "import EventEmitter from './event-emitter';\n\n/**\n * Electron 事件管理类\n *\n * @class Events\n * @extends {EventEmitter}\n */\nclass Events extends EventEmitter {\n    /**\n     * 创建一个Electron 事件管理类实例\n     * @memberof Events\n     */\n    constructor() {\n        super();\n        this.eventsMap = {};\n        this.isMainProcess = !process.browser && process.type !== 'renderer';\n        if (this.setMaxListeners) {\n            this.setMaxListeners(20);\n        }\n    }\n\n    /**\n     * 绑定事件并返回一个 {Sysmbo} 作为事件绑定 ID 用于取消事件\n     * @param  {string} event 事件名称\n     * @param  {Function} listener 事件回调函数\n     * @return {Symbol} 事件绑定 ID\n     * @memberof Events\n     */\n    on(event, listener) {\n        super.on(event, listener);\n        const name = Symbol(event);\n        this.eventsMap[name] = {listener, name: event};\n        if (DEBUG) {\n            if (this.isMainProcess) {\n                console.log('\\n>> ON EVENT', event);\n            } else {\n                console.collapse('ON EVENT', 'orangeBg', event, 'orangePale');\n                console.trace('event', this.eventsMap[name]);\n                console.groupEnd();\n            }\n        }\n        return name;\n    }\n\n    /**\n     * 绑定一个一次性事件，触发后会自动取消绑定，只会触发一次\n     * @param  {string} event 事件名称\n     * @param  {Function} listener 事件回调函数\n     * @return {Symbol} 事件绑定 ID\n     * @memberof Events\n     */\n    once(event, listener) {\n        const name = Symbol(event);\n        const listenerBinder = (...args) => {\n            this.off(name);\n            listener(...args);\n        };\n        super.once(event, listenerBinder);\n        this.eventsMap[name] = {listener: listenerBinder, name: event};\n        if (DEBUG) {\n            if (this.isMainProcess) {\n                console.log('\\n>> ON ONCE EVENT', event);\n            } else {\n                console.collapse('ON ONCE EVENT', 'orangeBg', event, 'orangePale');\n                console.trace('event', this.eventsMap[name]);\n                console.groupEnd();\n            }\n        }\n        return name;\n    }\n\n    /**\n     * 取消绑定事件\n     * @param  {...Symbol} names 要取消的事件 ID\n     * @return {void}\n     * @memberof Events\n     */\n    off(...names) {\n        if (this.eventsMap) {\n            names.forEach(name => {\n                const event = this.eventsMap[name];\n                if (event) {\n                    this.removeListener(event.name, event.listener);\n                    delete this.eventsMap[name];\n                    if (DEBUG) {\n                        if (this.isMainProcess) {\n                            console.log('OFF EVENT', event.name);\n                        } else {\n                            console.collapse('OFF EVENT', 'orangeBg', event.name, 'orangePale');\n                            console.trace('event', event);\n                            console.groupEnd();\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * 触发一个事件\n     *\n     * @param {string} names 要触发的事件名称\n     * @param {...any} args 事件参数\n     * @memberof Events\n     * @return {void}\n     */\n    emit(names, ...args) {\n        super.emit(names, ...args);\n        if (DEBUG) {\n            if (this.isMainProcess) {\n                console.log('\\n>> EMIT EVENT', names);\n            } else {\n                console.collapse('EMIT EVENT', 'orangeBg', names, 'orangePale');\n                args.forEach((arg, argIdx) => {\n                    console.log(`arg: ${argIdx}`, arg);\n                });\n                console.groupEnd();\n            }\n        }\n    }\n}\n\n/**\n * 全局事件触发器\n * @type {Events}\n */\nconst events = new Events();\n\nexport default events;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1789,
    "kind": "class",
    "name": "Events",
    "memberof": "app/platform/electron/events.js",
    "static": true,
    "longname": "app/platform/electron/events.js~Events",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/events.js",
    "importStyle": null,
    "description": "Electron 事件管理类",
    "lineNumber": 9,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Events"
      }
    ],
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 1790,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/platform/electron/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/events.js~Events#constructor",
    "access": "public",
    "description": "创建一个Electron 事件管理类实例",
    "lineNumber": 14
  },
  {
    "__docId__": 1791,
    "kind": "member",
    "name": "eventsMap",
    "memberof": "app/platform/electron/events.js~Events",
    "static": false,
    "longname": "app/platform/electron/events.js~Events#eventsMap",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1792,
    "kind": "member",
    "name": "isMainProcess",
    "memberof": "app/platform/electron/events.js~Events",
    "static": false,
    "longname": "app/platform/electron/events.js~Events#isMainProcess",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1793,
    "kind": "method",
    "name": "on",
    "memberof": "app/platform/electron/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/events.js~Events#on",
    "access": "public",
    "description": "绑定事件并返回一个 {Sysmbo} 作为事件绑定 ID 用于取消事件",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件名称"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "事件绑定 ID"
    }
  },
  {
    "__docId__": 1794,
    "kind": "method",
    "name": "once",
    "memberof": "app/platform/electron/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/events.js~Events#once",
    "access": "public",
    "description": "绑定一个一次性事件，触发后会自动取消绑定，只会触发一次",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件名称"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "事件绑定 ID"
    }
  },
  {
    "__docId__": 1795,
    "kind": "method",
    "name": "off",
    "memberof": "app/platform/electron/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/events.js~Events#off",
    "access": "public",
    "description": "取消绑定事件",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Symbol"
        ],
        "spread": true,
        "optional": false,
        "name": "names",
        "description": "要取消的事件 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1796,
    "kind": "method",
    "name": "emit",
    "memberof": "app/platform/electron/events.js~Events",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/events.js~Events#emit",
    "access": "public",
    "description": "触发一个事件",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "要触发的事件名称"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "事件参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1797,
    "kind": "variable",
    "name": "events",
    "memberof": "app/platform/electron/events.js",
    "static": true,
    "longname": "app/platform/electron/events.js~events",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/events.js",
    "importStyle": "events",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "app/platform/electron/events.js~Events"
      ]
    }
  },
  {
    "__docId__": 1798,
    "kind": "file",
    "name": "app/platform/electron/get-url-meta.js",
    "content": "import cheerio from 'cheerio';\nimport {request, getTextFromResponse} from '../common/network';\nimport limitTimePromise from '../../utils/limit-time-promise';\n\n/**\n * 网址解析类\n *\n * @export\n * @class UrlMeta\n */\nexport class UrlMeta {\n    /**\n     * 创建一个网址解析类实例\n     * @param {string} url 要解析的网址\n     * @memberof UrlMeta\n     */\n    constructor(url) {\n        /**\n         * 要解析的网址\n         * @type {string}\n         */\n        this.url = url;\n\n        /**\n         * 要解析的网址实例\n         * @type {URL}\n         */\n        this.parsedUrl = new URL(this.url);\n\n        /**\n         * 要解析的网址协议类型\n         * @type {string}\n         */\n        this.scheme = this.parsedUrl.protocol;\n\n        /**\n         * 要解析的网址主机地址\n         * @type {string}\n         */\n        this.host = this.parsedUrl.host;\n\n        /**\n         * 要解析的网址根地址\n         * @type {string}\n         */\n        this.rootUrl = `${this.scheme}//${this.host}`;\n    }\n\n    /**\n     * 根据给定的 Fetch 响应数据解析网址信息\n     *\n     * @param {Response} response Fetch 响应数据\n     * @returns {Promise<UrlMeta, Error>} 使用 Promise 异步返回处理结果\n     * @memberof UrlMeta\n     */\n    inspectFromResponse(response) {\n        this.response = response;\n        const contentType = response.headers.get('content-type');\n        this.contentTypeOrigin = contentType;\n        if (contentType.startsWith('image')) {\n            this.contentType = 'image';\n        } else if (contentType.startsWith('video')) {\n            this.contentType = 'video';\n        } else {\n            this.contentType = 'page';\n            return getTextFromResponse(response).then(documentSource => {\n                this.document = documentSource;\n                this.parsedDocument = cheerio.load(documentSource);\n                return Promise.resolve(this);\n            });\n        }\n        return Promise.resolve(this);\n    }\n\n    /**\n     * 获取当前网址是否是普通网页\n     * @memberof GetUrlMeta\n     * @type {boolean}\n     */\n    get isPage() {\n        return this.contentType === 'page';\n    }\n\n    /**\n     * 获取当前网址是否是图片\n     * @memberof GetUrlMeta\n     * @type {boolean}\n     */\n    get isImage() {\n        return this.contentType === 'image';\n    }\n\n    /**\n     * 获取当前网址是否是视频\n     * @memberof GetUrlMeta\n     * @type {boolean}\n     */\n    get isVideo() {\n        return this.contentType === 'video';\n    }\n\n    /**\n     * 获取网页标题\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get title() {\n        if (!this.isPage) {\n            return this.url;\n        }\n        if (this._title === undefined) {\n            /**\n             * 网页标题缓存\n             * @type {string}\n             * @private\n             */\n            this._title = this.parsedDocument('head > title').text() || null;\n        }\n        return this._title;\n    }\n\n    /**\n     * 获取网页标题\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get ogTitle() {\n        if (!this.isPage) {\n            return this.url;\n        }\n        if (this._ogTitle === undefined) {\n            /**\n             * 网页标题缓存\n             * @type {string}\n             * @private\n             */\n            this._ogTitle = this.parsedDocument(\"meta[property='og:title']\").attr('content') || null;\n        }\n        return this._ogTitle;\n    }\n\n    /**\n     * 获取网页标题\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get ogDescription() {\n        if (!this.isPage) {\n            return '';\n        }\n        if (this._ogDescription === undefined) {\n            /**\n             * 网页标题缓存\n             * @type {string}\n             * @private\n             */\n            this._ogDescription = this.parsedDocument(\"meta[property='og:description']\").attr('content') || null;\n        }\n        return this._ogDescription;\n    }\n\n    /**\n     * 获取 OG 类型\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get ogType() {\n        if (this._ogType === undefined) {\n            /**\n             *  OG 类型缓存\n             * @type {string}\n             * @private\n             */\n            this._ogType = this.parsedDocument(\"meta[property='og:type']\").attr('content') || null;\n        }\n        return this._ogType;\n    }\n\n    /**\n     * 获取网页更新时间\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get ogUpdatedTime() {\n        if (this._ogUpdatedTime === undefined) {\n            /**\n             * 网页更新时间缓存\n             * @type {string}\n             * @private\n             */\n            this._ogUpdatedTime = this.parsedDocument(\"meta[property='og:updated_time']\").attr('content') || null;\n        }\n        return this._ogUpdatedTime;\n    }\n\n    /**\n     * 获取本地化名称\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get ogLocale() {\n        if (this._ogLocale === undefined) {\n            /**\n             * 本地化名称缓存\n             * @type {string}\n             * @private\n             */\n            this._ogLocale = this.parsedDocument(\"meta[property='og:locale']\").attr('content') || null;\n        }\n        return this._ogLocale;\n    }\n\n    /**\n     * 获取链接\n     * @memberof GetUrlMeta\n     * @type {string[]}\n     */\n    get links() {\n        if (this._links === undefined) {\n            /**\n             * 链接缓存\n             * @type {string}\n             * @private\n             */\n            this._links = this.parsedDocument('a').map((i, elem) => {\n                return this.parsedDocument(elem).attr('href');\n            });\n        }\n        return this._links;\n    }\n\n    /**\n     * 获取 Meta 描述\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get metaDescription() {\n        if (this._metaDescription === undefined) {\n            /**\n             * Meta 描述缓存\n             * @type {string}\n             * @private\n             */\n            this._metaDescription = this.parsedDocument(\"meta[name='metaDescription']\").attr('content') || null;\n        }\n        return this._metaDescription;\n    }\n\n    /**\n     * 获取次要描述\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get secondaryDescription() {\n        if (this._secondaryDescription === undefined) {\n            this._secondaryDescription = null;\n            this.parsedDocument('p').each((i, elem) => {\n                if (this._secondaryDescription !== undefined) {\n                    return;\n                }\n\n                const text = this.parsedDocument(elem).text();\n\n                // If we found a paragraph with more than\n                if (text.length >= 120) {\n                    /**\n                     * 次要描述缓存\n                     * @type {string}\n                     * @private\n                     */\n                    this._secondaryDescription = text;\n                }\n            });\n        }\n        return this._secondaryDescription;\n    }\n\n    /**\n     * 获取网页描述\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get description() {\n        if (!this.isPage) {\n            return '';\n        }\n        return this.metaDescription || this.secondaryDescription;\n    }\n\n    /**\n     * 获取关键字\n     * @memberof GetUrlMeta\n     * @type {string[]}\n     */\n    get keywords() {\n        if (this._keywords === undefined) {\n            const keywordsString = this.parsedDocument(\"meta[name='keywords']\").attr('content');\n\n            if (keywordsString) {\n                /**\n                 * 关键字缓存\n                 * @type {string}\n                 * @private\n                 */\n                this._keywords = keywordsString.split(',');\n            } else {\n                this._keywords = [];\n            }\n        }\n        return this._keywords;\n    }\n\n    /**\n     * 获取作者\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get author() {\n        if (this._author === undefined) {\n            /**\n             * 作者缓存\n             * @type {string}\n             * @private\n             */\n            this._author = this.parsedDocument(\"meta[name='author']\").attr('content') || null;\n        }\n        return this._author;\n    }\n\n    /**\n     * 获取网页编码\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get charset() {\n        if (this._charset === undefined) {\n            /**\n             * 网页编码缓存\n             * @type {string}\n             * @private\n             */\n            this._charset = this.parsedDocument('meta[charset]').attr('charset') || null;\n        }\n        return this._charset;\n    }\n\n    /**\n     * 获取图片\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get image() {\n        if (!this.isPage) {\n            return null;\n        }\n        if (this._image === undefined) {\n            const img = this.parsedDocument(\"meta[property='og:image']\").attr('content');\n            if (img) {\n                /**\n                 * 图片缓存\n                 * @type {string}\n                 * @private\n                 */\n                this._image = this.getAbsolutePath(img);\n            } else {\n                this._image = null;\n            }\n        }\n        return this._image;\n    }\n\n    /**\n     * 获取Feeds 地址\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get feeds() {\n        if (this._feeds === undefined) {\n            /**\n             * Feeds 地址缓存\n             * @type {string}\n             * @private\n             */\n            this._feeds = this.parseFeeds('rss') || this.parseFeeds('atom') || null;\n        }\n        return this._feeds;\n    }\n\n    /**\n     * 获取 Favicons\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get favicons() {\n        if (this._favicons === undefined) {\n            /**\n             * Favicons 缓存\n             * @type {string}\n             * @private\n             */\n            this._favicons = this.parseFavicons('shortcut icon').concat(\n                this.parseFavicons('icon'),\n                this.parseFavicons('apple-touch-icon'),\n            ) || null;\n        }\n        return this._favicons;\n    }\n\n    /**\n     * 获取首要 Favicon\n     * @memberof GetUrlMeta\n     * @type {string}\n     */\n    get favicon() {\n        /**\n         * 首要 Favicon 缓存\n         * @type {string}\n         * @private\n         */\n        return this.favicons[0];\n    }\n\n    /**\n     * 提取 Feeds 地址\n     * @param {string} format Feeds 格式\n     * @private\n     * @memberof UrlMeta\n     * @return {string[]} Feeds 地址列表\n     */\n    parseFeeds(format) {\n        const feeds = this.parsedDocument(`link[type='application/${format}+xml']`).map((i, elem) => {\n            return this.parsedDocument(elem).attr('href');\n        });\n\n        return feeds;\n    }\n\n    /**\n     * 获取绝对地址\n     *\n     * @param {string} href 路径\n     * @return {string} 绝对地址\n     * @memberof UrlMeta\n     * @private\n     */\n    getAbsolutePath(href) {\n        if ((/^(http:|https:)?\\/\\//i).test(href)) {\n            return href;\n        }\n        if (!(/^\\//).test(href)) {\n            href = `/${href}`;\n        }\n        return this.rootUrl + href;\n    }\n\n    /**\n     * 提取 Favicons 地址\n     *\n     * @param {string} format 格式\n     * @returns {string} Favicons 地址\n     * @memberof UrlMeta\n     * @private\n     */\n    parseFavicons(format) {\n        if (format === 'favicon.ico') {\n            return [{\n                href: this.getAbsolutePath('favicon.ico'),\n                sizes: '',\n            }];\n        }\n        if (!this.isPage) {\n            return [];\n        }\n        const favicons = this.parsedDocument(`link[rel='${format}']`).map((i, elem) => {\n            const href = this.parsedDocument(elem).attr('href');\n            const sizes = this.parsedDocument(elem).attr('sizes');\n            return {\n                href: this.getAbsolutePath(href),\n                sizes: sizes || ''\n            };\n        });\n\n        return [].slice.call(favicons);\n    }\n}\n\n/**\n * 解析网页地址所指向的页面信息\n * @param {string} url 网页地址\n * @return {UrlMeta} 页面信息\n */\nexport default (url) => {\n    return limitTimePromise(request(url), 5000).then(response => {\n        return new UrlMeta(url).inspectFromResponse(response);\n    });\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/get-url-meta.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1799,
    "kind": "class",
    "name": "UrlMeta",
    "memberof": "app/platform/electron/get-url-meta.js",
    "static": true,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/get-url-meta.js",
    "importStyle": "{UrlMeta}",
    "description": "网址解析类",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "UrlMeta"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 1800,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#constructor",
    "access": "public",
    "description": "创建一个网址解析类实例",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "要解析的网址"
      }
    ]
  },
  {
    "__docId__": 1801,
    "kind": "member",
    "name": "url",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#url",
    "access": "public",
    "description": "要解析的网址",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1802,
    "kind": "member",
    "name": "parsedUrl",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#parsedUrl",
    "access": "public",
    "description": "要解析的网址实例",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "URL"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1803,
    "kind": "member",
    "name": "scheme",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#scheme",
    "access": "public",
    "description": "要解析的网址协议类型",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1804,
    "kind": "member",
    "name": "host",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#host",
    "access": "public",
    "description": "要解析的网址主机地址",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1805,
    "kind": "member",
    "name": "rootUrl",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#rootUrl",
    "access": "public",
    "description": "要解析的网址根地址",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1806,
    "kind": "method",
    "name": "inspectFromResponse",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#inspectFromResponse",
    "access": "public",
    "description": "根据给定的 Fetch 响应数据解析网址信息",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<UrlMeta, Error>} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "Fetch 响应数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<UrlMeta, Error>"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1807,
    "kind": "member",
    "name": "response",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#response",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1808,
    "kind": "member",
    "name": "contentTypeOrigin",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#contentTypeOrigin",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1809,
    "kind": "member",
    "name": "contentType",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#contentType",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1812,
    "kind": "member",
    "name": "document",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#document",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1813,
    "kind": "member",
    "name": "parsedDocument",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#parsedDocument",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1814,
    "kind": "get",
    "name": "isPage",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#isPage",
    "access": "public",
    "description": "获取当前网址是否是普通网页",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1815,
    "kind": "get",
    "name": "isImage",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#isImage",
    "access": "public",
    "description": "获取当前网址是否是图片",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1816,
    "kind": "get",
    "name": "isVideo",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#isVideo",
    "access": "public",
    "description": "获取当前网址是否是视频",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1817,
    "kind": "get",
    "name": "title",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#title",
    "access": "public",
    "description": "获取网页标题",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1818,
    "kind": "member",
    "name": "_title",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_title",
    "access": "private",
    "description": "网页标题缓存",
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1819,
    "kind": "get",
    "name": "ogTitle",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#ogTitle",
    "access": "public",
    "description": "获取网页标题",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1820,
    "kind": "member",
    "name": "_ogTitle",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_ogTitle",
    "access": "private",
    "description": "网页标题缓存",
    "lineNumber": 137,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1821,
    "kind": "get",
    "name": "ogDescription",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#ogDescription",
    "access": "public",
    "description": "获取网页标题",
    "lineNumber": 147,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1822,
    "kind": "member",
    "name": "_ogDescription",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_ogDescription",
    "access": "private",
    "description": "网页标题缓存",
    "lineNumber": 157,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1823,
    "kind": "get",
    "name": "ogType",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#ogType",
    "access": "public",
    "description": "获取 OG 类型",
    "lineNumber": 167,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1824,
    "kind": "member",
    "name": "_ogType",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_ogType",
    "access": "private",
    "description": " OG 类型缓存",
    "lineNumber": 174,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1825,
    "kind": "get",
    "name": "ogUpdatedTime",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#ogUpdatedTime",
    "access": "public",
    "description": "获取网页更新时间",
    "lineNumber": 184,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1826,
    "kind": "member",
    "name": "_ogUpdatedTime",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_ogUpdatedTime",
    "access": "private",
    "description": "网页更新时间缓存",
    "lineNumber": 191,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1827,
    "kind": "get",
    "name": "ogLocale",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#ogLocale",
    "access": "public",
    "description": "获取本地化名称",
    "lineNumber": 201,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1828,
    "kind": "member",
    "name": "_ogLocale",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_ogLocale",
    "access": "private",
    "description": "本地化名称缓存",
    "lineNumber": 208,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1829,
    "kind": "get",
    "name": "links",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#links",
    "access": "public",
    "description": "获取链接",
    "lineNumber": 218,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1830,
    "kind": "member",
    "name": "_links",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_links",
    "access": "private",
    "description": "链接缓存",
    "lineNumber": 225,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1831,
    "kind": "get",
    "name": "metaDescription",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#metaDescription",
    "access": "public",
    "description": "获取 Meta 描述",
    "lineNumber": 237,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1832,
    "kind": "member",
    "name": "_metaDescription",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_metaDescription",
    "access": "private",
    "description": "Meta 描述缓存",
    "lineNumber": 244,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1833,
    "kind": "get",
    "name": "secondaryDescription",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#secondaryDescription",
    "access": "public",
    "description": "获取次要描述",
    "lineNumber": 254,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1834,
    "kind": "member",
    "name": "_secondaryDescription",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_secondaryDescription",
    "access": "private",
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1836,
    "kind": "get",
    "name": "description",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#description",
    "access": "public",
    "description": "获取网页描述",
    "lineNumber": 283,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1837,
    "kind": "get",
    "name": "keywords",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#keywords",
    "access": "public",
    "description": "获取关键字",
    "lineNumber": 295,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1838,
    "kind": "member",
    "name": "_keywords",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_keywords",
    "access": "private",
    "description": "关键字缓存",
    "lineNumber": 305,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1840,
    "kind": "get",
    "name": "author",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#author",
    "access": "public",
    "description": "获取作者",
    "lineNumber": 318,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1841,
    "kind": "member",
    "name": "_author",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_author",
    "access": "private",
    "description": "作者缓存",
    "lineNumber": 325,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1842,
    "kind": "get",
    "name": "charset",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#charset",
    "access": "public",
    "description": "获取网页编码",
    "lineNumber": 335,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1843,
    "kind": "member",
    "name": "_charset",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_charset",
    "access": "private",
    "description": "网页编码缓存",
    "lineNumber": 342,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1844,
    "kind": "get",
    "name": "image",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#image",
    "access": "public",
    "description": "获取图片",
    "lineNumber": 352,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1845,
    "kind": "member",
    "name": "_image",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_image",
    "access": "private",
    "description": "图片缓存",
    "lineNumber": 364,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1847,
    "kind": "get",
    "name": "feeds",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#feeds",
    "access": "public",
    "description": "获取Feeds 地址",
    "lineNumber": 377,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1848,
    "kind": "member",
    "name": "_feeds",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_feeds",
    "access": "private",
    "description": "Feeds 地址缓存",
    "lineNumber": 384,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1849,
    "kind": "get",
    "name": "favicons",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#favicons",
    "access": "public",
    "description": "获取 Favicons",
    "lineNumber": 394,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1850,
    "kind": "member",
    "name": "_favicons",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#_favicons",
    "access": "private",
    "description": "Favicons 缓存",
    "lineNumber": 401,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1851,
    "kind": "get",
    "name": "favicon",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#favicon",
    "access": "public",
    "description": "获取首要 Favicon",
    "lineNumber": 414,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1852,
    "kind": "method",
    "name": "parseFeeds",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#parseFeeds",
    "access": "private",
    "description": "提取 Feeds 地址",
    "lineNumber": 430,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "Feeds 格式"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "Feeds 地址列表"
    }
  },
  {
    "__docId__": 1853,
    "kind": "method",
    "name": "getAbsolutePath",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#getAbsolutePath",
    "access": "private",
    "description": "获取绝对地址",
    "lineNumber": 446,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "href",
        "description": "路径"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "绝对地址"
    }
  },
  {
    "__docId__": 1854,
    "kind": "method",
    "name": "parseFavicons",
    "memberof": "app/platform/electron/get-url-meta.js~UrlMeta",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/get-url-meta.js~UrlMeta#parseFavicons",
    "access": "private",
    "description": "提取 Favicons 地址",
    "lineNumber": 464,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Favicons 地址"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "格式"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Favicons 地址"
    }
  },
  {
    "__docId__": 1855,
    "kind": "function",
    "name": "geturlmeta",
    "memberof": "app/platform/electron/get-url-meta.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/get-url-meta.js~geturlmeta",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/get-url-meta.js",
    "importStyle": "geturlmeta",
    "description": "解析网页地址所指向的页面信息",
    "lineNumber": 492,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "网页地址"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UrlMeta"
      ],
      "spread": false,
      "description": "页面信息"
    }
  },
  {
    "__docId__": 1856,
    "kind": "file",
    "name": "app/platform/electron/image.js",
    "content": "import {nativeImage, NativeImage} from 'electron';\nimport fs from 'fs-extra';\nimport Path from 'path';\n\n/**\n * 将 Base64 字符串转换为 Buffer\n * @param {string} base64Str Base64 字符串\n * @return {Buffer} Buffer\n */\nexport const base64ToBuffer = base64Str => {\n    const matches = base64Str.match(/^data:([A-Za-z-+/]+);base64,(.+)$/);\n    if (matches.length !== 3) {\n        throw new Error('Invalid base64 image string.');\n    }\n    return Buffer.from(matches[2], 'base64');\n};\n\n/**\n * 从图片路径创建一个 NativeImage 实例\n * @param {string} path 图片路径\n * @return {NativeImage} NativeImage 实例\n */\nexport const createFromPath = path => {\n    return nativeImage.createFromPath(path);\n};\n\n/**\n * 从 DataUrl 字符串创建一个 NativeImage 实例\n * @param {string} dataUrl DataUrl 字符串\n * @return {NativeImage} NativeImage 实例\n */\nexport const createFromDataURL = dataUrl => {\n    return nativeImage.createFromDataURL(dataUrl);\n};\n\n/**\n * 保存图片\n * @param {NativeImage|string|Buffer} image 图片\n * @param {string} filePath 保存路径\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const saveImage = (image, filePath) => {\n    const file = {\n        path: filePath,\n        name: Path.basename(filePath),\n    };\n    if (typeof image === 'string') {\n        file.base64 = image;\n        image = base64ToBuffer(image);\n        file.size = image.length;\n    } else if (image.toPNG) {\n        image = image.toPNG();\n        file.size = image.length;\n    }\n    if (image instanceof Buffer) {\n        return fs.outputFile(filePath, image).then(() => {\n            return Promise.resolve(file);\n        });\n    }\n    return Promise.reject(new Error('Cannot convert image to a buffer.'));\n};\n\nexport default {\n    base64ToBuffer,\n    saveImage,\n    createFromPath,\n    createFromDataURL\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/image.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1857,
    "kind": "function",
    "name": "base64ToBuffer",
    "memberof": "app/platform/electron/image.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/image.js~base64ToBuffer",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/image.js",
    "importStyle": "{base64ToBuffer}",
    "description": "将 Base64 字符串转换为 Buffer",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "base64Str",
        "description": "Base64 字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Buffer"
      ],
      "spread": false,
      "description": "Buffer"
    }
  },
  {
    "__docId__": 1858,
    "kind": "function",
    "name": "createFromPath",
    "memberof": "app/platform/electron/image.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/image.js~createFromPath",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/image.js",
    "importStyle": "{createFromPath}",
    "description": "从图片路径创建一个 NativeImage 实例",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "图片路径"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NativeImage"
      ],
      "spread": false,
      "description": "NativeImage 实例"
    }
  },
  {
    "__docId__": 1859,
    "kind": "function",
    "name": "createFromDataURL",
    "memberof": "app/platform/electron/image.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/image.js~createFromDataURL",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/image.js",
    "importStyle": "{createFromDataURL}",
    "description": "从 DataUrl 字符串创建一个 NativeImage 实例",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dataUrl",
        "description": "DataUrl 字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NativeImage"
      ],
      "spread": false,
      "description": "NativeImage 实例"
    }
  },
  {
    "__docId__": 1860,
    "kind": "function",
    "name": "saveImage",
    "memberof": "app/platform/electron/image.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/image.js~saveImage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/image.js",
    "importStyle": "{saveImage}",
    "description": "保存图片",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "NativeImage",
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "图片"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "保存路径"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1861,
    "kind": "file",
    "name": "app/platform/electron/index.js",
    "content": "\nimport fs from 'fs-extra';\nimport config from '../common/config';\nimport sound from '../common/sound';\nimport env from './env';\nimport screenshot from './screenshot';\nimport contextmenu from './contextmenu';\nimport remote from './remote';\nimport EventEmitter from './event-emitter';\nimport image from './image';\nimport ui from './ui';\nimport notify from './notify';\nimport shortcut from './shortcut';\nimport dialog from './dialog';\nimport net from './net';\nimport crypto from './crypto';\nimport Socket from './socket';\nimport clipboard from './clipboard';\nimport webview from './webview';\n\nif (process.type !== 'renderer') {\n    throw new Error('platform/electron/index.js must run in renderer process.');\n}\n\nconst platform = {\n    type: 'electron',\n    env,\n    screenshot,\n    contextmenu,\n    EventEmitter,\n    remote,\n    image,\n    ui,\n    shortcut,\n    dialog,\n    fs,\n    config,\n    sound,\n    net,\n    crypto,\n    Socket,\n    notify,\n    clipboard,\n    webview,\n};\n\nif (DEBUG) {\n    global.$.Platform = platform;\n}\n\nexport default platform;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1862,
    "kind": "variable",
    "name": "platform",
    "memberof": "app/platform/electron/index.js",
    "static": true,
    "longname": "app/platform/electron/index.js~platform",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/index.js",
    "importStyle": "platform",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"env\": *, \"screenshot\": *, \"contextmenu\": *, \"EventEmitter\": *, \"remote\": *, \"image\": *, \"ui\": *, \"shortcut\": *, \"dialog\": *, \"fs\": *, \"config\": *, \"sound\": *, \"net\": *, \"crypto\": *, \"Socket\": *, \"notify\": *, \"clipboard\": *, \"webview\": *}"
      ]
    }
  },
  {
    "__docId__": 1863,
    "kind": "file",
    "name": "app/platform/electron/net.js",
    "content": "import fse from 'fs-extra';\nimport Path from 'path';\nimport network, {downloadFile as downloadFileOrigin, uploadFile as uploadFileOrigin} from '../common/network';\nimport {createUserDataPath} from './ui';\n\n/**\n * 下载文件\n * @param {string} url 文件下载地址\n * @param {string} fileSavePath 文件保存路径\n * @param {function(progresss: number)} onProgress 下载进度变更事件回调函数\n * @returns {Promise} 使用 Promise 异步返回处理文件下载结果\n */\nexport const downloadFileWithRequest = (url, fileSavePath, onProgress) => {\n    return downloadFileOrigin(url, null, onProgress).then(fileBuffer => {\n        const buffer = Buffer.from(new Uint8Array(fileBuffer));\n        return fse.outputFile(fileSavePath, buffer);\n    });\n};\n\n/**\n * 文件缓存对象\n * @private\n * @type {Object}\n */\nconst filesCache = {};\n\n/**\n * 创建文件缓存路径\n * @param {{storageName: string}|FileData} file 文件对象\n * @param {{identify: string}|User} user 用户实例\n * @param {string} [dirName='image'] 缓存目录\n * @return {string} 创建文件缓存路径\n * @private\n */\nconst createCachePath = (file, user, dirName = 'images') => {\n    return createUserDataPath(user, file.storageName, dirName);\n};\n\n/**\n * 检查文件是否已经缓存\n * @param {{localPath: string, path: string, gid: string}|FileData} file 文件对象\n * @param {{identify: string}|User} user 用户实例\n * @param {string} [dirName='image'] 缓存目录\n * @returns {Promise} 使用 Promise 异步返回处理结果\n * @private\n */\nconst checkFileCache = (file, user, dirName = 'images') => {\n    if (file.path) {\n        return Promise.resolve(false);\n    }\n    if (file.localPath) {\n        filesCache[file.gid] = file.localPath;\n        return Promise.resolve(file.localPath);\n    }\n    let cachePath = filesCache[file.gid];\n    if (cachePath) {\n        file.localPath = cachePath;\n        return Promise.resolve(cachePath);\n    }\n    cachePath = createCachePath(file, user, dirName);\n    return fse.pathExists(cachePath).then(exists => {\n        if (exists) {\n            filesCache[file.gid] = cachePath;\n            file.localPath = cachePath;\n            return Promise.resolve(cachePath);\n        }\n        return Promise.resolve(false);\n    });\n};\n\n/**\n * 下载并保存文件到本地缓存\n * @param {User} user 用户实例\n * @param {FileData} file 文件对象\n * @param {function(progresss: number)} onProgress 下载进度变更事件回调函数\n * @returns {Promise} 使用 Promise 异步返回处理文件下载结果\n */\nexport const downloadFile = (user, file, onProgress) => {\n    return checkFileCache(file, user).then(cachePath => {\n        const url = file.url || file.makeUrl(user);\n        const fileSavePath = file.path || createCachePath(file, user);\n        if (cachePath) {\n            if (DEBUG) {\n                console.collapse('HTTP DOWNLOAD', 'blueBg', url, 'bluePale', 'Cached', 'greenPale');\n                console.log('file', file);\n                console.groupEnd();\n            }\n            if (fileSavePath !== cachePath) {\n                return fse.copy(cachePath, fileSavePath).then(() => {\n                    return Promise.resolve(file);\n                });\n            }\n            return Promise.resolve(file);\n        }\n\n        fse.ensureDirSync(Path.dirname(fileSavePath));\n        return downloadFileWithRequest(url, fileSavePath, onProgress).then(() => {\n            if (DEBUG) {\n                console.collapse('HTTP DOWNLOAD', 'blueBg', url, 'bluePale', 'OK', 'greenPale');\n                console.log('file', file);\n                console.groupEnd();\n            }\n            file.localPath = fileSavePath;\n            filesCache[file.gid] = file.localPath;\n            return Promise.resolve(file);\n        });\n    });\n};\n\n/**\n * 上传文件\n * @param {User} user 用户实例\n * @param {FileData} file 文件对象\n * @param {function(progresss: number)} onProgress 上传进度变更事件回调函数\n * @param {boolean} [copyCache=false] 是否将原始文件拷贝到缓存目录\n * @returns {Promise} 使用 Promise 异步返回处理上传文件结果\n */\nexport const uploadFile = (user, file, onProgress, copyCache = false) => {\n    const {originFile} = file;\n    if (!originFile) {\n        return console.warn('Upload file fail, cannot get origin file object.', file);\n    }\n    const serverUrl = user.uploadUrl;\n    const form = new FormData();\n    form.append('file', file.originData, file.name);\n    form.append('userID', user.id);\n    form.append('gid', file.cgid);\n    file.form = form;\n\n    return uploadFileOrigin(file, serverUrl, xhr => {\n        xhr.setRequestHeader('ServerName', user.serverName);\n        xhr.setRequestHeader('Authorization', user.token);\n    }, onProgress).then(remoteData => {\n        const finishUpload = () => {\n            if (DEBUG) {\n                console.collapse('HTTP UPLOAD Request', 'blueBg', serverUrl, 'bluePale', 'OK', 'greenPale');\n                console.log('files', file);\n                console.log('remoteData', remoteData);\n                console.groupEnd();\n            }\n            return Promise.resolve(remoteData);\n        };\n        if (copyCache) {\n            const copyPath = createCachePath(file, user, copyCache === true ? 'images' : copyCache);\n            file.localPath = copyPath;\n\n            if (originFile.blob) {\n                return new Promise((resolve, reject) => {\n                    const reader = new FileReader();\n                    reader.onload = () => {\n                        if (reader.readyState === 2) {\n                            const buffer = Buffer.from(reader.result);\n                            fse.outputFile(copyPath, buffer)\n                                .then(finishUpload)\n                                .then(resolve)\n                                .catch(reject);\n                        }\n                    };\n                    reader.readAsArrayBuffer(file.blob);\n                });\n            }\n            if (originFile.path) {\n                return fse.copy(originFile.path, copyPath).then(finishUpload);\n            }\n        }\n        return finishUpload();\n    }).catch(error => {\n        if (DEBUG) {\n            console.error('Upload file error', error, file);\n        }\n        return Promise.reject(error);\n    });\n};\n\nnetwork.uploadFile = uploadFile;\nnetwork.downloadFile = downloadFile;\nnetwork.checkFileCache = checkFileCache;\n\nexport default network;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/net.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1864,
    "kind": "function",
    "name": "downloadFileWithRequest",
    "memberof": "app/platform/electron/net.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/net.js~downloadFileWithRequest",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/net.js",
    "importStyle": "{downloadFileWithRequest}",
    "description": "下载文件",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理文件下载结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "文件下载地址"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileSavePath",
        "description": "文件保存路径"
      },
      {
        "nullable": null,
        "types": [
          "function(progresss: number)"
        ],
        "spread": false,
        "optional": false,
        "name": "onProgress",
        "description": "下载进度变更事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理文件下载结果"
    }
  },
  {
    "__docId__": 1865,
    "kind": "variable",
    "name": "filesCache",
    "memberof": "app/platform/electron/net.js",
    "static": true,
    "longname": "app/platform/electron/net.js~filesCache",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/net.js",
    "importStyle": null,
    "description": "文件缓存对象",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1866,
    "kind": "function",
    "name": "createCachePath",
    "memberof": "app/platform/electron/net.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/net.js~createCachePath",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/net.js",
    "importStyle": null,
    "description": "创建文件缓存路径",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "{storageName: string}|FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "文件对象"
      },
      {
        "nullable": null,
        "types": [
          "{identify: string}|User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "用户实例"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'image'",
        "defaultRaw": "'image'",
        "name": "dirName",
        "description": "缓存目录"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "创建文件缓存路径"
    }
  },
  {
    "__docId__": 1867,
    "kind": "function",
    "name": "checkFileCache",
    "memberof": "app/platform/electron/net.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/net.js~checkFileCache",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/net.js",
    "importStyle": null,
    "description": "检查文件是否已经缓存",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{localPath: string, path: string, gid: string}|FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "文件对象"
      },
      {
        "nullable": null,
        "types": [
          "{identify: string}|User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "用户实例"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'image'",
        "defaultRaw": "'image'",
        "name": "dirName",
        "description": "缓存目录"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1868,
    "kind": "function",
    "name": "downloadFile",
    "memberof": "app/platform/electron/net.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/net.js~downloadFile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/net.js",
    "importStyle": "{downloadFile}",
    "description": "下载并保存文件到本地缓存",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理文件下载结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "用户实例"
      },
      {
        "nullable": null,
        "types": [
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "文件对象"
      },
      {
        "nullable": null,
        "types": [
          "function(progresss: number)"
        ],
        "spread": false,
        "optional": false,
        "name": "onProgress",
        "description": "下载进度变更事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理文件下载结果"
    }
  },
  {
    "__docId__": 1869,
    "kind": "function",
    "name": "uploadFile",
    "memberof": "app/platform/electron/net.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/net.js~uploadFile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/net.js",
    "importStyle": "{uploadFile}",
    "description": "上传文件",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理上传文件结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "用户实例"
      },
      {
        "nullable": null,
        "types": [
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "文件对象"
      },
      {
        "nullable": null,
        "types": [
          "function(progresss: number)"
        ],
        "spread": false,
        "optional": false,
        "name": "onProgress",
        "description": "上传进度变更事件回调函数"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "copyCache",
        "description": "是否将原始文件拷贝到缓存目录"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理上传文件结果"
    }
  },
  {
    "__docId__": 1870,
    "kind": "file",
    "name": "app/platform/electron/notify.js",
    "content": "import ui from './ui';\nimport remote from './remote';\nimport {showNotification} from '../common/notification';\nimport {playSound} from '../common/sound';\n\n/**\n * 请求获取桌面用户注意\n * @param {boolean} [attention=true] 是否请求获取桌面用户注意\n * @return {void}\n */\nexport const requestAttention = (attention = true) => {\n    if (attention) {\n        remote.call('dockBounce', 'informational');\n    }\n    ui.browserWindow.flashFrame(attention);\n};\n\n/**\n * 设置 Mac Dock 栏应用图标上的原点提示文本\n *\n * @param {string} label 提示文本\n * @return {void}\n */\nexport const setBadgeLabel = (label) => {\n    if (label === false) {\n        label = '';\n    }\n    ui.setBadgeLabel(label);\n};\n\n/**\n * 更新通知栏图标\n * @param {string} title 通知栏图标上的工具提示文本（鼠标悬停时显示）\n * @param {boolean} [flash=false] 是否闪烁通知栏图标\n * @return {void}\n */\nexport const updateTrayIcon = (title, flash = false) => {\n    ui.setTrayTooltip(title);\n    ui.flashTrayIcon(flash);\n};\n\nexport default {\n    requestAttention,\n    setBadgeLabel,\n    updateTrayIcon,\n    showNotification,\n    playSound,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/notify.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1871,
    "kind": "function",
    "name": "requestAttention",
    "memberof": "app/platform/electron/notify.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/notify.js~requestAttention",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/notify.js",
    "importStyle": "{requestAttention}",
    "description": "请求获取桌面用户注意",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "attention",
        "description": "是否请求获取桌面用户注意"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1872,
    "kind": "function",
    "name": "setBadgeLabel",
    "memberof": "app/platform/electron/notify.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/notify.js~setBadgeLabel",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/notify.js",
    "importStyle": "{setBadgeLabel}",
    "description": "设置 Mac Dock 栏应用图标上的原点提示文本",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "提示文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1873,
    "kind": "function",
    "name": "updateTrayIcon",
    "memberof": "app/platform/electron/notify.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/notify.js~updateTrayIcon",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/notify.js",
    "importStyle": "{updateTrayIcon}",
    "description": "更新通知栏图标",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "通知栏图标上的工具提示文本（鼠标悬停时显示）"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "flash",
        "description": "是否闪烁通知栏图标"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1874,
    "kind": "file",
    "name": "app/platform/electron/remote-events.js",
    "content": "export default {\n    remote: 'remote',\n    remote_on: 'remote.on',\n    remote_off: 'remote.off',\n    remote_emit: 'remote.emit',\n    remote_send: 'remote.send',\n    remote_app_quit: 'remote.app.quit',\n    capture_screen: 'capture.screen',\n    app_ready: 'app.ready'\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/remote-events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1875,
    "kind": "file",
    "name": "app/platform/electron/remote.js",
    "content": "import {ipcRenderer} from 'electron';\nimport EVENT from './remote-events';\nimport Config from '../../config';\n\nif (process.type !== 'renderer') {\n    if (DEBUG) console.error('\\n>> Can not send event with ipc in main process, you can use AppRemote.sendToWindows method instead.');\n}\n\n/**\n * 已绑定的事件清单\n * @type {Object}\n * @private\n */\nconst eventsMap = {};\n\n/**\n *  事件 ID 递增变量\n * @type {number}\n * @private\n */\nlet idSeed = new Date().getTime() + Math.floor(Math.random() * 100000);\n\n/**\n * 调用远程（主进程）方法或获取属性值\n * @param {string} method 远程（主进程）方法或属性\n * @param  {...any} args 调用方法时的参数\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const callRemote = (method, ...args) => {\n    return new Promise((resolve, reject) => {\n        const callBackEventName = `${EVENT.remote}.${idSeed++}`;\n        ipcRenderer.once(callBackEventName, (e, remoteResult) => {\n            resolve(remoteResult);\n        });\n        ipcRenderer.send(EVENT.remote, method, callBackEventName, ...args);\n    });\n};\n\n/**\n * 使用 IPC 向 Electron 主进程发送事件消息\n * @param  {string}    eventName 事件名称\n * @param  {...any} args 事件参数\n * @return {void}\n */\nexport const ipcSend = (eventName, ...args) => {\n    ipcRenderer.send(eventName, ...args);\n};\n\n/**\n * 使用 IPC 绑定进程间事件\n * @param  {string} event 事件名称\n * @param  {function} listener 事件回调函数\n * @return {Symbol} 事件 ID\n */\nexport const ipcOn = (event, listener) => {\n    ipcRenderer.on(event, listener);\n    const name = Symbol(event);\n    eventsMap[name] = {listener, name: event, ipc: true};\n    if (DEBUG) {\n        console.collapse('ON IPC EVENT', 'orangeBg', event, 'orangePale');\n        console.trace('event', eventsMap[name]);\n        console.groupEnd();\n    }\n    return name;\n};\n\n/**\n * 使用 IPC 绑定进程间一次性事件\n * @param  {string} event 事件名称\n * @param  {function} listener 事件回调函数\n * @return {Symbol} 事件 ID\n */\nexport const ipcOnce = (event, listener) => {\n    const name = Symbol(event);\n    const bindedListener = (...args) => {\n        remoteOff(name);\n        listener(...args);\n    };\n    ipcRenderer.once(event, bindedListener);\n    eventsMap[name] = {listener: bindedListener, name: event, ipc: true};\n    if (DEBUG) {\n        console.collapse('ON IPC ONCE EVENT', 'orangeBg', event, 'orangePale');\n        console.trace('event', eventsMap[name]);\n        console.groupEnd();\n    }\n    return name;\n};\n\n/**\n * 使用 IPC 在渲染进程绑定主进程上的普通事件\n * @param  {string} event 事件名称\n * @param  {function} listener 事件回调函数\n * @return {string} 事件 ID\n */\nexport const remoteOn = (event, listener) => {\n    const eventId = `${EVENT.remote_on}.${event}.${idSeed++}`;\n    const ipcEventName = ipcOn(eventId, (e, ...args) => {\n        if (DEBUG) {\n            console.collapse('COMMING REMOTE EVENT', 'orangeBg', event, 'orangePale');\n            console.trace('event', eventsMap[eventId]);\n            let argIdx = 0;\n            for (const arg of args) {\n                console.log(`arg:${argIdx++}`, arg);\n            }\n            console.groupEnd();\n        }\n        listener(...args, e);\n    });\n    eventsMap[eventId] = {remote: true, id: ipcEventName};\n    ipcRenderer.send(EVENT.remote_on, eventId, event);\n    if (DEBUG) {\n        console.collapse('ON REMOTE EVENT', 'orangeBg', event, 'orangePale');\n        console.trace('event', eventsMap[eventId]);\n        console.groupEnd();\n    }\n    return eventId;\n};\n\n/**\n * 使用 IPC 在渲染进程触发主进程上的普通事件\n * @param  {string} event 事件名称\n * @param  {...any} args 事件参数\n * @return {string} 事件 ID\n */\nexport const remoteEmit = (event, ...args) => {\n    ipcRenderer.send(EVENT.remote_emit, event, ...args);\n    if (DEBUG) {\n        console.collapse('cEMIT REMOTE EVENT', 'orangeBg', event, 'orangePale');\n        let argIdx = 0;\n        for (const arg of args) {\n            console.log(`arg:${argIdx++}`, arg);\n        }\n        console.groupEnd();\n    }\n};\n\n/**\n * 在当前应用窗口对应的渲染进程向其他应用窗口渲染进程发送消息\n * @param {string} windowName 窗口名称\n * @param {string} eventName 消息事件名称\n * @param  {...any} args 事件参数\n * @return {void}\n */\nexport const sendToWindow = (windowName, eventName, ...args) => {\n    ipcRenderer.send(EVENT.remote_send, windowName, eventName, ...args);\n};\n\n/**\n * 在当前应用窗口对应的渲染进程向主窗口渲染进程发送消息\n * @param {string} eventName 消息事件名称\n * @param  {...any} args 事件参数\n * @return {void}\n */\nexport const sendToMainWindow = (eventName, ...args) => {\n    return sendToWindow('main', eventName, ...args);\n};\n\n/**\n * 使用 IPC 在渲染进程取消绑定主进程上的普通事件\n * @param  {...string} names 事件名称\n * @return {void}\n */\nexport const remoteOff = (...names) => {\n    names.forEach(name => {\n        const event = eventsMap[name];\n        if (event) {\n            if (event.remote) {\n                remoteOff(event.id);\n                ipcSend(EVENT.remote_off, name);\n            } else if (event.ipc) {\n                ipcRenderer.removeListener(event.name, event.listener);\n            }\n            delete eventsMap[name];\n            if (DEBUG) {\n                console.collapse('OFF EVENT', 'orangeBg', event.name, 'orangePale');\n                if (event.ipc) console.log('ipc', true);\n                if (event.remote) console.log('remote', true);\n                console.trace('event', event);\n                console.groupEnd();\n            }\n        }\n    });\n};\n\n/**\n * 绑定主进程通知将要关闭应用程序事件\n * @param {function} listener 事件回调函数\n * @return {Symbol} 事件 ID\n */\nexport const onRequestQuit = listener => ipcOn(EVENT.remote_app_quit, listener);\n\n// 向主进程发送应用窗口界面准备就绪事件\nipcSend(EVENT.app_ready, Config);\n\nexport default {\n    EVENT,\n    call: callRemote,\n    on: remoteOn,\n    emit: remoteEmit,\n    off: remoteOff,\n    ipcOn,\n    ipcSend,\n    ipcOnce,\n    sendToWindow,\n    sendToMainWindow,\n    onRequestQuit\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/remote.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1876,
    "kind": "variable",
    "name": "eventsMap",
    "memberof": "app/platform/electron/remote.js",
    "static": true,
    "longname": "app/platform/electron/remote.js~eventsMap",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": null,
    "description": "已绑定的事件清单",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1877,
    "kind": "variable",
    "name": "idSeed",
    "memberof": "app/platform/electron/remote.js",
    "static": true,
    "longname": "app/platform/electron/remote.js~idSeed",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": null,
    "description": " 事件 ID 递增变量",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1878,
    "kind": "function",
    "name": "callRemote",
    "memberof": "app/platform/electron/remote.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/remote.js~callRemote",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": "{callRemote}",
    "description": "调用远程（主进程）方法或获取属性值",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "远程（主进程）方法或属性"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "调用方法时的参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1879,
    "kind": "function",
    "name": "ipcSend",
    "memberof": "app/platform/electron/remote.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/remote.js~ipcSend",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": "{ipcSend}",
    "description": "使用 IPC 向 Electron 主进程发送事件消息",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": "事件名称"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "事件参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1880,
    "kind": "function",
    "name": "ipcOn",
    "memberof": "app/platform/electron/remote.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/remote.js~ipcOn",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": "{ipcOn}",
    "description": "使用 IPC 绑定进程间事件",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件名称"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "事件 ID"
    }
  },
  {
    "__docId__": 1881,
    "kind": "function",
    "name": "ipcOnce",
    "memberof": "app/platform/electron/remote.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/remote.js~ipcOnce",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": "{ipcOnce}",
    "description": "使用 IPC 绑定进程间一次性事件",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件名称"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "事件 ID"
    }
  },
  {
    "__docId__": 1882,
    "kind": "function",
    "name": "remoteOn",
    "memberof": "app/platform/electron/remote.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/remote.js~remoteOn",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": "{remoteOn}",
    "description": "使用 IPC 在渲染进程绑定主进程上的普通事件",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件名称"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "事件 ID"
    }
  },
  {
    "__docId__": 1883,
    "kind": "function",
    "name": "remoteEmit",
    "memberof": "app/platform/electron/remote.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/remote.js~remoteEmit",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": "{remoteEmit}",
    "description": "使用 IPC 在渲染进程触发主进程上的普通事件",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件名称"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "事件参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "事件 ID"
    }
  },
  {
    "__docId__": 1884,
    "kind": "function",
    "name": "sendToWindow",
    "memberof": "app/platform/electron/remote.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/remote.js~sendToWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": "{sendToWindow}",
    "description": "在当前应用窗口对应的渲染进程向其他应用窗口渲染进程发送消息",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "windowName",
        "description": "窗口名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": "消息事件名称"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "事件参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1885,
    "kind": "function",
    "name": "sendToMainWindow",
    "memberof": "app/platform/electron/remote.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/remote.js~sendToMainWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": "{sendToMainWindow}",
    "description": "在当前应用窗口对应的渲染进程向主窗口渲染进程发送消息",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": "消息事件名称"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "事件参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1886,
    "kind": "function",
    "name": "remoteOff",
    "memberof": "app/platform/electron/remote.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/remote.js~remoteOff",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": "{remoteOff}",
    "description": "使用 IPC 在渲染进程取消绑定主进程上的普通事件",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "names",
        "description": "事件名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1887,
    "kind": "function",
    "name": "onRequestQuit",
    "memberof": "app/platform/electron/remote.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/remote.js~onRequestQuit",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/remote.js",
    "importStyle": "{onRequestQuit}",
    "description": "绑定主进程通知将要关闭应用程序事件",
    "lineNumber": 190,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "事件 ID"
    }
  },
  {
    "__docId__": 1888,
    "kind": "file",
    "name": "app/platform/electron/screenshot.js",
    "content": "import RecordRTC from 'recordrtc';\nimport {\n    desktopCapturer, screen as Screen, remote as Remote, clipboard,\n} from 'electron';\nimport ui from './ui';\nimport {saveImage} from './image';\nimport env from './env';\nimport Lang from '../../lang';\nimport RemoteEvents, {ipcOnce} from './remote';\n\n/* This is NEEDED because RecordRTC is badly written */\nglobal.html2canvas = (canvas, obj) => {\n    obj.onrendered(canvas);\n};\n\n/**\n * 保存上次获取的媒体流数据\n * @type {MediaStream}\n * @private\n */\nlet lastSteam = null;\n\n/**\n * 停止媒体流\n * @private\n * @return {void}\n */\nconst stopStream = () => {\n    if (lastSteam) {\n        lastSteam.stop();\n        lastSteam = null;\n    }\n};\n\n/**\n * 获取媒体流\n * @param {number} sourceId 媒体 ID\n * @private\n * @returns {Promise<MediaStream>} 使用 Promise 异步返回处理结果\n */\nconst getStream = sourceId => {\n    return new Promise((resolve, reject) => {\n        stopStream();\n        desktopCapturer.getSources({types: ['screen']}, (error, sources) => {\n            if (error) {\n                reject(error);\n                return;\n            }\n\n            const display = getDisplay(sourceId);\n            const displayIndex = Screen.getAllDisplays().findIndex(item => item.id === sourceId);\n\n            const mediaConfig = {\n                audio: false,\n                video: {\n                    mandatory: {\n                        chromeMediaSource: 'desktop',\n                        chromeMediaSourceId: sources[displayIndex].id,\n                        maxWidth: display.size.width,\n                        maxHeight: display.size.height,\n                        minWidth: display.size.width,\n                        minHeight: display.size.height\n                    }\n                }\n            };\n\n            navigator.webkitGetUserMedia(mediaConfig, stream => {\n                lastSteam = stream;\n                resolve(stream);\n            }, reject);\n        });\n    });\n};\n\n/**\n * 获取视频流\n * @param {MediaStream} stream 媒体流\n * @private\n * @returns {Promise<HTMLVideoElement>} 使用 Promise 异步返回处理结果\n */\nconst getVideo = stream => {\n    return new Promise(resolve => {\n        const video = document.createElement('video');\n        video.autoplay = true;\n        video.src = URL.createObjectURL(stream);\n        video.addEventListener('playing', () => {\n            resolve(video);\n        });\n    });\n};\n\n/**\n * 创建 Canvas 元素\n * @param {number} width Canvas 宽度\n * @param {number} height Canvas 高度\n * @return {HTMLCanvasElement} Canvas 元素\n * @private\n */\nconst getCanvas = (width, height) => {\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n};\n\n/**\n * 在 Canvas 上绘制视频帧\n * @param {{ctx: CanvasRenderingContext2D, video: HTMLVideoElement, x: number, y: number, width: number, height: number, availTop: number}} param0 帧参数\n * @return {void}\n */\nconst drawFrame = ({\n    ctx, video, x, y, width, height, availTop = window.screen.availTop\n}) => {\n    ctx.drawImage(video, x, y, width, height, 0, -availTop, width, height);\n};\n\n/**\n * 获取 Canvas 元素上的图像\n * @param {HTMLCanvasElement} canvas Canvas 元素\n * @return {string} 以 DataUrl 格式返回图片内容\n */\nconst getFrameImage = canvas => {\n    return canvas.toDataURL();\n};\n\n/**\n * 获取媒体 Display 信息\n * @param {number} id 媒体 ID\n * @return {Electron.Display} Electron Display 对象\n */\nconst getDisplay = id => {\n    if (id) {\n        return Screen.getAllDisplays().find(item => item.id === id);\n    }\n    return Screen.getPrimaryDisplay();\n};\n\n/**\n * 获取帧循环函数\n * @param {function} fn 回调函数\n * @return {function} 帧循环函数\n */\nconst getLoop = fn => {\n    let requestId;\n    const callFn = () => {\n        requestId = requestAnimationFrame(callFn);\n        fn();\n    };\n    callFn();\n    return () => {\n        cancelAnimationFrame(requestId);\n    };\n};\n\n/**\n * 开始录屏\n * @param {{canvas: HTMLCanvasElement, video: HTMLVideoElement, x: number, y: number, width: number, height: number, availTop: number}} param0 帧参数\n * @return {{stop: function, pause: function, resume: function}} 录屏操作对象\n */\nconst startRecording = ({\n    canvas, video, x, y, width, height, availTop\n}) => {\n    const recorder = RecordRTC(canvas, {type: 'canvas'});\n    const ctx = canvas.getContext('2d');\n    const stopLoop = getLoop(() => drawFrame({\n        ctx, video, x, y, width, height, availTop\n    }));\n\n    recorder.startRecording();\n\n    return {\n        stop() {\n            return new Promise(resolve => {\n                stopLoop();\n                recorder.stopRecording(() => {\n                    recorder.getDataURL(url => resolve({url, width, height}));\n                });\n            });\n        },\n        pause() {\n            recorder.pauseRecording();\n        },\n        resume() {\n            recorder.resumeRecording();\n        }\n    };\n};\n\n/**\n * 获取指定媒体屏幕快照\n * @param {{x: number, y: number, width: number, height: number, sourceId: number}} param0 快照参数\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const takeScreenshot = ({\n    x = 0, y = 0, width = 0, height = 0, sourceId = 0\n}) => {\n    const display = getDisplay(sourceId);\n    const availTop = window.screen.availTop - display.bounds.y;\n    sourceId = display.id;\n\n    if (!width) {\n        // eslint-disable-next-line prefer-destructuring\n        width = display.bounds.width;\n    }\n    if (!height) {\n        // eslint-disable-next-line prefer-destructuring\n        height = display.bounds.height;\n    }\n\n    return getStream(sourceId)\n        .then(getVideo)\n        .then(video => {\n            const canvas = getCanvas(width, height);\n            const ctx = canvas.getContext('2d');\n            drawFrame({\n                ctx, video, x, y, width, height, availTop,\n            });\n            stopStream();\n            return getFrameImage(canvas);\n        }).catch(error => {\n            stopStream();\n            return Promise.reject(error);\n        });\n};\n\n/**\n * 获取所有媒体屏幕快照\n * @param {{x: number, y: number, width: number, height: number, sourceId: number}[]} options 快照参数\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const takeAllScreenshots = (options) => {\n    if (!options) {\n        options = Screen.getAllDisplays().map(item => {\n            return {\n                x: 0,\n                y: 0,\n                width: item.bounds.width,\n                height: item.bounds.height,\n                sourceId: item.id\n            };\n        });\n    }\n    if (Array.isArray(options)) {\n        return Promise.all(options.map(option => {\n            return takeScreenshot(option);\n        }));\n    }\n    return takeScreenshot(options);\n};\n\n/**\n * 获取指定媒体屏幕视频\n * @param {{x: number, y: number, width: number, height: number, sourceId: number}} param0 屏幕视频参数\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const captureVideo = ({\n    x, y, width, height, sourceId\n}) => {\n    const display = getDisplay(sourceId);\n    const availTop = window.screen.availTop - display.bounds.y;\n    sourceId = display.id;\n    return getStream(sourceId)\n        .then(getVideo)\n        .then(video => {\n            const canvas = getCanvas(width, height);\n            return startRecording({\n                canvas, video, x, y, width, height, availTop\n            });\n        });\n};\n\n/**\n * 获取屏幕快照并保存为图片\n * @param {{x: number, y: number, width: number, height: number, sourceId: number}} options 屏幕快照参数\n * @param {string} filePath 图片保存路径\n * @param {boolean} hideCurrentWindow 是否隐藏当前窗口\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const saveScreenshotImage = (options, filePath, hideCurrentWindow) => {\n    if (!options) {\n        options = {};\n    }\n    if (!filePath) {\n        filePath = ui.makeTmpFilePath('.png');\n    }\n    const processImage = base64Image => {\n        if (hideCurrentWindow) {\n            ui.browserWindow.show();\n        }\n        return saveImage(base64Image, filePath);\n    };\n    if (hideCurrentWindow && ui.browserWindow.isVisible()) {\n        if (env.isWindowsOS) {\n            const hideWindowTask = () => {\n                ui.browserWindow.hide();\n                return new Promise((resolve, reject) => {\n                    setTimeout(resolve, 600);\n                });\n            };\n            return hideWindowTask().then(() => {\n                return takeScreenshot(options);\n            }).then(processImage);\n        }\n        ui.browserWindow.hide();\n    }\n    return takeScreenshot(options).then(processImage);\n};\n\n/**\n * 打开截图窗口\n * @param {{path: string}|FileData} file 快照图片对象\n * @param {Electron.Display} display Electron Display 对象\n * @param {function} onClosed 窗口关闭时的回调函数\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const openCaptureScreenWindow = (file, display, onClosed) => {\n    return new Promise((resolve, reject) => {\n        const captureWindow = new Remote.BrowserWindow({\n            x: display ? display.bounds.x : 0,\n            y: display ? display.bounds.y : 0,\n            width: display ? display.bounds.width : window.screen.width,\n            height: display ? display.bounds.height : window.screen.height,\n            alwaysOnTop: !DEBUG,\n            fullscreen: true,\n            frame: true,\n            show: false,\n            title: `${Lang.string('imageCutter.captureScreen')} - ${display.id}`,\n            titleBarStyle: 'hidden',\n            resizable: false,\n        });\n        if (DEBUG) {\n            captureWindow.openDevTools();\n        }\n        captureWindow.loadURL(`file://${ui.appRoot}/index.html#image-cutter/${encodeURIComponent(file.path)}`);\n        captureWindow.webContents.on('did-finish-load', () => {\n            captureWindow.show();\n            captureWindow.focus();\n            resolve(captureWindow);\n        });\n        if (onClosed) {\n            captureWindow.on('closed', onClosed);\n        }\n    });\n};\n\n/**\n * 存储当前是否正在截屏中\n * @type {boolean}\n * @private\n */\nlet isCapturing = false;\n\n/**\n * 获取屏幕快照并进行截图操作\n * @param {number|string} [screenSources=0] 如果为 `0` 或 `'all'` 则为所有屏幕截图，否则指定一个屏幕媒体 ID 针对指定的屏幕进行截图\n * @param {boolean} [hideCurrentWindow=false] 获取屏幕快照时是否隐藏当前窗口\n * @returns {Promise} 使用 Promise 异步返回处理结果\n */\nexport const captureAndCutScreenImage = (screenSources = 0, hideCurrentWindow = false) => {\n    if (isCapturing) {\n        return Promise.reject(new Error('The capture window is already opened.'));\n    }\n    isCapturing = true;\n    if (!screenSources || screenSources === 'all') {\n        const displays = Screen.getAllDisplays();\n        screenSources = displays.map(display => {\n            display.sourceId = display.id;\n            return display;\n        });\n    }\n    if (!Array.isArray(screenSources)) {\n        screenSources = [screenSources];\n    }\n    hideCurrentWindow = hideCurrentWindow && ui.browserWindow.isVisible();\n    return new Promise((resolve, reject) => {\n        const captureScreenWindows = [];\n        const eventId = ipcOnce(RemoteEvents.EVENT.capture_screen, (e, image) => {\n            if (captureScreenWindows) {\n                captureScreenWindows.forEach(captureWindow => {\n                    captureWindow.close();\n                });\n            }\n            if (hideCurrentWindow) {\n                ui.browserWindow.show();\n                ui.browserWindow.focus();\n            }\n            if (image) {\n                const filePath = ui.makeTmpFilePath('.png');\n                Image.saveImage(image.data, filePath).then(savedImage => {\n                    if (savedImage && savedImage.path) {\n                        clipboard.writeImage(Image.createFromPath(savedImage.path));\n                    }\n\n                    resolve(savedImage);\n                    return savedImage;\n                }).catch(reject);\n            } else if (DEBUG) {\n                console.log('No capture image.');\n            }\n            isCapturing = false;\n        });\n        const onWindowClosed = () => {\n            RemoteEvents.off(eventId);\n        };\n        const takeScreenshots = () => {\n            return Promise.all(screenSources.map(screenSource => {\n                return saveScreenshotImage(screenSource, '').then(file => {\n                    return openCaptureScreenWindow(file, screenSource, onWindowClosed).then(captureWindow => {\n                        captureScreenWindows.push(captureWindow);\n                        return Promise.resolve();\n                    });\n                });\n            }));\n        };\n        if (hideCurrentWindow) {\n            ui.browserWindow.hide();\n            setTimeout(() => {\n                takeScreenshots();\n            }, env.isWindowsOS ? 600 : 0);\n        } else {\n            takeScreenshots();\n        }\n    });\n};\n\nexport default {\n    takeScreenshot,\n    captureVideo,\n    takeAllScreenshots,\n    saveScreenshotImage,\n    captureAndCutScreenImage\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/screenshot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1889,
    "kind": "variable",
    "name": "lastSteam",
    "memberof": "app/platform/electron/screenshot.js",
    "static": true,
    "longname": "app/platform/electron/screenshot.js~lastSteam",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "保存上次获取的媒体流数据",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "MediaStream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1890,
    "kind": "function",
    "name": "stopStream",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~stopStream",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "停止媒体流",
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1891,
    "kind": "function",
    "name": "getStream",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~getStream",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "获取媒体流",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<MediaStream>} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceId",
        "description": "媒体 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<MediaStream>"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1892,
    "kind": "function",
    "name": "getVideo",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~getVideo",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "获取视频流",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<HTMLVideoElement>} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "媒体流"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<HTMLVideoElement>"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1893,
    "kind": "function",
    "name": "getCanvas",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~getCanvas",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "创建 Canvas 元素",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Canvas 宽度"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Canvas 高度"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": "Canvas 元素"
    }
  },
  {
    "__docId__": 1894,
    "kind": "function",
    "name": "drawFrame",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~drawFrame",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "在 Canvas 上绘制视频帧",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "{ctx: CanvasRenderingContext2D, video: HTMLVideoElement, x: number, y: number, width: number, height: number, availTop: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "param0",
        "description": "帧参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1895,
    "kind": "function",
    "name": "getFrameImage",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~getFrameImage",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "获取 Canvas 元素上的图像",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "Canvas 元素"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "以 DataUrl 格式返回图片内容"
    }
  },
  {
    "__docId__": 1896,
    "kind": "function",
    "name": "getDisplay",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~getDisplay",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "获取媒体 Display 信息",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "媒体 ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Electron.Display"
      ],
      "spread": false,
      "description": "Electron Display 对象"
    }
  },
  {
    "__docId__": 1897,
    "kind": "function",
    "name": "getLoop",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~getLoop",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "获取帧循环函数",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "帧循环函数"
    }
  },
  {
    "__docId__": 1898,
    "kind": "function",
    "name": "startRecording",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~startRecording",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "开始录屏",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "{canvas: HTMLCanvasElement, video: HTMLVideoElement, x: number, y: number, width: number, height: number, availTop: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "param0",
        "description": "帧参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{stop: function, pause: function, resume: function}"
      ],
      "spread": false,
      "description": "录屏操作对象"
    }
  },
  {
    "__docId__": 1899,
    "kind": "function",
    "name": "takeScreenshot",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~takeScreenshot",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": "{takeScreenshot}",
    "description": "获取指定媒体屏幕快照",
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{x: number, y: number, width: number, height: number, sourceId: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "param0",
        "description": "快照参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1900,
    "kind": "function",
    "name": "takeAllScreenshots",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~takeAllScreenshots",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": "{takeAllScreenshots}",
    "description": "获取所有媒体屏幕快照",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{x: number, y: number, width: number, height: number, sourceId: number}[]"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "快照参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1901,
    "kind": "function",
    "name": "captureVideo",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~captureVideo",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": "{captureVideo}",
    "description": "获取指定媒体屏幕视频",
    "lineNumber": 256,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{x: number, y: number, width: number, height: number, sourceId: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "param0",
        "description": "屏幕视频参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1902,
    "kind": "function",
    "name": "saveScreenshotImage",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~saveScreenshotImage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": "{saveScreenshotImage}",
    "description": "获取屏幕快照并保存为图片",
    "lineNumber": 279,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{x: number, y: number, width: number, height: number, sourceId: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "屏幕快照参数"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "图片保存路径"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "hideCurrentWindow",
        "description": "是否隐藏当前窗口"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1903,
    "kind": "function",
    "name": "openCaptureScreenWindow",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~openCaptureScreenWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": "{openCaptureScreenWindow}",
    "description": "打开截图窗口",
    "lineNumber": 316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{path: string}|FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "快照图片对象"
      },
      {
        "nullable": null,
        "types": [
          "Electron.Display"
        ],
        "spread": false,
        "optional": false,
        "name": "display",
        "description": "Electron Display 对象"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onClosed",
        "description": "窗口关闭时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1904,
    "kind": "variable",
    "name": "isCapturing",
    "memberof": "app/platform/electron/screenshot.js",
    "static": true,
    "longname": "app/platform/electron/screenshot.js~isCapturing",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": null,
    "description": "存储当前是否正在截屏中",
    "lineNumber": 351,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1905,
    "kind": "function",
    "name": "captureAndCutScreenImage",
    "memberof": "app/platform/electron/screenshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/screenshot.js~captureAndCutScreenImage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/screenshot.js",
    "importStyle": "{captureAndCutScreenImage}",
    "description": "获取屏幕快照并进行截图操作",
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "screenSources",
        "description": "如果为 `0` 或 `'all'` 则为所有屏幕截图，否则指定一个屏幕媒体 ID 针对指定的屏幕进行截图"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "hideCurrentWindow",
        "description": "获取屏幕快照时是否隐藏当前窗口"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 1906,
    "kind": "file",
    "name": "app/platform/electron/shortcut.js",
    "content": "import {remote} from 'electron';\n\n/**\n * 保存所有注册的全局快捷键\n * @type {Object}\n * @private\n */\nconst shortcuts = {};\n\n/**\n * 取消注册全局快捷键\n * @param  {string} name 要取消的快捷键名称\n * @return {void}\n */\nconst unregisterGlobalShortcut = (name) => {\n    const accelerator = shortcuts[name];\n    if (accelerator) {\n        try {\n            remote.globalShortcut.unregister(accelerator);\n        } catch (err) {\n            if (DEBUG) {\n                console.warn('Unregister shortcut error:', name, err);\n            }\n        }\n        delete shortcuts[name];\n        if (DEBUG) {\n            console.color(`GLOBAL HOTKEY REMOVE ${name}: ${accelerator}`, 'purpleOutline');\n        }\n    }\n};\n\n/**\n * 注册全局快捷键\n * @param  {string} name 快捷键名称\n * @param  {Accelerator} accelerator 快捷键组合\n * @param  {function} callback 快捷键被激活时的回调函数\n * @return {void}\n */\nconst registerGlobalShortcut = (name, accelerator, callback) => {\n    unregisterGlobalShortcut(name);\n    if (accelerator) {\n        shortcuts[name] = accelerator;\n        try {\n            remote.globalShortcut.register(accelerator, () => {\n                if (DEBUG) {\n                    console.color(`GLOBAL KEY ACTIVE ${name}: ${accelerator}`, 'redOutline');\n                }\n                callback();\n            });\n        } catch (err) {\n            if (DEBUG) {\n                console.warn('Register shortcut error:', name, accelerator, err);\n            }\n        }\n        if (DEBUG) {\n            console.color(`GLOBAL HOTKEY BIND ${name}: ${accelerator}`, 'purpleOutline');\n        }\n    } else if (DEBUG) {\n        console.color(`GLOBAL HOTKEY BIND ${name}: error`, 'purpleOutline', 'Cannot bind empty accelerator', 'red');\n    }\n};\n\n/**\n * 检查全局快捷键是否被注册\n * @param {Accelerator} accelerator 快捷键组合\n * @returns {boolean} 如果返回 `true` 则为被注册，否则为没有被注册\n */\nconst isGlobalShortcutRegistered = (accelerator) => remote.globalShortcut.isRegistered(accelerator);\n\nexport default {\n    unregisterAll: remote.globalShortcut.unregisterAll,\n    unregisterGlobalShortcut,\n    registerGlobalShortcut,\n    isGlobalShortcutRegistered\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/shortcut.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1907,
    "kind": "variable",
    "name": "shortcuts",
    "memberof": "app/platform/electron/shortcut.js",
    "static": true,
    "longname": "app/platform/electron/shortcut.js~shortcuts",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/shortcut.js",
    "importStyle": null,
    "description": "保存所有注册的全局快捷键",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1908,
    "kind": "function",
    "name": "unregisterGlobalShortcut",
    "memberof": "app/platform/electron/shortcut.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/shortcut.js~unregisterGlobalShortcut",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/shortcut.js",
    "importStyle": null,
    "description": "取消注册全局快捷键",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "要取消的快捷键名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1909,
    "kind": "function",
    "name": "registerGlobalShortcut",
    "memberof": "app/platform/electron/shortcut.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/shortcut.js~registerGlobalShortcut",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/shortcut.js",
    "importStyle": null,
    "description": "注册全局快捷键",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "快捷键名称"
      },
      {
        "nullable": null,
        "types": [
          "Accelerator"
        ],
        "spread": false,
        "optional": false,
        "name": "accelerator",
        "description": "快捷键组合"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "快捷键被激活时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1910,
    "kind": "function",
    "name": "isGlobalShortcutRegistered",
    "memberof": "app/platform/electron/shortcut.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/shortcut.js~isGlobalShortcutRegistered",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/shortcut.js",
    "importStyle": null,
    "description": "检查全局快捷键是否被注册",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为被注册，否则为没有被注册"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Accelerator"
        ],
        "spread": false,
        "optional": false,
        "name": "accelerator",
        "description": "快捷键组合"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为被注册，否则为没有被注册"
    }
  },
  {
    "__docId__": 1911,
    "kind": "file",
    "name": "app/platform/electron/socket.js",
    "content": "import WS from 'ws';\nimport Config from '../../config';\nimport crypto from './crypto';\nimport Status from '../../utils/status';\n\n/**\n * Socket 连接状态管理器\n * @type {Status}\n * @private\n */\nconst STATUS = new Status({\n    CONNECTING: 0, // 连接还没开启。\n    OPEN: 1, // 连接已开启并准备好进行通信。\n    CLOSING: 2, // 连接正在关闭的过程中。\n    CLOSED: 3, // 连接已经关闭，或者连接无法建立。\n    UNCONNECT: 4, // 未连接\n}, 4);\n\n/**\n * Socket 连接管理类（Electron）\n *\n * @export\n * @class Socket\n */\nexport default class Socket {\n    /**\n     * Socket 连接状态管理器\n     * @type {Status}\n     * @static\n     * @memberof Socket\n     */\n    static STATUS = STATUS;\n\n    /**\n     * 创建一个 Socket 类实例\n     * @param {string} url Socket 连接地址\n     * @param {Object} options Socket 连接选项\n     * @memberof Socket\n     */\n    constructor(url, options) {\n        this._status = STATUS.create(STATUS.UNCONNECT);\n        this._status.onChange = (newStatus, oldStatus) => {\n            if (this.onStatusChange) {\n                this.onStatusChange(newStatus, oldStatus);\n            }\n        };\n\n        if (url) {\n            this.init(url, options);\n        }\n    }\n\n    /**\n     * 初始化 Socket 连接\n     * @param {string} url Socket 连接地址\n     * @param {Object} options Socket 连接选项\n     * @return {void}\n     */\n    init(url, options) {\n        // Close socket before init\n        this.close();\n\n        options = Object.assign({\n            connent: true,\n            userToken: '',\n            cipherIV: '',\n            encryptEnable: true,\n        }, options);\n\n        this.options = options;\n        this.url = url;\n        this._status.change(STATUS.UNCONNECT);\n\n        if (this.onInit) {\n            this.onInit();\n        }\n\n        if (DEBUG) {\n            console.collapse('SOCKET Init', 'indigoBg', this.url, 'indigoPale', this.statusName, this.isConnected ? 'greenPale' : 'orangePale');\n            console.trace('socket', this);\n            console.groupEnd();\n        }\n\n        if (options.connect && this.url) {\n            this.connect();\n        }\n    }\n\n    /**\n     * 获取状态值\n     * @memberof Member\n     * @type {number}\n     */\n    get status() {\n        return this._status.value;\n    }\n\n    /**\n     * 获取状态名称\n     * @memberof Member\n     * @type {string}\n     * @readonly\n     */\n    get statusName() {\n        return this._status.name;\n    }\n\n    /**\n     * 设置状态\n     * @param {string|number} newStatus 状态值或名称\n     * @memberof Member\n     */\n    set status(newStatus) {\n        this._status.change(newStatus);\n    }\n\n    /**\n     * 获取是否连接成功\n     * @memberof Socket\n     * @type {boolean}\n     */\n    get isConnected() {\n        return this.isStatus(STATUS.OPEN);\n    }\n\n    /**\n     * 获取是否正在连接中\n     * @memberof Socket\n     * @type {boolean}\n     */\n    get isConnecting() {\n        return this.isStatus(STATUS.CONNECTING);\n    }\n\n    /**\n     * 判断当前状态是否是给定的状态\n     * @memberof Member\n     * @param {number|string} status 要判断的状态值或状态名称\n     * @return {boolean} 如果为 `true` 则为给定的状态，否则不是\n     */\n    isStatus(status) {\n        return this._status.is(status);\n    }\n\n    /**\n     * 从 WebSocket 实例更新状态信息\n     *\n     * @memberof Socket\n     * @return {void}\n     */\n    updateStatusFromClient() {\n        if (this.client) {\n            this.status = this.client.readyState;\n        } else {\n            this.status = STATUS.UNCONNECT;\n        }\n    }\n\n    /**\n     * 开始连接\n     *\n     * @memberof Socket\n     * @return {void}\n     */\n    connect() {\n        this.close();\n\n        this.status = STATUS.CONNECTING;\n        this.client = new WS(this.url, {\n            rejectUnauthorized: false,\n            headers: {version: Config.pkg.version}\n        });\n\n        if (DEBUG) {\n            console.collapse('SOCKET Connect', 'indigoBg', this.url, 'indigoPale', this.statusName, this.isConnected ? 'greenPale' : 'orangePale');\n            console.log('socket', this);\n            console.groupEnd();\n        }\n\n        this.client.on('open', this.handleConnect.bind(this));\n        this.client.on('message', this.handleData.bind(this));\n        this.client.on('close', this.handleClose.bind(this));\n        this.client.on('error', this.handleError.bind(this));\n        this.client.on('unexpected-response', this.handleError.bind(this));\n        this.client.on('pong', this.handlePong.bind(this));\n        this.client.on('ping', this.handlePing.bind(this));\n    }\n\n    /**\n     * 重新连接\n     *\n     * @return {void}\n     * @memberof Socket\n     */\n    reconnect() {\n        return this.connect();\n    }\n\n    /**\n     * 处理 ping 事件\n     * @param {string|Buffer} data ping 数据\n     * @memberof Socket\n     * @return {void}\n     * @protected\n     */\n    handlePing(data) {\n        if (this.onPing) {\n            this.onPing(data);\n        }\n\n        if (this.options && this.options.onPing) {\n            this.options.onPing(this, data);\n        }\n    }\n\n    /**\n     * 处理 pong 事件\n     * @param {string|Buffer} data pong 数据\n     * @memberof Socket\n     * @return {void}\n     * @protected\n     */\n    handlePong(data) {\n        if (this.onPong) {\n            this.onPong(data);\n        }\n\n        if (this.options && this.options.onPong) {\n            this.options.onPong(this, data);\n        }\n    }\n\n    /**\n     * 处理连接成功事件\n     * @memberof Socket\n     * @return {void}\n     * @protected\n     */\n    handleConnect() {\n        this.updateStatusFromClient();\n\n        if (DEBUG) {\n            console.collapse('SOCKET Connected', 'indigoBg', this.url, 'indigoPale');\n            console.log('socket', this);\n            console.groupEnd();\n        }\n\n        if (this.options.onConnect) {\n            this.options.onConnect(this);\n        }\n\n        if (this.onConnect) {\n            this.onConnect();\n        }\n    }\n\n    /**\n     * 处理连接关闭事件\n     *\n     * @param {number} code 关闭代码\n     * @param {string} reason 关闭原因\n     * @memberof Socket\n     * @protected\n     * @return {void}\n     */\n    handleClose(code, reason) {\n        if (!this.isConnected) {\n            this.handleConnectFail({code, message: reason});\n        }\n\n        const unexpected = !this._status.is(STATUS.CLOSING);\n        this.updateStatusFromClient();\n        this.client = null;\n        this.status = STATUS.CLOSED;\n\n        if (DEBUG) {\n            console.collapse('SOCKET Closed', 'indigoBg', this.url, 'indigoPale');\n            console.log('socket', this);\n            console.log('code', code);\n            console.log('reason', reason);\n            console.groupEnd();\n        }\n\n        if (this.onClose) {\n            this.onClose(code, reason, unexpected);\n        }\n\n        if (this.options && this.options.onClose) {\n            this.options.onClose(this, code, reason, unexpected);\n        }\n    }\n\n    /**\n     * 处理连接失败事件\n     * @param {Event} e 连接失败事件对象\n     * @memberof Socket\n     * @return {void}\n     * @protected\n     */\n    handleConnectFail(e) {\n        if (this.onConnectFail) {\n            this.onConnectFail(e);\n        }\n        if (this.options && this.options.onConnectFail) {\n            this.options.onConnectFail(e);\n        }\n    }\n\n    /**\n     * 处理连接发生错误\n     *\n     * @param {Error} error 连接错误对象\n     * @memberof Socket\n     * @return {void}\n     * @protected\n     */\n    handleError(error) {\n        this.updateStatusFromClient();\n\n        if (DEBUG) {\n            console.collapse('SOCKET Error', 'redBg', this.url, 'redPale');\n            console.log('socket', this);\n            console.log('error', error);\n            console.groupEnd();\n        }\n\n        if (this.options.onError) {\n            this.options.onError(this, error);\n        }\n\n        if (this.onError) {\n            this.onError(error);\n        }\n    }\n\n    /**\n     * 处理接收到数据\n     *\n     * @param {Buffer|String} rawdata 接收到的数据\n     * @param {Options} flags 数据参数\n     * @memberof Socket\n     * @return {void}\n     * @protected\n     */\n    handleData(rawdata, flags) {\n        this.updateStatusFromClient();\n        let data = null;\n        if (flags && flags.binary) {\n            if (this.options.encryptEnable) {\n                data = crypto.decrypt(rawdata, this.options.userToken, this.options.cipherIV);\n            } else {\n                data = rawdata.toString();\n            }\n        }\n\n        if (this.options.onData) {\n            this.options.onData(this, data, flags);\n        }\n\n        if (this.onData) {\n            this.onData(data, flags);\n        }\n    }\n\n    /**\n     * 通过 Socket 连接向服务器发送数据\n     *\n     * @param {string|Buffer} rawdata 要发送的数据\n     * @param {function} callback 发送完成后的回调函数\n     * @memberof Socket\n     * @return {void}\n     */\n    send(rawdata, callback) {\n        let data = null;\n        if (this.options.encryptEnable) {\n            data = crypto.encrypt(rawdata, this.options.userToken, this.options.cipherIV);\n            // if (DEBUG) {\n            //     console.collapse('ENCRYPT Data', 'blueBg', `length: ${data.length}`, 'bluePale');\n            //     console.log('data', data);\n            //     console.log('rawdata', rawdata);\n            //     console.groupEnd();\n            // }\n        }\n\n        this.client.send(data, {\n            binary: this.options.encryptEnable\n        }, callback);\n    }\n\n    /**\n     * 将连接标记为关闭\n     *\n     * @memberof Socket\n     * @return {void}\n     */\n    markClose() {\n        this.status = STATUS.CLOSING;\n    }\n\n    /**\n     * 移除所有监听的事件\n     * @private\n     * @memberof Socket\n     * @return {void}\n     */\n    removeAllListeners() {\n        this.client.removeAllListeners();\n    }\n\n    /**\n     * 关闭 Socket 连接\n     * @param {number} code 关闭代码\n     * @param {string} reason 关闭原因\n     * @return {void}\n     */\n    close(code, reason) {\n        if (this.client) {\n            if (reason === 'close' || reason === 'KICKOFF') {\n                this.markClose();\n            }\n            this.removeAllListeners();\n            if (reason === true) {\n                this.client.terminate();\n            } else {\n                this.client.close(code || 1000);\n            }\n            this.handleClose(code, reason);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1912,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "app/platform/electron/socket.js",
    "static": true,
    "longname": "app/platform/electron/socket.js~STATUS",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/socket.js",
    "importStyle": null,
    "description": "Socket 连接状态管理器",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1913,
    "kind": "class",
    "name": "Socket",
    "memberof": "app/platform/electron/socket.js",
    "static": true,
    "longname": "app/platform/electron/socket.js~Socket",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/socket.js",
    "importStyle": "Socket",
    "description": "Socket 连接管理类（Electron）",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Socket"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 1914,
    "kind": "member",
    "name": "STATUS",
    "memberof": "app/platform/electron/socket.js~Socket",
    "static": true,
    "longname": "app/platform/electron/socket.js~Socket.STATUS",
    "access": "public",
    "description": "Socket 连接状态管理器",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Status"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1915,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#constructor",
    "access": "public",
    "description": "创建一个 Socket 类实例",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Socket 连接地址"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Socket 连接选项"
      }
    ]
  },
  {
    "__docId__": 1916,
    "kind": "member",
    "name": "_status",
    "memberof": "app/platform/electron/socket.js~Socket",
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#_status",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1917,
    "kind": "method",
    "name": "init",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#init",
    "access": "public",
    "description": "初始化 Socket 连接",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Socket 连接地址"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Socket 连接选项"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1918,
    "kind": "member",
    "name": "options",
    "memberof": "app/platform/electron/socket.js~Socket",
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#options",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1919,
    "kind": "member",
    "name": "url",
    "memberof": "app/platform/electron/socket.js~Socket",
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#url",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1920,
    "kind": "get",
    "name": "status",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#status",
    "access": "public",
    "description": "获取状态值",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1921,
    "kind": "get",
    "name": "statusName",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#statusName",
    "access": "public",
    "description": "获取状态名称",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1922,
    "kind": "set",
    "name": "status",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#status",
    "access": "public",
    "description": "设置状态",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newStatus",
        "description": "状态值或名称"
      }
    ]
  },
  {
    "__docId__": 1923,
    "kind": "get",
    "name": "isConnected",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#isConnected",
    "access": "public",
    "description": "获取是否连接成功",
    "lineNumber": 122,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1924,
    "kind": "get",
    "name": "isConnecting",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#isConnecting",
    "access": "public",
    "description": "获取是否正在连接中",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1925,
    "kind": "method",
    "name": "isStatus",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#isStatus",
    "access": "public",
    "description": "判断当前状态是否是给定的状态",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "要判断的状态值或状态名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果为 `true` 则为给定的状态，否则不是"
    }
  },
  {
    "__docId__": 1926,
    "kind": "method",
    "name": "updateStatusFromClient",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#updateStatusFromClient",
    "access": "public",
    "description": "从 WebSocket 实例更新状态信息",
    "lineNumber": 151,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1929,
    "kind": "method",
    "name": "connect",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#connect",
    "access": "public",
    "description": "开始连接",
    "lineNumber": 165,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1931,
    "kind": "member",
    "name": "client",
    "memberof": "app/platform/electron/socket.js~Socket",
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#client",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1932,
    "kind": "method",
    "name": "reconnect",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#reconnect",
    "access": "public",
    "description": "重新连接",
    "lineNumber": 195,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1933,
    "kind": "method",
    "name": "handlePing",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#handlePing",
    "access": "protected",
    "description": "处理 ping 事件",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "ping 数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1934,
    "kind": "method",
    "name": "handlePong",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#handlePong",
    "access": "protected",
    "description": "处理 pong 事件",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "pong 数据"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1935,
    "kind": "method",
    "name": "handleConnect",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#handleConnect",
    "access": "protected",
    "description": "处理连接成功事件",
    "lineNumber": 239,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1936,
    "kind": "method",
    "name": "handleClose",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#handleClose",
    "access": "protected",
    "description": "处理连接关闭事件",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "关闭代码"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "关闭原因"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1939,
    "kind": "method",
    "name": "handleConnectFail",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#handleConnectFail",
    "access": "protected",
    "description": "处理连接失败事件",
    "lineNumber": 300,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "连接失败事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1940,
    "kind": "method",
    "name": "handleError",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#handleError",
    "access": "protected",
    "description": "处理连接发生错误",
    "lineNumber": 317,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "连接错误对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1941,
    "kind": "method",
    "name": "handleData",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#handleData",
    "access": "protected",
    "description": "处理接收到数据",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "rawdata",
        "description": "接收到的数据"
      },
      {
        "nullable": null,
        "types": [
          "Options"
        ],
        "spread": false,
        "optional": false,
        "name": "flags",
        "description": "数据参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1942,
    "kind": "method",
    "name": "send",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#send",
    "access": "public",
    "description": "通过 Socket 连接向服务器发送数据",
    "lineNumber": 373,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "rawdata",
        "description": "要发送的数据"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "发送完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1943,
    "kind": "method",
    "name": "markClose",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#markClose",
    "access": "public",
    "description": "将连接标记为关闭",
    "lineNumber": 396,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1945,
    "kind": "method",
    "name": "removeAllListeners",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#removeAllListeners",
    "access": "private",
    "description": "移除所有监听的事件",
    "lineNumber": 406,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1946,
    "kind": "method",
    "name": "close",
    "memberof": "app/platform/electron/socket.js~Socket",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/platform/electron/socket.js~Socket#close",
    "access": "public",
    "description": "关闭 Socket 连接",
    "lineNumber": 416,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "关闭代码"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "reason",
        "description": "关闭原因"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1947,
    "kind": "file",
    "name": "app/platform/electron/ui.js",
    "content": "import {\n    shell,\n    remote as Remote,\n} from 'electron';\nimport uuid from 'uuid/v4';\nimport Path from 'path';\nimport {onRequestQuit as onMainRequestQuit, callRemote} from './remote';\nimport shortcut from './shortcut';\nimport Lang from '../../lang';\nimport env from './env';\nimport getUrlMeta from './get-url-meta';\n\nif (DEBUG) {\n    global.$.Remote = Remote;\n}\n\n/**\n * 用户数据目录\n * @type {string}\n */\nexport const userDataPath = Remote.app.getPath('userData');\n\n/**\n * 当前应用窗口实例\n * @type {BrowserWindow}\n */\nexport const browserWindow = Remote.getCurrentWindow();\n\n/**\n * 处理请求退出回调函数\n * @type {function}\n * @private\n */\nlet onRequestQuitListener = null;\n\n/**\n * 创建用户个人目录\n * @param {{identify: string}|User} user 用户对象\n * @param {string} fileName 文件名称\n * @param {string} [dirName=images] 目录名称\n * @return {string} 用户个人目录\n */\nexport const createUserDataPath = (user, fileName, dirName = 'images') => {\n    return Path.join(userDataPath, 'users', user.identify, dirName, fileName);\n};\n\n/**\n * 创建临时文件\n * @param {string} ext 文件扩展名\n * @return {string} 临时文件保存路径\n */\nexport const makeTmpFilePath = (ext = '') => {\n    return Path.join(userDataPath, `tmp/${uuid()}${ext}`);\n};\n\n/**\n * 设置 Mac Dock 栏应用图标上的原点提示文本\n *\n * @param {string} label 提示文本\n * @memberof AppRemote\n * @return {void}\n */\nexport const setBadgeLabel = (label = '') => {\n    return callRemote('dockBadgeLabel', `${label || ''}`);\n};\n\n/**\n * 设置当前窗口是否在任务栏显示\n * @param {boolean} flag 是否在任务栏显示\n * @return {void}\n */\nexport const setShowInTaskbar = flag => {\n    return browserWindow.setSkipTaskbar(!flag);\n};\n\n/**\n * 设置工具栏图标上的工具提示文本\n * @param {string} tooltip 工具提示文本\n * @return {void}\n */\nexport const setTrayTooltip = tooltip => {\n    return callRemote('trayTooltip', tooltip);\n};\n\n/**\n * 设置是否闪烁通知栏图标\n * @param {boolean} [flash=true] 是否闪烁通知栏图标\n * @return {void}\n */\nexport const flashTrayIcon = (flash = true) => {\n    return callRemote('flashTrayIcon', flash);\n};\n\n/**\n * 显示应用窗口\n * @return {void}\n */\nexport const showWindow = () => {\n    browserWindow.show();\n};\n\n/**\n * 隐藏应用窗口\n * @return {void}\n */\nexport const hideWindow = () => {\n    browserWindow.minimize();\n};\n\n/**\n * 激活应用窗口\n * @return {void}\n */\nexport const focusWindow = () => {\n    browserWindow.focus();\n};\n\n/**\n * 关闭应用窗口\n * @return {void}\n */\nexport const closeWindow = () => {\n    browserWindow.close();\n};\n\n/**\n * 显示并隐藏应用窗口\n * @return {void}\n */\nexport const showAndFocusWindow = () => {\n    if (browserWindow.isMinimized()) {\n        browserWindow.restore();\n    } else {\n        showWindow();\n    }\n    focusWindow();\n};\n\n/**\n * 请求立即退出应用程序\n * @return {void}\n */\nexport const quitIM = () => {\n    callRemote('quit');\n};\n\n/**\n * 请求退出应用程序\n * @param {number} [delay=1000] 给定退出的宽限时间，单位毫秒\n * @param {boolean} [ignoreListener=false] 是否忽略监听事件（忽略询问用户建议）\n * @return {void}\n */\nexport const quit = (delay = 1000, ignoreListener = false) => {\n    if (delay !== true && !ignoreListener && onRequestQuitListener) {\n        if (onRequestQuitListener(delay) === false) {\n            return;\n        }\n    }\n\n    browserWindow.hide();\n    shortcut.unregisterAll();\n\n    if (delay && delay !== true) {\n        setTimeout(quitIM, delay);\n    } else {\n        quitIM();\n    }\n};\n\n/**\n * 绑定请求退出事件\n * @param {funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onRequestQuit = listener => {\n    onRequestQuitListener = listener;\n};\n\n/**\n * 绑定监听应用窗口获得焦点事件\n * @param {funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onWindowFocus = listener => {\n    browserWindow.on('focus', listener);\n};\n\n/**\n * 绑定监听应用窗口失去焦点事件\n * @param {funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onWindowBlur = listener => {\n    browserWindow.on('blur', listener);\n};\n\n/**\n * 绑定监听应用窗口最小化事件\n * @param {funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onWindowMinimize = listener => {\n    browserWindow.on('minimize', listener);\n};\n\n// 监听主进程请求退出事件\nonMainRequestQuit((sender, closeReason) => {\n    quit(closeReason);\n});\n\n/**\n * 显示用户点击关闭按钮之前询问用户建议对话框\n * @param {function} callback 回调函数\n * @return {void}\n */\nexport const showQuitConfirmDialog = (callback) => {\n    Remote.dialog.showMessageBox(browserWindow, {\n        type: 'question',\n        message: Lang.string('dialog.appClose.title'),\n        checkboxLabel: callback ? Lang.string('dialog.appClose.rememberOption') : undefined,\n        checkboxChecked: false,\n        cancelId: 2,\n        defaultId: 0,\n        buttons: [Lang.string('dialog.appClose.minimizeMainWindow'), Lang.string('dialog.appClose.quitApp'), Lang.string('dialog.appClose.cancelAction')],\n    }, (result, checked) => {\n        result = ['minimize', 'close', ''][result];\n        if (callback) {\n            result = callback(result, checked);\n        }\n        if (result === 'minimize') {\n            hideWindow();\n        } else if (result === 'close') {\n            quit(true);\n        }\n    });\n};\n\n/**\n * 打开开发者工具\n * @return {void}\n */\nexport const openDevTools = () => {\n    browserWindow.openDevTools();\n    // todo: Turn on debug mode\n};\n\n/**\n * 重新加载窗口\n * @return {void}\n */\nexport const reloadWindow = () => {\n    browserWindow.reload();\n};\n\n/**\n * 判断是否在操作系统登录后启动应用\n * @returns {boolean} 如果返回 `true` 则为是在操作系统登录后启动应用，否则为不是\n */\nexport const isOpenAtLogin = () => {\n    return Remote.app.getLoginItemSettings().openAtLogin;\n};\n\n/**\n * 设置是否在操作系统登录后启动应用\n * @param {boolean} openAtLogin 是否在操作系统登录后启动应用\n * @return {void}\n */\nexport const setOpenAtLogin = openAtLogin => {\n    Remote.app.setLoginItemSettings({openAtLogin});\n    // Fix disable openAtLogin not work in mac os, see https://github.com/electron/electron/issues/10880#issuecomment-356067655\n    if (!openAtLogin && env.isOSX) {\n        // eslint-disable-next-line no-undef\n        __non_webpack_require__('child_process').exec(`osascript -e 'tell application \"System Events\" to delete login item \"${Remote.app.getName()}\"'`);\n    }\n};\n\n/**\n * 复制在界面上选中的文本\n * @return {void}\n */\nexport const copySelectText = () => {\n    browserWindow.webContents.copy();\n};\n\n/**\n * 选择界面上所有文本\n * @return {void}\n */\nexport const selectAllText = () => {\n    browserWindow.webContents.selectAll();\n};\n\n// 监听应用窗口还原事件\nbrowserWindow.on('restore', () => {\n    setShowInTaskbar(true);\n});\n\n/**\n * 绑定监听应用窗口还原事件\n * @param {funcion} listener 事件回调函数\n * @return {Symbol} 使用 `Symbol` 存储的事件 ID，用于取消事件\n */\nexport const onWindowRestore = listener => {\n    browserWindow.on('restore', listener);\n};\n\n/**\n * 判断应用窗口是否获得焦点\n * @returns {boolean} 如果返回 `true` 则为是获得焦点，否则为不是获得焦点\n */\nexport const isWindowFocus = () => browserWindow.isFocused();\n\n/**\n * 判断应用窗口是否处于打开状态\n * @returns {boolean} 如果返回 `true` 则为是处于打开状态，否则为不是处于打开状态\n */\nexport const isWindowOpen = () => !browserWindow.isMinimized() && browserWindow.isVisible();\n\n/**\n * 判断应用窗口是否处于打开且获得焦点状态\n * @returns {boolean} 如果返回 `true` 则为是处于打开且获得焦点状态，否则为不是处于打开且获得焦点状态\n */\nexport const isWindowOpenAndFocus = () => browserWindow.isFocused() && !browserWindow.isMinimized() && browserWindow.isVisible();\n\n/**\n * 获取应用根目录路径\n * @return {string} 根目录路径\n */\nexport const getAppRoot = () => env.appRoot;\n\nexport default {\n    userDataPath,\n    browserWindow,\n    makeTmpFilePath,\n    openExternal: shell.openExternal,\n    showItemInFolder: shell.showItemInFolder,\n    openFileItem: shell.openItem,\n    setBadgeLabel,\n    setShowInTaskbar,\n    onWindowMinimize,\n    setTrayTooltip,\n    flashTrayIcon,\n    onRequestQuit,\n    onWindowFocus,\n    closeWindow,\n    openDevTools,\n    onWindowBlur,\n    onWindowRestore,\n\n    showWindow,\n    hideWindow,\n    focusWindow,\n    showAndFocusWindow,\n    showQuitConfirmDialog,\n    quit,\n    reloadWindow,\n    isOpenAtLogin,\n    setOpenAtLogin,\n    getUrlMeta,\n    createUserDataPath,\n    copySelectText,\n    selectAllText,\n\n    get isWindowFocus() {\n        return isWindowFocus();\n    },\n\n    get isWindowOpen() {\n        return isWindowOpen();\n    },\n\n    get isWindowOpenAndFocus() {\n        return isWindowOpenAndFocus();\n    },\n\n    get appRoot() {\n        return getAppRoot();\n    },\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/ui.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1948,
    "kind": "variable",
    "name": "userDataPath",
    "memberof": "app/platform/electron/ui.js",
    "static": true,
    "longname": "app/platform/electron/ui.js~userDataPath",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{userDataPath}",
    "description": "用户数据目录",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1949,
    "kind": "variable",
    "name": "browserWindow",
    "memberof": "app/platform/electron/ui.js",
    "static": true,
    "longname": "app/platform/electron/ui.js~browserWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{browserWindow}",
    "description": "当前应用窗口实例",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "BrowserWindow"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1950,
    "kind": "variable",
    "name": "onRequestQuitListener",
    "memberof": "app/platform/electron/ui.js",
    "static": true,
    "longname": "app/platform/electron/ui.js~onRequestQuitListener",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": null,
    "description": "处理请求退出回调函数",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1951,
    "kind": "function",
    "name": "createUserDataPath",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~createUserDataPath",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{createUserDataPath}",
    "description": "创建用户个人目录",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "{identify: string}|User"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "用户对象"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "文件名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "images",
        "defaultRaw": "images",
        "name": "dirName",
        "description": "目录名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "用户个人目录"
    }
  },
  {
    "__docId__": 1952,
    "kind": "function",
    "name": "makeTmpFilePath",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~makeTmpFilePath",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{makeTmpFilePath}",
    "description": "创建临时文件",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ext",
        "description": "文件扩展名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "临时文件保存路径"
    }
  },
  {
    "__docId__": 1953,
    "kind": "function",
    "name": "setBadgeLabel",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~setBadgeLabel",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{setBadgeLabel}",
    "description": "设置 Mac Dock 栏应用图标上的原点提示文本",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "提示文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1954,
    "kind": "function",
    "name": "setShowInTaskbar",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~setShowInTaskbar",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{setShowInTaskbar}",
    "description": "设置当前窗口是否在任务栏显示",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flag",
        "description": "是否在任务栏显示"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1955,
    "kind": "function",
    "name": "setTrayTooltip",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~setTrayTooltip",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{setTrayTooltip}",
    "description": "设置工具栏图标上的工具提示文本",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tooltip",
        "description": "工具提示文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1956,
    "kind": "function",
    "name": "flashTrayIcon",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~flashTrayIcon",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{flashTrayIcon}",
    "description": "设置是否闪烁通知栏图标",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "flash",
        "description": "是否闪烁通知栏图标"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1957,
    "kind": "function",
    "name": "showWindow",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~showWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{showWindow}",
    "description": "显示应用窗口",
    "lineNumber": 98,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1958,
    "kind": "function",
    "name": "hideWindow",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~hideWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{hideWindow}",
    "description": "隐藏应用窗口",
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1959,
    "kind": "function",
    "name": "focusWindow",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~focusWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{focusWindow}",
    "description": "激活应用窗口",
    "lineNumber": 114,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1960,
    "kind": "function",
    "name": "closeWindow",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~closeWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{closeWindow}",
    "description": "关闭应用窗口",
    "lineNumber": 122,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1961,
    "kind": "function",
    "name": "showAndFocusWindow",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~showAndFocusWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{showAndFocusWindow}",
    "description": "显示并隐藏应用窗口",
    "lineNumber": 130,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1962,
    "kind": "function",
    "name": "quitIM",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~quitIM",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{quitIM}",
    "description": "请求立即退出应用程序",
    "lineNumber": 143,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1963,
    "kind": "function",
    "name": "quit",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~quit",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{quit}",
    "description": "请求退出应用程序",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1000",
        "defaultRaw": 1000,
        "name": "delay",
        "description": "给定退出的宽限时间，单位毫秒"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "ignoreListener",
        "description": "是否忽略监听事件（忽略询问用户建议）"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1964,
    "kind": "function",
    "name": "onRequestQuit",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~onRequestQuit",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{onRequestQuit}",
    "description": "绑定请求退出事件",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1965,
    "kind": "function",
    "name": "onWindowFocus",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~onWindowFocus",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{onWindowFocus}",
    "description": "绑定监听应用窗口获得焦点事件",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1966,
    "kind": "function",
    "name": "onWindowBlur",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~onWindowBlur",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{onWindowBlur}",
    "description": "绑定监听应用窗口失去焦点事件",
    "lineNumber": 193,
    "params": [
      {
        "nullable": null,
        "types": [
          "funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1967,
    "kind": "function",
    "name": "onWindowMinimize",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~onWindowMinimize",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{onWindowMinimize}",
    "description": "绑定监听应用窗口最小化事件",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1968,
    "kind": "function",
    "name": "showQuitConfirmDialog",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~showQuitConfirmDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{showQuitConfirmDialog}",
    "description": "显示用户点击关闭按钮之前询问用户建议对话框",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1969,
    "kind": "function",
    "name": "openDevTools",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~openDevTools",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{openDevTools}",
    "description": "打开开发者工具",
    "lineNumber": 242,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1970,
    "kind": "function",
    "name": "reloadWindow",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~reloadWindow",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{reloadWindow}",
    "description": "重新加载窗口",
    "lineNumber": 251,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1971,
    "kind": "function",
    "name": "isOpenAtLogin",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~isOpenAtLogin",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{isOpenAtLogin}",
    "description": "判断是否在操作系统登录后启动应用",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是在操作系统登录后启动应用，否则为不是"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是在操作系统登录后启动应用，否则为不是"
    },
    "params": []
  },
  {
    "__docId__": 1972,
    "kind": "function",
    "name": "setOpenAtLogin",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~setOpenAtLogin",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{setOpenAtLogin}",
    "description": "设置是否在操作系统登录后启动应用",
    "lineNumber": 268,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "openAtLogin",
        "description": "是否在操作系统登录后启动应用"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1973,
    "kind": "function",
    "name": "copySelectText",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~copySelectText",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{copySelectText}",
    "description": "复制在界面上选中的文本",
    "lineNumber": 281,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1974,
    "kind": "function",
    "name": "selectAllText",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~selectAllText",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{selectAllText}",
    "description": "选择界面上所有文本",
    "lineNumber": 289,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1975,
    "kind": "function",
    "name": "onWindowRestore",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~onWindowRestore",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{onWindowRestore}",
    "description": "绑定监听应用窗口还原事件",
    "lineNumber": 303,
    "params": [
      {
        "nullable": null,
        "types": [
          "funcion"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "事件回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": "使用 `Symbol` 存储的事件 ID，用于取消事件"
    }
  },
  {
    "__docId__": 1976,
    "kind": "function",
    "name": "isWindowFocus",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~isWindowFocus",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{isWindowFocus}",
    "description": "判断应用窗口是否获得焦点",
    "lineNumber": 311,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是获得焦点，否则为不是获得焦点"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是获得焦点，否则为不是获得焦点"
    },
    "params": []
  },
  {
    "__docId__": 1977,
    "kind": "function",
    "name": "isWindowOpen",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~isWindowOpen",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{isWindowOpen}",
    "description": "判断应用窗口是否处于打开状态",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是处于打开状态，否则为不是处于打开状态"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是处于打开状态，否则为不是处于打开状态"
    },
    "params": []
  },
  {
    "__docId__": 1978,
    "kind": "function",
    "name": "isWindowOpenAndFocus",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~isWindowOpenAndFocus",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{isWindowOpenAndFocus}",
    "description": "判断应用窗口是否处于打开且获得焦点状态",
    "lineNumber": 323,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是处于打开且获得焦点状态，否则为不是处于打开且获得焦点状态"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是处于打开且获得焦点状态，否则为不是处于打开且获得焦点状态"
    },
    "params": []
  },
  {
    "__docId__": 1979,
    "kind": "function",
    "name": "getAppRoot",
    "memberof": "app/platform/electron/ui.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/ui.js~getAppRoot",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/ui.js",
    "importStyle": "{getAppRoot}",
    "description": "获取应用根目录路径",
    "lineNumber": 329,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "根目录路径"
    },
    "params": []
  },
  {
    "__docId__": 1980,
    "kind": "file",
    "name": "app/platform/electron/webview.js",
    "content": "import {createContextMenu, popupContextMenu} from './contextmenu';\nimport Lang from '../../lang';\n\n/**\n * 文本选择右键菜单\n * @type {Menu}\n * @private\n */\nconst SELECT_MENU = createContextMenu([\n    {role: 'copy', label: Lang.string('menu.copy')},\n    {type: 'separator'},\n    {role: 'selectall', label: Lang.string('menu.selectAll')}\n]);\n\n/**\n * 文本输入框右键菜单\n * @type {Menu}\n * @private\n */\nconst INPUT_MENU = createContextMenu([\n    {role: 'undo', label: Lang.string('menu.undo')},\n    {role: 'redo', label: Lang.string('menu.redo')},\n    {type: 'separator'},\n    {role: 'cut', label: Lang.string('menu.cut')},\n    {role: 'copy', label: Lang.string('menu.copy')},\n    {role: 'paste', label: Lang.string('menu.paste')},\n    {type: 'separator'},\n    {role: 'selectall', label: Lang.string('menu.selectAll')}\n]);\n\n/**\n * 初始化 WebView 上的右键菜单\n * @param {WebView} webview WebView 实例\n * @return {void}\n */\nexport const initWebview = (webview) => {\n    const webContents = webview.getWebContents();\n    if (webContents) {\n        webContents.on('context-menu', (e, props) => {\n            const {selectionText, isEditable} = props;\n            if (isEditable) {\n                popupContextMenu(INPUT_MENU, e.clientX, e.clientY);\n            } else if (selectionText && selectionText.trim() !== '') {\n                popupContextMenu(SELECT_MENU, e.clientX, e.clientY);\n            }\n        });\n    }\n};\n\nexport default {\n    initWebview,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/platform/electron/webview.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1981,
    "kind": "variable",
    "name": "SELECT_MENU",
    "memberof": "app/platform/electron/webview.js",
    "static": true,
    "longname": "app/platform/electron/webview.js~SELECT_MENU",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/webview.js",
    "importStyle": null,
    "description": "文本选择右键菜单",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1982,
    "kind": "variable",
    "name": "INPUT_MENU",
    "memberof": "app/platform/electron/webview.js",
    "static": true,
    "longname": "app/platform/electron/webview.js~INPUT_MENU",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/platform/electron/webview.js",
    "importStyle": null,
    "description": "文本输入框右键菜单",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Menu"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1983,
    "kind": "function",
    "name": "initWebview",
    "memberof": "app/platform/electron/webview.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/platform/electron/webview.js~initWebview",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/platform/electron/webview.js",
    "importStyle": "{initWebview}",
    "description": "初始化 WebView 上的右键菜单",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebView"
        ],
        "spread": false,
        "optional": false,
        "name": "webview",
        "description": "WebView 实例"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1984,
    "kind": "file",
    "name": "app/utils/color.js",
    "content": "/**\n * 十六进制匹配正则表达式\n * @type {RegExp}\n * @private\n */\nconst hexReg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\n\n/**\n * 将指定数值大小修正为指定区间范围内\n * @param {number} n 要修正的值\n * @param {number} end 最大值\n * @param {number} start 最大=小值\n * @return {number}\n * @private\n */\nconst fit = (n, end, start) => (Math.min(Math.max(n, start !== undefined ? start : 0), end !== undefined ? end : 255));\n\n/**\n * 将指定数值修正为不超过给定的最大值\n * @param {number} v 要修正的值\n * @param {number} max 最大值\n * @return {number}\n * @private\n */\nconst clamp = (v, max) => (fit(v, max));\n\n/**\n * 将字符串转换为数值类型，如果已经是数值类型，则返回原值\n * @param {any} n 要转换的值\n * @return {number}\n * @private\n */\nconst number = n => (typeof n === 'number' ? n : parseFloat(n));\n\n/**\n * 将指定数值修正为不超过给定的最大值，如果给定的数值是字符串则先转换为数值类型\n * @param {number} v 要修正的值\n * @param {number} max 最大值\n * @return {number}\n * @private\n */\nconst clampNumber = (x, max) => (clamp(number(x), max));\n\n/**\n * 将指定数值修正 RGB 分量取值范围，即 `0 <= x <= 256`\n * @param {number} x 要修正的值\n * @return {number}\n * @private\n */\nconst convertToRgbInt = x => (Number.parseInt(clampNumber(x, 255), 10));\n\n/**\n * 将 16 进制颜色值字符串转换为 RGB 对象\n * @param {string} hex 16 进制字符串\n * @return {{r: number, g: number, b: number, a: number}}\n * @private\n */\nconst hexToRgb = hex => {\n    if (hex && hexReg.test(hex)) {\n        hex = hex.toLowerCase();\n        if (hex.length === 4) {\n            let hexNew = '#';\n            for (let i = 1; i < 4; i++) {\n                hexNew += hex.slice(i, i + 1).concat(hex.slice(i, i + 1));\n            }\n            hex = hexNew;\n        }\n\n        const hexChange = [];\n        for (let i = 1; i < 7; i += 2) {\n            hexChange.push(Number.parseInt(`0x${hex.slice(i, i + 2)}`, 16));\n        }\n        return {\n            r: hexChange[0],\n            g: hexChange[1],\n            b: hexChange[2],\n            a: 1\n        };\n    }\n    throw new Error(`Wrong hex string! (hex: ${hex})`);\n};\n\n/**\n * 判断一个字符串是否是颜色值的有效表示方式\n * @param {string} hex 要判断的字符串\n * @return {boolean}\n * @private\n */\nconst isColor = hex => (typeof hex === 'string' && (hex.toLowerCase() === 'transparent' || hexReg.test(hex.trim().toLowerCase())));\n\n/**\n * 将一个 hsl 颜色表示对象转换为 rgb 表示对象\n * @param {{h: number, s: number, l: number, a: number}} hsl hsl 表示对象\n * @return {{r: number, g: number, b: number, a: number}}\n * @private\n */\nconst hslToRgb = hsl => {\n    const hue = h => {\n        h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n        if (h * 6 < 1) {\n            return m1 + ((m2 - m1) * h * 6);\n        }\n        if (h * 2 < 1) {\n            return m2;\n        }\n        if (h * 3 < 2) {\n            return m1 + ((m2 - m1) * ((2 / 3) - h) * 6);\n        }\n        return m1;\n    };\n\n    let {\n        h, s, l, a,\n    } = hsl;\n\n    h = (number(h) % 360) / 360;\n    s = clampNumber(s);\n    l = clampNumber(l);\n    a = clampNumber(a);\n\n    let m2 = l <= 0.5 ? l * (s + 1) : (l + s - (l * s));\n    let m1 = l * 2 - m2;\n\n    const r = {\n        r: hue(h + 1 / 3) * 255,\n        g: hue(h) * 255,\n        b: hue(h - 1 / 3) * 255,\n        a\n    };\n\n    return r;\n};\n\n/**\n * 将数值转换为 16 进制形式，如果不足 2 位，则在字符串前面补充 0\n * @param {number} x 要转换的数值\n * @return {string}\n * @private\n */\nconst toHexValue = x => {\n    const xHex = x.toString(16);\n    return xHex.length === 1 ? `0${xHex}` : xHex;\n};\n\n/**\n * 颜色类\n *\n * @class Color\n */\nexport default class Color {\n    /**\n     * 判断一个字符串是否是颜色值的有效表示方式\n     * @param {string} hex 要判断的字符串\n     * @return {boolean}\n     * @static\n     * @function\n     * @memberof Color\n     */\n    static isColor = isColor;\n\n    /**\n     * 将 16 进制颜色值字符串转换为 RGB 对象\n     * @param {string} hex 16 进制字符串\n     * @return {{r: number, g: number, b: number, a: number}}\n     * @static\n     * @function\n     * @memberof Color\n     */\n    static hexToRgb = hexToRgb;\n\n    /**\n     * 将一个 hsl 颜色表示对象转换为 rgb 表示对象\n     * @param {{h: number, s: number, l: number, a: number}} hsl hsl 表示对象\n     * @return {{r: number, g: number, b: number, a: number}}\n     * @static\n     * @function\n     * @memberof Color\n     */\n    static hslToRgb = hslToRgb;\n\n    /**\n     * 创建一个颜色实例\n     * @static\n     * @param {Color|sting|object|number} r 可以为 Red 通道值或者 hsla 对象或者 rgba 对象或者表示颜色的字符串\n     * @param {?number} g Green 通道值\n     * @param {?number} b Blue 通道值\n     * @param {?number} [a=1] Alpha 通道值\n     * @return {color}\n     * @memberof Color\n     * @function\n     */\n    static create(r, g, b, a) {\n        if (r instanceof Color) {\n            return r;\n        }\n        return new Color(r, g, b, a);\n    }\n\n    /**\n     * 创建一个颜色类实例\n     *\n     * @param {sting|object|number} r 可以为 Red 通道值或者 hsla 对象或者 rgba 对象或者表示颜色的字符串\n     * @param {?number} g Green 通道值\n     * @param {?number} b Blue 通道值\n     * @param {?number} [a=1] Alpha 通道值\n     * @constructor\n     */\n    constructor(r, g, b, a = 1) {\n        this.init(r, g, b, a);\n    }\n\n    /**\n     * 初始化颜色值\n     *\n     * @param {sting|object|number} r 可以为 Red 通道值或者 hsla 对象或者 rgba 对象或者表示颜色的字符串\n     * @param {?number} g Green 通道值\n     * @param {?number} b Blue 通道值\n     * @param {?number} [a=1] Alpha 通道值\n     * @memberof Color\n     * @return {void}\n     */\n    init(r, g, b, a = 1) {\n        this.r = 0;\n        this.g = 0;\n        this.b = 0;\n        this.A = a;\n\n        const paramType = typeof r;\n        if (paramType === 'string') {\n            const hex = r.toLowerCase();\n            if (hex === 'transparent') {\n                this.A = 0;\n            } else {\n                this.rgb = hexToRgb(hex);\n            }\n        } else if (paramType === 'number') {\n            this.R = r;\n            this.G = g;\n            this.B = b;\n        } else if (paramType === 'object') {\n            const obj = r;\n            if (obj.h !== undefined) {\n                const hsl = {\n                    h: clampNumber(obj.h, 360),\n                    s: 1,\n                    l: 1,\n                    a: this.A\n                };\n                if (obj.s !== undefined) hsl.s = clampNumber(obj.s, 1);\n                if (obj.l !== undefined) hsl.l = clampNumber(obj.l, 1);\n                if (obj.a !== undefined) hsl.a = clampNumber(obj.a, 1);\n                this.rgb = hslToRgb(hsl);\n            } else {\n                this.rgb = obj;\n            }\n        }\n    }\n\n    /**\n     * 获取颜色以 RGB 格式表示的 Red 通道值\n     * @memberof Color\n     * @type {number}\n     */\n    get R() {\n        return this.r;\n    }\n\n    /**\n     * 以 RGB 格式设置颜色 Red 通道值\n     * @memberof Color\n     * @param {number} r Red 通道值\n     */\n    set R(r) {\n        this.r = convertToRgbInt(r);\n    }\n\n    /**\n     * 获取颜色以 RGB 格式表示的 Green 通道值\n     * @memberof Color\n     * @type {number}\n     */\n    get G() {\n        return this.g;\n    }\n\n    /**\n     * 以 RGB 格式设置颜色 Green 通道值\n     * @memberof Color\n     * @param {number} r Green 通道值\n     */\n    set G(g) {\n        this.g = convertToRgbInt(g);\n    }\n\n    /**\n     * 获取颜色以 RGB 格式表示的 Blue 通道值\n     * @memberof Color\n     * @type {number}\n     */\n    get B() {\n        return this.b;\n    }\n\n    /**\n     * 以 RGB 格式设置颜色 Blue 通道值\n     * @memberof Color\n     * @param {number} r Blue 通道值\n     */\n    set B(b) {\n        this.b = convertToRgbInt(b);\n    }\n\n    /**\n     * 获取颜色以 RGB 格式表示的 Alpha 通道值\n     * @memberof Color\n     * @type {number}\n     */\n    get A() {\n        return this.a;\n    }\n\n    /**\n     * 以 RGB 格式设置颜色 Alpha 通道值\n     * @memberof Color\n     * @param {number} r Alpha 通道值\n     */\n    set A(a) {\n        this.a = clampNumber(a, 1);\n    }\n\n    /**\n     * 获取颜色以 RGB 格式表示的对象\n     * @memberof Color\n     * @type {{r: number, g: number, b: number, a: number}}\n     */\n    get rbg() {\n        return {\n            r: this.r,\n            g: this.g,\n            b: this.b,\n            a: this.a\n        };\n    }\n\n    /**\n     * 使用 RGB 格式更新颜色值\n     * @memberof Color\n     * @param {{r: ?number, g: ?number, b: ?number, a: ?number}} rgb\n     */\n    set rgb(rgb) {\n        if (rgb.r !== undefined) this.R = rgb.r;\n        if (rgb.g !== undefined) this.G = rgb.g;\n        if (rgb.b !== undefined) this.B = rgb.b;\n        if (rgb.a !== undefined) this.A = rgb.a;\n    }\n\n    /**\n     * 使用 RGB 格式更新颜色值\n     * @readonly\n     * @memberof Color\n     * @param {{r: ?number, g: ?number, b: ?number, a: ?number}} rgb\n     * @return {Color}\n     */\n    setRgb(rgb) {\n        this.rgb = rgb;\n        return this;\n    }\n\n    /**\n     * 获取颜色以 HSL 形式表示的对象\n     * @memberof Color\n     * @type {{h: number, s: number, l: number, a: number}}\n     */\n    get hsl() {\n        const r = this.r / 255;\n        const g = this.g / 255;\n        const b = this.b / 255;\n        // eslint-disable-next-line prefer-destructuring\n        const a = this.a;\n\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h;\n        let s;\n        const l = (max + min) / 2;\n        const d = max - min;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            }\n            h /= 6;\n        }\n        return {\n            h: h * 360,\n            s,\n            l,\n            a\n        };\n    }\n\n    /**\n     * 使用 HSL 形式更新颜色值\n     * @memberof Color\n     * @param {{h: number, s: number, l: number, a: number}} hsl\n     */\n    set hsl(hsl) {\n        this.rgb = hslToRgb(hsl);\n    }\n\n    /**\n     * 使用 HSL 形式更新颜色值\n     * @memberof Color\n     * @param {{h: number, s: number, l: number, a: number}} hsl\n     * @return {Color}\n     */\n    setHsl(hsl) {\n        this.hsl = Object.assign(this.hsl, hsl);\n        return this;\n    }\n\n    /**\n     * 获取颜色以 HSL 格式表示的 Hue 通道值\n     * @memberof Color\n     * @type {number}\n     */\n    get H() {\n        return this.hsl.h;\n    }\n\n    /**\n     * 以 HSL 格式设置颜色 Hue 通道值\n     * @memberof Color\n     * @param {number} r Hue 通道值\n     */\n    set H(hue) {\n        const {hsl} = this;\n        hsl.h = clampNumber(hue, 360);\n        this.hsl = hsl;\n    }\n\n    /**\n     * 获取颜色以 HSL 格式表示的 Saturate 通道值\n     * @memberof Color\n     * @type {number}\n     */\n    get S() {\n        return this.hsl.s;\n    }\n\n    /**\n     * 以 HSL 格式设置颜色 Saturate 通道值\n     * @memberof Color\n     * @param {number} r Saturate 通道值\n     */\n    set S(s) {\n        const {hsl} = this;\n        hsl.s = clampNumber(s, 1);\n        this.hsl = hsl;\n    }\n\n    /**\n     * 获取颜色以 HSL 格式表示的 Lightness 通道值\n     * @memberof Color\n     * @type {number}\n     */\n    get L() {\n        return this.hsl.l;\n    }\n\n    /**\n     * 以 HSL 格式设置颜色 Lightness 通道值\n     * @memberof Color\n     * @param {number} r Lightness 通道值\n     */\n    set L(l) {\n        const {hsl} = this;\n        hsl.l = clampNumber(l, 1);\n        this.hsl = hsl;\n    }\n\n    /**\n     * 获取颜色在视觉上的亮度\n     * @memberof Color\n     * @readonly\n     * @type {number}\n     */\n    get luma() {\n        let r = this.r / 255;\n        let g = this.g / 255;\n        let b = this.b / 255;\n\n        r = (r <= 0.03928) ? r / 12.92 : (((r + 0.055) / 1.055) ** 2.4);\n        g = (g <= 0.03928) ? g / 12.92 : (((g + 0.055) / 1.055) ** 2.4);\n        b = (b <= 0.03928) ? b / 12.92 : (((b + 0.055) / 1.055) ** 2.4);\n\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n    }\n\n    /**\n     * 获取颜色以 16 进制表示的字符串\n     * @memberof Color\n     * @readonly\n     * @type {string}\n     */\n    get hex() {\n        return `#${toHexValue(this.r)}${toHexValue(this.g)}${toHexValue(this.b)}`;\n    }\n\n    /**\n     * 获取颜色以 CSS 允许的形式表示的字符串\n     * @memberof Color\n     * @readonly\n     * @type {string}\n     */\n    get css() {\n        if (this.a > 0) {\n            if (this.a < 1) {\n                return `rgba(${this.r},${this.g},${this.b},${this.a})`;\n            }\n            return this.hex;\n        }\n        return 'transparent';\n    }\n\n    /**\n     * 调整颜色使其变得更暗（或者更亮）\n     * @param {number} amount 0～100 表示的百分比，数值越大则越暗，如果设置为负数（-100~0）,则会使颜色变得更亮，数值越小则越亮\n     * @returns {Color} 返回自身便于链式调用\n     * @memberof Color\n     */\n    darken(amount) {\n        const {hsl} = this;\n\n        hsl.l -= amount / 100;\n        hsl.l = clamp(hsl.l, 1);\n\n        this.hsl = hsl;\n        return this;\n    }\n\n    /**\n     * 调整颜色使其变得更亮（或者更暗）\n     * @param {number} amount 0～100 表示的百分比，数值越大则越亮，如果设置为负数（-100~0）,则会使颜色变得更暗，数值越小则越暗\n     * @returns {Color} 返回自身便于链式调用\n     * @memberof Color\n     */\n    lighten(amount) {\n        return this.darken(-amount);\n    }\n\n    /**\n     * 根据百分比设置透明度\n     *\n     * @param {number} amount 0~100 表示的透明度百分比，0 为完全透明，100 为完全不透明\n     * @memberof Color\n     * @returns {Color} 返回自身便于链式调用\n     */\n    fade(amount) {\n        this.A = clamp(amount / 100, 1);\n        return this;\n    }\n\n    /**\n     * 在色环上进行旋转\n     *\n     * @param {number} amount 旋转的值\n     * @return {Color} 返回自身便于链式调用\n     * @memberof Color\n     */\n    spin(amount) {\n        const {hsl} = this;\n        const hue = (hsl.h + amount) % 360;\n\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        this.hsl = hsl;\n        return this;\n    }\n\n    /**\n     * 根据百分比调整色相值\n     *\n     * @param {number} amount 色相值 -100~100\n     * @return {Color} 返回自身便于链式调用\n     * @memberof Color\n     */\n    saturate(amount) {\n        const {hsl} = this;\n\n        hsl.s += amount / 100;\n        hsl.s = clamp(hsl.s);\n\n        this.hsl = hsl;\n        return this;\n    }\n\n    /**\n     * 根据百分比调整亮度值\n     *\n     * @param {number} amount 亮度值 -100~100\n     * @return {Color} 返回自身便于链式调用\n     * @memberof Color\n     */\n    lightness(amount) {\n        const {hsl} = this;\n\n        hsl.l += amount / 100;\n        hsl.l = clamp(hsl.l);\n\n        this.hsl = hsl;\n        return this;\n    }\n\n    /**\n     * 根据当前颜色亮度明暗程度返回一个对比色\n     *\n     * @param {?String} dark 如果当前颜色为浅色，则返回此值指定的深色作为对比色，如果不指定则使用纯黑色\n     * @param {?String} light 如果当前颜色为深色，则返回此值指定的浅色作为对比色，如果不指定则使用纯白色\n     * @param {number} [threshold=0.43] 判断是否为深色的阈值，可选范围 0～1\n     * @return {Color} 返回自身便于链式调用\n     * @memberof Color\n     */\n    contrast(dark, light, threshold = 0.43) {\n        if (light === undefined) {\n            light = new Color(255, 255, 255, 1);\n        } else {\n            light = new Color(light);\n        }\n        if (dark === undefined) {\n            dark = new Color(0, 0, 0, 1);\n        } else {\n            dark = new Color(dark);\n        }\n\n        if (dark.luma > light.luma) {\n            const swapTmp = light;\n            light = dark;\n            dark = swapTmp;\n        }\n\n        if (this.a < 0.5) {\n            return dark;\n        }\n        threshold = number(threshold);\n\n        if (this.isDark(threshold)) {\n            return light;\n        }\n        return dark;\n    }\n\n    /**\n     * 判断当前颜色是否为深色\n     *\n     * @param {number} [threshold=0.43] 判断是否为深色的阈值，可选范围 0～1\n     * @return {Color} 返回自身便于链式调用\n     * @memberof Color\n     */\n    isDark(threshold = 0.43) {\n        return this.luma < threshold;\n    }\n\n    /**\n     * 创建一个当前颜色实例的副本\n     *\n     * @return {Color}\n     * @memberof Color\n     */\n    clone() {\n        return new Color(this.r, this.g, this.b, this.a);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/color.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1985,
    "kind": "variable",
    "name": "hexReg",
    "memberof": "app/utils/color.js",
    "static": true,
    "longname": "app/utils/color.js~hexReg",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": null,
    "description": "十六进制匹配正则表达式",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1986,
    "kind": "function",
    "name": "fit",
    "memberof": "app/utils/color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/color.js~fit",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": null,
    "description": "将指定数值大小修正为指定区间范围内",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "要修正的值"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "最大值"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "最大=小值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1987,
    "kind": "function",
    "name": "clamp",
    "memberof": "app/utils/color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/color.js~clamp",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": null,
    "description": "将指定数值修正为不超过给定的最大值",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "要修正的值"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "最大值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1988,
    "kind": "function",
    "name": "number",
    "memberof": "app/utils/color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/color.js~number",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": null,
    "description": "将字符串转换为数值类型，如果已经是数值类型，则返回原值",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "要转换的值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1989,
    "kind": "function",
    "name": "clampNumber",
    "memberof": "app/utils/color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/color.js~clampNumber",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": null,
    "description": "将指定数值修正为不超过给定的最大值，如果给定的数值是字符串则先转换为数值类型",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "要修正的值"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "最大值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1990,
    "kind": "function",
    "name": "convertToRgbInt",
    "memberof": "app/utils/color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/color.js~convertToRgbInt",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": null,
    "description": "将指定数值修正 RGB 分量取值范围，即 `0 <= x <= 256`",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "要修正的值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1991,
    "kind": "function",
    "name": "hexToRgb",
    "memberof": "app/utils/color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/color.js~hexToRgb",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": null,
    "description": "将 16 进制颜色值字符串转换为 RGB 对象",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "16 进制字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{r: number, g: number, b: number, a: number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1992,
    "kind": "function",
    "name": "isColor",
    "memberof": "app/utils/color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/color.js~isColor",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": null,
    "description": "判断一个字符串是否是颜色值的有效表示方式",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "要判断的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1993,
    "kind": "function",
    "name": "hslToRgb",
    "memberof": "app/utils/color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/color.js~hslToRgb",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": null,
    "description": "将一个 hsl 颜色表示对象转换为 rgb 表示对象",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "{h: number, s: number, l: number, a: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "hsl",
        "description": "hsl 表示对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{r: number, g: number, b: number, a: number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1994,
    "kind": "function",
    "name": "toHexValue",
    "memberof": "app/utils/color.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/color.js~toHexValue",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": null,
    "description": "将数值转换为 16 进制形式，如果不足 2 位，则在字符串前面补充 0",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "要转换的数值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1995,
    "kind": "class",
    "name": "Color",
    "memberof": "app/utils/color.js",
    "static": true,
    "longname": "app/utils/color.js~Color",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/color.js",
    "importStyle": "Color",
    "description": "颜色类",
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Color"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 1996,
    "kind": "member",
    "name": "isColor",
    "memberof": "app/utils/color.js~Color",
    "static": true,
    "longname": "app/utils/color.js~Color.isColor",
    "access": "public",
    "description": "判断一个字符串是否是颜色值的有效表示方式",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "要判断的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1997,
    "kind": "member",
    "name": "hexToRgb",
    "memberof": "app/utils/color.js~Color",
    "static": true,
    "longname": "app/utils/color.js~Color.hexToRgb",
    "access": "public",
    "description": "将 16 进制颜色值字符串转换为 RGB 对象",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "16 进制字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{r: number, g: number, b: number, a: number}"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1998,
    "kind": "member",
    "name": "hslToRgb",
    "memberof": "app/utils/color.js~Color",
    "static": true,
    "longname": "app/utils/color.js~Color.hslToRgb",
    "access": "public",
    "description": "将一个 hsl 颜色表示对象转换为 rgb 表示对象",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{h: number, s: number, l: number, a: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "hsl",
        "description": "hsl 表示对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{r: number, g: number, b: number, a: number}"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1999,
    "kind": "method",
    "name": "create",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/color.js~Color.create",
    "access": "public",
    "description": "创建一个颜色实例",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Color",
          "sting",
          "object",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "可以为 Red 通道值或者 hsla 对象或者 rgba 对象或者表示颜色的字符串"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "Green 通道值"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Blue 通道值"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "a",
        "description": "Alpha 通道值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "color"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2000,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#constructor",
    "access": "public",
    "description": "创建一个颜色类实例",
    "lineNumber": 208,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "sting",
          "object",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "可以为 Red 通道值或者 hsla 对象或者 rgba 对象或者表示颜色的字符串"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "Green 通道值"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Blue 通道值"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "a",
        "description": "Alpha 通道值"
      }
    ]
  },
  {
    "__docId__": 2001,
    "kind": "method",
    "name": "init",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#init",
    "access": "public",
    "description": "初始化颜色值",
    "lineNumber": 222,
    "params": [
      {
        "nullable": null,
        "types": [
          "sting",
          "object",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "可以为 Red 通道值或者 hsla 对象或者 rgba 对象或者表示颜色的字符串"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "Green 通道值"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Blue 通道值"
      },
      {
        "nullable": true,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "a",
        "description": "Alpha 通道值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2002,
    "kind": "member",
    "name": "r",
    "memberof": "app/utils/color.js~Color",
    "static": false,
    "longname": "app/utils/color.js~Color#r",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2003,
    "kind": "member",
    "name": "g",
    "memberof": "app/utils/color.js~Color",
    "static": false,
    "longname": "app/utils/color.js~Color#g",
    "access": "public",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2004,
    "kind": "member",
    "name": "b",
    "memberof": "app/utils/color.js~Color",
    "static": false,
    "longname": "app/utils/color.js~Color#b",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2013,
    "kind": "get",
    "name": "R",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#R",
    "access": "public",
    "description": "获取颜色以 RGB 格式表示的 Red 通道值",
    "lineNumber": 264,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2014,
    "kind": "set",
    "name": "R",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#R",
    "access": "public",
    "description": "以 RGB 格式设置颜色 Red 通道值",
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Red 通道值"
      }
    ]
  },
  {
    "__docId__": 2016,
    "kind": "get",
    "name": "G",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#G",
    "access": "public",
    "description": "获取颜色以 RGB 格式表示的 Green 通道值",
    "lineNumber": 282,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2017,
    "kind": "set",
    "name": "G",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#G",
    "access": "public",
    "description": "以 RGB 格式设置颜色 Green 通道值",
    "lineNumber": 291,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Green 通道值"
      }
    ]
  },
  {
    "__docId__": 2019,
    "kind": "get",
    "name": "B",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#B",
    "access": "public",
    "description": "获取颜色以 RGB 格式表示的 Blue 通道值",
    "lineNumber": 300,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2020,
    "kind": "set",
    "name": "B",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#B",
    "access": "public",
    "description": "以 RGB 格式设置颜色 Blue 通道值",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Blue 通道值"
      }
    ]
  },
  {
    "__docId__": 2022,
    "kind": "get",
    "name": "A",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#A",
    "access": "public",
    "description": "获取颜色以 RGB 格式表示的 Alpha 通道值",
    "lineNumber": 318,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2023,
    "kind": "set",
    "name": "A",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#A",
    "access": "public",
    "description": "以 RGB 格式设置颜色 Alpha 通道值",
    "lineNumber": 327,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Alpha 通道值"
      }
    ]
  },
  {
    "__docId__": 2024,
    "kind": "member",
    "name": "a",
    "memberof": "app/utils/color.js~Color",
    "static": false,
    "longname": "app/utils/color.js~Color#a",
    "access": "public",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2025,
    "kind": "get",
    "name": "rbg",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#rbg",
    "access": "public",
    "description": "获取颜色以 RGB 格式表示的对象",
    "lineNumber": 336,
    "type": {
      "nullable": null,
      "types": [
        "{r: number, g: number, b: number, a: number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2026,
    "kind": "set",
    "name": "rgb",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#rgb",
    "access": "public",
    "description": "使用 RGB 格式更新颜色值",
    "lineNumber": 350,
    "params": [
      {
        "nullable": null,
        "types": [
          "{r: ?number, g: ?number, b: ?number, a: ?number}"
        ],
        "spread": false,
        "optional": false,
        "name": "rgb",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 2031,
    "kind": "method",
    "name": "setRgb",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#setRgb",
    "access": "public",
    "description": "使用 RGB 格式更新颜色值",
    "lineNumber": 364,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "{r: ?number, g: ?number, b: ?number, a: ?number}"
        ],
        "spread": false,
        "optional": false,
        "name": "rgb",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2033,
    "kind": "get",
    "name": "hsl",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#hsl",
    "access": "public",
    "description": "获取颜色以 HSL 形式表示的对象",
    "lineNumber": 374,
    "type": {
      "nullable": null,
      "types": [
        "{h: number, s: number, l: number, a: number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2034,
    "kind": "set",
    "name": "hsl",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#hsl",
    "access": "public",
    "description": "使用 HSL 形式更新颜色值",
    "lineNumber": 419,
    "params": [
      {
        "nullable": null,
        "types": [
          "{h: number, s: number, l: number, a: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "hsl",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 2036,
    "kind": "method",
    "name": "setHsl",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#setHsl",
    "access": "public",
    "description": "使用 HSL 形式更新颜色值",
    "lineNumber": 429,
    "params": [
      {
        "nullable": null,
        "types": [
          "{h: number, s: number, l: number, a: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "hsl",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2038,
    "kind": "get",
    "name": "H",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#H",
    "access": "public",
    "description": "获取颜色以 HSL 格式表示的 Hue 通道值",
    "lineNumber": 439,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2039,
    "kind": "set",
    "name": "H",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#H",
    "access": "public",
    "description": "以 HSL 格式设置颜色 Hue 通道值",
    "lineNumber": 448,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Hue 通道值"
      }
    ]
  },
  {
    "__docId__": 2041,
    "kind": "get",
    "name": "S",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#S",
    "access": "public",
    "description": "获取颜色以 HSL 格式表示的 Saturate 通道值",
    "lineNumber": 459,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2042,
    "kind": "set",
    "name": "S",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#S",
    "access": "public",
    "description": "以 HSL 格式设置颜色 Saturate 通道值",
    "lineNumber": 468,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Saturate 通道值"
      }
    ]
  },
  {
    "__docId__": 2044,
    "kind": "get",
    "name": "L",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#L",
    "access": "public",
    "description": "获取颜色以 HSL 格式表示的 Lightness 通道值",
    "lineNumber": 479,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2045,
    "kind": "set",
    "name": "L",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#L",
    "access": "public",
    "description": "以 HSL 格式设置颜色 Lightness 通道值",
    "lineNumber": 488,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Lightness 通道值"
      }
    ]
  },
  {
    "__docId__": 2047,
    "kind": "get",
    "name": "luma",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#luma",
    "access": "public",
    "description": "获取颜色在视觉上的亮度",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2048,
    "kind": "get",
    "name": "hex",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#hex",
    "access": "public",
    "description": "获取颜色以 16 进制表示的字符串",
    "lineNumber": 518,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2049,
    "kind": "get",
    "name": "css",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#css",
    "access": "public",
    "description": "获取颜色以 CSS 允许的形式表示的字符串",
    "lineNumber": 528,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2050,
    "kind": "method",
    "name": "darken",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#darken",
    "access": "public",
    "description": "调整颜色使其变得更暗（或者更亮）",
    "lineNumber": 544,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Color} 返回自身便于链式调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "0～100 表示的百分比，数值越大则越暗，如果设置为负数（-100~0）,则会使颜色变得更亮，数值越小则越亮"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": "返回自身便于链式调用"
    }
  },
  {
    "__docId__": 2052,
    "kind": "method",
    "name": "lighten",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#lighten",
    "access": "public",
    "description": "调整颜色使其变得更亮（或者更暗）",
    "lineNumber": 560,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Color} 返回自身便于链式调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "0～100 表示的百分比，数值越大则越亮，如果设置为负数（-100~0）,则会使颜色变得更暗，数值越小则越暗"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": "返回自身便于链式调用"
    }
  },
  {
    "__docId__": 2053,
    "kind": "method",
    "name": "fade",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#fade",
    "access": "public",
    "description": "根据百分比设置透明度",
    "lineNumber": 571,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Color} 返回自身便于链式调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "0~100 表示的透明度百分比，0 为完全透明，100 为完全不透明"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": "返回自身便于链式调用"
    }
  },
  {
    "__docId__": 2055,
    "kind": "method",
    "name": "spin",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#spin",
    "access": "public",
    "description": "在色环上进行旋转",
    "lineNumber": 583,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "旋转的值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": "返回自身便于链式调用"
    }
  },
  {
    "__docId__": 2057,
    "kind": "method",
    "name": "saturate",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#saturate",
    "access": "public",
    "description": "根据百分比调整色相值",
    "lineNumber": 599,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "色相值 -100~100"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": "返回自身便于链式调用"
    }
  },
  {
    "__docId__": 2059,
    "kind": "method",
    "name": "lightness",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#lightness",
    "access": "public",
    "description": "根据百分比调整亮度值",
    "lineNumber": 616,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "亮度值 -100~100"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": "返回自身便于链式调用"
    }
  },
  {
    "__docId__": 2061,
    "kind": "method",
    "name": "contrast",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#contrast",
    "access": "public",
    "description": "根据当前颜色亮度明暗程度返回一个对比色",
    "lineNumber": 635,
    "params": [
      {
        "nullable": true,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "dark",
        "description": "如果当前颜色为浅色，则返回此值指定的深色作为对比色，如果不指定则使用纯黑色"
      },
      {
        "nullable": true,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "light",
        "description": "如果当前颜色为深色，则返回此值指定的浅色作为对比色，如果不指定则使用纯白色"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.43",
        "defaultRaw": 0.43,
        "name": "threshold",
        "description": "判断是否为深色的阈值，可选范围 0～1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": "返回自身便于链式调用"
    }
  },
  {
    "__docId__": 2062,
    "kind": "method",
    "name": "isDark",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#isDark",
    "access": "public",
    "description": "判断当前颜色是否为深色",
    "lineNumber": 671,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.43",
        "defaultRaw": 0.43,
        "name": "threshold",
        "description": "判断是否为深色的阈值，可选范围 0～1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": "返回自身便于链式调用"
    }
  },
  {
    "__docId__": 2063,
    "kind": "method",
    "name": "clone",
    "memberof": "app/utils/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/color.js~Color#clone",
    "access": "public",
    "description": "创建一个当前颜色实例的副本",
    "lineNumber": 681,
    "return": {
      "nullable": null,
      "types": [
        "Color"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2064,
    "kind": "file",
    "name": "app/utils/date-helper.js",
    "content": "/** @module date-helper */\n\nimport {formatString} from './string-helper';\n\n/**\n * 一天的总毫秒数\n * @type {number}\n * @const\n */\nexport const TIME_DAY = 24 * 60 * 60 * 1000;\n\n/**\n * 创建一个 Date 对象\n * @param {Date|number|String} [date=null] 用于创建 Date 对象的日期时间表达值，如果留空则创建当前系统时间对象\n * @return {Date}\n * @function\n */\nexport const createDate = (date = null) => {\n    if (!date) {\n        return new Date();\n    }\n    if (!(date instanceof Date)) {\n        if (typeof date === 'number' && date < 10000000000) {\n            date *= 1000;\n        }\n        date = new Date(date);\n    }\n    return date;\n};\n\n/**\n * 生成 PHP 时间戳\n * @param {Date|number|String} date 日期时间表达值\n * @return {number}\n * @function\n */\nexport const createPhpTimestramp = date => {\n    return Math.floor(createDate(date).getTime() / 1000);\n};\n\n/**\n * 判断两个日期是否是在同一天\n * @param {Date|number|String} date1 第一个日期时间表达值\n * @param {?Date|number|String} date2 第二个日期时间表达值，如果留空则使用当前系统时间\n * @return {boolean}\n * @function\n */\nexport const isSameDay = (date1, date2) => {\n    if (!date2) {\n        date2 = new Date();\n    }\n    date1 = createDate(date1);\n    date2 = createDate(date2);\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n};\n\n/**\n * 判断两个日期是否是在同一年\n * @param {Date|number|String} date1 第一个日期时间表达值\n * @param {?Date|number|String} date2 第二个日期时间表达值，如果留空则使用当前系统时间\n * @return {boolean}\n * @function\n */\nexport const isSameYear = (date1, date2) => {\n    if (!date2) {\n        date2 = new Date();\n    }\n    return createDate(date1).getFullYear() === createDate(date2).getFullYear();\n};\n\n/**\n * 判断两个日期是否是在同一个月\n * @param {Date|number|String} date1 第一个日期时间表达值\n * @param {?Date|number|String} date2 第二个日期时间表达值，如果留空则使用当前系统时间\n * @return {boolean}\n * @function\n */\nexport const isSameMonth = (date1, date2) => {\n    if (!date2) {\n        date2 = new Date();\n    }\n    date1 = createDate(date1);\n    date2 = createDate(date2);\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth();\n};\n\n/**\n * 判断指定的日期是否是在今天\n * @param {Date|number|String} date 要判断的日期时间表达值\n * @param {Date|number|String} [now=null] 作为今天判断依据的日期，如果留空则使用当前系统时间\n * @return {boolean}\n * @function\n */\nexport const isToday = (date, now = null) => (isSameDay(now || new Date(), date));\n\n/**\n * 判断指定的日期是否是在昨天\n * @param {Date|number|String} date 要判断的日期时间表达值\n * @param {Date|number|String} [now=null] 作为今天判断依据的日期，如果留空则使用当前系统时间\n * @return {boolean}\n * @function\n */\nexport const isYestoday = (date, now) => (isSameDay((now || new Date()).getTime() - TIME_DAY, date));\n\n/**\n * 格式化日期时间值为字符串，所有可用的格式化参数有：\n * - yyyy，例如：'2018'，表示四位数字表示的年份\n * - yy，例如：'18'，表示两位数字表示的年份\n * - MM，例如：'07'，表示两位数字表示的月份，不足两位在起始用 0 填充\n * - M，例如：'10'，表示一位或两位数字表示的月份\n * - dd，例如：'05'，表示两位数字表示的日期，不足两位在起始用 0 填充\n * - d，例如：'5'，表示一位或两位数字表示的日期\n * - hh，例如：'08'，表示两位数字表示的小时，不足两位在起始用 0 填充\n * - h，例如：'8'，表示一位或两位数字表示的小时\n * - mm，例如：'3'，表示两位数字表示的分钟，不足两位在起始用 0 填充\n * - m，例如：'03'，表示一位或两位数字表示的分钟\n * - ss，例如：'5'，表示两位数字表示的秒数，不足两位在起始用 0 填充\n * - s，例如：'05'，表示一位或两位数字表示的秒数\n * - S，例如：'236'，表示毫秒数\n * @summary 格式化日期时间值为字符串\n * @param {Date|number|String} date 要格式化的日期时间表达值\n * @param {string} [format='yyyy-MM-dd hh:ss'] 格式化字符串\n * @return {string}\n * @function\n */\nexport const formatDate = (date, format = 'yyyy-MM-dd hh:ss') => {\n    date = createDate(date);\n\n    const dateInfo = {\n        'M+': date.getMonth() + 1,\n        'd+': date.getDate(),\n        'h+': date.getHours(),\n        // 'H+': date.getHours() % 12,\n        'm+': date.getMinutes(),\n        's+': date.getSeconds(),\n        // 'q+': Math.floor((date.getMonth() + 3) / 3),\n        'S+': date.getMilliseconds()\n    };\n    if (/(y+)/i.test(format)) {\n        format = format.replace(RegExp.$1, (`${date.getFullYear()}`).substr(4 - RegExp.$1.length));\n    }\n    Object.keys(dateInfo).forEach(k => {\n        if (new RegExp(`(${k})`).test(format)) {\n            format = format.replace(RegExp.$1, RegExp.$1.length === 1 ? dateInfo[k] : (`00${dateInfo[k]}`).substr((`${dateInfo[k]}`).length));\n        }\n    });\n    return format;\n};\n\n/**\n * 格式化日期时间范围\n * @param {String|Date|number} date1 起始时间\n * @param {String|Date|number} date2 结束时间\n * @param {Object} format 格式化参数\n * @return {string}\n * @function\n */\nexport const formatSpan = (date1, date2, format) => {\n    format = Object.assign({\n        full: 'yyyy-M-d', month: 'M-d', day: 'd', str: '{0} ~ {1}',\n    }, format);\n    const date1Str = formatDate(date1, isSameYear(date1) ? format.month : format.full);\n    if (isSameDay(date1, date2)) {\n        return date1Str;\n    }\n    const date2Str = formatDate(date2, isSameYear(date1, date2) ? (isSameMonth(date1, date2) ? format.day : format.month) : format.full);\n    return formatString(format.str, date1Str, date2Str);\n};\n\n/**\n * 根据描述获取当前时间与指定描述之间的毫秒数\n * @param {string} desc 起始时间\n * @return {number}\n * @function\n */\nexport const getTimeBeforeDesc = desc => {\n    const now = new Date().getTime();\n    switch (desc) {\n    case 'oneWeek':\n        return now - (TIME_DAY * 7);\n    case 'oneMonth':\n        return now - (TIME_DAY * 31);\n    case 'threeMonth':\n        return now - (TIME_DAY * 31 * 3);\n    case 'halfYear':\n        return now - (TIME_DAY * 183);\n    case 'oneYear':\n        return now - (TIME_DAY * 365);\n    case 'twoYear':\n        return now - (2 * (TIME_DAY * 365));\n    default:\n        return 0;\n    }\n};\n\nexport default {\n    createDate,\n    formatDate,\n    isSameDay,\n    isSameMonth,\n    isSameYear,\n    isToday,\n    isYestoday,\n    formatSpan,\n    getTimeBeforeDesc,\n    createPhpTimestramp\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/date-helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2065,
    "kind": "variable",
    "name": "TIME_DAY",
    "memberof": "app/utils/date-helper.js",
    "static": true,
    "longname": "app/utils/date-helper.js~TIME_DAY",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{TIME_DAY}",
    "description": "一天的总毫秒数",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2066,
    "kind": "function",
    "name": "createDate",
    "memberof": "app/utils/date-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/date-helper.js~createDate",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{createDate}",
    "description": "创建一个 Date 对象",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "date",
        "description": "用于创建 Date 对象的日期时间表达值，如果留空则创建当前系统时间对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2067,
    "kind": "function",
    "name": "createPhpTimestramp",
    "memberof": "app/utils/date-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/date-helper.js~createPhpTimestramp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{createPhpTimestramp}",
    "description": "生成 PHP 时间戳",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "日期时间表达值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2068,
    "kind": "function",
    "name": "isSameDay",
    "memberof": "app/utils/date-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/date-helper.js~isSameDay",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{isSameDay}",
    "description": "判断两个日期是否是在同一天",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date1",
        "description": "第一个日期时间表达值"
      },
      {
        "nullable": true,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date2",
        "description": "第二个日期时间表达值，如果留空则使用当前系统时间"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2069,
    "kind": "function",
    "name": "isSameYear",
    "memberof": "app/utils/date-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/date-helper.js~isSameYear",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{isSameYear}",
    "description": "判断两个日期是否是在同一年",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date1",
        "description": "第一个日期时间表达值"
      },
      {
        "nullable": true,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date2",
        "description": "第二个日期时间表达值，如果留空则使用当前系统时间"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2070,
    "kind": "function",
    "name": "isSameMonth",
    "memberof": "app/utils/date-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/date-helper.js~isSameMonth",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{isSameMonth}",
    "description": "判断两个日期是否是在同一个月",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date1",
        "description": "第一个日期时间表达值"
      },
      {
        "nullable": true,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date2",
        "description": "第二个日期时间表达值，如果留空则使用当前系统时间"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2071,
    "kind": "function",
    "name": "isToday",
    "memberof": "app/utils/date-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/date-helper.js~isToday",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{isToday}",
    "description": "判断指定的日期是否是在今天",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "要判断的日期时间表达值"
      },
      {
        "nullable": null,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "now",
        "description": "作为今天判断依据的日期，如果留空则使用当前系统时间"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2072,
    "kind": "function",
    "name": "isYestoday",
    "memberof": "app/utils/date-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/date-helper.js~isYestoday",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{isYestoday}",
    "description": "判断指定的日期是否是在昨天",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "要判断的日期时间表达值"
      },
      {
        "nullable": null,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "now",
        "description": "作为今天判断依据的日期，如果留空则使用当前系统时间"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2073,
    "kind": "function",
    "name": "formatDate",
    "memberof": "app/utils/date-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/date-helper.js~formatDate",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{formatDate}",
    "description": "格式化日期时间值为字符串，所有可用的格式化参数有：\n- yyyy，例如：'2018'，表示四位数字表示的年份\n- yy，例如：'18'，表示两位数字表示的年份\n- MM，例如：'07'，表示两位数字表示的月份，不足两位在起始用 0 填充\n- M，例如：'10'，表示一位或两位数字表示的月份\n- dd，例如：'05'，表示两位数字表示的日期，不足两位在起始用 0 填充\n- d，例如：'5'，表示一位或两位数字表示的日期\n- hh，例如：'08'，表示两位数字表示的小时，不足两位在起始用 0 填充\n- h，例如：'8'，表示一位或两位数字表示的小时\n- mm，例如：'3'，表示两位数字表示的分钟，不足两位在起始用 0 填充\n- m，例如：'03'，表示一位或两位数字表示的分钟\n- ss，例如：'5'，表示两位数字表示的秒数，不足两位在起始用 0 填充\n- s，例如：'05'，表示一位或两位数字表示的秒数\n- S，例如：'236'，表示毫秒数",
    "lineNumber": 126,
    "unknown": [
      {
        "tagName": "@summary",
        "tagValue": "格式化日期时间值为字符串"
      },
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date",
          "number",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "要格式化的日期时间表达值"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'yyyy-MM-dd hh:ss'",
        "defaultRaw": "'yyyy-MM-dd hh:ss'",
        "name": "format",
        "description": "格式化字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2074,
    "kind": "function",
    "name": "formatSpan",
    "memberof": "app/utils/date-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/date-helper.js~formatSpan",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{formatSpan}",
    "description": "格式化日期时间范围",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Date",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "date1",
        "description": "起始时间"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Date",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "date2",
        "description": "结束时间"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": "格式化参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2075,
    "kind": "function",
    "name": "getTimeBeforeDesc",
    "memberof": "app/utils/date-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/date-helper.js~getTimeBeforeDesc",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/date-helper.js",
    "importStyle": "{getTimeBeforeDesc}",
    "description": "根据描述获取当前时间与指定描述之间的毫秒数",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "desc",
        "description": "起始时间"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2076,
    "kind": "file",
    "name": "app/utils/debug.js",
    "content": "import Config from '../config';\n\n/**\n * 是否为类浏览器环境\n * @type {boolean}\n * @private\n * @const\n */\nconst isBrowserEnv = process.browser || process.type === 'renderer';\n\nif (typeof DEBUG === 'undefined') {\n    global.DEBUG = process.env.NODE_ENV === 'debug' || process.env.NODE_ENV === 'development' || ((isBrowserEnv) && global.window.location.search.includes('debug=1'));\n} else {\n    global.DEBUG = DEBUG;\n}\n\nif (DEBUG) {\n    // 移除 react router 的警告信息\n    console._error = console.error;\n    console.error = (errMessage, ...args) => {\n        if (typeof errMessage === 'string' && (errMessage.indexOf('Warning: Hash history cannot PUSH the same path;') === 0 || errMessage.startsWith('Warning: Failed prop type: Prop paneStyle passed to SplitPane. Has invalid keys userSelect') || errMessage.startsWith('Warning: Failed prop type: Prop style passed'))) {\n            return;\n        }\n        return console._error(errMessage, ...args);\n    };\n\n    // 移除 react router 的警告信息\n    console._warn = console.warn;\n    console.warn = (errMessage, ...args) => {\n        if (typeof errMessage === 'string' && errMessage.startsWith('iterable.length has been deprecated, use iterable.size or iterable.count')) {\n            return;\n        }\n        return console._warn(errMessage, ...args);\n    };\n\n    // 美化浏览器端环境日志输出\n    if (isBrowserEnv) {\n        const STYLE = {\n            rounded: 'border-radius: 3px;',\n            block: 'display: block;',\n            bold: 'font-weight: bold;',\n            h1: 'font-size: 24px; font-weight: bold;',\n            h2: 'font-size: 20px; font-weight: bold;',\n            h3: 'font-size: 18px; font-weight: bold;',\n            h4: 'font-size: 16px; font-weight: bold;',\n            h5: 'font-size: 14px; font-weight: bold;',\n            h6: 'font-size: 12px; font-weight: bold;',\n            muted: 'color: #aaa;',\n\n            pink: 'color: #e91e63;',\n            pinkLight: 'color: #ff6090;',\n            pinkDark: 'color: #b0003a;',\n            pinkPale: 'background: #fce4ec; color: #e91e63;',\n            pinkBg: 'background: #e91e63; color: #fff;',\n            pinkBgLight: 'background: #ff6090; color: #fff;',\n            pinkBgDark: 'background: #b0003a; color: #fff;',\n            pinkOutline: 'color: #e91e63; border-color: #e91e63;',\n\n\n            blue: 'color: #2196f3;',\n            blueLight: 'color: #6ec6ff;',\n            blueDark: 'color: #0069c0;',\n            bluePale: 'background: #e3f2fd; color: #2196f3;',\n            blueBg: 'background: #2196f3; color: #fff;',\n            blueBgLight: 'background: #6ec6ff; color: #fff;',\n            blueBgDark: 'background: #0069c0; color: #fff;',\n            blueOutline: 'color: #2196f3; border-color: #2196f3;',\n\n            green: 'color: #4caf50;',\n            greenLight: 'color: #80e27e;',\n            greenDark: 'color: #087f23;',\n            greenPale: 'background: #e8f5e9; color: #4caf50;',\n            greenBg: 'background: #4caf50; color: #fff;',\n            greenBgLight: 'background: #80e27e; color: #fff;',\n            greenBgDark: 'background: #087f23; color: #fff;',\n            greenOutline: 'color: #4caf50; border-color: #4caf50;',\n\n            red: 'color: #f44336;',\n            redLight: 'color: #ff7961;',\n            redDark: 'color: #ba000d;',\n            redPale: 'background: #ffebee; color: #f44336;',\n            redBg: 'background: #f44336; color: #fff;',\n            redBgLight: 'background: #ff7961; color: #fff;',\n            redBgDark: 'background: #ba000d; color: #fff;',\n            redOutline: 'color: #f44336; border-color: #f44336;',\n\n            orange: 'color: #ff9800;',\n            orangeLight: 'color: #ffc947;',\n            orangeDark: 'color: #c66900;',\n            orangePale: 'background: #fff3e0; color: #ff9800;',\n            orangeBg: 'background: #ff9800; color: #fff;',\n            orangeBgLight: 'background: #ffc947; color: #fff;',\n            orangeBgDark: 'background: #c66900; color: #fff;',\n            orangeOutline: 'color: #ff9800; border-color: #ff9800;',\n\n            deepOrange: 'color: #ff5722;',\n            deepOrangeLight: 'color: #ff8a50;',\n            deepOrangeDark: 'color: #c41c00;',\n            deepOrangePale: 'background: #fbe9e7; color: #ff5722;',\n            deepOrangeBg: 'background: #ff5722; color: #fff;',\n            deepOrangeBgLight: 'background: #ff8a50; color: #fff;',\n            deepOrangeBgDark: 'background: #c41c00; color: #fff;',\n            deepOrangeOutline: 'color: #ff5722; border-color: #ff5722;',\n\n            purple: 'color: #9c27b0;',\n            purpleLight: 'color: #d05ce3;',\n            purpleDark: 'color: #6a0080;',\n            purplePale: 'background: #f3e5f5; color: #9c27b0;',\n            purpleBg: 'background: #9c27b0; color: #fff;',\n            purpleBgLight: 'background: #d05ce3; color: #fff;',\n            purpleBgDark: 'background: #6a0080; color: #fff;',\n            purpleOutline: 'color: #9c27b0; border-color: #9c27b0;',\n\n            teal: 'color: #009688;',\n            tealLight: 'color: #52c7b8;',\n            tealDark: 'color: #00675b;',\n            tealPale: 'background: #e0f2f1; color: #009688;',\n            tealBg: 'background: #009688; color: #fff;',\n            tealBgLight: 'background: #52c7b8; color: #fff;',\n            tealBgDark: 'background: #00675b; color: #fff;',\n            tealOutline: 'color: #009688; border-color: #009688;',\n\n            indigo: 'color: #3f51b5;',\n            indigoLight: 'color: #757de8;',\n            indigoDark: 'color: #002984;',\n            indigoPale: 'background: #e8eaf6; color: #3f51b5;',\n            indigoBg: 'background: #3f51b5; color: #fff;',\n            indigoBgLight: 'background: #757de8; color: #fff;',\n            indigoBgDark: 'background: #002984; color: #fff;',\n            indigoOutline: 'color: #3f51b5; border-color: #3f51b5;',\n        };\n\n        const formatOutput = (args) => {\n            const output = [''];\n            const format = [];\n            args.forEach((arg, idx) => {\n                const index = Math.floor(idx / 2);\n                if (idx % 2 === 1) {\n                    format[index] = `%c${format[index]}`;\n                    let style = 'padding: 0 4px; border: 1px solid transparent;';\n                    if (Array.isArray(arg)) {\n                        style += arg.reduce((tmpStyle, styleName) => {\n                            return tmpStyle + (STYLE[styleName] || styleName);\n                        }, '');\n                    } else if (typeof arg === 'object') {\n                        style += Object.keys(arg).reduce((tmpStyle, propName) => (`${tmpStyle}${propName}: ${arg[propName]}`), '');\n                    } else {\n                        style += STYLE[arg] || arg;\n                    }\n                    output.push(style);\n                } else {\n                    format.push(arg);\n                }\n            });\n            output[0] = format.join('');\n            return output;\n        };\n\n        console.formatOutput = formatOutput;\n\n        console.color = (...args) => {\n            console.log(...formatOutput(args));\n        };\n\n        console.collapse = (...args) => {\n            console.groupCollapsed(...formatOutput(args));\n        };\n\n        console.expand = (...args) => {\n            console.group(...formatOutput(args));\n        };\n\n        console.expand(`XuanXuan ${Config.pkg.version} DEBUG${Config.system.specialVersion ? ` for ${Config.system.specialVersion}` : ''}`, ['h1', 'pink', `border-bottom: 3px solid #e91e63; display: block; text-shadow: 1px 1px 1px #e91e63; padding: 0 40px; background-image: url(https://github.com/easysoft/xuanxuan/blob/master/xxc/resources/icon.png?raw=true); background-size: 24px 24px; background-repeat: no-repeat; background-position: 0 2px`]);\n        console.color('\\t  Company: ', 'pinkLight', Config.pkg.company, 'pinkDark');\n        console.color('\\t  License: ', 'pinkLight', Config.pkg.license, 'pinkDark');\n        console.color('\\t   Github: ', 'pinkLight', 'https://github.com/easysoft/xuanxuan', 'pinkDark');\n        console.color('\\t Homepage: ', 'pinkLight', Config.pkg.homepage, 'pinkDark');\n        console.color('\\t   Issues: ', 'pinkLight', Config.pkg.bugs.url, 'pinkDark');\n        if (process.versions) {\n            if (process.versions.electron) {\n                console.color('\\t Electron: ', 'pinkLight', process.versions.electron, 'pinkDark');\n            } else if (process.versions.nw) {\n                console.color('\\t     NWJS: ', 'pinkLight', process.versions.nw, 'pinkDark');\n            }\n            console.color('\\t   NodeJS: ', 'pinkLight', process.versions.node, 'pinkDark');\n            if (process.versions.chrome) {\n                console.color('\\t   Chrome: ', 'pinkLight', process.versions.chrome, 'pinkDark');\n            } else if (process.versions.chromium) {\n                console.color('\\t Chromium: ', 'pinkLight', process.versions.chromium, 'pinkDark');\n            }\n            console.color('\\t  modules: ', 'pinkLight', process.versions.modules, 'pinkDark');\n            console.color('\\t       V8: ', 'pinkLight', process.versions.v8, 'pinkDark');\n        }\n        if (process.arch) {\n            console.color('\\t     Arch: ', 'pinkLight', process.arch, 'pinkDark');\n        }\n        if (process.env) {\n            console.color('\\t  DIRNAME: ', 'pinkLight', process.env.PWD, 'pinkDark');\n            console.color('\\t     LANG: ', 'pinkLight', process.env.LANG, 'pinkDark');\n            console.color('\\t NODE_ENV: ', 'pinkLight', process.env.NODE_ENV, 'pinkDark');\n        }\n        console.log('%c\\t    Config: ', 'color: #ff6090', Config);\n        console.groupEnd();\n    }\n\n    global.$ = {};\n}\n\nexport default global.DEBUG;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/debug.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2077,
    "kind": "variable",
    "name": "isBrowserEnv",
    "memberof": "app/utils/debug.js",
    "static": true,
    "longname": "app/utils/debug.js~isBrowserEnv",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/debug.js",
    "importStyle": null,
    "description": "是否为类浏览器环境",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2078,
    "kind": "file",
    "name": "app/utils/delay-action.js",
    "content": "/**\n * 延时操作类\n *\n * @class DelayAction\n */\nexport default class DelayAction {\n    /**\n     * 创建一个延时操作类实例\n     * @param {!function} action 延时操作函数\n     * @param {number} [delay=100] 延迟时间，单位毫秒\n     * @param {?function(result:any)} [callback=null] 操作完成时的回调函数\n     * @constructor\n     */\n    constructor(action, delay = 100, callback = null) {\n        /**\n         * 操作函数\n         * @type {function}\n         * @memberof DelayAction\n         */\n        this.action = action;\n\n        /**\n         * 延迟时间，单位毫秒\n         * @type {number}\n         * @memberof DelayAction\n         */\n        this.delay = delay;\n\n        /**\n         * 操作完成时的回调函数\n         * @type {function}\n         * @memberof DelayAction\n         */\n        this.callback = callback;\n\n        /**\n         * 操作是否完成\n         * @type {boolean}\n         * @memberof DelayAction\n         */\n        this.done = true;\n    }\n\n    /**\n     * 开始执行延时操作\n     * @param {...any} params 操作函数参数\n     * @memberof DelayAction\n     * @return {void}\n     */\n    do(...params) {\n        this.done = false;\n        if (this.actionCallTask) {\n            clearTimeout(this.actionCallTask);\n        }\n        this.actionCallTask = setTimeout(() => {\n            this.doIm(...params);\n        }, this.delay);\n    }\n\n    /**\n     * 立即执行操作（没有延时）\n     * @param {...any} params 操作函数参数\n     * @return {void}\n     * @memberof DelayAction\n     */\n    doIm(...params) {\n        const actionResult = this.action(...params);\n        this.actionCallTask = null;\n        if (typeof this.callback === 'function') {\n            this.callback(actionResult);\n        }\n        this.done = true;\n    }\n\n    /**\n     * 操作是否已经完成\n     * @type {boolean}\n     * @readonly\n     * @memberof DelayAction\n     */\n    get isDone() {\n        return this.done;\n    }\n\n    /**\n     * 销毁延时任务，取消计划中的任务操作\n     *\n     * @memberof DelayAction\n     * @return {void}\n     */\n    destroy() {\n        clearTimeout(this.actionCallTask);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/delay-action.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2079,
    "kind": "class",
    "name": "DelayAction",
    "memberof": "app/utils/delay-action.js",
    "static": true,
    "longname": "app/utils/delay-action.js~DelayAction",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/delay-action.js",
    "importStyle": "DelayAction",
    "description": "延时操作类",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DelayAction"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2080,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/utils/delay-action.js~DelayAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/delay-action.js~DelayAction#constructor",
    "access": "public",
    "description": "创建一个延时操作类实例",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": false,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "延时操作函数"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "delay",
        "description": "延迟时间，单位毫秒"
      },
      {
        "nullable": true,
        "types": [
          "function(result:any)"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "callback",
        "description": "操作完成时的回调函数"
      }
    ]
  },
  {
    "__docId__": 2081,
    "kind": "member",
    "name": "action",
    "memberof": "app/utils/delay-action.js~DelayAction",
    "static": false,
    "longname": "app/utils/delay-action.js~DelayAction#action",
    "access": "public",
    "description": "操作函数",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2082,
    "kind": "member",
    "name": "delay",
    "memberof": "app/utils/delay-action.js~DelayAction",
    "static": false,
    "longname": "app/utils/delay-action.js~DelayAction#delay",
    "access": "public",
    "description": "延迟时间，单位毫秒",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2083,
    "kind": "member",
    "name": "callback",
    "memberof": "app/utils/delay-action.js~DelayAction",
    "static": false,
    "longname": "app/utils/delay-action.js~DelayAction#callback",
    "access": "public",
    "description": "操作完成时的回调函数",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2084,
    "kind": "member",
    "name": "done",
    "memberof": "app/utils/delay-action.js~DelayAction",
    "static": false,
    "longname": "app/utils/delay-action.js~DelayAction#done",
    "access": "public",
    "description": "操作是否完成",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2085,
    "kind": "method",
    "name": "do",
    "memberof": "app/utils/delay-action.js~DelayAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/delay-action.js~DelayAction#do",
    "access": "public",
    "description": "开始执行延时操作",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "params",
        "description": "操作函数参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2087,
    "kind": "member",
    "name": "actionCallTask",
    "memberof": "app/utils/delay-action.js~DelayAction",
    "static": false,
    "longname": "app/utils/delay-action.js~DelayAction#actionCallTask",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2088,
    "kind": "method",
    "name": "doIm",
    "memberof": "app/utils/delay-action.js~DelayAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/delay-action.js~DelayAction#doIm",
    "access": "public",
    "description": "立即执行操作（没有延时）",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "params",
        "description": "操作函数参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2091,
    "kind": "get",
    "name": "isDone",
    "memberof": "app/utils/delay-action.js~DelayAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/delay-action.js~DelayAction#isDone",
    "access": "public",
    "description": "操作是否已经完成",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2092,
    "kind": "method",
    "name": "destroy",
    "memberof": "app/utils/delay-action.js~DelayAction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/delay-action.js~DelayAction#destroy",
    "access": "public",
    "description": "销毁延时任务，取消计划中的任务操作",
    "lineNumber": 91,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2093,
    "kind": "file",
    "name": "app/utils/html-helper.js",
    "content": "/** @module html-helper */\n\n/**\n * 拼接元素类\n * @param {...any} 参数\n * @return {string}\n * @function\n * @example\n * const isActive = false;\n * const isHidden = true;\n * const divClass = classes('btn', ['lg', 'flex-none'], {active: isActive, 'is-hidden': isHidden});\n * // 以上 divClass 最终值为 'btn lg flex-none is-hidden'\n */\nexport const classes = (...args) => (\n    args.map(arg => {\n        if (Array.isArray(arg)) {\n            return classes(arg);\n        }\n        if (arg !== null && typeof arg === 'object') {\n            return Object.keys(arg).filter(className => {\n                const condition = arg[className];\n                if (typeof condition === 'function') {\n                    return !!condition();\n                }\n                return !!condition;\n            }).join(' ');\n        }\n        return arg;\n    }).filter(x => (typeof x === 'string') && x.length).join(' ')\n);\n\n/**\n * 将像素单位转换为 rem 单位\n * @param {number} value 像素单位值\n * @param {number} [rootValue=20] `1rem` 单位对应对像素值\n * @return {string}\n * @function\n * @example\n * const width = rem(100);\n */\nexport const rem = (value, rootValue = 20) => (`${value / rootValue}rem`);\n\n/**\n * 获取浏览器查询字符串键值\n * @param {?string} [key=null] 要获取值的键名，如果留空则以 `Object` 返回所有键值对\n * @param {?string} [search=null] 查询字符串，如果留空则使用当前浏览器地址上的查询字符串\n * @return {string|Object.<string, string>}\n * @function\n */\nexport const getSearchParam = (key = null, search = null) => {\n    const params = {};\n    search = search === null ? window.location.search : search;\n    if (search.length > 1) {\n        if (search[0] === '?') {\n            search = search.substr(1);\n        }\n        const searchArr = search.split('&');\n        for (const pair of searchArr) {\n            const pairValues = pair.split('=', 2);\n            if (pairValues.length > 1) {\n                try {\n                    params[pairValues[0]] = decodeURIComponent(pairValues[1]);\n                } catch (_) {\n                    if (DEBUG) {\n                        console.error(_, {key, search});\n                    }\n                    params[pairValues[0]] = '';\n                }\n            } else {\n                params[pairValues[0]] = '';\n            }\n        }\n    }\n    return key ? params[key] : params;\n};\n\n/**\n * 过滤掉 HTML 标签\n * @param {string} html HTML 源码\n * @return {string}\n * @function\n */\nexport const strip = html => {\n    return html.replace(/<(?:.|\\n)*?>/gm, '');\n};\n\n/**\n * 转换 HTML 标签\n * @param {string} html HTML 源码\n * @return {string}\n * @function\n */\nexport const escape = html => {\n    const tmp = document.createElement('DIV');\n    tmp.innerText = html;\n    return tmp.innerHTML || '';\n};\n\n/**\n * 判定给定对字符串是否是网址\n * @param {string} url 字符串\n * @return {boolean}\n * @function\n */\nexport const isWebUrl = url => {\n    if (typeof url !== 'string') {\n        return false;\n    }\n    return (/^(https?):\\/\\/[-A-Za-z0-9\\u4e00-\\u9fa5+&@#/%?=~_|!:,.;]+[-A-Za-z0-9\\u4e00-\\u9fa5+&@#/%=~_|]$/ig).test(url);\n};\n\n/**\n * 将字符串内的链接转换为 HTML 链接形式\n * @param {string} text 字符串\n * @return {string}\n * @function\n */\nexport const linkify = (text) => {\n    return (text || '').replace(\n        /([^\\S]|^)(((https?:\\/\\/)|(www\\.))(\\S+))/gi,\n        (match, space, url) => {\n            let hyperlink = url;\n            if (!hyperlink.match('^https?://')) {\n                hyperlink = `http://${hyperlink}`;\n            }\n            return `${space}<a href=\"${hyperlink}\">${url}</a>`;\n        }\n    );\n};\n\nexport default {\n    classes,\n    rem,\n    getSearchParam,\n    strip,\n    isWebUrl,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/html-helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2094,
    "kind": "function",
    "name": "classes",
    "memberof": "app/utils/html-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/html-helper.js~classes",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/html-helper.js",
    "importStyle": "{classes}",
    "description": "拼接元素类",
    "examples": [
      "const isActive = false;\nconst isHidden = true;\nconst divClass = classes('btn', ['lg', 'flex-none'], {active: isActive, 'is-hidden': isHidden});\n// 以上 divClass 最终值为 'btn lg flex-none is-hidden'"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "参数",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2095,
    "kind": "function",
    "name": "rem",
    "memberof": "app/utils/html-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/html-helper.js~rem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/html-helper.js",
    "importStyle": "{rem}",
    "description": "将像素单位转换为 rem 单位",
    "examples": [
      "const width = rem(100);"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "像素单位值"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "rootValue",
        "description": "`1rem` 单位对应对像素值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2096,
    "kind": "function",
    "name": "getSearchParam",
    "memberof": "app/utils/html-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/html-helper.js~getSearchParam",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/html-helper.js",
    "importStyle": "{getSearchParam}",
    "description": "获取浏览器查询字符串键值",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "key",
        "description": "要获取值的键名，如果留空则以 `Object` 返回所有键值对"
      },
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "search",
        "description": "查询字符串，如果留空则使用当前浏览器地址上的查询字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "Object.<string, string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2097,
    "kind": "function",
    "name": "strip",
    "memberof": "app/utils/html-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/html-helper.js~strip",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/html-helper.js",
    "importStyle": "{strip}",
    "description": "过滤掉 HTML 标签",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": "HTML 源码"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2098,
    "kind": "function",
    "name": "escape",
    "memberof": "app/utils/html-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/html-helper.js~escape",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/html-helper.js",
    "importStyle": "{escape}",
    "description": "转换 HTML 标签",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": "HTML 源码"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2099,
    "kind": "function",
    "name": "isWebUrl",
    "memberof": "app/utils/html-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/html-helper.js~isWebUrl",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/html-helper.js",
    "importStyle": "{isWebUrl}",
    "description": "判定给定对字符串是否是网址",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2100,
    "kind": "function",
    "name": "linkify",
    "memberof": "app/utils/html-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/html-helper.js~linkify",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/html-helper.js",
    "importStyle": "{linkify}",
    "description": "将字符串内的链接转换为 HTML 链接形式",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2101,
    "kind": "file",
    "name": "app/utils/image.js",
    "content": "/** @module image */\n\n/**\n * 获取图片尺寸信息\n * @param {string} imagePath 图片地址\n * @param {?Object.<string, any>} options 参数\n * @todo 使得参数可用\n * @return {Promise<{width: number, height: number}>}\n * @function\n */\nexport const getImageInfo = (imagePath, options = null) => {\n    return new Promise((resolve, reject) => {\n        options = Object.assign({\n            thumbnail: {width: 50, height: 50}\n        }, options);\n\n        const img = new Image();\n        img.onload = () => {\n            const info = {width: img.width, height: img.height};\n            if (options.thumbnail) {\n                // todo: return thumbnail\n            }\n            resolve(info);\n        };\n        img.onerror = () => {\n            reject();\n        };\n        img.src = imagePath;\n    });\n};\n\n/**\n * 裁剪图片\n * @param {string} imagePath 图片地址\n * @param {{x: number, y: number, width: number, height: number}} select 裁剪区域\n * @return {Promise<{width: number, height: number, type: string, data: string}>}\n * @function\n */\nexport const cutImage = (imagePath, select) => {\n    return new Promise((resolve, reject) => {\n        let img = document.createElement('img');\n        let canvas = document.createElement('canvas');\n        canvas.width = select.width;\n        canvas.height = select.height;\n\n        img.onload = () => {\n            let display = canvas.getContext('2d');\n            display.drawImage(img, select.x, select.y, select.width, select.height, 0, 0, select.width, select.height);\n            resolve({\n                width: select.width, height: select.height, type: 'png', data: canvas.toDataURL('image/png'),\n            });\n            img = canvas = display = null;\n        };\n\n        img.onerror = () => {\n            reject(new Error('Cant not get user media.'));\n            img = canvas = null;\n        };\n\n        if (!imagePath.startsWith('https://') && !imagePath.startsWith('http://') && !imagePath.startsWith('file://')) {\n            imagePath = `file://${imagePath}`;\n        }\n        img.src = imagePath;\n    });\n};\n\nexport default {\n    getImageInfo,\n    cutImage,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/image.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2102,
    "kind": "function",
    "name": "getImageInfo",
    "memberof": "app/utils/image.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/image.js~getImageInfo",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/image.js",
    "importStyle": "{getImageInfo}",
    "description": "获取图片尺寸信息",
    "lineNumber": 11,
    "todo": [
      "使得参数可用"
    ],
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imagePath",
        "description": "图片地址"
      },
      {
        "nullable": true,
        "types": [
          "Object.<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{width: number, height: number}>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2103,
    "kind": "function",
    "name": "cutImage",
    "memberof": "app/utils/image.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/image.js~cutImage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/image.js",
    "importStyle": "{cutImage}",
    "description": "裁剪图片",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imagePath",
        "description": "图片地址"
      },
      {
        "nullable": null,
        "types": [
          "{x: number, y: number, width: number, height: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "select",
        "description": "裁剪区域"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{width: number, height: number, type: string, data: string}>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2104,
    "kind": "file",
    "name": "app/utils/index.js",
    "content": "import Color from './color';\nimport Markdown from './markdown';\nimport Status from './status';\nimport DateHelper from './date-helper';\nimport MdiFileIcon from './mdi-file-icon';\nimport Store from './store';\nimport Debug from './debug';\nimport Pinyin from './pinyin';\nimport StringHelper from './string-helper';\nimport DelayAction from './delay-action';\nimport Plain from './plain';\nimport TaskQueue from './task-queue';\nimport HtmlHelper from './html-helper';\nimport SearchScore from './search-score';\nimport TimeSequence from './time-sequence';\nimport Skin from './skin';\nimport LimitTimePromise from './limit-time-promise';\nimport SortHelper from './sort-helper';\nimport Image from './image';\n\nexport default {\n    Color,\n    Markdown,\n    Status,\n    DateHelper,\n    MdiFileIcon,\n    Store,\n    Debug,\n    Pinyin,\n    StringHelper,\n    DelayAction,\n    Plain,\n    TaskQueue,\n    HtmlHelper,\n    SearchScore,\n    TimeSequence,\n    Skin,\n    LimitTimePromise,\n    SortHelper,\n    Image,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2105,
    "kind": "file",
    "name": "app/utils/limit-time-promise.js",
    "content": "/** @module limit-time-promise */\n\n/**\n * 创建一个限时 Promise\n *\n * @param {Promise} promise 要执行的 Promise\n * @param {number} [timeout=15000] 限时，单位毫秒\n * @param {string|Error} timeoutError 超时出错信息\n * @function\n */\nexport default (promise, timeout = 15000, timeoutError = 'TIMEOUT') => {\n    const timeoutPromise = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            reject(timeoutError);\n        }, timeout);\n    });\n\n    return Promise.race([promise, timeoutPromise]);\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/limit-time-promise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2106,
    "kind": "function",
    "name": "limittimepromise",
    "memberof": "app/utils/limit-time-promise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/limit-time-promise.js~limittimepromise",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/limit-time-promise.js",
    "importStyle": "limittimepromise",
    "description": "创建一个限时 Promise",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Promise"
        ],
        "spread": false,
        "optional": false,
        "name": "promise",
        "description": "要执行的 Promise"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "15000",
        "defaultRaw": 15000,
        "name": "timeout",
        "description": "限时，单位毫秒"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "timeoutError",
        "description": "超时出错信息"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2107,
    "kind": "file",
    "name": "app/utils/markdown.js",
    "content": "import Marked from 'marked';\nimport HighlightJS from 'highlight.js';\nimport HTMLParser from 'htmlparser';\nimport Config from '../config';\nimport Lang from '../lang';\nimport {strip} from './html-helper';\n\n/** @module markdown */\n\n/**\n * Marked 渲染实例\n * @constant\n * @see https://github.com/markedjs/marked\n */\nexport const renderer = new Marked.Renderer();\n\n// 重构代码块的渲染\nrenderer.code = (code, lang) => {\n    let fileName = null;\n    if (lang) {\n        const colonIndex = lang.indexOf(':');\n        const dotIndex = lang.lastIndexOf('.');\n        if (colonIndex > -1) {\n            fileName = lang.substr(colonIndex + 1);\n            lang = lang.substr(0, colonIndex);\n        } else if (dotIndex > -1) {\n            fileName = lang;\n            lang = lang.substr(dotIndex + 1);\n        }\n    }\n    const result = HighlightJS.highlightAuto(code, lang ? [lang] : undefined);\n    return `<pre class=\"code-block\" ${fileName ? (` data-name=\"${fileName}\"`) : ''}><div class=\"hint--left btn-copy-code app-link\" data-url=\"!copyCode/${lang || ''}\" data-hint=\"${Lang.string('common.copyCode')}\"><button class=\"btn iconbutton rounded primary-pale text-primary\" type=\"button\"><i class=\"icon mdi mdi-code-not-equal-variant icon-2x\"></i></button></div><code data-lang=\"${lang || ''}\" class=\"lang-${result.language}\">${result.value}</code></pre>`;\n};\n\n// 通用属性\nconst commonAttrs = new Set(['class']);\n\n// Markdown 中允许的标签\nconst allowedTags = {\n    a: new Set(['class', 'href', 'title']),\n    b: commonAttrs,\n    blockquote: commonAttrs,\n    code: true,\n    em: commonAttrs,\n    h1: commonAttrs,\n    h2: commonAttrs,\n    h3: commonAttrs,\n    h4: commonAttrs,\n    h5: commonAttrs,\n    h6: commonAttrs,\n    li: commonAttrs,\n    ol: commonAttrs,\n    ul: commonAttrs,\n    p: commonAttrs,\n    pre: commonAttrs,\n    address: commonAttrs,\n    s: commonAttrs,\n    i: commonAttrs,\n    sub: commonAttrs,\n    sup: commonAttrs,\n    strong: commonAttrs,\n    kbd: true,\n    del: true,\n    mark: true,\n    ins: true,\n    hr: true,\n    var: true,\n    table: commonAttrs,\n    tr: commonAttrs,\n    thead: commonAttrs,\n    th: new Set(['class', 'colspan', 'rowspan']),\n    td: new Set(['class', 'colspan', 'rowspan']),\n    tfoot: commonAttrs,\n    tbody: commonAttrs,\n    img: new Set(['class', 'src', 'alt']),\n    video: new Set(['class', 'controls', 'autoPlay', 'buffered', 'crossorigin', 'height', 'loop', 'muted', 'preload', 'poster', 'width', 'playsinline', 'src']),\n    source: new Set(['src', 'type']),\n    audio: new Set(['class', 'autoplay', 'buffered', 'controls', 'crossorigin', 'loop', 'muted', 'preload', 'src']),\n    track: new Set(['default', 'kind', 'label', 'src', 'srclang']),\n    div: commonAttrs,\n    span: commonAttrs,\n    dl: commonAttrs,\n    dt: commonAttrs,\n    dd: commonAttrs,\n    abbr: commonAttrs,\n    details: new Set(['class', 'open']),\n    summary: commonAttrs,\n    caption: commonAttrs,\n};\n\n// see https://github.com/tautologistics/node-htmlparser\nconst htmlParserHandler = new HTMLParser.DefaultHandler();\nconst sanitizer = tag => {\n    const isCloseTag = tag.startsWith('</');\n    if (isCloseTag) {\n        const tagName = tag.substring(2, tag.length - 1);\n        return allowedTags[tagName] ? tag : strip(tag);\n    }\n    const indexOfFirstSpace = tag.indexOf(' ');\n    const hasAttrs = indexOfFirstSpace > 0;\n    const tagName = tag.substring(1, hasAttrs ? (indexOfFirstSpace) : (tag.length - 1));\n    const allowedRule = allowedTags[tagName];\n    if (!allowedRule) {\n        return strip(tag);\n    }\n    if (!hasAttrs || !(allowedRule instanceof Set)) {\n        return `<${tagName}>`;\n    }\n\n    const filterResult = [`<${tagName}`];\n\n    const parser = new HTMLParser.Parser(htmlParserHandler);\n    parser.parseComplete(`${tag}</${tagName}>`);\n    const firstChild = htmlParserHandler.dom && htmlParserHandler.dom[0];\n    const attrs = firstChild && firstChild.attribs;\n    if (attrs) {\n        Object.keys(attrs).forEach(attrName => {\n            if (allowedRule.has(attrName)) {\n                const attrValue = attrs[attrName];\n                const quoteType = attrValue.includes('\"') ? '\\'' : '\"';\n                filterResult.push(`${attrName}=${quoteType}${attrValue}${quoteType}`);\n            }\n        });\n    }\n    filterResult.push('>');\n    return filterResult.join(' ');\n};\n\n/**\n * 初始化 Marked\n */\nMarked.setOptions({\n    renderer,\n    breaks: false,     // If true, use GFM hard and soft line breaks. Requires gfm be true.\n    gfm: true,         // If true, use approved GitHub Flavored Markdown (GFM) specification.\n    sanitize: true,    // If true, sanitize the HTML passed into markdownString with the sanitizer function.\n    sanitizer: Config.ui['chat.markdown.html'] ? sanitizer : null, // A function to sanitize the HTML passed into markdownString.\n    headerIds: false,\n    smartLists: true,  // If true, use smarter list behavior than those found in markdown.pl.\n    smartypants: true, // If true, use \"smart\" typographic punctuation for things like quotes and dashes.\n});\n\n/**\n * Marked 模块\n * @name Marked\n * @see https://github.com/markedjs/marked\n * @static\n */\nexport default Marked;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/markdown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2108,
    "kind": "variable",
    "name": "renderer",
    "memberof": "app/utils/markdown.js",
    "static": true,
    "longname": "app/utils/markdown.js~renderer",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/markdown.js",
    "importStyle": "{renderer}",
    "description": "Marked 渲染实例",
    "see": [
      "https://github.com/markedjs/marked"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2109,
    "kind": "variable",
    "name": "commonAttrs",
    "memberof": "app/utils/markdown.js",
    "static": true,
    "longname": "app/utils/markdown.js~commonAttrs",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/markdown.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2110,
    "kind": "variable",
    "name": "allowedTags",
    "memberof": "app/utils/markdown.js",
    "static": true,
    "longname": "app/utils/markdown.js~allowedTags",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/markdown.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "{\"a\": *, \"b\": *, \"blockquote\": *, \"code\": boolean, \"em\": *, \"h1\": *, \"h2\": *, \"h3\": *, \"h4\": *, \"h5\": *, \"h6\": *, \"li\": *, \"ol\": *, \"ul\": *, \"p\": *, \"pre\": *, \"address\": *, \"s\": *, \"i\": *, \"sub\": *, \"sup\": *, \"strong\": *, \"kbd\": boolean, \"del\": boolean, \"mark\": boolean, \"ins\": boolean, \"hr\": boolean, \"var\": boolean, \"table\": *, \"tr\": *, \"thead\": *, \"th\": *, \"td\": *, \"tfoot\": *, \"tbody\": *, \"img\": *, \"video\": *, \"source\": *, \"audio\": *, \"track\": *, \"div\": *, \"span\": *, \"dl\": *, \"dt\": *, \"dd\": *, \"abbr\": *, \"details\": *, \"summary\": *, \"caption\": *}"
      ]
    }
  },
  {
    "__docId__": 2111,
    "kind": "variable",
    "name": "htmlParserHandler",
    "memberof": "app/utils/markdown.js",
    "static": true,
    "longname": "app/utils/markdown.js~htmlParserHandler",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/markdown.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2112,
    "kind": "function",
    "name": "sanitizer",
    "memberof": "app/utils/markdown.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/markdown.js~sanitizer",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/markdown.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "tag",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2113,
    "kind": "file",
    "name": "app/utils/mdi-file-icon.js",
    "content": "/** @module mdi-file-icon */\n\n/* eslint-disable */\nconst ICON_file_document = 'file-document';\nconst ICON_file_excel = 'file-excel';\nconst ICON_file_word = 'file-word';\nconst ICON_file_powerpoint = 'file-powerpoint';\nconst ICON_file_pdf = 'file-pdf';\nconst ICON_file_music = 'file-music';\nconst ICON_file_video = 'file-video';\nconst ICON_file_xml = 'file-xml';\nconst ICON_file_image = 'file-image';\nconst ICON_zip_box = 'zip-box';\nconst ICON_disk = 'disk';\nconst ICON_windows = 'windows';\nconst ICON_apple = 'apple';\nconst ICON_console = 'console';\nconst ICON_language_php = 'language-php';\nconst ICON_language_cpp = 'language-cpp';\nconst ICON_language_c = 'language-c';\nconst ICON_language_csharp = 'language-csharp';\nconst ICON_language_css3 = 'language-css3';\nconst ICON_language_python = 'language-python';\nconst ICON_language_go = 'language-go';\nconst ICON_language_html5 = 'language-html5';\nconst ICON_language_javascript = 'language-javascript';\nconst ICON_language_swift = 'language-swift';\nconst ICON_language_typescript = 'language-typescript';\nconst ICON_markdown = 'markdown';\n/* eslint-enable */\n\n/**\n * 文件扩展名对应的图标查询表\n * @type {Object.<string, string>}\n * @constant\n * @example\n * const txtIcon = fileIcons['txt'];\n */\nexport const fileIcons = {\n    txt: ICON_file_document,\n    md: ICON_markdown,\n    doc: ICON_file_word,\n    docx: ICON_file_word,\n    pages: ICON_file_word,\n    xls: ICON_file_excel,\n    xlsx: ICON_file_excel,\n    csv: ICON_file_excel,\n    numbers: ICON_file_excel,\n    ppt: ICON_file_powerpoint,\n    pptx: ICON_file_powerpoint,\n    key: ICON_file_powerpoint,\n    pdf: ICON_file_pdf,\n    zip: ICON_zip_box,\n    '7z': ICON_zip_box,\n    rar: ICON_zip_box,\n    iso: ICON_disk,\n    dmg: ICON_disk,\n    exe: ICON_windows,\n    app: ICON_apple,\n    bat: ICON_console,\n    sh: ICON_console,\n    avi: ICON_file_video,\n    mp4: ICON_file_video,\n    mkv: ICON_file_video,\n    mov: ICON_file_video,\n    wmv: ICON_file_video,\n    ogg: ICON_file_music,\n    mp3: ICON_file_music,\n    wav: ICON_file_music,\n    wma: ICON_file_music,\n    aac: ICON_file_music,\n    jpg: ICON_file_image,\n    jpeg: ICON_file_image,\n    png: ICON_file_image,\n    gif: ICON_file_image,\n    bmp: ICON_file_image,\n    psd: ICON_file_image,\n    tiff: ICON_file_image,\n    svg: ICON_file_xml,\n    cpp: ICON_language_cpp,\n    c: ICON_language_c,\n    php: ICON_language_php,\n    js: ICON_language_javascript,\n    css: ICON_language_css3,\n    html: ICON_language_html5,\n    htm: ICON_language_html5,\n    ts: ICON_language_typescript,\n    swift: ICON_language_swift,\n    go: ICON_language_go,\n    cs: ICON_language_csharp,\n    py: ICON_language_python,\n};\n\n/**\n * 根据文件名称获取对应的图标\n *\n * @function\n * @param {string} fileName 文件名\n * @return {string}\n */\nexport default fileName => {\n    if (fileName.includes('.')) {\n        const ext = fileName.substr(fileName.lastIndexOf('.') + 1);\n        const icon = fileIcons[ext.toLowerCase()];\n        if (icon) {\n            return icon;\n        }\n    }\n    return 'file-outline';\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/mdi-file-icon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2114,
    "kind": "variable",
    "name": "ICON_file_document",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_file_document",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@module",
        "tagValue": "mdi-file-icon"
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2115,
    "kind": "variable",
    "name": "ICON_file_excel",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_file_excel",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2116,
    "kind": "variable",
    "name": "ICON_file_word",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_file_word",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2117,
    "kind": "variable",
    "name": "ICON_file_powerpoint",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_file_powerpoint",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2118,
    "kind": "variable",
    "name": "ICON_file_pdf",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_file_pdf",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2119,
    "kind": "variable",
    "name": "ICON_file_music",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_file_music",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2120,
    "kind": "variable",
    "name": "ICON_file_video",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_file_video",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2121,
    "kind": "variable",
    "name": "ICON_file_xml",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_file_xml",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2122,
    "kind": "variable",
    "name": "ICON_file_image",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_file_image",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2123,
    "kind": "variable",
    "name": "ICON_zip_box",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_zip_box",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2124,
    "kind": "variable",
    "name": "ICON_disk",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_disk",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2125,
    "kind": "variable",
    "name": "ICON_windows",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_windows",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2126,
    "kind": "variable",
    "name": "ICON_apple",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_apple",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2127,
    "kind": "variable",
    "name": "ICON_console",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_console",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2128,
    "kind": "variable",
    "name": "ICON_language_php",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_php",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2129,
    "kind": "variable",
    "name": "ICON_language_cpp",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_cpp",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2130,
    "kind": "variable",
    "name": "ICON_language_c",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_c",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2131,
    "kind": "variable",
    "name": "ICON_language_csharp",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_csharp",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2132,
    "kind": "variable",
    "name": "ICON_language_css3",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_css3",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2133,
    "kind": "variable",
    "name": "ICON_language_python",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_python",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2134,
    "kind": "variable",
    "name": "ICON_language_go",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_go",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2135,
    "kind": "variable",
    "name": "ICON_language_html5",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_html5",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2136,
    "kind": "variable",
    "name": "ICON_language_javascript",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_javascript",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2137,
    "kind": "variable",
    "name": "ICON_language_swift",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_swift",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2138,
    "kind": "variable",
    "name": "ICON_language_typescript",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_language_typescript",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2139,
    "kind": "variable",
    "name": "ICON_markdown",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~ICON_markdown",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2140,
    "kind": "variable",
    "name": "fileIcons",
    "memberof": "app/utils/mdi-file-icon.js",
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~fileIcons",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": "{fileIcons}",
    "description": "文件扩展名对应的图标查询表",
    "examples": [
      "const txtIcon = fileIcons['txt'];"
    ],
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2141,
    "kind": "function",
    "name": "mdifileicon",
    "memberof": "app/utils/mdi-file-icon.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/mdi-file-icon.js~mdifileicon",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/mdi-file-icon.js",
    "importStyle": "mdifileicon",
    "description": "根据文件名称获取对应的图标",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "文件名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2142,
    "kind": "file",
    "name": "app/utils/pinyin.js",
    "content": "import PinYin from 'pinyin';\n\n/** @module pinyin */\n\n/**\n * 将文本字符串中的中文转换为拼音形式\n * @param  {string} str 要转换的字符串\n * @param  {string|string[]} [styles='default'] 样式类型，包括 'STYLE_NORMAL'，'STYLE_FIRST_LETTER'，'STYLE_INITIALS'\n * @param  {string} [separator=' '] 拼音分隔符\n * @return {string}\n * @function\n * @see https://github.com/hotoo/pinyin\n */\nexport default (str, styles = 'default', separator = ' ') => {\n    if (!styles || styles === 'default') {\n        styles = [PinYin.STYLE_NORMAL, PinYin.STYLE_FIRST_LETTER, PinYin.STYLE_INITIALS];\n    }\n    if (!Array.isArray(styles)) {\n        styles = [styles];\n    }\n    const pinyins = styles.map(style => {\n        if (typeof style === 'string') {\n            switch (style) {\n            case 'normal':\n            case 'STYLE_NORMAL':\n                style = PinYin.STYLE_NORMAL;\n                break;\n            case 'first-letter':\n            case 'STYLE_FIRST_LETTER':\n                style = PinYin.STYLE_FIRST_LETTER;\n                break;\n            case 'initials':\n            case 'STYLE_INITIALS':\n                style = PinYin.STYLE_INITIALS;\n                break;\n            }\n        }\n        return PinYin(str, {style}).map(x => x[0]).join('');\n    });\n    return separator === false ? pinyins : pinyins.join(separator);\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/pinyin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2143,
    "kind": "function",
    "name": "pinyin",
    "memberof": "app/utils/pinyin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/pinyin.js~pinyin",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/pinyin.js",
    "importStyle": "pinyin",
    "description": "将文本字符串中的中文转换为拼音形式",
    "see": [
      "https://github.com/hotoo/pinyin"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "要转换的字符串"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'default'",
        "defaultRaw": "'default'",
        "name": "styles",
        "description": "样式类型，包括 'STYLE_NORMAL'，'STYLE_FIRST_LETTER'，'STYLE_INITIALS'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "' '",
        "defaultRaw": "' '",
        "name": "separator",
        "description": "拼音分隔符"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2144,
    "kind": "file",
    "name": "app/utils/plain.js",
    "content": "/** @module plain */\n\n/**\n * 将一个 Object 值转换为简单化形式\n * 简单化是指移除所有函数以及 Getter 或 Setter，忽略以属性名称 `$` 开头的属性，便于持久化存储\n * @param {any} obj 要操作的值\n * @return {any}\n * @ignore\n */\nconst plain = (obj) => {\n    if (obj === undefined) obj = this;\n    if (Array.isArray(obj)) {\n        return obj.map(plain);\n    }\n    const objType = typeof obj;\n    if (obj !== null && objType === 'object') {\n        const plainObj = {};\n        Object.keys(obj).forEach(key => {\n            const val = obj[key];\n            const typeVal = typeof val;\n            if (key && key[0] !== '$' && typeVal !== 'function') {\n                plainObj[key] = typeVal === 'object' ? plain(val) : val;\n            }\n        });\n        return plainObj;\n    }\n    if (objType === 'function') return;\n    return obj;\n};\n\n/**\n * 将一个 Object 值转换为简单化形式\n * 简单化是指移除所有函数以及 Getter 或 Setter，忽略以属性名称 '$' 开头的属性，便于持久化存储\n * @param {any} obj 要操作的值\n * @return {any}\n * @function\n */\nexport default plain;\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/plain.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2145,
    "kind": "function",
    "name": "plain",
    "memberof": "app/utils/plain.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/plain.js~plain",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/plain.js",
    "importStyle": "plain",
    "description": "将一个 Object 值转换为简单化形式\n简单化是指移除所有函数以及 Getter 或 Setter，忽略以属性名称 '$' 开头的属性，便于持久化存储",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "要操作的值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2146,
    "kind": "file",
    "name": "app/utils/react-debug.js",
    "content": "import React from 'react';\n\n// 使用 why-did-you-update 优化 react 性能\n// see https://github.com/maicki/why-did-you-update\n\nconst wdyu = false;\n\nif (wdyu && process.env.NODE_ENV !== 'production') {\n    try {\n        const {whyDidYouUpdate} = __non_webpack_require__('why-did-you-update'); // eslint-disable-line\n        whyDidYouUpdate(React);\n    } catch (error) {\n        console.warn('Cannot find the debug module why-did-you-update.');\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/react-debug.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2147,
    "kind": "variable",
    "name": "wdyu",
    "memberof": "app/utils/react-debug.js",
    "static": true,
    "longname": "app/utils/react-debug.js~wdyu",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/react-debug.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2148,
    "kind": "file",
    "name": "app/utils/search-score.js",
    "content": "/** @module search-score */\n\n/**\n * 根据条件描述对象获取给定对象与关键字的匹配分值\n * @param {{name: !string, equal: number, include: boolean, array: boolean, prefix: string}} condition 条件描述\n * @param {string} key 关键字\n * @param {Object} obj 要计算分值的对象\n * @return {string}\n * @private\n */\nconst calcConditionScore = (condition, key, obj) => {\n    let score = 0;\n    let source = obj[condition.name];\n    if (source === undefined || source === null) {\n        return score;\n    }\n    if (typeof source === 'number') {\n        source = `${source}`;\n    }\n    let searchKey = key;\n    if (condition.prefix) {\n        if (key.startsWith(condition.prefix) && key.length > condition.prefix.length) {\n            const cIndex = key.lastIndexOf('(');\n            if (key[key.length - 1] === ')' && cIndex > -1) {\n                searchKey = key.substring(cIndex + 1, key.length - 1);\n            } else {\n                searchKey = key.substr(condition.prefix.length);\n            }\n        } else {\n            return score;\n        }\n    }\n    if (condition.array) {\n        let arrayMatchCount = 0;\n        source.forEach(item => {\n            const itemSource = item.trim().toLowerCase();\n            if (condition.equal && itemSource === searchKey) {\n                score += condition.equal;\n                arrayMatchCount += 1;\n            } else if (condition.include && itemSource.includes(searchKey)) {\n                score += condition.include;\n                arrayMatchCount += 1;\n            }\n        });\n        if (arrayMatchCount < source.length) {\n            score /= 2;\n        }\n    } else {\n        const sourceValue = source.trim().toLowerCase();\n        if (condition.equal && sourceValue === searchKey) {\n            score += condition.equal;\n        } else if (condition.include && sourceValue.includes(searchKey)) {\n            score += condition.include;\n        }\n    }\n    return score;\n};\n\n/**\n * 根据条件权值表获取给定对象与关键字的匹配程度，返回一个分值作为比较，分值越大表示越匹配\n *\n * @example <caption>条件描述对象例子</caption>\n * const conditions = [\n *     {name: 'name', equal: 100, include: 50},\n *     {name: 'displayName', equal: 100, include: 50},\n *     {name: 'description', include: 25},\n *     {name: 'keywords', equal: 50, include: 10, array: true},\n *     {name: 'type', equal: 100, prefix: ':'},\n *     {name: 'author', equal: 100, prefix: '@'},\n *     {name: 'publisher', equal: 100, prefix: '@'},\n *     {name: 'homepage', include: 25},\n * ];\n *\n * @param {Array} conditions 条件描述对象\n * @param {Array<String>} keys 搜索关键词组\n * @function\n * @return {number} 返回一个分值作为比较，分值越大表示越匹配\n */\nexport const matchScore = (conditions, obj, keys) => {\n    if (!Array.isArray(keys)) {\n        keys = [keys];\n    }\n    if (!Array.isArray(conditions)) {\n        conditions = [conditions];\n    }\n    let score = 0;\n    let matchCount = 0;\n\n    keys.forEach(key => {\n        if (key === undefined || key === null || !key.length) {\n            return;\n        }\n        conditions.forEach(condition => {\n            const conditionScore = calcConditionScore(condition, key, obj);\n            if (conditionScore) {\n                matchCount += 1;\n                score += conditionScore;\n            }\n        });\n    });\n\n    if (matchCount !== keys.length) {\n        score /= 2;\n    }\n    return score;\n};\n\nexport default {matchScore};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/search-score.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2149,
    "kind": "function",
    "name": "calcConditionScore",
    "memberof": "app/utils/search-score.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/search-score.js~calcConditionScore",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/search-score.js",
    "importStyle": null,
    "description": "根据条件描述对象获取给定对象与关键字的匹配分值",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "{name: !string, equal: number, include: boolean, array: boolean, prefix: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "条件描述"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "关键字"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "要计算分值的对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2150,
    "kind": "function",
    "name": "matchScore",
    "memberof": "app/utils/search-score.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/search-score.js~matchScore",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/search-score.js",
    "importStyle": "{matchScore}",
    "description": "根据条件权值表获取给定对象与关键字的匹配程度，返回一个分值作为比较，分值越大表示越匹配",
    "examples": [
      "<caption>条件描述对象例子</caption>\nconst conditions = [\n    {name: 'name', equal: 100, include: 50},\n    {name: 'displayName', equal: 100, include: 50},\n    {name: 'description', include: 25},\n    {name: 'keywords', equal: 50, include: 10, array: true},\n    {name: 'type', equal: 100, prefix: ':'},\n    {name: 'author', equal: 100, prefix: '@'},\n    {name: 'publisher', equal: 100, prefix: '@'},\n    {name: 'homepage', include: 25},\n];"
    ],
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "conditions",
        "description": "条件描述对象"
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "搜索关键词组"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "返回一个分值作为比较，分值越大表示越匹配"
    }
  },
  {
    "__docId__": 2151,
    "kind": "file",
    "name": "app/utils/shortcut.js",
    "content": "import Platform from 'Platform'; // eslint-disable-line\n\nconst {isWindowsOS, isOSX} = Platform.env;\n\n/**\n * 按键代码与按键名称表\n * @type {Object.<number,string>}\n * @private\n */\nconst specialKeys = {\n    8: 'Backspace',\n    9: 'Tab',\n    13: 'Enter',\n    16: 'Shift',\n    17: 'Ctrl',\n    18: 'Alt',\n    19: 'Pause',\n    20: 'Capslock',\n    27: 'Esc',\n    32: 'Space',\n    33: 'PageUp',\n    34: 'PageDown',\n    35: 'End',\n    36: 'Home',\n    37: 'Left',\n    38: 'Up',\n    39: 'Right',\n    40: 'Down',\n    45: 'Insert',\n    46: 'Del',\n    96: '0',\n    97: '1',\n    98: '2',\n    99: '3',\n    100: '4',\n    101: '5',\n    102: '6',\n    103: '7',\n    104: '8',\n    105: '9',\n    106: '*',\n    107: '+',\n    109: '-',\n    110: '.',\n    111: '/',\n    112: 'F1',\n    113: 'F2',\n    114: 'F3',\n    115: 'F4',\n    116: 'F5',\n    117: 'F6',\n    118: 'F7',\n    119: 'F8',\n    120: 'F9',\n    121: 'F10',\n    122: 'F11',\n    123: 'F12',\n    144: 'NumLock',\n    145: 'Scroll',\n    191: '/',\n    224: 'Meta'\n};\n\n/**\n * 修饰键集合\n * @type {Set}\n * @private\n */\nconst modifyKeys = new Set(['Alt', 18, 'Meta', 224, 'Ctrl', 17, 'Shift', 16, 'Option', 'Windows', 'Command']);\n\n/**\n * 格式化快捷键组合字符串\n * @param {string} decoration 快捷键组合字符串\n * @return {string}\n * @function\n */\nexport const formatKeyDecoration = decoration => {\n    if (decoration) {\n        if (isWindowsOS) {\n            decoration = decoration.replace('Meta', 'Windows').replace('Command', 'Windows').replace('Option', 'Alt');\n        } else if (isOSX) {\n            decoration = decoration.replace('Meta', 'Command').replace('Windows', 'Command').replace('Alt', 'Option');\n        } else {\n            decoration = decoration.replace('Command', 'Meta').replace('Windows', 'Meta').replace('Option', 'Alt');\n        }\n    }\n    return decoration;\n};\n\n/**\n * 根据键盘按键事件对象获取快捷键组合字符串\n * @param {Event} event 键盘按键事件对象\n * @return {string}\n * @function\n */\nexport const getKeyDecoration = event => {\n    const {keyCode} = event;\n    const shortcut = [];\n    if (event.shiftKey) {\n        shortcut.push('Shift');\n    }\n    if (event.ctrlKey) {\n        shortcut.push('Ctrl');\n    }\n    if (event.altKey) {\n        shortcut.push('Alt');\n    }\n    if (event.metaKey) {\n        shortcut.push('Meta');\n    }\n    if (keyCode && !modifyKeys.has(keyCode)) {\n        if (specialKeys[keyCode]) {\n            shortcut.push(specialKeys[keyCode]);\n        } else {\n            shortcut.push(String.fromCharCode(keyCode) || event.key);\n        }\n    }\n    return formatKeyDecoration(shortcut.join('+'));\n};\n\n/**\n * 快捷键组合字符串中是否仅仅包含修饰键\n * @param {string} decoration 快捷键组合字符串\n * @return {boolean}\n * @function\n */\nexport const isOnlyModifyKeys = decoration => {\n    if (!decoration) {\n        return false;\n    }\n    return decoration.split('+').every(x => (modifyKeys.has(x)));\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/shortcut.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2152,
    "kind": "variable",
    "name": "isWindowsOS",
    "memberof": "app/utils/shortcut.js",
    "static": true,
    "longname": "app/utils/shortcut.js~isWindowsOS",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/shortcut.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2153,
    "kind": "variable",
    "name": "specialKeys",
    "memberof": "app/utils/shortcut.js",
    "static": true,
    "longname": "app/utils/shortcut.js~specialKeys",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/shortcut.js",
    "importStyle": null,
    "description": "按键代码与按键名称表",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Object.<number,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2154,
    "kind": "variable",
    "name": "modifyKeys",
    "memberof": "app/utils/shortcut.js",
    "static": true,
    "longname": "app/utils/shortcut.js~modifyKeys",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/shortcut.js",
    "importStyle": null,
    "description": "修饰键集合",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2155,
    "kind": "function",
    "name": "formatKeyDecoration",
    "memberof": "app/utils/shortcut.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/shortcut.js~formatKeyDecoration",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/shortcut.js",
    "importStyle": "{formatKeyDecoration}",
    "description": "格式化快捷键组合字符串",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "decoration",
        "description": "快捷键组合字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2156,
    "kind": "function",
    "name": "getKeyDecoration",
    "memberof": "app/utils/shortcut.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/shortcut.js~getKeyDecoration",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/shortcut.js",
    "importStyle": "{getKeyDecoration}",
    "description": "根据键盘按键事件对象获取快捷键组合字符串",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "键盘按键事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2157,
    "kind": "function",
    "name": "isOnlyModifyKeys",
    "memberof": "app/utils/shortcut.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/shortcut.js~isOnlyModifyKeys",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/shortcut.js",
    "importStyle": "{isOnlyModifyKeys}",
    "description": "快捷键组合字符串中是否仅仅包含修饰键",
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "decoration",
        "description": "快捷键组合字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2158,
    "kind": "file",
    "name": "app/utils/skin.js",
    "content": "import Color from './color';\n\n/**\n * 默认皮肤选项\n * @type {Object.<string, any>}\n * @private\n */\nconst DEFAULT_OPTIONS = {\n    outline: false,\n    pale: false,\n    dark: false,\n    code: 'random',\n    textTint: true,\n    backTint: true,\n    textColor: '',\n    darkText: '#fff',\n    lightText: '#333',\n    hueSpace: 43,\n    threshold: 0.43,\n    darkLight: 0.4,\n    paleLight: 0.92,\n    saturation: 0.7,\n    lightness: 0.6,\n    longShadow: false,\n    // name: '',\n};\n\n/**\n * 根据给定字符串获取一个对应的唯一的固定值\n * @param {string} str 要计算值的字符串\n * @return {number}\n */\nexport const getCodeFromString = (str) => {\n    if (!str) {\n        return 0;\n    }\n    return str.split('')\n        .map(char => char.charCodeAt(0))\n        .reduce((current, previous) => previous + current);\n};\n\n/**\n * 计算长阴影样式\n * @param {number} shadowSize 阴影大小\n * @param {string|number|Object} color 阴影颜色\n * @param {boolean} [returnShadow=false] 是否返回阴影值，如果为 `false` 则返回样式对象\n * @param {number} [darkenAmount=8] 阴影色彩加深百分比\n * @return {Object|string}\n * @private\n */\nexport const longShadow = (shadowSize, color, returnShadow = false, darkenAmount = 8) => {\n    if (typeof shadowSize !== 'number') {\n        shadowSize = 40;\n    }\n    const shadowColor = Color.create(color).darken(darkenAmount).css;\n    const textShadowArr = [];\n    for (let i = 1; i <= shadowSize; ++i) {\n        textShadowArr.push(`${shadowColor} ${i}px ${i}px`);\n    }\n    const textShadow = textShadowArr.join(',');\n    return returnShadow ? textShadow : {textShadow};\n};\n\n/**\n * 根据值或配置对象生成 CSS 样式对象\n * @param {number|Object<string, any>} skinCode 皮肤值\n * @param {Object<string, any>} options 皮肤配置对象\n * @return {Object<string, any>}\n */\nexport const skinStyle = (skinCode, options = {}) => {\n    if (typeof skinCode === 'object') {\n        options = skinCode;\n    } else {\n        options.code = skinCode;\n    }\n    options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    let {\n        outline,\n        pale,\n        dark,\n        textTint,\n        backTint,\n        darkText,\n        lightText,\n        color,\n        code,\n        textColor,\n        hueSpace,\n        threshold,\n        darkLight,\n        paleLight,\n        saturation,\n        lightness,\n        name,\n        longShadow: thisLongShadow,\n        ...other\n    } = options;\n\n    if (!color) {\n        if (code === 'random') {\n            code = Math.floor(Math.random() * 360);\n        }\n        if (typeof code === 'string') {\n            if (!Color.isColor(code)) {\n                code = getCodeFromString(code);\n            }\n        }\n        if (typeof code === 'number') {\n            code = {h: (code * hueSpace) % 360, s: saturation, l: lightness};\n        }\n        color = Color.create(code);\n        if (code !== 'random') {\n            options.color = color;\n        }\n    }\n\n    let backColor = '';\n    let borderColor = '';\n    let fontColor = textColor;\n    if (outline) {\n        if (dark) {\n            const darkColor = color.clone().setHsl({s: saturation, l: darkLight});\n            borderColor = darkColor;\n        } else if (pale) {\n            const lightColor = color.clone().setHsl({s: saturation, l: paleLight});\n            borderColor = lightColor;\n        } else {\n            borderColor = color;\n        }\n        if (!fontColor && textTint) {\n            fontColor = borderColor;\n        }\n    } else if (backTint) {\n        if (dark) {\n            const darkColor = color.clone().setHsl({s: saturation, l: darkLight});\n            backColor = darkColor;\n        } else if (pale) {\n            const lightColor = color.clone().setHsl({s: saturation, l: paleLight});\n            backColor = lightColor;\n        } else {\n            backColor = color;\n        }\n        if (!fontColor) {\n            if (backColor.isDark(threshold)) {\n                fontColor = darkText;\n            } else if (textTint) {\n                const darkColor = color.clone().setHsl({s: saturation, l: darkLight});\n                fontColor = darkColor;\n            } else {\n                fontColor = lightText;\n            }\n        }\n    } else if (dark) {\n        const darkColor = color.clone().setHsl({s: saturation, l: darkLight});\n        fontColor = darkColor;\n    } else if (pale) {\n        const lightColor = color.clone().setHsl({s: saturation, l: paleLight});\n        fontColor = lightColor;\n    } else {\n        fontColor = color;\n    }\n\n    const style = Object.assign({}, other);\n    if (backColor) style.backgroundColor = backColor.css || backColor;\n    if (borderColor) style.borderColor = borderColor.css || borderColor;\n    if (fontColor) style.color = fontColor.css || fontColor;\n    if (thisLongShadow) {\n        style.textShadow = longShadow(thisLongShadow, backColor, true);\n    }\n    return style;\n};\n\n/**\n * 根据值或配置对象生成适合应用文本外观的 CSS 样式对象\n * @param {number} skinCode 皮肤值\n * @param {Object<string, any>} options 皮肤配置对象\n * @return {Object<string, any>}\n */\nconst textSkin = (skinCode, options) => {\n    return skinStyle(skinCode, Object.assign({backTint: false}, options));\n};\n\nexport default {\n    style: skinStyle,\n    text: textSkin,\n    longShadow,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/skin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2159,
    "kind": "variable",
    "name": "DEFAULT_OPTIONS",
    "memberof": "app/utils/skin.js",
    "static": true,
    "longname": "app/utils/skin.js~DEFAULT_OPTIONS",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/skin.js",
    "importStyle": null,
    "description": "默认皮肤选项",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "Object.<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2160,
    "kind": "function",
    "name": "getCodeFromString",
    "memberof": "app/utils/skin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/skin.js~getCodeFromString",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/skin.js",
    "importStyle": "{getCodeFromString}",
    "description": "根据给定字符串获取一个对应的唯一的固定值",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "要计算值的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2161,
    "kind": "function",
    "name": "longShadow",
    "memberof": "app/utils/skin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/skin.js~longShadow",
    "access": "private",
    "export": true,
    "importPath": "xuanxuan/app/utils/skin.js",
    "importStyle": "{longShadow}",
    "description": "计算长阴影样式",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "shadowSize",
        "description": "阴影大小"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "阴影颜色"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "returnShadow",
        "description": "是否返回阴影值，如果为 `false` 则返回样式对象"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "8",
        "defaultRaw": 8,
        "name": "darkenAmount",
        "description": "阴影色彩加深百分比"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2162,
    "kind": "function",
    "name": "skinStyle",
    "memberof": "app/utils/skin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/skin.js~skinStyle",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/skin.js",
    "importStyle": "{skinStyle}",
    "description": "根据值或配置对象生成 CSS 样式对象",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "skinCode",
        "description": "皮肤值"
      },
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "皮肤配置对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2163,
    "kind": "function",
    "name": "textSkin",
    "memberof": "app/utils/skin.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/skin.js~textSkin",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/skin.js",
    "importStyle": null,
    "description": "根据值或配置对象生成适合应用文本外观的 CSS 样式对象",
    "lineNumber": 180,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "skinCode",
        "description": "皮肤值"
      },
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "皮肤配置对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2164,
    "kind": "file",
    "name": "app/utils/sort-helper.js",
    "content": "/**\n * 根据排序依据属性对一个对象数组进行排序\n * @param {!any[]} list 要排序的列表\n * @param {!(string|string[])} orders 排序依据的属性或者多个属性组成的数组\n * @return {any[]}\n */\nexport const sortList = (list, orders) => {\n    if (!orders) {\n        if (DEBUG) {\n            console.error('Param orders cannot be null on call Helper.sortList(list, orders)');\n        }\n        return list;\n    }\n    if (typeof orders === 'string') {\n        orders = orders.split(' ');\n    } else if (!Array.isArray(orders)) {\n        orders = [orders];\n    }\n    let isFinalInverse = false;\n    if (orders[0] === '-' || orders[0] === -1) {\n        isFinalInverse = true;\n        orders.shift();\n    }\n    return list.sort((y, x) => {\n        let result = 0;\n        for (let order of orders) {\n            if (result !== 0) break;\n            if (typeof order === 'function') {\n                result = order(y, x);\n            } else {\n                const isInverse = order[0] === '-';\n                if (isInverse) order = order.substr(1);\n                let xValue = x[order];\n                let yValue = y[order];\n                if (xValue === undefined || xValue === null) xValue = 0;\n                if (yValue === undefined || yValue === null) yValue = 0;\n                result = xValue < yValue ? 1 : (xValue === yValue ? 0 : -1);\n                result *= isInverse ? (-1) : 1;\n            }\n        }\n        return result * (isFinalInverse ? (-1) : 1);\n    });\n};\n\nexport default {sortList};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/sort-helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2165,
    "kind": "function",
    "name": "sortList",
    "memberof": "app/utils/sort-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/sort-helper.js~sortList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/sort-helper.js",
    "importStyle": "{sortList}",
    "description": "根据排序依据属性对一个对象数组进行排序",
    "lineNumber": 7,
    "params": [
      {
        "nullable": false,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "要排序的列表"
      },
      {
        "nullable": false,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "orders",
        "description": "排序依据的属性或者多个属性组成的数组"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2166,
    "kind": "file",
    "name": "app/utils/status.js",
    "content": "/**\n * 状态存储类\n *\n * @class StatusKeeper\n */\nexport class StatusKeeper {\n    /**\n     * 创建一个状态存储类实例\n     * @param {number|string} status 当前状态\n     * @param {Status} mapper 状态表对象\n     * @constructor\n     */\n    constructor(status, mapper) {\n        this.mapper = mapper;\n        this.status = mapper.getValue(status);\n        if (this.status === undefined) {\n            this.status = mapper.defaultValue;\n        }\n    }\n\n    /**\n     * 获取当前状态名称\n     * @type {string}\n     * @readonly\n     * @memberof StatusKeeper\n     */\n    get name() {\n        return this.mapper.getName(this.status);\n    }\n\n    /**\n     * 获取当前状态值\n     * @type {number}\n     * @readonly\n     * @memberof StatusKeeper\n     */\n    get value() {\n        return this.mapper.getValue(this.status);\n    }\n\n    /**\n     * 获取当前状态变更事件回调函数\n     * @type {Function}\n     * @memberof StatusKeeper\n     */\n    get onChange() {\n        return this._onChange;\n    }\n\n    /**\n     * 设置当前状态变更事件回调函数\n     * @param {Function} callback 事件回调函数\n     * @memberof StatusKeeper\n     */\n    set onChange(callback) {\n        this._onChange = callback;\n    }\n\n    /**\n     * 获取检查状态是否允许变更回调函数\n     * @type {Function}\n     * @memberof StatusKeeper\n     */\n    get canChange() {\n        return this._canChange;\n    }\n\n    /**\n     * 设置检查状态是否允许变更回调函数\n     * @param {Function} callback 事件回调函数\n     * @memberof StatusKeeper\n     */\n    set canChange(callback) {\n        this._canChange = callback;\n    }\n\n    /**\n     * 变更状态\n     *\n     * @param {string|number} nameOrValue 新的状态值或名称\n     * @memberof StatusKeeper\n     * @return {void}\n     */\n    change(nameOrValue) {\n        const value = this.mapper.getValue(nameOrValue);\n        const oldValue = this.value;\n        if (value !== undefined && oldValue !== value) {\n            if (!this._canChange || this._canChange(value, oldValue)) {\n                this.status = value;\n                if (typeof this._onChange === 'function') {\n                    this._onChange(value, oldValue, this);\n                }\n            } else if (DEBUG) {\n                console.error(`Status '${oldValue}' cannot change to ${nameOrValue} with the rule.`);\n            }\n        }\n    }\n\n    /**\n     * 检查当前状态是否为给定的状态\n     * @param {string|number} nameOrValue\n     * @return {boolean}\n     * @memberof StatusKeeper\n     */\n    is(nameOrValue) {\n        const value = this.mapper.getValue(nameOrValue);\n        return value !== undefined && value === this.status;\n    }\n}\n\n/**\n * 状态管理类（状态表）\n *\n * @class Status\n */\nexport default class Status {\n    /**\n     * 创建一个状态管理类\n     * @param {Object.<string, number>} statuses 状态表对象\n     * @param {string|number} defaultStatus 默认状态\n     * @constructor\n     */\n    constructor(statuses, defaultStatus) {\n        /**\n         * 按状态值顺序依次存储状态名称\n         * @type {Object}\n         * @private\n         */\n        this.$values = {};\n\n        Object.keys(statuses).forEach(name => {\n            if (typeof this[name] !== 'undefined') {\n                throw new Error(`Cannot create status object, the name '${name}' is not a valid status name.`);\n            }\n            const value = statuses[name];\n            if (typeof value !== 'number') {\n                throw new Error(`Cannot create status object, the status value(${value}) must be a number.`);\n            }\n            this.$values[value] = name;\n            this[name] = value;\n        });\n\n        if (defaultStatus !== undefined) {\n            /**\n             * 默认状态\n             * @type {number}\n             */\n            this.defaultStatus = this.getValue(defaultStatus);\n        }\n        if (this.defaultStatus === undefined) {\n            // eslint-disable-next-line prefer-destructuring\n            this.defaultStatus = this.values[0];\n        }\n    }\n\n    /**\n     * 获取所有状态名称\n     * @type {Array.<string>}\n     * @readonly\n     * @memberof Status\n     */\n    get names() {\n        return Object.values(this.$values);\n    }\n\n    /**\n     * 获取所有状态值\n     * @type {Array.<number>}\n     * @readonly\n     * @memberof Status\n     */\n    get values() {\n        return Object.keys(this.$values);\n    }\n\n    /**\n     * 获取默认状态名称\n     * @type {string}\n     * @readonly\n     * @memberof Status\n     */\n    get defaultName() {\n        return this.getName(this.defaultStatus);\n    }\n\n    /**\n     * 获取默认状态值\n     * @type {number}\n     * @readonly\n     * @memberof Status\n     */\n    get defaultValue() {\n        return this.getValue(this.defaultStatus);\n    }\n\n    /**\n     * 获取指定状态的名称\n     * @param {string|number} valueOrName 状态值或名称\n     * @param {string} defaultName 默认状态名称\n     * @return {string}\n     * @memberof Status\n     */\n    getName(valueOrName, defaultName) {\n        let name;\n        if (typeof valueOrName === 'number') {\n            name = this.$values[valueOrName];\n        } else if (this[valueOrName] !== undefined) {\n            name = valueOrName;\n        }\n        return name === undefined ? defaultName : name;\n    }\n\n    /**\n     * 获取指定状态的值\n     * @param {string|number} valueOrName 状态值或值\n     * @param {number} defaultName 默认状态值\n     * @return {number}\n     * @memberof Status\n     */\n    getValue(valueOrName, defaultValue) {\n        let value;\n        if (typeof valueOrName === 'string') {\n            value = this[valueOrName];\n        } else if (this.$values[valueOrName] !== undefined) {\n            value = valueOrName;\n        }\n        return value === undefined ? defaultValue : value;\n    }\n\n    /**\n     * 判断两个状态是否相同\n     * @param {string|number} status1 状态1\n     * @param {string|number} status2 状态2\n     * @return {boolean}\n     * @memberof Status\n     */\n    isSame(status1, status2) {\n        return this.getValue(status1) === this.getValue(status2);\n    }\n\n    /**\n     * 创建一个状态存储类实例\n     *\n     * @param {string|number} status 状态值或名称\n     * @returns {StatusKeeper}\n     * @memberof Status\n     */\n    create(status) {\n        if (status === undefined) {\n            status = this.defaultValue;\n        }\n        return new StatusKeeper(status, this);\n    }\n\n    /**\n     * 状态存储类\n     *\n     * @constructor StatusKeeper\n     * @static\n     * @memberof Status\n     */\n    static Keeper = StatusKeeper;\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/status.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2167,
    "kind": "class",
    "name": "StatusKeeper",
    "memberof": "app/utils/status.js",
    "static": true,
    "longname": "app/utils/status.js~StatusKeeper",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/status.js",
    "importStyle": "{StatusKeeper}",
    "description": "状态存储类",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "StatusKeeper"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2168,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/utils/status.js~StatusKeeper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#constructor",
    "access": "public",
    "description": "创建一个状态存储类实例",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "当前状态"
      },
      {
        "nullable": null,
        "types": [
          "Status"
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": "状态表对象"
      }
    ]
  },
  {
    "__docId__": 2169,
    "kind": "member",
    "name": "mapper",
    "memberof": "app/utils/status.js~StatusKeeper",
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#mapper",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2170,
    "kind": "member",
    "name": "status",
    "memberof": "app/utils/status.js~StatusKeeper",
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#status",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2172,
    "kind": "get",
    "name": "name",
    "memberof": "app/utils/status.js~StatusKeeper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#name",
    "access": "public",
    "description": "获取当前状态名称",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2173,
    "kind": "get",
    "name": "value",
    "memberof": "app/utils/status.js~StatusKeeper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#value",
    "access": "public",
    "description": "获取当前状态值",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2174,
    "kind": "get",
    "name": "onChange",
    "memberof": "app/utils/status.js~StatusKeeper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#onChange",
    "access": "public",
    "description": "获取当前状态变更事件回调函数",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2175,
    "kind": "set",
    "name": "onChange",
    "memberof": "app/utils/status.js~StatusKeeper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#onChange",
    "access": "public",
    "description": "设置当前状态变更事件回调函数",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "事件回调函数"
      }
    ]
  },
  {
    "__docId__": 2176,
    "kind": "member",
    "name": "_onChange",
    "memberof": "app/utils/status.js~StatusKeeper",
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#_onChange",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2177,
    "kind": "get",
    "name": "canChange",
    "memberof": "app/utils/status.js~StatusKeeper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#canChange",
    "access": "public",
    "description": "获取检查状态是否允许变更回调函数",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2178,
    "kind": "set",
    "name": "canChange",
    "memberof": "app/utils/status.js~StatusKeeper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#canChange",
    "access": "public",
    "description": "设置检查状态是否允许变更回调函数",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "事件回调函数"
      }
    ]
  },
  {
    "__docId__": 2179,
    "kind": "member",
    "name": "_canChange",
    "memberof": "app/utils/status.js~StatusKeeper",
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#_canChange",
    "access": "private",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2180,
    "kind": "method",
    "name": "change",
    "memberof": "app/utils/status.js~StatusKeeper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#change",
    "access": "public",
    "description": "变更状态",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nameOrValue",
        "description": "新的状态值或名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2182,
    "kind": "method",
    "name": "is",
    "memberof": "app/utils/status.js~StatusKeeper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~StatusKeeper#is",
    "access": "public",
    "description": "检查当前状态是否为给定的状态",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nameOrValue",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2183,
    "kind": "class",
    "name": "Status",
    "memberof": "app/utils/status.js",
    "static": true,
    "longname": "app/utils/status.js~Status",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/status.js",
    "importStyle": "Status",
    "description": "状态管理类（状态表）",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Status"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/utils/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~Status#constructor",
    "access": "public",
    "description": "创建一个状态管理类",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object.<string, number>"
        ],
        "spread": false,
        "optional": false,
        "name": "statuses",
        "description": "状态表对象"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultStatus",
        "description": "默认状态"
      }
    ]
  },
  {
    "__docId__": 2185,
    "kind": "member",
    "name": "$values",
    "memberof": "app/utils/status.js~Status",
    "static": false,
    "longname": "app/utils/status.js~Status#$values",
    "access": "private",
    "description": "按状态值顺序依次存储状态名称",
    "lineNumber": 129,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2186,
    "kind": "member",
    "name": "[name]",
    "memberof": "app/utils/status.js~Status",
    "static": false,
    "longname": "app/utils/status.js~Status#[name]",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2187,
    "kind": "member",
    "name": "defaultStatus",
    "memberof": "app/utils/status.js~Status",
    "static": false,
    "longname": "app/utils/status.js~Status#defaultStatus",
    "access": "public",
    "description": "默认状态",
    "lineNumber": 148,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2189,
    "kind": "get",
    "name": "names",
    "memberof": "app/utils/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~Status#names",
    "access": "public",
    "description": "获取所有状态名称",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2190,
    "kind": "get",
    "name": "values",
    "memberof": "app/utils/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~Status#values",
    "access": "public",
    "description": "获取所有状态值",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array.<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2191,
    "kind": "get",
    "name": "defaultName",
    "memberof": "app/utils/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~Status#defaultName",
    "access": "public",
    "description": "获取默认状态名称",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2192,
    "kind": "get",
    "name": "defaultValue",
    "memberof": "app/utils/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~Status#defaultValue",
    "access": "public",
    "description": "获取默认状态值",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2193,
    "kind": "method",
    "name": "getName",
    "memberof": "app/utils/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~Status#getName",
    "access": "public",
    "description": "获取指定状态的名称",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "valueOrName",
        "description": "状态值或名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultName",
        "description": "默认状态名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2194,
    "kind": "method",
    "name": "getValue",
    "memberof": "app/utils/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~Status#getValue",
    "access": "public",
    "description": "获取指定状态的值",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "valueOrName",
        "description": "状态值或值"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultName",
        "description": "默认状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2195,
    "kind": "method",
    "name": "isSame",
    "memberof": "app/utils/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~Status#isSame",
    "access": "public",
    "description": "判断两个状态是否相同",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "status1",
        "description": "状态1"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "status2",
        "description": "状态2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2196,
    "kind": "method",
    "name": "create",
    "memberof": "app/utils/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/status.js~Status#create",
    "access": "public",
    "description": "创建一个状态存储类实例",
    "lineNumber": 248,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StatusKeeper}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "状态值或名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StatusKeeper"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2197,
    "kind": "member",
    "name": "Keeper",
    "memberof": "app/utils/status.js~Status",
    "static": true,
    "longname": "app/utils/status.js~Status.Keeper",
    "access": "public",
    "description": "状态存储类",
    "lineNumber": 262,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": "StatusKeeper"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2198,
    "kind": "file",
    "name": "app/utils/store.js",
    "content": "/** @module utils/store */\n\n/**\n * 本地存储对象\n * @type {Storage}\n * @private\n */\nconst storage = window.localStorage;\n\n/**\n * 将 JS 值序列化为 JSON 字符串\n * @param {any} value 要序列化的值\n * @return {string}\n * @private\n */\nconst serialize = value => {\n    if (typeof value === 'string') return value;\n    return JSON.stringify(value);\n};\n\n/**\n * 将 JSON 字符串反序列化为 JS 值\n * @param {string} value 要反序列化的字符串\n * @return {any}\n * @private\n */\nconst deserialize = value => {\n    if (typeof value === 'string') {\n        try {\n            return JSON.parse(value);\n        // eslint-disable-next-line no-empty\n        } catch (ignore) {}\n    }\n    return value;\n};\n\n/**\n * 设置本地存储值\n * @param {string} key 键\n * @param {any} value 值\n * @return {void}\n */\nexport const setStoreItem = (key, value) => {\n    storage.setItem(key, serialize(value));\n};\n\n/**\n * 获取本地存储值\n * @param {string} key 键\n * @param {any} defaultValue 默认值\n * @return {any}\n */\nexport const getStoreItem = (key, defaultValue) => {\n    const val = deserialize(storage.getItem(key));\n    return val === null ? defaultValue : val;\n};\n\n/**\n * 移除本地存储值\n * @param {string} key 键\n * @return {void}\n */\nexport const removeStoreItem = key => storage.removeItem(key);\n\n/**\n * 清空本地存储\n * @return {void}\n\n */\nexport const clearStore = () => storage.clear();\n\n/**\n * 获取本地存储条目数目\n * @return {number}\n */\nexport const getStoreLength = () => storage.length;\n\n/**\n * 遍历本地存储所有条目\n * @param {function} callback 遍历回调函数\n * @return {void}\n */\nexport const storeForEach = callback => {\n    const length = getStoreLength();\n    for (let i = 0; i < length; ++i) {\n        const key = storage.key(i);\n        if (callback) {\n            callback(getStoreItem(key), key, i);\n        }\n    }\n};\n\n/**\n * 通过对象返回本地存储中的所有键值对\n * @return {Object.<string, any>}\n */\nexport const storeGetAll = () => {\n    const all = {};\n    storeForEach((value, key) => {\n        all[key] = value;\n    });\n    return all;\n};\n\nexport default {\n    set: setStoreItem,\n    get: getStoreItem,\n    remove: removeStoreItem,\n    clear: clearStore,\n    forEach: storeForEach,\n    get length() {\n        return getStoreLength();\n    },\n    get all() {\n        return storeGetAll();\n    }\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/store.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2199,
    "kind": "variable",
    "name": "storage",
    "memberof": "app/utils/store.js",
    "static": true,
    "longname": "app/utils/store.js~storage",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/store.js",
    "importStyle": null,
    "description": "本地存储对象",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "Storage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2200,
    "kind": "function",
    "name": "serialize",
    "memberof": "app/utils/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/store.js~serialize",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/store.js",
    "importStyle": null,
    "description": "将 JS 值序列化为 JSON 字符串",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "要序列化的值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2201,
    "kind": "function",
    "name": "deserialize",
    "memberof": "app/utils/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/store.js~deserialize",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/store.js",
    "importStyle": null,
    "description": "将 JSON 字符串反序列化为 JS 值",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "要反序列化的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2202,
    "kind": "function",
    "name": "setStoreItem",
    "memberof": "app/utils/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/store.js~setStoreItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/store.js",
    "importStyle": "{setStoreItem}",
    "description": "设置本地存储值",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "键"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2203,
    "kind": "function",
    "name": "getStoreItem",
    "memberof": "app/utils/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/store.js~getStoreItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/store.js",
    "importStyle": "{getStoreItem}",
    "description": "获取本地存储值",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "键"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "默认值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2204,
    "kind": "function",
    "name": "removeStoreItem",
    "memberof": "app/utils/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/store.js~removeStoreItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/store.js",
    "importStyle": "{removeStoreItem}",
    "description": "移除本地存储值",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "键"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2205,
    "kind": "function",
    "name": "clearStore",
    "memberof": "app/utils/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/store.js~clearStore",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/store.js",
    "importStyle": "{clearStore}",
    "description": "清空本地存储",
    "lineNumber": 70,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2206,
    "kind": "function",
    "name": "getStoreLength",
    "memberof": "app/utils/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/store.js~getStoreLength",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/store.js",
    "importStyle": "{getStoreLength}",
    "description": "获取本地存储条目数目",
    "lineNumber": 76,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2207,
    "kind": "function",
    "name": "storeForEach",
    "memberof": "app/utils/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/store.js~storeForEach",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/store.js",
    "importStyle": "{storeForEach}",
    "description": "遍历本地存储所有条目",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "遍历回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2208,
    "kind": "function",
    "name": "storeGetAll",
    "memberof": "app/utils/store.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/store.js~storeGetAll",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/store.js",
    "importStyle": "{storeGetAll}",
    "description": "通过对象返回本地存储中的所有键值对",
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "Object.<string, any>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2209,
    "kind": "file",
    "name": "app/utils/string-helper.js",
    "content": "/**\n * 格式化字符串\n * @param {string} str 要格式化的字符串\n * @param  {...any} args 格式化参数\n * @return  {string}\n * @example <caption>通过参数序号格式化</caption>\n *     var hello = $.format('{0} {1}!', 'Hello', 'world');\n *     // hello 值为 'Hello world!'\n * @example <caption>通过对象名称格式化</caption>\n *     var say = $.format('Say {what} to {who}', {what: 'hello', who: 'you'});\n *     // say 值为 'Say hello to you'\n */\nexport const formatString = (str, ...args) => {\n    let result = str;\n    if (args.length > 0) {\n        let reg;\n        if (args.length === 1 && (typeof args[0] === 'object')) {\n            // eslint-disable-next-line prefer-destructuring\n            args = args[0];\n            Object.keys(args).forEach(key => {\n                if (args[key] !== undefined) {\n                    reg = new RegExp(`({${key}})`, 'g');\n                    result = result.replace(reg, args[key]);\n                }\n            });\n        } else {\n            for (let i = 0; i < args.length; i++) {\n                if (args[i] !== undefined) {\n                    reg = new RegExp(`({[${i}]})`, 'g');\n                    result = result.replace(reg, args[i]);\n                }\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * 字节单位表\n * @type {Object}\n */\nexport const BYTE_UNITS = {\n    B: 1,\n    KB: 1024,\n    MB: 1024 * 1024,\n    GB: 1024 * 1024 * 1024,\n    TB: 1024 * 1024 * 1024 * 1024,\n};\n\n/**\n * 格式化字节值为包含单位的字符串\n * @param {number} size 字节大小\n * @param {number} [fixed=2] 保留的小数点尾数\n * @param {string} [unit=''] 单位，如果留空，则自动使用最合适的单位\n * @return {string}\n */\nexport const formatBytes = (size, fixed = 2, unit = '') => {\n    if (!unit) {\n        if (size < BYTE_UNITS.KB) {\n            unit = 'B';\n        } else if (size < BYTE_UNITS.MB) {\n            unit = 'KB';\n        } else if (size < BYTE_UNITS.GB) {\n            unit = 'MB';\n        } else if (size < BYTE_UNITS.TB) {\n            unit = 'GB';\n        } else {\n            unit = 'TB';\n        }\n    }\n\n    return (size / BYTE_UNITS[unit]).toFixed(fixed) + unit;\n};\n\n/**\n * 检查字符串是否为未定义（`null` 或者 `undefined`）或者为空字符串\n * @param  {string} s 要检查的字符串\n * @return {boolean}\n */\nexport const isEmptyString = s => (s === undefined || s === null || s === '');\n\n/**\n * 检查字符串是否不是空字符串\n * @param  {string} s 要检查的字符串\n * @return {boolean}\n */\nexport const isNotEmptyString = s => (s !== undefined && s !== null && s !== '');\n\n/**\n * 检查字符串是否不是空字符串，如果为空则返回第二个参数给定的字符串，否则返回字符串自身\n * @param  {string} s 要检查的字符串\n * @param  {string} thenStr 如果为空字符串时要返回的字符串\n * @return {boolean}\n */\nexport const ifEmptyStringThen = (str, thenStr) => {\n    return isEmptyString(str) ? thenStr : str;\n};\n\nexport default {\n    format: formatString,\n    isEmpty: isEmptyString,\n    isNotEmpty: isNotEmptyString,\n    formatBytes,\n    ifEmptyThen: ifEmptyStringThen,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/string-helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2210,
    "kind": "function",
    "name": "formatString",
    "memberof": "app/utils/string-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/string-helper.js~formatString",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/string-helper.js",
    "importStyle": "{formatString}",
    "description": "格式化字符串",
    "examples": [
      "<caption>通过参数序号格式化</caption>\n    var hello = $.format('{0} {1}!', 'Hello', 'world');\n    // hello 值为 'Hello world!'",
      "<caption>通过对象名称格式化</caption>\n    var say = $.format('Say {what} to {who}', {what: 'hello', who: 'you'});\n    // say 值为 'Say hello to you'"
    ],
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "要格式化的字符串"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "格式化参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2211,
    "kind": "variable",
    "name": "BYTE_UNITS",
    "memberof": "app/utils/string-helper.js",
    "static": true,
    "longname": "app/utils/string-helper.js~BYTE_UNITS",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/string-helper.js",
    "importStyle": "{BYTE_UNITS}",
    "description": "字节单位表",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2212,
    "kind": "function",
    "name": "formatBytes",
    "memberof": "app/utils/string-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/string-helper.js~formatBytes",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/string-helper.js",
    "importStyle": "{formatBytes}",
    "description": "格式化字节值为包含单位的字符串",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "字节大小"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "fixed",
        "description": "保留的小数点尾数"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "unit",
        "description": "单位，如果留空，则自动使用最合适的单位"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2213,
    "kind": "function",
    "name": "isEmptyString",
    "memberof": "app/utils/string-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/string-helper.js~isEmptyString",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/string-helper.js",
    "importStyle": "{isEmptyString}",
    "description": "检查字符串是否为未定义（`null` 或者 `undefined`）或者为空字符串",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "要检查的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2214,
    "kind": "function",
    "name": "isNotEmptyString",
    "memberof": "app/utils/string-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/string-helper.js~isNotEmptyString",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/string-helper.js",
    "importStyle": "{isNotEmptyString}",
    "description": "检查字符串是否不是空字符串",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "要检查的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2215,
    "kind": "function",
    "name": "ifEmptyStringThen",
    "memberof": "app/utils/string-helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/string-helper.js~ifEmptyStringThen",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/string-helper.js",
    "importStyle": "{ifEmptyStringThen}",
    "description": "检查字符串是否不是空字符串，如果为空则返回第二个参数给定的字符串，否则返回字符串自身",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "要检查的字符串"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "thenStr",
        "description": "如果为空字符串时要返回的字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2216,
    "kind": "file",
    "name": "app/utils/task-queue.js",
    "content": "import Status from './status';\nimport timeSequence from './time-sequence';\n\nconst STATUS = new Status({\n    wait: 0,\n    pending: 1,\n    // paused: 2,\n    done: 2,\n    canceled: 3\n}, 0);\n\nexport default class TaskQueue {\n    constructor(tasks, onTask, onTaskStart) {\n        this._tasks = [];\n        this._finished = [];\n        this._status = STATUS.create();\n        this._runId = 0;\n        this._onTask = onTask;\n        this._onTaskStart = onTaskStart;\n        this._running = 0;\n\n        if (tasks) {\n            this.add(tasks);\n        }\n\n        this._status.onChange = (status, oldStatus) => {\n            if (this._onStatusChange) {\n                this._onStatusChange(status, oldStatus);\n            }\n        };\n    }\n\n    get onTaskStart() {\n        return this._onTaskStart;\n    }\n\n    set onTaskStart(callback) {\n        this._onTaskStart = callback;\n    }\n\n    get onTask() {\n        return this._onTask;\n    }\n\n    set onTask(callback) {\n        this._onTask = callback;\n    }\n\n    get onStatusChange() {\n        return this._onStatusChange;\n    }\n\n    set onStatusChange(callback) {\n        this._onStatusChange = callback;\n    }\n\n    get runId() {\n        return this._runId;\n    }\n\n    get taskCount() {\n        return this._tasks.length;\n    }\n\n    get finishCount() {\n        return this._finished.length;\n    }\n\n    get totalCount() {\n        return this._tasks.length + this._finished.length;\n    }\n\n    get statusValue() {\n        return this._status.value;\n    }\n\n    get statusName() {\n        return this._status.name;\n    }\n\n    get isRunning() {\n        return this._status.is(STATUS.pending);\n    }\n\n    get isWait() {\n        return this._status.is(STATUS.wait);\n    }\n\n    get percent() {\n        return this.finishCount / this.totalCount;\n    }\n\n    add(...tasks) {\n        for (const task of tasks) {\n            if (Array.isArray(task)) {\n                this.add(...task);\n            } else {\n                this._tasks.push(task);\n            }\n        }\n    }\n\n    cancel() {\n        if (this.isRunning) {\n            this._status.change(STATUS.canceled);\n            this._runId = 0;\n        }\n        return this;\n    }\n\n    runTask(task, ...params) {\n        const taskFunc = (typeof task === 'object' && task.func) ? task.func : task;\n        if (this._onTaskStart) {\n            this._onTaskStart(task, this.percent, this);\n        }\n        const result = taskFunc(...params);\n        if (result instanceof Promise) {\n            return result;\n        }\n        return Promise.resolve(result);\n    }\n\n    next(runId, resolve, reject, ...params) {\n        const task = this._tasks[0];\n        this.runTask(task, ...params).then(result => {\n            if (runId === this._runId) {\n                this._finished.push(this._tasks.shift());\n                if (this._onTask) {\n                    this._onTask(result, task, this.percent, this);\n                }\n                if (!this._tasks.length) {\n                    this._status.change(STATUS.done);\n                    resolve(this._finished.length);\n                } else if (this.isRunning) {\n                    if (result !== undefined) {\n                        params.push(result);\n                    }\n                    this.next(runId, resolve, reject, ...params);\n                }\n            } else {\n                reject('canceled');\n            }\n            return result;\n        }).catch(reject);\n    }\n\n    run(...params) {\n        if (!this._tasks.length) {\n            return Promise.resolve(0);\n        }\n        if (!this.isWait) {\n            const errorMessage = `The status is not wait(current '${this.statusName}')`;\n            if (DEBUG) {\n                console.error(errorMessage, this);\n            }\n            return Promise.reject(errorMessage);\n        }\n        return new Promise((resolve, reject) => {\n            const runId = timeSequence();\n            this._runId = runId;\n            this._status.change(STATUS.pending);\n            this.next(runId, resolve, reject, ...params);\n        });\n    }\n\n    reset() {\n        this.cancel();\n        this._status.change(STATUS.wait);\n        this._tasks.push(...this._finished);\n        this._finished = [];\n        return this;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/task-queue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2217,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "app/utils/task-queue.js",
    "static": true,
    "longname": "app/utils/task-queue.js~STATUS",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/utils/task-queue.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "app/utils/status.js~Status"
      ]
    }
  },
  {
    "__docId__": 2218,
    "kind": "class",
    "name": "TaskQueue",
    "memberof": "app/utils/task-queue.js",
    "static": true,
    "longname": "app/utils/task-queue.js~TaskQueue",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/task-queue.js",
    "importStyle": "TaskQueue",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 2219,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 2220,
    "kind": "member",
    "name": "_tasks",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#_tasks",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 2221,
    "kind": "member",
    "name": "_finished",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#_finished",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 2222,
    "kind": "member",
    "name": "_status",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#_status",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2223,
    "kind": "member",
    "name": "_runId",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#_runId",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2224,
    "kind": "member",
    "name": "_onTask",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#_onTask",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2225,
    "kind": "member",
    "name": "_onTaskStart",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#_onTaskStart",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2226,
    "kind": "member",
    "name": "_running",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#_running",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2227,
    "kind": "get",
    "name": "onTaskStart",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#onTaskStart",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2228,
    "kind": "set",
    "name": "onTaskStart",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#onTaskStart",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 2230,
    "kind": "get",
    "name": "onTask",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#onTask",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2231,
    "kind": "set",
    "name": "onTask",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#onTask",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 2233,
    "kind": "get",
    "name": "onStatusChange",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#onStatusChange",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2234,
    "kind": "set",
    "name": "onStatusChange",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#onStatusChange",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true
  },
  {
    "__docId__": 2235,
    "kind": "member",
    "name": "_onStatusChange",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#_onStatusChange",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2236,
    "kind": "get",
    "name": "runId",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#runId",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2237,
    "kind": "get",
    "name": "taskCount",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#taskCount",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2238,
    "kind": "get",
    "name": "finishCount",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#finishCount",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2239,
    "kind": "get",
    "name": "totalCount",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#totalCount",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2240,
    "kind": "get",
    "name": "statusValue",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#statusValue",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2241,
    "kind": "get",
    "name": "statusName",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#statusName",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2242,
    "kind": "get",
    "name": "isRunning",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#isRunning",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2243,
    "kind": "get",
    "name": "isWait",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#isWait",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2244,
    "kind": "get",
    "name": "percent",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#percent",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2245,
    "kind": "method",
    "name": "add",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#add",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "tasks",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 2246,
    "kind": "method",
    "name": "cancel",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#cancel",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2248,
    "kind": "method",
    "name": "runTask",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#runTask",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "task",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2249,
    "kind": "method",
    "name": "next",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#next",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "runId",
        "types": [
          "*"
        ]
      },
      {
        "name": "resolve",
        "types": [
          "*"
        ]
      },
      {
        "name": "reject",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 2250,
    "kind": "method",
    "name": "run",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#run",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2252,
    "kind": "method",
    "name": "reset",
    "memberof": "app/utils/task-queue.js~TaskQueue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/utils/task-queue.js~TaskQueue#reset",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2254,
    "kind": "file",
    "name": "app/utils/time-sequence.js",
    "content": "/**\n * 存储下次生成的运行时序列号\n * @type {number}\n * @private\n */\nlet start = Math.floor((new Date().getTime() - 1504504705755) / 1000);\n\n/**\n * 每次调用获取一个运行时递增的唯一的整数序列号\n * @return {number}\n */\nexport default () => (start++);\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/utils/time-sequence.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2255,
    "kind": "variable",
    "name": "start",
    "memberof": "app/utils/time-sequence.js",
    "static": true,
    "longname": "app/utils/time-sequence.js~start",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/utils/time-sequence.js",
    "importStyle": null,
    "description": "存储下次生成的运行时序列号",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2256,
    "kind": "function",
    "name": "timesequence",
    "memberof": "app/utils/time-sequence.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/utils/time-sequence.js~timesequence",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/utils/time-sequence.js",
    "importStyle": "timesequence",
    "description": "每次调用获取一个运行时递增的唯一的整数序列号",
    "lineNumber": 12,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2257,
    "kind": "file",
    "name": "app/views/chats/chat-add-category-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport ChatAddCategory from './chat-add-category';\nimport Lang from '../../lang';\nimport {setChatCategory} from '../../core/im/im-server';\n\nconst showChatAddCategoryDialog = (chat, callback) => {\n    const modalId = 'app-chat-add-category-dialog';\n    let chatAddCategory = null;\n    return Modal.show({\n        id: modalId,\n        title: Lang.string('chats.menu.group.add'),\n        style: {width: 400},\n        content: <ChatAddCategory.ChatAddCategory ref={e => {chatAddCategory = e;}} chat={chat} />,\n        onSubmit: () => {\n            const {category} = chatAddCategory;\n            const oldName = chat.category;\n            if (category.name === oldName) {\n                return;\n            }\n            if (category.type === 'create') {\n                if (!category.name) {\n                    Modal.alert(Lang.string('chats.menu.group.requiredNewName'));\n                    return false;\n                }\n            }\n            setChatCategory(chat, category.name);\n        }\n    }, callback);\n};\n\nexport default {\n    show: showChatAddCategoryDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-add-category-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2258,
    "kind": "function",
    "name": "showChatAddCategoryDialog",
    "memberof": "app/views/chats/chat-add-category-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-add-category-dialog.js~showChatAddCategoryDialog",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-add-category-dialog.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "chat",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2259,
    "kind": "file",
    "name": "app/views/chats/chat-add-category.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport {getChatCategories} from '../../core/im/im-chats';\nimport Lang from '../../lang';\nimport InputControl from '../../components/input-control';\nimport Radio from '../../components/radio';\nimport RadioGroup from '../../components/radio-group';\nimport SelectBox from '../../components/select-box';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatAddCategory 组件 ，显示一个添加聊天分类界面\n * @class ChatAddCategory\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example <caption>组件类调用方式</caption>\n * import ChatAddCategory from './chat-add-category';\n * <ChatAddCategory />\n */\nexport default class ChatAddCategory extends Component {\n    /**\n     * 获取 ChatAddCategory 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatAddCategory>}\n     * @readonly\n     * @static\n     * @memberof ChatAddCategory\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatAddCategory} from './chat-add-category';\n     * <ChatAddCategory />\n     */\n    static get ChatAddCategory() {\n        return replaceViews('chats/chat-add-category', ChatAddCategory);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatAddCategory\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        children: PropTypes.any,\n        chat: PropTypes.any.isRequired,\n        onCategoryChange: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatAddCategory\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        children: null,\n        onCategoryChange: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatAddCategory 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        const {chat} = props;\n\n        /**\n         * 全部分类信息\n         * @type {Object[]}\n         * @private\n         */\n        this.allCategories = getChatCategories(chat.isOne2One ? 'contact' : 'group');\n\n        /**\n         * 原始分类名称\n         * @type {string}\n         * @private\n         */\n        this.originCategory = chat.category;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            type: (this.allCategories && this.allCategories.length) ? 'modify' : 'create',\n            selectName: this.originCategory,\n            newName: ''\n        };\n    }\n\n    /**\n     * 获取当前用户选择的分类\n     * @memberof ChatAddCategory\n     * @type {{type: string, name: string}}\n     */\n    get category() {\n        const {type, newName, selectName} = this.state;\n        return {type, name: type === 'create' ? newName : selectName};\n    }\n\n    /**\n     * 触发分类变更事件\n     * @private\n     * @return {void}\n     * @memberof ChatAddCategory\n     */\n    changeCategory = () => {\n        const {onCategoryChange} = this.props;\n        const {type, newName, selectName} = this.state;\n        if (onCategoryChange) {\n            onCategoryChange(type === 'create' ? newName : selectName, type);\n        }\n    };\n\n    /**\n     * 处理分类类型变更事件事件\n     * @param {string} type 分类类型\n     * @memberof ChatAddCategory\n     * @private\n     * @return {void}\n     */\n    handleRadioGroupChange = type => {\n        this.setState({type}, () => {\n            const control = (type === 'create' ? this.inputGroup : this.selectBox);\n            if (control) {\n                control.focus();\n            }\n            this.changeCategory();\n        });\n    };\n\n    /**\n     * 处理新的分类名称变更事件\n     * @param {string} newName 新名称\n     * @param {Event} e 事件对象\n     * @memberof ChatAddCategory\n     * @private\n     * @return {void}\n     */\n    handleNewNameChange = (newName, e) => {\n        this.setState({newName}, this.changeCategory);\n        e.stopPropagation();\n    };\n\n    /**\n     * 处理所选分类名称变更事件\n     * @param {string} selectName 所选分类名称\n     * @param {Event} e 事件对象\n     * @memberof ChatAddCategory\n     * @private\n     * @return {void}\n     */\n    handleSelectNameChange = (selectName, e) => {\n        this.setState({selectName}, this.changeCategory);\n        e.stopPropagation();\n    };\n\n    /**\n     * 检查新的分类名称是否已经存在\n     * @memberof ChatAddCategory\n     * @returns {boolean} 如果返回 `true` 则为是已经存在，否则为不是已经存在\n     */\n    isNewNameExist() {\n        const {newName} = this.state;\n        return newName && this.allCategories.find(x => x.id === newName);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatAddCategory\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            children,\n            onCategoryChange,\n            ...other\n        } = this.props;\n\n        const {type, newName, selectName} = this.state;\n\n        const isTypeCreate = type === 'create';\n        let createView = null;\n        if (isTypeCreate) {\n            createView = (\n                <div className=\"sub-control\">\n                    <InputControl\n                        ref={e => {this.inputGroup = e;}}\n                        value={newName}\n                        onChange={this.handleNewNameChange}\n                        label={false}\n                        placeholder={Lang.string('chats.menu.group.createTip')}\n                        helpText={this.isNewNameExist() ? Lang.string('chats.menu.group.existsTip') : null}\n                    />\n                </div>\n            );\n        }\n\n        let modifyView = null;\n        const hasExistCategory = this.allCategories && this.allCategories.length;\n        if (!isTypeCreate && hasExistCategory) {\n            const options = this.allCategories.map(x => {\n                let {title} = x;\n                if (!x.id) {\n                    const defaultTitle = Lang.string('chats.menu.group.default');\n                    if (defaultTitle !== title) {\n                        title += ` (${defaultTitle})`;\n                    }\n                } else if (x.id === this.originCategory) {\n                    title += ` (${Lang.string('chats.menu.group.current')})`;\n                }\n                return {label: title, value: x.id};\n            });\n            modifyView = (\n                <div className=\"sub-control\">\n                    <SelectBox ref={e => {this.selectBox = e;}} value={selectName} onChange={this.handleSelectNameChange} options={options} />\n                </div>\n            );\n        }\n\n        const langAddExist = Lang.string('chats.menu.group.addExist');\n        return (\n            <div className={classes('app-chats-add-category', className)} {...other}>\n                {children}\n                <RadioGroup onChange={this.handleRadioGroupChange}>\n                    <Radio name=\"chat-category\" disabled={!hasExistCategory} label={hasExistCategory ? langAddExist : <span>{langAddExist} (<small>{Lang.string('chats.menu.group.noCategoryToAdd')}</small>)</span>} checked={!isTypeCreate} value=\"modify\">{modifyView}</Radio>\n                    <Radio name=\"chat-category\" label={Lang.string('chats.menu.group.create')} checked={isTypeCreate} value=\"create\">{createView}</Radio>\n                </RadioGroup>\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-add-category.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2260,
    "kind": "class",
    "name": "ChatAddCategory",
    "memberof": "app/views/chats/chat-add-category.js",
    "static": true,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-add-category.js",
    "importStyle": "ChatAddCategory",
    "description": "ChatAddCategory 组件 ，显示一个添加聊天分类界面",
    "examples": [
      "<caption>组件类调用方式</caption>\nimport ChatAddCategory from './chat-add-category';\n<ChatAddCategory />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatAddCategory"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2261,
    "kind": "get",
    "name": "ChatAddCategory",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory.ChatAddCategory",
    "access": "public",
    "description": "获取 ChatAddCategory 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatAddCategory} from './chat-add-category';\n<ChatAddCategory />"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatAddCategory>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2262,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": true,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2263,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": true,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2264,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatAddCategory 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2265,
    "kind": "member",
    "name": "allCategories",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#allCategories",
    "access": "private",
    "description": "全部分类信息",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2266,
    "kind": "member",
    "name": "originCategory",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#originCategory",
    "access": "private",
    "description": "原始分类名称",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2267,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2268,
    "kind": "get",
    "name": "category",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#category",
    "access": "public",
    "description": "获取当前用户选择的分类",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "{type: string, name: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2269,
    "kind": "member",
    "name": "changeCategory",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#changeCategory",
    "access": "private",
    "description": "触发分类变更事件",
    "lineNumber": 115,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2270,
    "kind": "member",
    "name": "handleRadioGroupChange",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#handleRadioGroupChange",
    "access": "private",
    "description": "处理分类类型变更事件事件",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "分类类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2271,
    "kind": "member",
    "name": "handleNewNameChange",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#handleNewNameChange",
    "access": "private",
    "description": "处理新的分类名称变更事件",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": "新名称"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2272,
    "kind": "member",
    "name": "handleSelectNameChange",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#handleSelectNameChange",
    "access": "private",
    "description": "处理所选分类名称变更事件",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "selectName",
        "description": "所选分类名称"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2273,
    "kind": "method",
    "name": "isNewNameExist",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#isNewNameExist",
    "access": "public",
    "description": "检查新的分类名称是否已经存在",
    "lineNumber": 171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是已经存在，否则为不是已经存在"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是已经存在，否则为不是已经存在"
    },
    "params": []
  },
  {
    "__docId__": 2274,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 184,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2275,
    "kind": "member",
    "name": "inputGroup",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#inputGroup",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2276,
    "kind": "member",
    "name": "selectBox",
    "memberof": "app/views/chats/chat-add-category.js~ChatAddCategory",
    "static": false,
    "longname": "app/views/chats/chat-add-category.js~ChatAddCategory#selectBox",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2277,
    "kind": "file",
    "name": "app/views/chats/chat-avatar.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport App from '../../core';\nimport Chat from '../../core/models/chat';\nimport {UserAvatar} from '../common/user-avatar';\nimport replaceViews from '../replace-views';\n\n/**\n * 聊天图标定义\n * @type {Map<string, {name: string, colorClass: string}>}\n * @private\n */\nconst chatIcons = {\n    robot: {name: 'robot', colorClass: 'text-accent'},\n    group: {name: 'comment-multiple-outline', colorClass: 'text-info'},\n    'public-group': {name: 'pound-box', colorClass: 'text-green'},\n    'system-group': {name: 'comment-text', colorClass: 'text-primary'}\n};\n\n/**\n * ChatAvatar 组件 ，显示聊天图标界面\n * @class ChatAvatar\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatAvatar from './chat-avatar';\n * <ChatAvatar />\n */\nexport default class ChatAvatar extends Component {\n    /**\n     * 获取 ChatAvatar 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatAvatar>}\n     * @readonly\n     * @static\n     * @memberof ChatAvatar\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatAvatar} from './chat-avatar';\n     * <ChatAvatar />\n     */\n    static get ChatAvatar() {\n        return replaceViews('chats/chat-avatar', ChatAvatar);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatAvatar\n     * @type {Object}\n     */\n    static propTypes = {\n        chat: PropTypes.instanceOf(Chat),\n        grayOffline: PropTypes.bool,\n        className: PropTypes.string,\n        avatarSize: PropTypes.number,\n        iconSize: PropTypes.number,\n        avatarClassName: PropTypes.string,\n        iconClassName: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatAvatar\n     * @static\n     */\n    static defaultProps = {\n        chat: null,\n        grayOffline: false,\n        className: null,\n        avatarSize: null,\n        iconSize: null,\n        avatarClassName: null,\n        iconClassName: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof ChatAvatar\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        const nextChat = nextProps.chat;\n        const {chat} = this.props;\n        if (chat !== nextChat || this.lastChatUpdateId !== nextChat.updateId) {\n            return true;\n        }\n        if (nextProps.grayOffline && nextChat.isOne2One && nextChat.getTheOtherOne(App).updateId !== this.lastOtherOneUpdateId) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatAvatar\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            grayOffline,\n            className,\n            avatarSize,\n            iconSize,\n            avatarClassName,\n            iconClassName,\n            ...other\n        } = this.props;\n\n\n        if (chat.isOne2One) {\n            const theOtherOne = chat.getTheOtherOne(App);\n            this.lastOtherOneUpdateId = theOtherOne.updateId;\n            const grayscale = grayOffline && (theOtherOne.isOffline || !App.profile.isUserOnline);\n            return <UserAvatar size={avatarSize} user={theOtherOne} className={classes(className, avatarClassName, {grayscale})} {...other} />;\n        }\n        let icon = null;\n        if (chat.isSystem) {\n            icon = chat.isRobot ? chatIcons.robot : chatIcons['system-group'];\n        } else if (chat.public) {\n            icon = chatIcons['public-group'];\n        } else {\n            icon = chatIcons.group;\n        }\n        this.lastChatUpdateId = chat.updateId;\n\n        return <Icon size={iconSize} name={`${icon.name} icon-2x`} className={classes(className, iconClassName, icon.colorClass)} {...other} />;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-avatar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2278,
    "kind": "variable",
    "name": "chatIcons",
    "memberof": "app/views/chats/chat-avatar.js",
    "static": true,
    "longname": "app/views/chats/chat-avatar.js~chatIcons",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-avatar.js",
    "importStyle": null,
    "description": "聊天图标定义",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, {name: string, colorClass: string}>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2279,
    "kind": "class",
    "name": "ChatAvatar",
    "memberof": "app/views/chats/chat-avatar.js",
    "static": true,
    "longname": "app/views/chats/chat-avatar.js~ChatAvatar",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-avatar.js",
    "importStyle": "ChatAvatar",
    "description": "ChatAvatar 组件 ，显示聊天图标界面",
    "examples": [
      "import ChatAvatar from './chat-avatar';\n<ChatAvatar />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatAvatar"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2280,
    "kind": "get",
    "name": "ChatAvatar",
    "memberof": "app/views/chats/chat-avatar.js~ChatAvatar",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-avatar.js~ChatAvatar.ChatAvatar",
    "access": "public",
    "description": "获取 ChatAvatar 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatAvatar} from './chat-avatar';\n<ChatAvatar />"
    ],
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatAvatar>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2281,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-avatar.js~ChatAvatar",
    "static": true,
    "longname": "app/views/chats/chat-avatar.js~ChatAvatar.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2282,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-avatar.js~ChatAvatar",
    "static": true,
    "longname": "app/views/chats/chat-avatar.js~ChatAvatar.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2283,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/chat-avatar.js~ChatAvatar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-avatar.js~ChatAvatar#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2284,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-avatar.js~ChatAvatar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-avatar.js~ChatAvatar#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 109,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2285,
    "kind": "member",
    "name": "lastOtherOneUpdateId",
    "memberof": "app/views/chats/chat-avatar.js~ChatAvatar",
    "static": false,
    "longname": "app/views/chats/chat-avatar.js~ChatAvatar#lastOtherOneUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2286,
    "kind": "member",
    "name": "lastChatUpdateId",
    "memberof": "app/views/chats/chat-avatar.js~ChatAvatar",
    "static": false,
    "longname": "app/views/chats/chat-avatar.js~ChatAvatar#lastChatUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2287,
    "kind": "file",
    "name": "app/views/chats/chat-change-font-popover.js",
    "content": "import React, {Component} from 'react';\nimport Popover from '../../components/popover';\nimport Lang from '../../lang';\nimport profile from '../../core/profile';\nimport DelayAction from '../../utils/delay-action';\nimport replaceViews from '../replace-views';\n\n/**\n * 默认字体设置\n * @type {{size: number, lineHeight: number, title: number, titleLineHeight: number}}\n * @private\n */\nconst DEFAULT_CONFIG = {\n    size: 13,\n    lineHeight: 1.5384615385,\n    title: 13,\n    titleLineHeight: 1.53846153846\n};\n\n/**\n * 所有字体设置\n * @type {{size: number, lineHeight: number, title: number, titleLineHeight: number}[]}\n * @private\n */\nconst CONFIGS = [\n    {\n        size: 12,\n        lineHeight: 1.5,\n        title: 12,\n        titleLineHeight: 1.5\n    }, DEFAULT_CONFIG, {\n        size: 14,\n        lineHeight: 1.5,\n        title: 14,\n        titleLineHeight: 1.4285714286\n    }, {\n        size: 15,\n        lineHeight: 1.5,\n        title: 15,\n        titleLineHeight: 1.6\n    }, {\n        size: 18,\n        lineHeight: 1.5,\n        title: 15,\n        titleLineHeight: 1.6\n    }, {\n        size: 20,\n        lineHeight: 1.5,\n        title: 16,\n        titleLineHeight: 1.75\n    }, {\n        size: 24,\n        lineHeight: 1.5,\n        title: 16,\n        titleLineHeight: 1.75\n    }, {\n        size: 30,\n        lineHeight: 1.5,\n        title: 18,\n        titleLineHeight: 1.666666667\n    }, {\n        size: 36,\n        lineHeight: 1.5,\n        title: 18,\n        titleLineHeight: 1.666666667\n    }\n];\n\n/**\n * ChatChangeFont-Popover 组件 ，显示一个聊天字体设置界面\n * @class ChatChangeFont-Popover\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatChangeFont-Popover from './chat-change-font-popover';\n * <ChatChangeFont-Popover />\n */\nexport class ChangeFontView extends Component {\n    /**\n     * 获取 ChatChangeFont-Popover 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatChangeFont-Popover>}\n     * @readonly\n     * @static\n     * @memberof ChatChangeFont-Popover\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatChangeFont-Popover} from './chat-change-font-popover';\n     * <ChatChangeFont-Popover />\n     */\n    static get ChangeFontView() {\n        return replaceViews('chats/chat-change-font-popover', ChangeFontView);\n    }\n\n    /**\n     * React 组件构造函数，创建一个 ChatChangeFont-Popover 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        this.state = {select: 1};\n\n        const userFontSize = profile.userConfig.chatFontSize;\n        if (userFontSize) {\n            const userIndex = CONFIGS.findIndex(x => x.size === userFontSize.size);\n            if (userIndex > -1) {\n                this.state.select = userIndex;\n            }\n        }\n\n        this.changeFontSizeTask = new DelayAction(() => {\n            const {select} = this.state;\n            profile.userConfig.chatFontSize = CONFIGS[select];\n        }, 200);\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ChatChangeFont-Popover\n     * @return {void}\n     */\n    componentWillUnmount() {\n        if (!this.changeFontSizeTask.isDone) {\n            this.changeFontSizeTask.doIm();\n        }\n    }\n\n    /**\n     * 处理刻度条变更事件\n     * @param {Event} e 事件对象\n     * @memberof ChatChangeFont-Popover\n     * @private\n     * @return {void}\n     */\n    handleSliderChange = e => {\n        const select = parseInt(e.target.value, 10);\n        this.setState({select});\n        this.changeFontSizeTask.do(select);\n    }\n\n    /**\n     * 处理重置按钮点击事件\n     * @param {Event} event 事件对象\n     * @memberof ChatChangeFont-Popover\n     * @private\n     * @return {void}\n     */\n    handleResetBtnClick = (event) => {\n        this.setState({select: 1});\n        this.changeFontSizeTask.do(1);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatChangeFont-Popover\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {select} = this.state;\n        const currentConfig = CONFIGS[select];\n        return (\n            <div className=\"box\">\n                <div className=\"flex space space-between\">\n                    <strong>{Lang.string('chat.sendbox.toolbar.setFontSize')}</strong>\n                    <small className=\"text-gray\">{Lang.format('chat.fontSize.current.format', currentConfig.size)}px  {select !== 1 ? <a className=\"text-primary\" onClick={this.handleResetBtnClick}>{Lang.string('chat.fontSize.resetDefault')}</a> : null}</small>\n                </div>\n                <input className=\"fluid\" type=\"range\" min=\"0\" value={select} max={CONFIGS.length - 1} step=\"1\" onChange={this.handleSliderChange} />\n            </div>\n        );\n    }\n}\n\n/**\n * 显示聊天字体设置弹出面板\n * @param {{x: number, y: number}} position 显示位置\n * @param {function} callback 显示完成后的回调函数\n * @return {void}\n */\nexport const showChangeFontPopover = (position, callback) => {\n    const popoverId = 'app-chat-change-font-popover';\n    return Popover.show(\n        position,\n        <ChangeFontView />,\n        {id: popoverId, width: 250, height: 80},\n        callback\n    );\n};\n\nexport default {\n    show: showChangeFontPopover\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-change-font-popover.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2288,
    "kind": "variable",
    "name": "DEFAULT_CONFIG",
    "memberof": "app/views/chats/chat-change-font-popover.js",
    "static": true,
    "longname": "app/views/chats/chat-change-font-popover.js~DEFAULT_CONFIG",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-change-font-popover.js",
    "importStyle": null,
    "description": "默认字体设置",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "{size: number, lineHeight: number, title: number, titleLineHeight: number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2289,
    "kind": "variable",
    "name": "CONFIGS",
    "memberof": "app/views/chats/chat-change-font-popover.js",
    "static": true,
    "longname": "app/views/chats/chat-change-font-popover.js~CONFIGS",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-change-font-popover.js",
    "importStyle": null,
    "description": "所有字体设置",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "{size: number, lineHeight: number, title: number, titleLineHeight: number}[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2290,
    "kind": "class",
    "name": "ChangeFontView",
    "memberof": "app/views/chats/chat-change-font-popover.js",
    "static": true,
    "longname": "app/views/chats/chat-change-font-popover.js~ChangeFontView",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-change-font-popover.js",
    "importStyle": "{ChangeFontView}",
    "description": "ChatChangeFont-Popover 组件 ，显示一个聊天字体设置界面",
    "examples": [
      "import ChatChangeFont-Popover from './chat-change-font-popover';\n<ChatChangeFont-Popover />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatChangeFont-Popover"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2291,
    "kind": "get",
    "name": "ChangeFontView",
    "memberof": "app/views/chats/chat-change-font-popover.js~ChangeFontView",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-change-font-popover.js~ChangeFontView.ChangeFontView",
    "access": "public",
    "description": "获取 ChatChangeFont-Popover 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatChangeFont-Popover} from './chat-change-font-popover';\n<ChatChangeFont-Popover />"
    ],
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatChangeFont-Popover>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2292,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-change-font-popover.js~ChangeFontView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-change-font-popover.js~ChangeFontView#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatChangeFont-Popover 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2293,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-change-font-popover.js~ChangeFontView",
    "static": false,
    "longname": "app/views/chats/chat-change-font-popover.js~ChangeFontView#state",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "{\"select\": number}"
      ]
    }
  },
  {
    "__docId__": 2294,
    "kind": "member",
    "name": "changeFontSizeTask",
    "memberof": "app/views/chats/chat-change-font-popover.js~ChangeFontView",
    "static": false,
    "longname": "app/views/chats/chat-change-font-popover.js~ChangeFontView#changeFontSizeTask",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2295,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/chat-change-font-popover.js~ChangeFontView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-change-font-popover.js~ChangeFontView#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 127,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2296,
    "kind": "member",
    "name": "handleSliderChange",
    "memberof": "app/views/chats/chat-change-font-popover.js~ChangeFontView",
    "static": false,
    "longname": "app/views/chats/chat-change-font-popover.js~ChangeFontView#handleSliderChange",
    "access": "private",
    "description": "处理刻度条变更事件",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2297,
    "kind": "member",
    "name": "handleResetBtnClick",
    "memberof": "app/views/chats/chat-change-font-popover.js~ChangeFontView",
    "static": false,
    "longname": "app/views/chats/chat-change-font-popover.js~ChangeFontView#handleResetBtnClick",
    "access": "private",
    "description": "处理重置按钮点击事件",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2298,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-change-font-popover.js~ChangeFontView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-change-font-popover.js~ChangeFontView#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 166,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2299,
    "kind": "function",
    "name": "showChangeFontPopover",
    "memberof": "app/views/chats/chat-change-font-popover.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-change-font-popover.js~showChangeFontPopover",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-change-font-popover.js",
    "importStyle": "{showChangeFontPopover}",
    "description": "显示聊天字体设置弹出面板",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "{x: number, y: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "显示位置"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "显示完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2300,
    "kind": "file",
    "name": "app/views/chats/chat-committers-setting-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport {ChatCommittersSetting} from './chat-committers-setting';\nimport Lang from '../../lang';\nimport App from '../../core';\n\n/**\n * 显示设置聊天白名单对话框\n * @param {Chat} chat 聊天实例\n * @param {function} callback 显示完成后的回调函数\n * @return {void}\n */\nexport const showChatCommittersSettingDialog = (chat, callback) => {\n    let settingView = null;\n    return Modal.show({\n        title: Lang.format('chat.committers.setCommittersFormat', chat.getDisplayName(App)),\n        style: {\n            width: '80%'\n        },\n        onSubmit: () => {\n            if (settingView) {\n                App.im.server.setCommitters(chat, settingView.getCommitters());\n            }\n        },\n        content: <ChatCommittersSetting ref={e => {settingView = e;}} chat={chat} />\n    }, callback);\n};\n\nexport default {\n    show: showChatCommittersSettingDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-committers-setting-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2301,
    "kind": "function",
    "name": "showChatCommittersSettingDialog",
    "memberof": "app/views/chats/chat-committers-setting-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-committers-setting-dialog.js~showChatCommittersSettingDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-committers-setting-dialog.js",
    "importStyle": "{showChatCommittersSettingDialog}",
    "description": "显示设置聊天白名单对话框",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "显示完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2302,
    "kind": "file",
    "name": "app/views/chats/chat-committers-setting.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport Lang from '../../lang';\nimport members from '../../core/members';\nimport Chat from '../../core/models/chat';\nimport SelectBox from '../../components/select-box';\nimport Checkbox from '../../components/checkbox';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatCommittersSetting 组件 ，显示设置聊天白名单界面\n * @class ChatCommittersSetting\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import ChatCommittersSetting from './chat-committers-setting';\n * <ChatCommittersSetting />\n */\nexport default class ChatCommittersSetting extends PureComponent {\n    /**\n     * 获取 ChatCommittersSetting 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatCommittersSetting>}\n     * @readonly\n     * @static\n     * @memberof ChatCommittersSetting\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatCommittersSetting} from './chat-committers-setting';\n     * <ChatCommittersSetting />\n     */\n    static get ChatCommittersSetting() {\n        return replaceViews('chats/chat-committers-setting', ChatCommittersSetting);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatCommittersSetting\n     * @type {Object}\n     */\n    static propTypes = {\n        chat: PropTypes.instanceOf(Chat),\n        className: PropTypes.string,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatCommittersSetting\n     * @static\n     */\n    static defaultProps = {\n        chat: null,\n        className: null,\n        children: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatCommittersSetting 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        const {chat} = props;\n        const type = chat.committersType;\n        const chatMembers = chat.getMembersSet(members);\n        const whitelist = chat.whitelist || new Set();\n        const isEmptyWhiteList = !whitelist.size;\n        let adminsCount = 0;\n        chatMembers.forEach(x => {\n            if (chat.isAdmin(x)) {\n                adminsCount += 1;\n                if (isEmptyWhiteList) whitelist.add(x.id);\n            }\n        });\n\n        /**\n         * 聊天成员\n         * @type {Member[]}\n         * @private\n         */\n        this.chatMembers = chatMembers;\n\n        /**\n         * 管理员数目\n         * @type {number}\n         * @private\n         */\n        this.adminsCount = adminsCount;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            type, whitelist\n        };\n    }\n\n    /**\n     * 获取白名单设置字符串\n     *\n     * @return {string} 白名单设置字符串\n     * @memberof ChatCommittersSetting\n     */\n    getCommitters() {\n        const {type} = this.state;\n        if (type === 'whitelist') {\n            // eslint-disable-next-line react/destructuring-assignment\n            return this.state.whitelist;\n        }\n        if (type === 'admins') {\n            return '$ADMINS';\n        }\n        return '';\n    }\n\n    /**\n     * 处理白名单类型变更事件\n     * @param {string} type 白名单类型\n     * @memberof ChatCommittersSetting\n     * @private\n     * @return {void}\n     */\n    handleSelectChange = type => {\n        this.setState({type});\n    }\n\n    /**\n     * 处理成员复选框选中变更事件\n     * @param {number} memberId 成员 ID\n     * @param {boolean} isChecked 是否选中\n     * @memberof ChatCommittersSetting\n     * @private\n     * @return {void}\n     */\n    handleCheckboxChange(memberId, isChecked) {\n        const {whitelist} = this.state;\n        if (isChecked) {\n            whitelist.add(memberId);\n        } else {\n            whitelist.delete(memberId);\n        }\n        this.setState({whitelist});\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatCommittersSetting\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const {\n            whitelist, type\n        } = this.state;\n\n        const {\n            chatMembers, adminsCount\n        } = this;\n\n        const options = [\n            {value: Chat.COMMITTERS_TYPES.all, label: `${Lang.string('chat.committers.type.all')}(${chatMembers.length})`},\n            {value: Chat.COMMITTERS_TYPES.admins, label: `${Lang.string('chat.committers.type.admins')}(${adminsCount})`},\n            {value: Chat.COMMITTERS_TYPES.whitelist, label: `${Lang.string('chat.committers.type.whitelist')}(${whitelist.size})`},\n        ];\n\n        return (\n            <div\n                {...other}\n                className={classes('app-chat-committers-setting', className)}\n            >\n                <div className=\"text-gray space-sm flex flex-middle\"><Icon name=\"information-outline\" />&nbsp; {Lang.string('chat.committers.committersSettingTip')}</div>\n                <SelectBox className=\"space-sm\" style={{width: '50%'}} value={type} options={options} onChange={this.handleSelectChange} />\n                {\n                    type === 'whitelist' && (\n                        <div className=\"checkbox-list rounded box outline\">\n                            {\n                                chatMembers.map(member => {\n                                    return <Checkbox key={member.id} className=\"inline-block\" onChange={this.handleCheckboxChange.bind(this, member.id)} checked={whitelist.has(member.id)} label={member.displayName} />;\n                                })\n                            }\n                        </div>\n                    )\n                }\n                {children}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-committers-setting.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2303,
    "kind": "class",
    "name": "ChatCommittersSetting",
    "memberof": "app/views/chats/chat-committers-setting.js",
    "static": true,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-committers-setting.js",
    "importStyle": "ChatCommittersSetting",
    "description": "ChatCommittersSetting 组件 ，显示设置聊天白名单界面",
    "examples": [
      "import ChatCommittersSetting from './chat-committers-setting';\n<ChatCommittersSetting />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatCommittersSetting"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 2304,
    "kind": "get",
    "name": "ChatCommittersSetting",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting.ChatCommittersSetting",
    "access": "public",
    "description": "获取 ChatCommittersSetting 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatCommittersSetting} from './chat-committers-setting';\n<ChatCommittersSetting />"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatCommittersSetting>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2305,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "static": true,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2306,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "static": true,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2307,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatCommittersSetting 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2308,
    "kind": "member",
    "name": "chatMembers",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "static": false,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting#chatMembers",
    "access": "private",
    "description": "聊天成员",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "Member[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2309,
    "kind": "member",
    "name": "adminsCount",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "static": false,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting#adminsCount",
    "access": "private",
    "description": "管理员数目",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2310,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "static": false,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2311,
    "kind": "method",
    "name": "getCommitters",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting#getCommitters",
    "access": "public",
    "description": "获取白名单设置字符串",
    "lineNumber": 114,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "白名单设置字符串"
    },
    "params": []
  },
  {
    "__docId__": 2312,
    "kind": "member",
    "name": "handleSelectChange",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "static": false,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting#handleSelectChange",
    "access": "private",
    "description": "处理白名单类型变更事件",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "白名单类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2313,
    "kind": "method",
    "name": "handleCheckboxChange",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting#handleCheckboxChange",
    "access": "private",
    "description": "处理成员复选框选中变更事件",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "memberId",
        "description": "成员 ID"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isChecked",
        "description": "是否选中"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2314,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-committers-setting.js~ChatCommittersSetting#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 163,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2315,
    "kind": "file",
    "name": "app/views/chats/chat-create-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport {ChatCreateView} from './chat-create';\nimport Lang from '../../lang';\n\n/**\n * 显示创建聊天对话框\n * @param {function} callback 显示完成后的回调函数\n * @return {void}\n */\nconst showCreateChatDialog = (callback) => {\n    const modalId = 'app-chat-create-dialog';\n    return Modal.show({\n        id: modalId,\n        title: Lang.string('chat.create.title'),\n        style: {\n            left: 10,\n            right: 10,\n            bottom: 0,\n            top: 10\n        },\n        className: 'dock primary-pale',\n        animation: 'enter-from-bottom',\n        actions: false,\n        content: <ChatCreateView onRequestClose={() => (Modal.hide(modalId))} />\n    }, callback);\n};\n\nexport default {\n    show: showCreateChatDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-create-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2316,
    "kind": "function",
    "name": "showCreateChatDialog",
    "memberof": "app/views/chats/chat-create-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-create-dialog.js~showCreateChatDialog",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-create-dialog.js",
    "importStyle": null,
    "description": "显示创建聊天对话框",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "显示完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2317,
    "kind": "file",
    "name": "app/views/chats/chat-create-groups.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes, rem} from '../../utils/html-helper';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport Icon from '../../components/icon';\nimport Avatar from '../../components/avatar';\nimport SearchControl from '../../components/search-control';\nimport Messager from '../../components/messager';\nimport {MemberListItem} from '../common/member-list-item';\nimport ROUTES from '../common/routes';\nimport replaceViews from '../replace-views';\nimport {MemberList} from '../common/member-list';\n\n/**\n * ChatCreateGroups 组件 ，显示一个创建讨论组界面\n * @class ChatCreateGroups\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatCreateGroups from './chat-create-groups';\n * <ChatCreateGroups />\n */\nexport default class ChatCreateGroups extends Component {\n    /**\n     * 获取 ChatCreateGroups 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatCreateGroups>}\n     * @readonly\n     * @static\n     * @memberof ChatCreateGroups\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatCreateGroups} from './chat-create-groups';\n     * <ChatCreateGroups />\n     */\n    static get ChatCreateGroups() {\n        return replaceViews('chats/chat-create-groups', ChatCreateGroups);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatCreateGroups\n     * @type {Object}\n     */\n    static propTypes = {\n        onRequestClose: PropTypes.func,\n        className: PropTypes.string,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatCreateGroups\n     * @static\n     */\n    static defaultProps = {\n        onRequestClose: null,\n        className: null,\n        children: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatCreateGroups 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        const {user} = App;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            choosed: {[user.id]: user},\n            search: '',\n        };\n\n        /**\n         * 全部可以用于创建讨论组的成员\n         * @type {Member[]}\n         */\n        this.members = App.members.query(x => (!x.isDeleted), true);\n    }\n\n    /**\n     * 处理搜索框变更事件\n     * @param {string} search 搜索字符串\n     * @memberof ChatCreateGroups\n     * @private\n     * @return {void}\n     */\n    handleSearchChange = search => {\n        search = search && search.toLowerCase();\n        this.setState({search});\n    }\n\n    /**\n     * 处理选择全部按钮点击事件\n     * @memberof ChatCreateGroups\n     * @private\n     * @return {void}\n     */\n    handleSelectAllClick = () => {\n        const {choosed} = this.state;\n        this.members.forEach(member => {\n            choosed[member.id] = member;\n        });\n        this.setState({choosed});\n    }\n\n    /**\n     * 处理反选按钮点击事件\n     * @memberof ChatCreateGroups\n     * @private\n     * @return {void}\n     */\n    handleSelectInverseClick = () => {\n        const {choosed} = this.state;\n        const {userId} = App.profile;\n        this.members.forEach(member => {\n            if (member.id !== userId) {\n                if (choosed[member.id]) {\n                    delete choosed[member.id];\n                } else {\n                    choosed[member.id] = member;\n                }\n            }\n        });\n        this.setState({choosed});\n    }\n\n    /**\n     * 处理创建聊天按钮点击事件\n     * @memberof ChatCreateGroups\n     * @private\n     * @return {void}\n     */\n    handleCreateBtnClick = () => {\n        const members = Object.keys(this.state.choosed);\n        if (members.length <= 2) {\n            window.location.hash = `#${ROUTES.chats.contacts.id(App.im.chats.getOne2OneChatGid(members))}`;\n            if (this.props.onRequestClose) {\n                this.props.onRequestClose();\n            }\n        } else {\n            App.im.ui.createGroupChat(members).then(newChat => {\n                if (newChat) {\n                    window.location.hash = `#${ROUTES.chats.groups.id(newChat.gid)}`;\n                }\n                if (this.props.onRequestClose) {\n                    this.props.onRequestClose();\n                }\n            }).catch(error => {\n                if (error) {\n                    Messager.show(Lang.error(error));\n                }\n            });\n        }\n    }\n\n    /**\n     * 处理成员点击事件\n     * @memberof ChatCreateGroups\n     * @param {Member} member 成员\n     * @private\n     * @return {void}\n     */\n    handleMemberItemClick(member) {\n        if (member.id === App.profile.userId) {\n            Messager.show(Lang.string('chat.create.mustInclueYourself'), {type: 'warning', autoHide: true});\n        } else {\n            const {choosed} = this.state;\n            if (choosed[member.id]) {\n                delete choosed[member.id];\n            } else {\n                choosed[member.id] = member;\n            }\n            this.setState({choosed});\n        }\n    }\n\n    /**\n     * 判断成员是否匹配搜索关键字\n     *\n     * @param {Member} member 成员\n     * @return {boolean} 如果返回 `true` 则表示给定的成员匹配搜索关键字\n     * @memberof ChatCreateGroups\n     * @private\n     */\n    isMatchSearch(member) {\n        const {search} = this.state;\n        if (!search.length) {\n            return true;\n        }\n        const account = member.account && member.account.toLowerCase();\n        const realname = member.realname && member.realname.toLowerCase();\n        return account.includes(search) || realname.includes(search) || member.id === search;\n    }\n\n    /**\n     * 判断成员是否选中\n     *\n     * @param {Member} member 成员\n     * @return {boolean} 如果返回 `true` 则表示给定的成员已选中\n     * @memberof ChatCreateGroups\n     * @private\n     */\n    isChoosed(member) {\n        // eslint-disable-next-line react/destructuring-assignment\n        return member.id === App.profile.userId || !!this.state.choosed[member.id];\n    }\n\n    /**\n     * 渲染成员条目界面\n     *\n     * @param {Member} member 成员\n     * @return {ReactNode|null} React 组件渲染内容\n     * @memberof ChatCreateGroups\n     * @private\n     */\n    renderMemberItem = member => {\n        if (this.isMatchSearch(member)) {\n            const isChoosed = this.isChoosed(member);\n            return <MemberListItem className={isChoosed ? 'primary-pale' : ''} onClick={this.handleMemberItemClick.bind(this, member)} key={member.id} member={member}>{isChoosed && <Icon name=\"check text-success\" />}</MemberListItem>;\n        }\n        return null;\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatCreateGroups\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            children,\n            onRequestClose,\n            ...other\n        } = this.props;\n\n        const {choosed, search} = this.state;\n\n        const choosedCount = Object.keys(choosed).length;\n        let theOtherOne = null;\n        if (choosedCount === 2) {\n            const userId = `${App.profile.userId}`;\n            const otherOneId = Object.keys(choosed).find(x => x !== userId);\n            theOtherOne = choosed[otherOneId];\n        }\n\n        return (\n            <div\n                {...other}\n                className={classes('app-chat-create-groups column single', className)}\n            >\n                <div className=\"list-item divider flex-none\">\n                    <Avatar icon=\"arrow-right\" iconClassName=\"text-muted icon-2x\" />\n                    <div className=\"title\">{Lang.string('chat.create.groupsTip')}</div>\n                    <div className=\"flex-none\">\n                        <button type=\"button\" onClick={this.handleCreateBtnClick} disabled={choosedCount < 2} className=\"btn primary rounded\">{choosedCount < 2 ? Lang.string('chat.create.title') : choosedCount === 2 ? Lang.format('chat.create.chatWith.format', theOtherOne.displayName) : Lang.format('chat.create.group.format', choosedCount)}</button>\n                    </div>\n                </div>\n                <div className=\"white cell\">\n                    <div className=\"column single\">\n                        <div className=\"cell heading flex-none has-padding\">\n                            <nav className=\"flex-auto\">\n                                <a className=\"btn text-primary rounded\" onClick={this.handleSelectAllClick}>{Lang.string('common.selectAll')}</a>\n                                <a className=\"btn text-primary rounded\" onClick={this.handleSelectInverseClick}>{Lang.string('common.selectInverse')}</a>\n                            </nav>\n                            <SearchControl defaultValue={search} onSearchChange={this.handleSearchChange} className=\"flex-none\" style={{width: rem(200)}} />\n                        </div>\n                        <div className=\"cell scroll-y has-padding-sm\">\n                            <MemberList className=\"fluid compact app-chat-create-groups-member-list\" members={this.members} itemRender={this.renderMemberItem} />\n                        </div>\n                    </div>\n                </div>\n                {children}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-create-groups.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2318,
    "kind": "class",
    "name": "ChatCreateGroups",
    "memberof": "app/views/chats/chat-create-groups.js",
    "static": true,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-create-groups.js",
    "importStyle": "ChatCreateGroups",
    "description": "ChatCreateGroups 组件 ，显示一个创建讨论组界面",
    "examples": [
      "import ChatCreateGroups from './chat-create-groups';\n<ChatCreateGroups />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatCreateGroups"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2319,
    "kind": "get",
    "name": "ChatCreateGroups",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups.ChatCreateGroups",
    "access": "public",
    "description": "获取 ChatCreateGroups 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatCreateGroups} from './chat-create-groups';\n<ChatCreateGroups />"
    ],
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatCreateGroups>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2320,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "static": true,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2321,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "static": true,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2322,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatCreateGroups 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2323,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2324,
    "kind": "member",
    "name": "members",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#members",
    "access": "public",
    "description": "全部可以用于创建讨论组的成员",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "Member[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2325,
    "kind": "member",
    "name": "handleSearchChange",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#handleSearchChange",
    "access": "private",
    "description": "处理搜索框变更事件",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "搜索字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2326,
    "kind": "member",
    "name": "handleSelectAllClick",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#handleSelectAllClick",
    "access": "private",
    "description": "处理选择全部按钮点击事件",
    "lineNumber": 111,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2327,
    "kind": "member",
    "name": "handleSelectInverseClick",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#handleSelectInverseClick",
    "access": "private",
    "description": "处理反选按钮点击事件",
    "lineNumber": 125,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2328,
    "kind": "member",
    "name": "handleCreateBtnClick",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#handleCreateBtnClick",
    "access": "private",
    "description": "处理创建聊天按钮点击事件",
    "lineNumber": 146,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2329,
    "kind": "method",
    "name": "handleMemberItemClick",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#handleMemberItemClick",
    "access": "private",
    "description": "处理成员点击事件",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "成员"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2330,
    "kind": "method",
    "name": "isMatchSearch",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#isMatchSearch",
    "access": "private",
    "description": "判断成员是否匹配搜索关键字",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "成员"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则表示给定的成员匹配搜索关键字"
    }
  },
  {
    "__docId__": 2331,
    "kind": "method",
    "name": "isChoosed",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#isChoosed",
    "access": "private",
    "description": "判断成员是否选中",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "成员"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则表示给定的成员已选中"
    }
  },
  {
    "__docId__": 2332,
    "kind": "member",
    "name": "renderMemberItem",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#renderMemberItem",
    "access": "private",
    "description": "渲染成员条目界面",
    "lineNumber": 229,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "成员"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "null"
      ],
      "spread": false,
      "description": "React 组件渲染内容"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2333,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-create-groups.js~ChatCreateGroups",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-create-groups.js~ChatCreateGroups#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 245,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2334,
    "kind": "file",
    "name": "app/views/chats/chat-create.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport Avatar from '../../components/avatar';\nimport Lang from '../../lang';\nimport {ChatCreateGroups} from './chat-create-groups';\nimport {ChatJoinPublic} from './chat-join-public';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatCreate 组件 ，显示创建聊天界面\n * @class ChatCreate\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatCreate from './chat-create';\n * <ChatCreate />\n */\nexport default class ChatCreateView extends PureComponent {\n    /**\n     * 获取 ChatCreate 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatCreate>}\n     * @readonly\n     * @static\n     * @memberof ChatCreate\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatCreate} from './chat-create';\n     * <ChatCreate />\n     */\n    static get ChatCreateView() {\n        return replaceViews('chats/chat-create', ChatCreateView);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatCreate\n     * @type {Object}\n     */\n    static propTypes = {\n        onRequestClose: PropTypes.func,\n        className: PropTypes.string,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatCreate\n     * @static\n     */\n    static defaultProps = {\n        onRequestClose: null,\n        className: null,\n        children: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatCreate 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            type: 'normal'\n        };\n    }\n\n    /**\n     * 变更要创建的聊天类型\n     *\n     * @param {string} type 要创建的聊天类型\n     * @memberof ChatCreateView\n     * @return {void}\n     */\n    changeType(type) {\n        this.setState({type});\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatCreate\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            children,\n            onRequestClose,\n            ...other\n        } = this.props;\n\n        return (\n            <div\n                {...other}\n                className={classes('app-chat-create dock-bottom row single', className)}\n            >\n                <div className=\"primary-pale column single flex-none\">\n                    <div className=\"list-item divider flex-none\">\n                        <Avatar icon=\"arrow-right\" iconClassName=\"text-muted icon-2x\" />\n                        <div className=\"title\">{Lang.string('chat.create.chatTypeTip')}</div>\n                    </div>\n                    <div className=\"scroll-y flex-auto lighten\">\n                        <div className=\"list compact app-chat-create-types-menu\">\n                            <a onClick={this.changeType.bind(this, 'normal')} className={'item' + (this.state.type === 'normal' ? ' white text-primary' : '')}>\n                                <Avatar icon=\"account-multiple-outline\" iconClassName=\"text-blue icon-2x\" />\n                                <div className=\"title\">{Lang.string('chat.create.chatType.normal')}</div>\n                            </a>\n                            <a onClick={this.changeType.bind(this, 'public')} className={'item' + (this.state.type === 'public' ? ' white text-primary' : '')}>\n                                <Avatar icon=\"access-point\" iconClassName=\"text-green icon-2x\" />\n                                <div className=\"title\">{Lang.string('chat.create.chatType.public')}</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                {this.state.type === 'normal' ? <ChatCreateGroups onRequestClose={onRequestClose} /> : <ChatJoinPublic onRequestClose={onRequestClose} />}\n                {children}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-create.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2335,
    "kind": "class",
    "name": "ChatCreateView",
    "memberof": "app/views/chats/chat-create.js",
    "static": true,
    "longname": "app/views/chats/chat-create.js~ChatCreateView",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-create.js",
    "importStyle": "ChatCreateView",
    "description": "ChatCreate 组件 ，显示创建聊天界面",
    "examples": [
      "import ChatCreate from './chat-create';\n<ChatCreate />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatCreate"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2336,
    "kind": "get",
    "name": "ChatCreateView",
    "memberof": "app/views/chats/chat-create.js~ChatCreateView",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-create.js~ChatCreateView.ChatCreateView",
    "access": "public",
    "description": "获取 ChatCreate 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatCreate} from './chat-create';\n<ChatCreate />"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatCreate>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2337,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-create.js~ChatCreateView",
    "static": true,
    "longname": "app/views/chats/chat-create.js~ChatCreateView.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2338,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-create.js~ChatCreateView",
    "static": true,
    "longname": "app/views/chats/chat-create.js~ChatCreateView.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2339,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-create.js~ChatCreateView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-create.js~ChatCreateView#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatCreate 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2340,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-create.js~ChatCreateView",
    "static": false,
    "longname": "app/views/chats/chat-create.js~ChatCreateView#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2341,
    "kind": "method",
    "name": "changeType",
    "memberof": "app/views/chats/chat-create.js~ChatCreateView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-create.js~ChatCreateView#changeType",
    "access": "public",
    "description": "变更要创建的聊天类型",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "要创建的聊天类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2342,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-create.js~ChatCreateView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-create.js~ChatCreateView#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 98,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2343,
    "kind": "file",
    "name": "app/views/chats/chat-header.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport App from '../../core';\nimport {ChatTitle} from './chat-title';\nimport replaceViews from '../replace-views';\nimport {getMenuItemsForContext} from '../../core/context-menu';\n\n/**\n * ChatHeader 组件 ，显示一个聊天头部界面\n * @class ChatHeader\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatHeader from './chat-header';\n * <ChatHeader />\n */\nexport default class ChatHeader extends Component {\n    /**\n     * 获取 ChatHeader 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatHeader>}\n     * @readonly\n     * @static\n     * @memberof ChatHeader\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatHeader} from './chat-header';\n     * <ChatHeader />\n     */\n    static get ChatHeader() {\n        return replaceViews('chats/chat-header', ChatHeader);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatHeader\n     * @type {Object}\n     */\n    static propTypes = {\n        chat: PropTypes.object,\n        className: PropTypes.string,\n        children: PropTypes.any,\n        showSidebarIcon: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatHeader\n     * @static\n     */\n    static defaultProps = {\n        chat: null,\n        className: null,\n        children: null,\n        showSidebarIcon: 'auto'\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof ChatHeader\n     */\n    shouldComponentUpdate(nextProps) {\n        const {chat} = nextProps;\n        return (this.props.className !== nextProps.className ||\n            this.props.children !== nextProps.children ||\n            this.props.chat !== nextProps.chat || this.lastChatUpdateId !== nextProps.chat.updateId ||\n            (nextProps.chat.isOne2One && nextProps.chat.getTheOtherOne(App).updateId !== this.lastOtherOneUpdateId) ||\n            this.isSidebarHidden !== App.profile.userConfig.isChatSidebarHidden(chat.gid, chat.isOne2One)\n        );\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatHeader\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            children,\n            showSidebarIcon,\n            ...other\n        } = this.props;\n\n        this.lastChatUpdateId = chat.updateId;\n        if (chat.isOne2One) {\n            this.lastOtherOneUpdateId = chat.getTheOtherOne(App).updateId;\n        }\n        this.isSidebarHidden = App.profile.userConfig.isChatSidebarHidden(chat.gid, chat.isOne2One);\n\n        return (<div\n            {...other}\n            className={classes('app-chat-header flex flex-wrap space-between shadow-divider', className)}\n        >\n            <ChatTitle chat={chat} className=\"flex flex-middle\" />\n            <div className=\"toolbar flex flex-middle text-rigth rounded\">\n                {\n                    getMenuItemsForContext('chat.toolbar', {chat, showSidebarIcon}).map(item => {\n                        return <div key={item.id} className={`hint--${item.hintPosition || 'bottom'} has-padding-sm`} data-hint={item.label} onClick={item.click}><button className={`btn iconbutton rounded${item.className ? ` ${item.className}` : ''}`} type=\"button\"><Icon className=\"icon-2x\" name={item.icon} /></button></div>;\n                    })\n                }\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2344,
    "kind": "class",
    "name": "ChatHeader",
    "memberof": "app/views/chats/chat-header.js",
    "static": true,
    "longname": "app/views/chats/chat-header.js~ChatHeader",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-header.js",
    "importStyle": "ChatHeader",
    "description": "ChatHeader 组件 ，显示一个聊天头部界面",
    "examples": [
      "import ChatHeader from './chat-header';\n<ChatHeader />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatHeader"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2345,
    "kind": "get",
    "name": "ChatHeader",
    "memberof": "app/views/chats/chat-header.js~ChatHeader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-header.js~ChatHeader.ChatHeader",
    "access": "public",
    "description": "获取 ChatHeader 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatHeader} from './chat-header';\n<ChatHeader />"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatHeader>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2346,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-header.js~ChatHeader",
    "static": true,
    "longname": "app/views/chats/chat-header.js~ChatHeader.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2347,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-header.js~ChatHeader",
    "static": true,
    "longname": "app/views/chats/chat-header.js~ChatHeader.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2348,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/chat-header.js~ChatHeader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-header.js~ChatHeader#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2349,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-header.js~ChatHeader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-header.js~ChatHeader#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 89,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2350,
    "kind": "member",
    "name": "lastChatUpdateId",
    "memberof": "app/views/chats/chat-header.js~ChatHeader",
    "static": false,
    "longname": "app/views/chats/chat-header.js~ChatHeader#lastChatUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2351,
    "kind": "member",
    "name": "lastOtherOneUpdateId",
    "memberof": "app/views/chats/chat-header.js~ChatHeader",
    "static": false,
    "longname": "app/views/chats/chat-header.js~ChatHeader#lastOtherOneUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2352,
    "kind": "member",
    "name": "isSidebarHidden",
    "memberof": "app/views/chats/chat-header.js~ChatHeader",
    "static": false,
    "longname": "app/views/chats/chat-header.js~ChatHeader#isSidebarHidden",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2353,
    "kind": "file",
    "name": "app/views/chats/chat-history.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport DateHelper from '../../utils/date-helper';\nimport Icon from '../../components/icon';\nimport Avatar from '../../components/avatar';\nimport Pager from '../../components/pager';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport ChatMessage from '../../core/models/chat-message';\nimport {ChatTitle} from './chat-title';\nimport {MessageList} from './message-list';\nimport {MessageListItem} from './message-list-item';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatHistory 组件 ，显示一个查看聊天记录界面\n * @class ChatHistory\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatHistory from './chat-history';\n * <ChatHistory />\n */\nexport default class ChatHistory extends Component {\n    /**\n     * 获取 ChatHistory 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatHistory>}\n     * @readonly\n     * @static\n     * @memberof ChatHistory\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatHistory} from './chat-history';\n     * <ChatHistory />\n     */\n    static get ChatHistory() {\n        return replaceViews('chats/chat-history', ChatHistory);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatHistory\n     * @type {Object}\n     */\n    static propTypes = {\n        chat: PropTypes.object,\n        className: PropTypes.string,\n        children: PropTypes.any,\n        gotoMessage: PropTypes.object,\n        searchKeys: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatHistory\n     * @static\n     */\n    static defaultProps = {\n        chat: null,\n        className: null,\n        children: null,\n        gotoMessage: null,\n        searchKeys: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatHistory 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            pager: {\n                page: 1,\n                recTotal: 0,\n                recPerPage: 50,\n                pageRecCount: 0\n            },\n            message: '',\n            loading: true,\n            messages: []\n        };\n\n        /**\n         * 页码标记\n         * @type {Map}\n         * @private\n         */\n        this.pageMark = {};\n\n        /**\n         * 高亮内容替换正则表达式\n         * @type {Regex}\n         * @private\n         */\n        this.contentConvertPattern = null;\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatHistory\n     * @return {void}\n     */\n    componentDidMount() {\n        this.chatHistoryHandler = App.im.server.onChatHistory((pager) => {\n            if (pager.gid === this.props.chat.gid) {\n                this.setState({message: `${Lang.string('chats.history.fetchingMessages')} ${Math.min(pager.recTotal, pager.pageID * pager.recPerPage)}/${pager.recTotal}`});\n                if (pager.isFetchOver) {\n                    const thisPager = this.state.pager;\n                    thisPager.recTotal = pager.recTotal;\n                    thisPager.page = Math.ceil(thisPager.recTotal / thisPager.recPerPage);\n                    this.setState({pager: thisPager, message: `${Lang.string('chats.history.fetchingMessages')} ${Lang.string('chats.history.fetchFinish')}`});\n                    this.fetchOverTaskTimer = setTimeout(() => {\n                        this.loadMessages();\n                        this.setState({message: ''});\n                    }, 200);\n                }\n            }\n        });\n        this.loadFirstPage();\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUpdate`\n     * 当接收到新属性或状态时，UNSAFE_componentWillUpdate()为在渲染前被立即调用。\n     *\n     * @param {Object} nextProps 即将更新的属性值\",\n     * @param {Object} nextState 即将更新的状态值\",\n     * @see https://doc.react-china.org/docs/react-component.html#componentWillUpdate\n     * @private\n     * @memberof ChatHistory\n     * @return {void}\n     * @todo 考虑使用 `UNSAFE_componentWillUpdate` 替换 `componentWillUpdate`\n     */\n    componentWillUpdate(nextProps, nextState) {\n        if (nextProps.searchKeys !== this.props.searchKeys) {\n            if (nextProps.searchKeys) {\n                this.contentConvertPattern = new RegExp(`(${nextProps.searchKeys.split(' ').join('|')})(?![^<]*>)`, 'gi');\n            } else {\n                this.contentConvertPattern = null;\n            }\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidUpdate`\n     * componentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。\n     *\n     * @param {Object} prevProps 更新前的属性值\n     * @param {Object} prevState 更新前的状态值\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidUpdate\n     * @private\n     * @memberof ChatHistory\n     * @return {void}\n     */\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.chat.gid !== this.props.chat.gid) {\n            this.loadFirstPage();\n        } else if (this.props.gotoMessage) {\n            const {gotoMessage} = this.props;\n            if (gotoMessage) {\n                const gotoId = `${gotoMessage.time}@${gotoMessage.gid}`;\n                if (gotoId !== this.gotoId) {\n                    this.loadMessages();\n                }\n            }\n        }\n        if (this.activeMessageId) {\n            const activeMessageEle = document.getElementById(this.activeMessageId);\n            if (activeMessageEle) {\n                activeMessageEle.scrollIntoView({block: 'center', behavior: 'smooth'});\n                activeMessageEle.classList.add('highlight-focus');\n            }\n            this.activeMessageId = null;\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ChatHistory\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.chatHistoryHandler);\n        clearTimeout(this.fetchOverTaskTimer);\n    }\n\n    /**\n     * 根据分页设置查找消息具体所在的页面\n     *\n     * @param {Chat} chat 聊天实例\n     * @param {ChatMessage} gotoMessage 要查找的消息\n     * @param {{recTotal: number, recPerPage: number}} pager 分页设置\n     * @returns {Promise<{recTotal: number, recPerPage: number, page: number}>} 使用 Promise 异步返回处理结果\n     * @memberof ChatHistory\n     * @private\n     */\n    findPageMark(chat, gotoMessage, pager) {\n        const totalPage = Math.ceil(pager.recTotal / pager.recPerPage);\n        if (totalPage < 2) {\n            this.pageMark[gotoMessage.gid] = {page: pager.page};\n            return Promise.resolve(pager);\n        }\n        return App.im.chats.getChatMessages(chat, msg => !!msg.id && msg.id <= gotoMessage.id, 0, 0, false, true, false, true).then(result => {\n            pager.page = Math.ceil(result.count / pager.recPerPage);\n            this.pageMark[gotoMessage.gid] = {page: pager.page};\n            return Promise.resolve(pager);\n        });\n    }\n\n    /**\n     * 从数据库获取历史消息\n     *\n     * @param {function} callback 回调函数\n     * @memberof ChatHistory\n     * @return {void}\n     * @private\n     */\n    loadMessages(callback) {\n        let {pager} = this.state;\n        const {chat, gotoMessage} = this.props;\n        this.setState({loading: true});\n\n        if (gotoMessage) {\n            const gotoId = `${gotoMessage.time}@${gotoMessage.gid}`;\n            if (this.gotoId !== gotoId) {\n                this.gotoId = gotoId;\n                const mark = this.pageMark[gotoMessage.gid];\n                if (mark) {\n                    if (mark.page !== pager.page) {\n                        pager.page = mark.page;\n                        this.setState(pager);\n                    }\n                } else {\n                    return this.findPageMark(chat, gotoMessage, pager).then((newPager) => {\n                        pager = Object.assign(pager, newPager);\n                        this.setState(pager);\n                        this.loadMessages();\n                    }).catch(error => {\n                        this.setState({pager, loading: false, messages: [], message: error && Lang.error(error)});\n                        if (callback) {\n                            callback(false);\n                        }\n                    });\n                }\n            }\n        }\n\n        const pageDataID = `${chat.gid}/${pager.page}`;\n        if (pageDataID === this.pageDataID) {\n            this.setState({loading: false});\n            if (callback) {\n                callback(true);\n            }\n            return;\n        }\n\n        App.im.chats.getChatMessages(chat, msg => !!msg.id, pager.recPerPage, pager.recPerPage * (pager.page - 1), false).then(messages => {\n            messages = ChatMessage.sort(messages);\n            pager.pageRecCount = messages.length;\n            this.setState({\n                pager,\n                loading: false,\n                messages,\n            });\n            this.pageDataID = pageDataID;\n            if (callback) {\n                callback(messages);\n            }\n        }).catch(error => {\n            this.setState({pager, loading: false, messages: [], message: error && Lang.error(error)});\n            if (callback) {\n                callback(false);\n            }\n        });\n    }\n\n    /**\n     * 从数据库查找历史消息\n     *\n     * @param {function} callback 回调函数\n     * @memberof ChatHistory\n     * @return {void}\n     * @private\n     */\n    findMessages(callback) {\n        this.setState({loading: true});\n        const {pager} = this.state;\n        const {chat} = this.props;\n        App.im.chats.countChatMessages(chat.gid, msg => !!msg.id).then(count => {\n            if (count) {\n                pager.page = Math.ceil(count / pager.recPerPage);\n                pager.recTotal = count;\n                this.setState({pager});\n                this.loadMessages(callback);\n            } else {\n                this.setState({loading: false, messages: [], message: Lang.string('chats.history.noMessages')});\n                if (callback) {\n                    callback(false);\n                }\n            }\n        }).catch(error => {\n            this.setState({loading: false, messages: [], message: error && Lang.error(error)});\n            if (callback) {\n                callback(false);\n            }\n        });\n    }\n\n    /**\n     * 处理页码变更事件\n     * @param {number} page 页码\n     * @memberof ChatHistory\n     * @private\n     * @return {void}\n     */\n    handleOnPageChange = (page) => {\n        if (!this.state.loading) {\n            const {pager} = this.state;\n            pager.page = page;\n            this.setState({pager});\n            this.loadMessages();\n        }\n    }\n\n    /**\n     * 处理点击拉去历史记录消息按钮事件\n     * @param {Event} e 事件对象\n     * @memberof ChatHistory\n     * @private\n     * @return {void}\n     */\n    handleFecthBtnClick = e => {\n        const chat = this.props.chat;\n        if (chat.id) {\n            this.setState({loading: true, message: Lang.string('chats.history.fetchingMessages')});\n            App.im.server.fetchChatsHistory(this.props.chat.gid);\n        } else {\n            this.setState({loading: false, message: Lang.string('chats.history.localChat'), messages: []});\n        }\n    }\n\n    /**\n     * 加载首页历史消息\n     *\n     * @memberof ChatHistory\n     * @return {void}\n     * @private\n     */\n    loadFirstPage() {\n        this.setState({\n            pager: {\n                page: 1,\n                recTotal: 0,\n                recPerPage: 50,\n                pageRecCount: 0\n            },\n            message: '',\n            loading: true,\n            messages: []\n        });\n        this.findMessages(messages => {\n            if (!messages || !messages.length) {\n                this.handleFecthBtnClick();\n            }\n        });\n    }\n\n    /**\n     * 高亮替换消息内容\n     * @private\n     * @memberof ChatHistory\n     * @param {string} content 消息内容\n     * @return {string} 替换后的内容\n     */\n    convertContent = content => {\n        if (this.props.searchKeys && this.contentConvertPattern && this.contentConvertPattern.test(content)) {\n            content = content.replace(this.contentConvertPattern, \"<span class='highlight'>$1</span>\");\n        }\n        return content;\n    }\n\n    /**\n     * 消息列表项生成函数\n     *\n     * @param {ChatMessage} message 聊天消息\n     * @param {ChatMessage} lastMessage 上一个聊天消息\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @memberof ChatHistory\n     * @private\n     */\n    listItemCreator(message, lastMessage) {\n        const active = this.props.searchKeys && this.props.gotoMessage && this.props.gotoMessage.gid === message.gid;\n        if (active) {\n            this.activeMessageId = `app-chat-history-message_${message.gid}`;\n        }\n        return (<MessageListItem\n            id={active ? this.activeMessageId : null}\n            className={HTML.classes({active})}\n            staticUI={true}\n            lastMessage={lastMessage}\n            key={message.gid}\n            message={message}\n            sleepUrlCard={true}\n            textContentConverter={this.convertContent}\n        />);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatHistory\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            children,\n            gotoMessage,\n            searchKeys,\n            ...other\n        } = this.props;\n\n        const messages = this.state.messages;\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-chat-history column single', className)}\n        >\n            <ChatTitle className=\"flex-none gray has-padding-h\" chat={chat}>\n                {(messages && messages.length) ? <div className=\"small\">{DateHelper.formatSpan(messages[0].date, messages[messages.length - 1].date, {full: Lang.string('time.format.full'), month: Lang.string('time.format.month'), day: Lang.string('time.format.day')})}</div> : null}\n                <nav className=\"toolbar flex flex-middle\">\n                    <Pager {...this.state.pager} onPageChange={this.handleOnPageChange} />\n                    <div data-hint={Lang.string('chats.history.fetchFromServer')} className=\"hint--bottom-left\"><button onClick={this.handleFecthBtnClick} type=\"button\" disabled={this.state.loading || !chat.id || App.im.server.isFetchingHistory()} className=\"iconbutton btn rounded\"><Icon name=\"cloud-download icon-2x\" /></button></div>\n                </nav>\n            </ChatTitle>\n            {this.state.message && <div className=\"heading blue flex-none\">\n                <Avatar icon={this.state.loading ? 'loading spin' : 'information'} />\n                <div className=\"title\">{this.state.message}</div>\n            </div>}\n            <div className=\"flex-auto user-selectable scroll-y scroll-x fluid\">\n                <MessageList stayBottom={!gotoMessage} staticUI messages={messages} listItemCreator={this.listItemCreator.bind(this)} />\n            </div>\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-history.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2354,
    "kind": "class",
    "name": "ChatHistory",
    "memberof": "app/views/chats/chat-history.js",
    "static": true,
    "longname": "app/views/chats/chat-history.js~ChatHistory",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-history.js",
    "importStyle": "ChatHistory",
    "description": "ChatHistory 组件 ，显示一个查看聊天记录界面",
    "examples": [
      "import ChatHistory from './chat-history';\n<ChatHistory />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatHistory"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2355,
    "kind": "get",
    "name": "ChatHistory",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-history.js~ChatHistory.ChatHistory",
    "access": "public",
    "description": "获取 ChatHistory 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatHistory} from './chat-history';\n<ChatHistory />"
    ],
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatHistory>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2356,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": true,
    "longname": "app/views/chats/chat-history.js~ChatHistory.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2357,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": true,
    "longname": "app/views/chats/chat-history.js~ChatHistory.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2358,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatHistory 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2359,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2360,
    "kind": "member",
    "name": "pageMark",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#pageMark",
    "access": "private",
    "description": "页码标记",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2361,
    "kind": "member",
    "name": "contentConvertPattern",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#contentConvertPattern",
    "access": "private",
    "description": "高亮内容替换正则表达式",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "Regex"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2362,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 121,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2363,
    "kind": "member",
    "name": "chatHistoryHandler",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#chatHistoryHandler",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2364,
    "kind": "member",
    "name": "fetchOverTaskTimer",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#fetchOverTaskTimer",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2365,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#componentWillUpdate",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUpdate`\n当接收到新属性或状态时，UNSAFE_componentWillUpdate()为在渲染前被立即调用。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentWillUpdate"
    ],
    "lineNumber": 152,
    "todo": [
      "考虑使用 `UNSAFE_componentWillUpdate` 替换 `componentWillUpdate`"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值\","
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值\","
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2368,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#componentDidUpdate",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidUpdate`\ncomponentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidUpdate"
    ],
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "更新前的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "更新前的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2369,
    "kind": "member",
    "name": "activeMessageId",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#activeMessageId",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2370,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 205,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2371,
    "kind": "method",
    "name": "findPageMark",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#findPageMark",
    "access": "private",
    "description": "根据分页设置查找消息具体所在的页面",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<{recTotal: number, recPerPage: number, page: number}>} 使用 Promise 异步返回处理结果"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "gotoMessage",
        "description": "要查找的消息"
      },
      {
        "nullable": null,
        "types": [
          "{recTotal: number, recPerPage: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "pager",
        "description": "分页设置"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<{recTotal: number, recPerPage: number, page: number}>"
      ],
      "spread": false,
      "description": "使用 Promise 异步返回处理结果"
    }
  },
  {
    "__docId__": 2372,
    "kind": "method",
    "name": "loadMessages",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#loadMessages",
    "access": "private",
    "description": "从数据库获取历史消息",
    "lineNumber": 241,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2373,
    "kind": "member",
    "name": "gotoId",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#gotoId",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2374,
    "kind": "member",
    "name": "pageDataID",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#pageDataID",
    "access": "public",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2375,
    "kind": "method",
    "name": "findMessages",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#findMessages",
    "access": "private",
    "description": "从数据库查找历史消息",
    "lineNumber": 308,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2376,
    "kind": "member",
    "name": "handleOnPageChange",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#handleOnPageChange",
    "access": "private",
    "description": "处理页码变更事件",
    "lineNumber": 339,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "page",
        "description": "页码"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2377,
    "kind": "member",
    "name": "handleFecthBtnClick",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#handleFecthBtnClick",
    "access": "private",
    "description": "处理点击拉去历史记录消息按钮事件",
    "lineNumber": 355,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2378,
    "kind": "method",
    "name": "loadFirstPage",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#loadFirstPage",
    "access": "private",
    "description": "加载首页历史消息",
    "lineNumber": 372,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2379,
    "kind": "member",
    "name": "convertContent",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#convertContent",
    "access": "private",
    "description": "高亮替换消息内容",
    "lineNumber": 398,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "消息内容"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "替换后的内容"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2380,
    "kind": "method",
    "name": "listItemCreator",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#listItemCreator",
    "access": "private",
    "description": "消息列表项生成函数",
    "lineNumber": 414,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "聊天消息"
      },
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "lastMessage",
        "description": "上一个聊天消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    }
  },
  {
    "__docId__": 2382,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-history.js~ChatHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-history.js~ChatHistory#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 439,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2383,
    "kind": "file",
    "name": "app/views/chats/chat-invite-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport {ChatInvite} from './chat-invite';\nimport Lang from '../../lang';\n\n/**\n * 显示邀请其他成员加入聊天对话框\n * @param {Chat} chat 聊天实例\n * @param {function} callback 显示完成后的回调函数\n * @return {void}\n */\nexport const showChatInviteDialog = (chat, callback) => {\n    const modalId = 'app-chat-invite-dialog';\n    const onRequestClose = () => {\n        Modal.hide(modalId);\n    };\n    return Modal.show({\n        id: modalId,\n        className: 'app-chat-invite-dialog',\n        title: Lang.string('chat.invite.title'),\n        content: <ChatInvite chat={chat} onRequestClose={onRequestClose} />,\n        actions: false,\n    }, callback);\n};\n\nexport default {\n    show: showChatInviteDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-invite-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2384,
    "kind": "function",
    "name": "showChatInviteDialog",
    "memberof": "app/views/chats/chat-invite-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-invite-dialog.js~showChatInviteDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-invite-dialog.js",
    "importStyle": "{showChatInviteDialog}",
    "description": "显示邀请其他成员加入聊天对话框",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天实例"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "显示完成后的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2385,
    "kind": "file",
    "name": "app/views/chats/chat-invite.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport StringHelper from '../../utils/string-helper';\nimport SearchControl from '../../components/search-control';\nimport Messager from '../../components/messager';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport {MemberList} from '../common/member-list';\nimport ROUTES from '../common/routes';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatInvite 组件 ，显示邀请其他成员加入聊天界面\n * @class ChatInvite\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatInvite from './chat-invite';\n * <ChatInvite />\n */\nexport default class ChatInvite extends Component {\n    /**\n     * 获取 ChatInvite 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatInvite>}\n     * @readonly\n     * @static\n     * @memberof ChatInvite\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatInvite} from './chat-invite';\n     * <ChatInvite />\n     */\n    static get ChatInvite() {\n        return replaceViews('chats/chat-invite', ChatInvite);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatInvite\n     * @type {Object}\n     */\n    static propTypes = {\n        chat: PropTypes.object,\n        className: PropTypes.string,\n        children: PropTypes.any,\n        onRequestClose: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatInvite\n     * @static\n     */\n    static defaultProps = {\n        chat: null,\n        className: null,\n        children: null,\n        onRequestClose: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatInvite 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            choosed: {},\n            search: '',\n        };\n    }\n\n    /**\n     * 处理搜索框变更事件\n     *\n     * @param {string} search 搜索字符串\n     * @private\n     * @memberof ChatInvite\n     * @return {void}\n     */\n    handleSearchChange = search => {\n        this.setState({search});\n    };\n\n    /**\n     * 处理成员点击事件\n     * @param {Member} member 成员\n     * @memberof ChatInvite\n     * @private\n     * @return {void}\n     */\n    handleMemberItemClick(member) {\n        const {choosed} = this.state;\n        if (choosed[member.id]) {\n            delete choosed[member.id];\n        } else {\n            choosed[member.id] = member;\n        }\n        this.setState({choosed});\n    }\n\n    /**\n     * 处理请求关闭父级对话框\n     * @private\n     * @return {void}\n     * @memberof ChatInvite\n     */\n    requestClose() {\n        if (this.props.onRequestClose) {\n            this.props.onRequestClose();\n        }\n    }\n\n    /**\n     * 处理邀请按钮点击事件\n     * @param {Event} e 事件对象\n     * @memberof ChatInvite\n     * @private\n     * @return {void}\n     */\n    handleInviteBtnClick = e => {\n        const {chat} = this.props;\n        const {choosed} = this.state;\n        const members = Object.keys(choosed).map(memberId => choosed[memberId]);\n        if (chat.isOne2One) {\n            members.push(...chat.getMembersSet(App.members));\n            App.im.ui.createGroupChat(members).then(newChat => {\n                const groupUrl = `#${ROUTES.chats.groups.id(newChat.gid)}`;\n                this.requestClose();\n                App.im.server.sendBoardChatMessage(Lang.format('chat.inviteAndCreateNewChat.format', `@${App.profile.user.account}`, `[**[${newChat.getDisplayName(App)}](${groupUrl})**]`), chat);\n                window.location.hash = groupUrl;\n            }).catch(error => {\n                if (error) {\n                    Messager.show(Lang.error(error), {type: 'danger'});\n                }\n            });\n        } else {\n            App.im.server.inviteMembersToChat(chat, members).then(chat => {\n                if (chat) {\n                    const broadcast = App.im.server.createBoardChatMessage(Lang.format('chat.inviteMembersJoinChat.format', `@${App.profile.user.account}`, members.map(x => `@${x.account}`).join('、')), chat);\n                    App.im.server.sendChatMessage(broadcast, chat);\n                }\n                this.requestClose();\n            }).catch(error => {\n                if (error) {\n                    Messager.show(Lang.error(error), {type: 'danger'});\n                }\n            });\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatInvite\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            children,\n            onRequestClose,\n            ...other\n        } = this.props;\n\n        const {choosed, search} = this.state;\n        const choosedItems = [];\n        const items = [];\n        const keys = StringHelper.isEmpty(search) ? null : search.trim().toLowerCase().split(' ');\n        App.members.forEach(member => {\n            if (!chat.isMember(member)) {\n                if (choosed[member.id]) {\n                    choosedItems.push(member);\n                } else if (!keys || member.getMatchScore(keys)) {\n                    items.push(member);\n                }\n            }\n        }, true);\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-chat-invite single row outline space', className)}\n        >\n            <div className=\"cell column single flex-none gray\" style={{width: HTML.rem(150)}}>\n                <div className=\"has-padding-sm flex-none darken\">\n                    <SearchControl onSearchChange={this.handleSearchChange} />\n                </div>\n                <MemberList className=\"flex-auto scroll-y compact\" members={items} onItemClick={this.handleMemberItemClick} eventBindObject={this} listItemProps={{avatarSize: 24}} />\n            </div>\n            <div className=\"cell column single flex-auto divider-left\">\n                <div className=\"heading flex-none primary-pale\">\n                    <div className=\"title text-accent flex-auto\">{Lang.string('chat.invite.choosed')} ({choosedItems.length})</div>\n                    <div className=\"flex-none has-padding-h\"><button type=\"button\" disabled={!choosedItems.length} className=\"btn primary rounded btn-wide\" onClick={this.handleInviteBtnClick}>{Lang.string('chat.invite')}</button></div>\n                </div>\n                <MemberList className=\"flex-auto scroll-y compact\" members={choosedItems} onItemClick={this.handleMemberItemClick} eventBindObject={this} listItemProps={{avatarSize: 24}} />\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-invite.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2386,
    "kind": "class",
    "name": "ChatInvite",
    "memberof": "app/views/chats/chat-invite.js",
    "static": true,
    "longname": "app/views/chats/chat-invite.js~ChatInvite",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-invite.js",
    "importStyle": "ChatInvite",
    "description": "ChatInvite 组件 ，显示邀请其他成员加入聊天界面",
    "examples": [
      "import ChatInvite from './chat-invite';\n<ChatInvite />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatInvite"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2387,
    "kind": "get",
    "name": "ChatInvite",
    "memberof": "app/views/chats/chat-invite.js~ChatInvite",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-invite.js~ChatInvite.ChatInvite",
    "access": "public",
    "description": "获取 ChatInvite 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatInvite} from './chat-invite';\n<ChatInvite />"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatInvite>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2388,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-invite.js~ChatInvite",
    "static": true,
    "longname": "app/views/chats/chat-invite.js~ChatInvite.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2389,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-invite.js~ChatInvite",
    "static": true,
    "longname": "app/views/chats/chat-invite.js~ChatInvite.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2390,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-invite.js~ChatInvite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-invite.js~ChatInvite#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatInvite 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2391,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-invite.js~ChatInvite",
    "static": false,
    "longname": "app/views/chats/chat-invite.js~ChatInvite#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2392,
    "kind": "member",
    "name": "handleSearchChange",
    "memberof": "app/views/chats/chat-invite.js~ChatInvite",
    "static": false,
    "longname": "app/views/chats/chat-invite.js~ChatInvite#handleSearchChange",
    "access": "private",
    "description": "处理搜索框变更事件",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "搜索字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2393,
    "kind": "method",
    "name": "handleMemberItemClick",
    "memberof": "app/views/chats/chat-invite.js~ChatInvite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-invite.js~ChatInvite#handleMemberItemClick",
    "access": "private",
    "description": "处理成员点击事件",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "成员"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2394,
    "kind": "method",
    "name": "requestClose",
    "memberof": "app/views/chats/chat-invite.js~ChatInvite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-invite.js~ChatInvite#requestClose",
    "access": "private",
    "description": "处理请求关闭父级对话框",
    "lineNumber": 120,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2395,
    "kind": "member",
    "name": "handleInviteBtnClick",
    "memberof": "app/views/chats/chat-invite.js~ChatInvite",
    "static": false,
    "longname": "app/views/chats/chat-invite.js~ChatInvite#handleInviteBtnClick",
    "access": "private",
    "description": "处理邀请按钮点击事件",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2396,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-invite.js~ChatInvite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-invite.js~ChatInvite#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 172,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2397,
    "kind": "file",
    "name": "app/views/chats/chat-join-public.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport Avatar from '../../components/avatar';\nimport Messager from '../../components/messager';\nimport SearchControl from '../../components/search-control';\nimport Spinner from '../../components/spinner';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport ROUTES from '../common/routes';\nimport {ChatListItem} from './chat-list-item';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatJoinPublic 组件 ，显示一个加入公共讨论组界面\n * @class ChatJoinPublic\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatJoinPublic from './chat-join-public';\n * <ChatJoinPublic />\n */\nexport default class ChatJoinPublic extends Component {\n    /**\n     * 获取 ChatJoinPublic 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatJoinPublic>}\n     * @readonly\n     * @static\n     * @memberof ChatJoinPublic\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatJoinPublic} from './chat-join-public';\n     * <ChatJoinPublic />\n     */\n    static get ChatJoinPublic() {\n        return replaceViews('chats/chat-join-public', ChatJoinPublic);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatJoinPublic\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        children: PropTypes.any,\n        onRequestClose: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatJoinPublic\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        children: null,\n        onRequestClose: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatJoinPublic 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            choosed: null,\n            search: '',\n            chats: [],\n            loading: true\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatJoinPublic\n     * @return {void}\n     */\n    componentDidMount() {\n        this.loadPublicChats();\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ChatJoinPublic\n     * @return {void}\n     */\n    componentWillUnmount() {\n        this.unmounted = true;\n    }\n\n    /**\n     * 加载公开讨论组\n     * @return {void}\n     * @memberof ChatJoinPublic\n     * @private\n     */\n    loadPublicChats() {\n        this.setState({loading: true});\n        App.im.server.fetchPublicChats().then(chats => {\n            if (this.unmounted) return;\n            this.setState({loading: false, chats});\n        }).catch(error => {\n            if (this.unmounted) return;\n            this.setState({loading: false, chats: []});\n            if (error) {\n                Messager.show(Lang.error(error), {type: 'danger'});\n            }\n        });\n    }\n\n    /**\n     * 处理搜索框值变更事件\n     * @param {string} search 搜索字符串\n     * @memberof ChatJoinPublic\n     * @private\n     * @return {void}\n     */\n    handleSearchChange = search => {\n        search = search && search.toLowerCase();\n        this.setState({search});\n    }\n\n    /**\n     * 处理点击刷新按钮事件\n     * @memberof ChatJoinPublic\n     * @private\n     * @return {void}\n     */\n    handleRefreshBtnClick = () => {\n        this.loadPublicChats();\n    }\n\n    /**\n     * 处理点击加入按钮事件\n     * @memberof ChatJoinPublic\n     * @private\n     * @return {void}\n     */\n    handleJoinBtnClick = () => {\n        const {choosed} = this.state;\n        App.im.server.joinChat(choosed).then(chat => {\n            window.location.hash = `#${ROUTES.chats.groups.id(chat.gid)}`;\n            const {onRequestClose} = this.props;\n            if (onRequestClose) {\n                onRequestClose();\n            }\n            return chat;\n        }).catch(error => {\n            if (error) {\n                Messager.show(Lang.error(error));\n            }\n        });\n    }\n\n    /**\n     * 处理点击聊天条目事件\n     * @param {Chat} chat 聊天对象\n     * @memberof ChatJoinPublic\n     * @private\n     * @return {void}\n     */\n    handleChatItemClick(chat) {\n        this.setState({choosed: chat});\n    }\n\n    /**\n     * 判断给定的聊天是否匹配搜索字符串\n     *\n     * @param {Chat} chat 聊天对象\n     * @returns {boolean} 如果返回 `true` 则为是匹配搜索字符串，否则为不是匹配搜索字符串\n     * @memberof ChatJoinPublic\n     * @private\n     */\n    isMatchSearch(chat) {\n        const {search} = this.state;\n        if (!search.length) {\n            return true;\n        }\n        const chatName = chat.name.toLowerCase();\n        return chatName.includes(search) || chat.gid === search;\n    }\n\n    /**\n     * 判断给定的聊天是否是选中的聊天\n     *\n     * @param {Chat} chat 聊天对象\n     * @returns {boolean} 如果返回 `true` 则为是选中的聊天，否则为不是选中的聊天\n     * @memberof ChatJoinPublic\n     * @private\n     */\n    isChoosed(chat) {\n        return this.state.choosed && this.state.choosed.gid === chat.gid;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatJoinPublic\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            children,\n            onRequestClose,\n            ...other\n        } = this.props;\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-chat-join-public column single', className)}\n        >\n            <div className=\"list-item divider flex-none\">\n                <Avatar icon=\"arrow-right\" iconClassName=\"text-muted icon-2x\" />\n                <div className=\"title\">{Lang.string('chat.create.joinGroupTip')}</div>\n                <div className=\"flex-none\">\n                    <button type=\"button\" onClick={this.handleJoinBtnClick} disabled={!this.state.choosed} className=\"btn primary rounded\">{this.state.choosed ? Lang.format('chat.create.joinGroup.format', this.state.choosed.getDisplayName(App)) : Lang.string('chat.create.join')}</button>\n                </div>\n            </div>\n            <div className=\"white cell\">\n                <div className=\"column single\">\n                    <div className=\"cell heading flex-none has-padding\">\n                        <nav className=\"flex-auto\">\n                            <a className={'btn text-primary rounded' + (this.state.loading ? ' disabled' : '')} onClick={this.handleRefreshBtnClick}>{Lang.string('common.refresh')}</a>\n                        </nav>\n                        <SearchControl defaultValue={this.state.search} onSearchChange={this.handleSearchChange} className=\"flex-none\" style={{width: HTML.rem(200)}} />\n                    </div>\n                    <div className=\"cell scroll-y has-padding relative\">\n                        <div className=\"list fluid compact app-chat-join-public-chat-list\">\n                            {\n                                !this.state.loading && this.state.chats.map(chat => {\n                                    if (!App.im.chats.get(chat.gid) && this.isMatchSearch(chat)) {\n                                        const isChoosed = this.isChoosed(chat);\n                                        return <ChatListItem notUserLink=\"disabled\" className={isChoosed ? 'item primary-pale space-sm' : 'item space-sm'} onClick={this.handleChatItemClick.bind(this, chat)} key={chat.gid} chat={chat}>{isChoosed && <Icon name=\"check text-success\" />}</ChatListItem>;\n                                    }\n                                    return null;\n                                })\n                            }\n                            {this.state.loading && <div className=\"dock center-content\"><Spinner className=\"text-primary\" iconSize={36} /></div>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-join-public.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2398,
    "kind": "class",
    "name": "ChatJoinPublic",
    "memberof": "app/views/chats/chat-join-public.js",
    "static": true,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-join-public.js",
    "importStyle": "ChatJoinPublic",
    "description": "ChatJoinPublic 组件 ，显示一个加入公共讨论组界面",
    "examples": [
      "import ChatJoinPublic from './chat-join-public';\n<ChatJoinPublic />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatJoinPublic"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2399,
    "kind": "get",
    "name": "ChatJoinPublic",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic.ChatJoinPublic",
    "access": "public",
    "description": "获取 ChatJoinPublic 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatJoinPublic} from './chat-join-public';\n<ChatJoinPublic />"
    ],
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatJoinPublic>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2400,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "static": true,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2401,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "static": true,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2402,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatJoinPublic 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2403,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2404,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2405,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 111,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2406,
    "kind": "member",
    "name": "unmounted",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#unmounted",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2407,
    "kind": "method",
    "name": "loadPublicChats",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#loadPublicChats",
    "access": "private",
    "description": "加载公开讨论组",
    "lineNumber": 121,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2408,
    "kind": "member",
    "name": "handleSearchChange",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#handleSearchChange",
    "access": "private",
    "description": "处理搜索框值变更事件",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "搜索字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2409,
    "kind": "member",
    "name": "handleRefreshBtnClick",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#handleRefreshBtnClick",
    "access": "private",
    "description": "处理点击刷新按钮事件",
    "lineNumber": 153,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2410,
    "kind": "member",
    "name": "handleJoinBtnClick",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#handleJoinBtnClick",
    "access": "private",
    "description": "处理点击加入按钮事件",
    "lineNumber": 163,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2411,
    "kind": "method",
    "name": "handleChatItemClick",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#handleChatItemClick",
    "access": "private",
    "description": "处理点击聊天条目事件",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2412,
    "kind": "method",
    "name": "isMatchSearch",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#isMatchSearch",
    "access": "private",
    "description": "判断给定的聊天是否匹配搜索字符串",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是匹配搜索字符串，否则为不是匹配搜索字符串"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是匹配搜索字符串，否则为不是匹配搜索字符串"
    }
  },
  {
    "__docId__": 2413,
    "kind": "method",
    "name": "isChoosed",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#isChoosed",
    "access": "private",
    "description": "判断给定的聊天是否是选中的聊天",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是选中的聊天，否则为不是选中的聊天"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是选中的聊天，否则为不是选中的聊天"
    }
  },
  {
    "__docId__": 2414,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-join-public.js~ChatJoinPublic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-join-public.js~ChatJoinPublic#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 227,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2415,
    "kind": "file",
    "name": "app/views/chats/chat-list-item.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {classes} from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport Lang from '../../lang';\nimport ROUTES from '../common/routes';\nimport {ChatAvatar} from './chat-avatar';\nimport App from '../../core';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatListItem 组件 ，显示一个聊天列表条目\n * @class ChatListItem\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatListItem from './chat-list-item';\n * <ChatListItem />\n */\nexport default class ChatListItem extends Component {\n    /**\n     * 获取 ChatListItem 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatListItem>}\n     * @readonly\n     * @static\n     * @memberof ChatListItem\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatListItem} from './chat-list-item';\n     * <ChatListItem />\n     */\n    static get ChatListItem() {\n        return replaceViews('chats/chat-list-item', ChatListItem);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatListItem\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        children: PropTypes.any,\n        chat: PropTypes.object,\n        filterType: PropTypes.string,\n        badge: PropTypes.any,\n        notUserLink: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatListItem\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        children: null,\n        chat: null,\n        filterType: null,\n        badge: null,\n        notUserLink: false,\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof ChatListItem\n     */\n    shouldComponentUpdate(nextProps) {\n        return (this.props.className !== nextProps.className ||\n            this.props.children !== nextProps.children ||\n            this.props.chat !== nextProps.chat || this.lastChatUpdateId !== nextProps.chat.updateId ||\n            (nextProps.chat.isOne2One && nextProps.chat.getTheOtherOne(App).updateId !== this.lastOtherOneUpdateId) ||\n            this.props.filterType !== nextProps.filterType ||\n            this.props.badge !== nextProps.badge ||\n            this.props.notUserLink !== nextProps.notUserLink ||\n            this.lastChatIsActive !== App.im.ui.isActiveChat(nextProps.chat.gid)\n        );\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatListItem\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        let {\n            chat,\n            filterType,\n            className,\n            badge,\n            children,\n            notUserLink,\n            ...other\n        } = this.props;\n\n        this.lastChatUpdateId = chat.updateId;\n        this.lastChatIsActive = App.im.ui.isActiveChat(chat.gid);\n\n        const name = chat.getDisplayName(App);\n        let subname = null;\n        if (chat.isOne2One) {\n            const theOtherOne = chat.getTheOtherOne(App);\n            this.lastOtherOneUpdateId = theOtherOne.updateId;\n            if (theOtherOne.isOffline) {\n                subname = `[${Lang.string('member.status.offline')}]`;\n            }\n        } else if (chat.isSystem) {\n            if (chat.isRobot) {\n                const robotSubName = Lang.string('common.littlexxSubname');\n                if (robotSubName !== name) {\n                    subname = `(${robotSubName})`;\n                }\n            } else {\n                subname = `(${Lang.format('chat.membersCount.format', Lang.string('chat.all'))})`;\n            }\n        } else if (chat.isGroup) {\n            subname = `(${Lang.format('chat.membersCount.format', chat.getMembersCount(App.members))})`;\n        }\n\n        if (!badge && badge !== false) {\n            const noticeCount = chat.noticeCount;\n            if (noticeCount) {\n                badge = <div className={classes('label circle label-sm', chat.isMuteOrHidden ? 'blue' : 'red')}>{noticeCount > 99 ? '99+' : noticeCount}</div>;\n            } else if (chat.mute) {\n                badge = <Icon name=\"bell-off\" className=\"muted\" />;\n            } else if (chat.star) {\n                badge = <Icon name=\"star\" className=\"icon-sm muted\" />;\n            }\n        }\n\n        if (notUserLink) {\n            return (<a\n                href={notUserLink === 'disabled' ? null : `#${ROUTES.chats.chat.id(chat.gid, filterType)}`}\n                className={classes('app-chat-item flex-middle', className, {active: notUserLink !== 'disabled' && this.lastChatIsActive})}\n                {...other}\n            >\n                <ChatAvatar chat={chat} avatarClassName=\"avatar-sm\" avatarSize={24} grayOffline className=\"flex-none\" />\n                <div className=\"title text-ellipsis\">\n                    {name}\n                    {subname && <small className=\"muted\">&nbsp; {subname}</small>}\n                </div>\n                {badge && <div className=\"flex-none\">{badge}</div>}\n                {children}\n            </a>);\n        }\n        return (<Link\n            to={ROUTES.chats.chat.id(chat.gid, filterType)}\n            className={classes('app-chat-item flex-middle', className, {active: this.lastChatIsActive})}\n            {...other}\n        >\n            <ChatAvatar chat={chat} avatarClassName=\"avatar-sm\" avatarSize={24} grayOffline className=\"flex-none\" />\n            <div className=\"title text-ellipsis\">\n                {name}\n                {subname && <small className=\"muted\">&nbsp; {subname}</small>}\n            </div>\n            {badge && <div className=\"flex-none\">{badge}</div>}\n            {children}\n        </Link>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-list-item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2416,
    "kind": "class",
    "name": "ChatListItem",
    "memberof": "app/views/chats/chat-list-item.js",
    "static": true,
    "longname": "app/views/chats/chat-list-item.js~ChatListItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-list-item.js",
    "importStyle": "ChatListItem",
    "description": "ChatListItem 组件 ，显示一个聊天列表条目",
    "examples": [
      "import ChatListItem from './chat-list-item';\n<ChatListItem />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatListItem"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2417,
    "kind": "get",
    "name": "ChatListItem",
    "memberof": "app/views/chats/chat-list-item.js~ChatListItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-list-item.js~ChatListItem.ChatListItem",
    "access": "public",
    "description": "获取 ChatListItem 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatListItem} from './chat-list-item';\n<ChatListItem />"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatListItem>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2418,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-list-item.js~ChatListItem",
    "static": true,
    "longname": "app/views/chats/chat-list-item.js~ChatListItem.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2419,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-list-item.js~ChatListItem",
    "static": true,
    "longname": "app/views/chats/chat-list-item.js~ChatListItem.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2420,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/chat-list-item.js~ChatListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-list-item.js~ChatListItem#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2421,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-list-item.js~ChatListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-list-item.js~ChatListItem#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2422,
    "kind": "member",
    "name": "lastChatUpdateId",
    "memberof": "app/views/chats/chat-list-item.js~ChatListItem",
    "static": false,
    "longname": "app/views/chats/chat-list-item.js~ChatListItem#lastChatUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2423,
    "kind": "member",
    "name": "lastChatIsActive",
    "memberof": "app/views/chats/chat-list-item.js~ChatListItem",
    "static": false,
    "longname": "app/views/chats/chat-list-item.js~ChatListItem#lastChatIsActive",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2424,
    "kind": "member",
    "name": "lastOtherOneUpdateId",
    "memberof": "app/views/chats/chat-list-item.js~ChatListItem",
    "static": false,
    "longname": "app/views/chats/chat-list-item.js~ChatListItem#lastOtherOneUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2425,
    "kind": "file",
    "name": "app/views/chats/chat-messages.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport {MessageList} from './message-list';\nimport replaceViews from '../replace-views';\nimport Spinner from '../../components/spinner';\nimport Lang from '../../lang';\n\n/**\n * ChatMessages 组件 ，显示一个聊天消息列表界面\n * @class ChatMessages\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatMessages from './chat-messages';\n * <ChatMessages />\n */\nexport default class ChatMessages extends Component {\n    /**\n     * 获取 ChatMessages 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatMessages>}\n     * @readonly\n     * @static\n     * @memberof ChatMessages\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatMessages} from './chat-messages';\n     * <ChatMessages />\n     */\n    static get ChatMessages() {\n        return replaceViews('chats/chat-messages', ChatMessages);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatMessages\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chat: PropTypes.object,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatMessages\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chat: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatMessages 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            loading: !props.chat.isLoadingOver\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatMessages\n     * @return {void}\n     */\n    componentDidMount() {\n        this.loadChatMessages(400);\n    }\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof ChatMessages\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextState.loading !== this.state.loading || this.props.className !== nextProps.className || this.props.chat !== nextProps.chat || this.lastChatUpdateId !== nextProps.updateId;\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidUpdate`\n     * componentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。\n     *\n     * @param {Object} prevProps 更新前的属性值\n     * @param {Object} prevState 更新前的状态值\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidUpdate\n     * @private\n     * @memberof ChatMessages\n     * @return {void}\n     */\n    componentDidUpdate() {\n        if (!this.props.chat.isFirstLoaded) {\n            this.loadChatMessages();\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ChatMessages\n     * @return {void}\n     */\n    componentWillUnmount() {\n        if (this.loadChatMessagesTask) {\n            clearTimeout(this.loadChatMessagesTask);\n        }\n    }\n\n    /**\n     * 加载聊天消息\n     *\n     * @param {number} [delay=0] 延迟时间，单位毫秒\n     * @memberof ChatMessages\n     * @private\n     * @return {void}\n     */\n    loadChatMessages(delay = 0) {\n        const {chat} = this.props;\n        if (!chat.isLoadingOver && !this.loadChatMessagesTask) {\n            this.loadChatMessagesTask = setTimeout(() => {\n                this.setState({loading: true}, () => {\n                    App.im.chats.loadChatMessages(chat).then(() => {\n                        return this.setState({loading: false});\n                    });\n                    this.loadChatMessagesTask = null;\n                });\n            }, delay);\n        }\n    }\n\n    /**\n     * 处理滚动事件\n     * @param {Object} scrollInfo 滚动信息\n     * @memberof ChatMessages\n     * @private\n     * @return {void}\n     */\n    handleScroll = scrollInfo => {\n        if (scrollInfo.isAtTop) {\n            this.loadChatMessages();\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatMessages\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            ...other\n        } = this.props;\n\n        const font = App.profile.userConfig.chatFontSize;\n        this.lastChatUpdateId = chat.updateId;\n\n        let headerView = null;\n        if (this.state.loading) {\n            headerView = <Spinner className=\"has-padding\" />;\n        } else if (chat.messages && chat.isLoadingOver) {\n            headerView = <div className=\"has-padding small muted text-center space-sm\">― {Lang.string('chat.noMoreMessage')} ―</div>;\n        } else {\n            headerView = <a className=\"has-padding small muted text-center block space-sm\" onClick={this.loadChatMessages.bind(this, 0)}>― {Lang.string('chat.loadMoreMessage')} ―</a>;\n        }\n\n        return (<div\n            className={classes('app-chat-messages white', className)}\n            {...other}\n        >\n            <MessageList header={headerView} font={font} className=\"dock scroll-y user-selectable\" messages={chat.messages} onScroll={chat.isLoadingOver ? null : this.handleScroll} />\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-messages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2426,
    "kind": "class",
    "name": "ChatMessages",
    "memberof": "app/views/chats/chat-messages.js",
    "static": true,
    "longname": "app/views/chats/chat-messages.js~ChatMessages",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-messages.js",
    "importStyle": "ChatMessages",
    "description": "ChatMessages 组件 ，显示一个聊天消息列表界面",
    "examples": [
      "import ChatMessages from './chat-messages';\n<ChatMessages />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatMessages"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2427,
    "kind": "get",
    "name": "ChatMessages",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-messages.js~ChatMessages.ChatMessages",
    "access": "public",
    "description": "获取 ChatMessages 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatMessages} from './chat-messages';\n<ChatMessages />"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatMessages>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2428,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "static": true,
    "longname": "app/views/chats/chat-messages.js~ChatMessages.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2429,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "static": true,
    "longname": "app/views/chats/chat-messages.js~ChatMessages.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2430,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatMessages 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2431,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2432,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 87,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2433,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2434,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#componentDidUpdate",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidUpdate`\ncomponentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidUpdate"
    ],
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "更新前的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "更新前的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2435,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 131,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2436,
    "kind": "method",
    "name": "loadChatMessages",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#loadChatMessages",
    "access": "private",
    "description": "加载聊天消息",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "delay",
        "description": "延迟时间，单位毫秒"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2437,
    "kind": "member",
    "name": "loadChatMessagesTask",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#loadChatMessagesTask",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2439,
    "kind": "member",
    "name": "handleScroll",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#handleScroll",
    "access": "private",
    "description": "处理滚动事件",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "scrollInfo",
        "description": "滚动信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2440,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 180,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2441,
    "kind": "member",
    "name": "lastChatUpdateId",
    "memberof": "app/views/chats/chat-messages.js~ChatMessages",
    "static": false,
    "longname": "app/views/chats/chat-messages.js~ChatMessages#lastChatUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2442,
    "kind": "file",
    "name": "app/views/chats/chat-search-result.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport Avatar from '../../components/avatar';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport {MessageList} from './message-list';\nimport {MessageListItem} from './message-list-item';\nimport replaceViews from '../replace-views';\n\nconst MANY_RESULT_COUNT = 200;\nconst MAX_RESULT_COUNT = 500;\n\n/**\n * ChatSearchResult 组件 ，显示聊天搜索结果界面\n * @class ChatSearchResult\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatSearchResult from './chat-search-result';\n * <ChatSearchResult />\n */\nexport default class ChatSearchResult extends Component {\n    /**\n     * 获取 ChatSearchResult 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatSearchResult>}\n     * @readonly\n     * @static\n     * @memberof ChatSearchResult\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatSearchResult} from './chat-search-result';\n     * <ChatSearchResult />\n     */\n    static get ChatSearchResult() {\n        return replaceViews('chats/chat-search-result', ChatSearchResult);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatSearchResult\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        children: PropTypes.any,\n        chat: PropTypes.object,\n        searchKeys: PropTypes.string,\n        searchCount: PropTypes.number,\n        searchFilterTime: PropTypes.any,\n        requestGoto: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatSearchResult\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        children: null,\n        chat: null,\n        searchKeys: null,\n        requestGoto: null,\n        searchCount: 0,\n        searchFilterTime: 0,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatSearchResult 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            loading: false,\n            errMessage: '',\n            messages: [],\n            realCount: null,\n            selectedMessage: null\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatSearchResult\n     * @return {void}\n     */\n    componentDidMount() {\n        this.loadMessages();\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidUpdate`\n     * componentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。\n     *\n     * @param {Object} prevProps 更新前的属性值\n     * @param {Object} prevState 更新前的状态值\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidUpdate\n     * @private\n     * @memberof ChatSearchResult\n     * @return {void}\n     */\n    componentDidUpdate(prevProps, prevState) {\n        if (this._createSearchId(this.props) !== this.searchId) {\n            this.loadMessages();\n        }\n        if (this.state.messages && this.state.messages.length && !this.state.selectedMessage) {\n            this.handleMessageItemClick(this.state.messages[0]);\n        }\n    }\n\n    /**\n     * 创建搜索标识字符串\n     *\n     * @param {Object} props 组件属性\n     * @return {string} 搜索标识字符串\n     * @memberof ChatSearchResult\n     * @private\n     */\n    _createSearchId(props) {\n        const {searchKeys, searchFilterTime, chat} = props || this.props;\n        return `${chat.gid}|${searchKeys}|${searchFilterTime}`;\n    }\n\n    /**\n     * 加载消息\n     *\n     * @memberof ChatSearchResult\n     * @private\n     * @return {void}\n     */\n    loadMessages() {\n        const {searchKeys, searchFilterTime, searchCount, chat} = this.props;\n        const searchId = this._createSearchId(this.props);\n        if (searchId !== this.searchId && searchCount) {\n            this.searchId = searchId;\n            this.contentConvertPattern = new RegExp(`(${searchKeys.split(' ').join('|')})(?![^<]*>)`, 'gi');\n            this.setState({\n                realCount: null,\n                loading: true,\n                errMessage: '',\n                messages: [],\n                selectedMessage: null\n            });\n            App.im.chats.searchChatMessages(chat, searchKeys, searchFilterTime).then(messages => {\n                if (this.searchId === searchId) {\n                    const realCount = messages.length;\n                    if (realCount > MAX_RESULT_COUNT) {\n                        messages.splice(MAX_RESULT_COUNT, realCount - MAX_RESULT_COUNT);\n                    }\n                    this.setState({\n                        realCount,\n                        loading: false,\n                        errMessage: '',\n                        messages,\n                    });\n                }\n            }).catch(error => {\n                if (this.searchId === searchId) {\n                    this.setState({\n                        realCount: 0,\n                        loading: false,\n                        errMessage: Lang.error(error),\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * 高亮替换消息内容\n     * @private\n     * @memberof ChatHistory\n     * @param {string} content 消息内容\n     * @return {string} 替换后的内容\n     */\n    convertContent(content) {\n        if (this.contentConvertPattern && this.contentConvertPattern.test(content)) {\n            content = content.replace(this.contentConvertPattern, \"<span class='highlight'>$1</span>\");\n        }\n        return content;\n    }\n\n    /**\n     * 处理聊天消息点击事件\n     * @param {ChatMessage} message 聊天消息\n     * @param {Event} e 事件对象\n     * @memberof ChatSearchResult\n     * @private\n     * @return {void}\n     */\n    handleMessageItemClick(message, e) {\n        this.setState({selectedMessage: message});\n        if (this.props.requestGoto) {\n            this.props.requestGoto(message);\n        }\n        if (e) {\n            e.stopPropagation();\n        }\n    }\n\n    /**\n     * 消息列表项生成函数\n     *\n     * @param {ChatMessage} message 聊天消息\n     * @param {ChatMessage} lastMessage 上一个聊天消息\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @memberof ChatHistory\n     * @private\n     */\n    listItemCreator(message, lastMessage) {\n        return (<MessageListItem\n            className={HTML.classes('state state-click-throuth', {active: this.state.selectedMessage && this.state.selectedMessage.gid === message.gid})}\n            staticUI\n            hideHeader={false}\n            showDateDivider={false}\n            lastMessage={lastMessage}\n            key={message.gid}\n            message={message}\n            avatarSize={20}\n            dateFormater=\"yyyy-M-d hh:mm\"\n            textContentConverter={this.convertContent.bind(this)}\n            onClick={this.handleMessageItemClick.bind(this, message)}\n        />);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatSearchResult\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            searchKeys,\n            searchFilterTime,\n            searchCount,\n            className,\n            children,\n            requestGoto,\n            ...other\n        } = this.props;\n\n        if (!searchCount) {\n            return (<div\n                {...other}\n                className={HTML.classes('app-chat-search-result column single', className)}\n            />);\n        }\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-chat-search-result column single', className)}\n            onClick={this.handleMessageItemClick.bind(this, null)}\n        >\n            <header className=\"heading flex-none gray\">\n                <div className=\"title\"><small>{Lang.format('chats.chat.search.result.format', chat.getDisplayName(App), (typeof this.state.realCount) !== 'number' ? searchCount : this.state.realCount)}</small></div>\n                {this.state.loading ? <Icon className=\"loading spin muted\" /> : null}\n            </header>\n            <div className=\"flex-auto user-selectable scroll-y scroll-x fluid\">\n                <MessageList\n                    className=\"app-message-list-simple\"\n                    staticUI\n                    messages={this.state.messages}\n                    stayBottom={false}\n                    listItemCreator={this.listItemCreator.bind(this)}\n                />\n            </div>\n            {!this.state.selectedMessage && <div className=\"flex-none heading info-pale\">\n                <Avatar icon=\"information-outline\" />\n                <div className=\"title\"><small>{Lang.string('chats.history.search.result.selectTip')}</small></div>\n            </div>}\n            {this.state.realCount > MANY_RESULT_COUNT && <div className=\"flex-none heading info-pale\">\n                <Avatar icon=\"information-outline\" />\n                <div className=\"title\"><small>{this.state.realCount > MAX_RESULT_COUNT ? Lang.format('chats.history.search.result.notShow.format', this.state.realCount - MAX_RESULT_COUNT) : ''}{Lang.string('chats.history.search.result.toMany')}</small></div>\n            </div>}\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-search-result.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2443,
    "kind": "variable",
    "name": "MANY_RESULT_COUNT",
    "memberof": "app/views/chats/chat-search-result.js",
    "static": true,
    "longname": "app/views/chats/chat-search-result.js~MANY_RESULT_COUNT",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-search-result.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2444,
    "kind": "variable",
    "name": "MAX_RESULT_COUNT",
    "memberof": "app/views/chats/chat-search-result.js",
    "static": true,
    "longname": "app/views/chats/chat-search-result.js~MAX_RESULT_COUNT",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-search-result.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2445,
    "kind": "class",
    "name": "ChatSearchResult",
    "memberof": "app/views/chats/chat-search-result.js",
    "static": true,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-search-result.js",
    "importStyle": "ChatSearchResult",
    "description": "ChatSearchResult 组件 ，显示聊天搜索结果界面",
    "examples": [
      "import ChatSearchResult from './chat-search-result';\n<ChatSearchResult />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatSearchResult"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2446,
    "kind": "get",
    "name": "ChatSearchResult",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult.ChatSearchResult",
    "access": "public",
    "description": "获取 ChatSearchResult 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatSearchResult} from './chat-search-result';\n<ChatSearchResult />"
    ],
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatSearchResult>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2447,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "static": true,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2448,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "static": true,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2449,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatSearchResult 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2450,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2451,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2452,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#componentDidUpdate",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidUpdate`\ncomponentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidUpdate"
    ],
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "更新前的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "更新前的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2453,
    "kind": "method",
    "name": "_createSearchId",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#_createSearchId",
    "access": "private",
    "description": "创建搜索标识字符串",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "搜索标识字符串"
    }
  },
  {
    "__docId__": 2454,
    "kind": "method",
    "name": "loadMessages",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#loadMessages",
    "access": "private",
    "description": "加载消息",
    "lineNumber": 150,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2455,
    "kind": "member",
    "name": "searchId",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#searchId",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2456,
    "kind": "member",
    "name": "contentConvertPattern",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#contentConvertPattern",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2457,
    "kind": "method",
    "name": "convertContent",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#convertContent",
    "access": "private",
    "description": "高亮替换消息内容",
    "lineNumber": 195,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "消息内容"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "替换后的内容"
    }
  },
  {
    "__docId__": 2458,
    "kind": "method",
    "name": "handleMessageItemClick",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#handleMessageItemClick",
    "access": "private",
    "description": "处理聊天消息点击事件",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "聊天消息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2459,
    "kind": "method",
    "name": "listItemCreator",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#listItemCreator",
    "access": "private",
    "description": "消息列表项生成函数",
    "lineNumber": 229,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "聊天消息"
      },
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "lastMessage",
        "description": "上一个聊天消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    }
  },
  {
    "__docId__": 2460,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-search-result.js~ChatSearchResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-search-result.js~ChatSearchResult#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 253,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2461,
    "kind": "file",
    "name": "app/views/chats/chat-sendbox-toolbar.js",
    "content": "import Config from '../../config';\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport {formatKeyDecoration} from '../../utils/shortcut';\nimport Icon from '../../components/icon';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport replaceViews from '../replace-views';\nimport {getMenuItemsForContext} from '../../core/context-menu';\n\n/**\n * ChatSendboxToolbar 组件 ，显示聊天发送框工具栏界面\n * @class ChatSendboxToolbar\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatSendboxToolbar from './chat-sendbox-toolbar';\n * <ChatSendboxToolbar />\n */\nexport default class ChatSendboxToolbar extends PureComponent {\n    /**\n     * 获取 ChatSendboxToolbar 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatSendboxToolbar>}\n     * @readonly\n     * @static\n     * @memberof ChatSendboxToolbar\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatSendboxToolbar} from './chat-sendbox-toolbar';\n     * <ChatSendboxToolbar />\n     */\n    static get ChatSendboxToolbar() {\n        return replaceViews('chats/chat-sendbox-toolbar flex', ChatSendboxToolbar);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatSendboxToolbar\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chatGid: PropTypes.string,\n        userConfigChangeTime: PropTypes.number,\n        sendButtonDisabled: PropTypes.bool,\n        onSendButtonClick: PropTypes.func,\n        onPreviewButtonClick: PropTypes.func\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatSendboxToolbar\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chatGid: null,\n        sendButtonDisabled: true,\n        onSendButtonClick: null,\n        onPreviewButtonClick: null,\n        userConfigChangeTime: null,\n    };\n\n    /**\n     * 处理发送按钮右键菜单事件\n     * @param {Event} e 事件对象\n     * @memberof ChatSendboxToolbar\n     * @private\n     * @return {void}\n     */\n    handleSendBtnContextMenu = e => {\n        const currentHotKey = formatKeyDecoration(App.profile.userConfig.sendMessageHotkey);\n        let itemsChecked = false;\n        const items = [{\n            label: Lang.string('chat.sendbox.changeHotkeyTip'),\n            disabled: true\n        }];\n        Config.ui['hotkey.sendMessageOptions'].forEach(x => {\n            x = formatKeyDecoration(x);\n            if (currentHotKey === x) {\n                itemsChecked = true;\n            }\n            items.push({\n                label: x,\n                click: () => {\n                    App.profile.userConfig.sendMessageHotkey = x;\n                },\n                checked: currentHotKey === x\n            });\n        });\n        if (!itemsChecked) {\n            items.push({\n                label: currentHotKey,\n                checked: true\n            });\n        }\n\n        App.ui.showContextMenu({x: e.clientX, y: e.clientY}, items);\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatSendboxToolbar\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {className, chatGid, sendButtonDisabled, onPreviewButtonClick, onSendButtonClick, userConfigChangeTime, ...other} = this.props;\n        return (<div className={classes('app-chat-sendbox-toolbar flex', className)} {...other}>\n            <div className=\"flex flex-middle flex-auto toolbar flex-wrap\">\n                {\n                    getMenuItemsForContext('chat.sendbox.toolbar', {chatGid, openMessagePreview: sendButtonDisabled ? null : onPreviewButtonClick, sendContent: App.im.ui.sendContentToChat}).map((item, idx) => {\n                        if (item === 'divider') {\n                            return <div key={item.id || idx} className=\"divider\" />;\n                        }\n                        return <div key={item.id || idx} className=\"hint--top has-padding-sm\" data-hint={item.label} onContextMenu={item.contextMenu} onClick={item.click}><button className={classes('btn iconbutton rounded', item.className)} type=\"button\">{Icon.render(item.icon)}</button></div>;\n                    })\n                }\n            </div>\n            <div className=\"toolbar flex flex-none flex-middle\">\n                <div className=\"hint--top-left has-padding-sm\" data-hint={`${Lang.string('chat.sendbox.toolbar.send')} (${App.profile.userConfig.sendMessageHotkey} - ${Lang.string('chat.sendbox.toolbar.changeHotkeyTip')})`} onClick={onSendButtonClick}>\n                    <button\n                        onContextMenu={this.handleSendBtnContextMenu}\n                        className={classes('btn iconbutton rounded', {\n                            muted: sendButtonDisabled,\n                            'text-primary': !sendButtonDisabled\n                        })}\n                        type=\"button\"\n                    >\n                        <Icon className=\"icon-2x\" name=\"keyboard-return\" />\n                    </button>\n                </div>\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-sendbox-toolbar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2462,
    "kind": "class",
    "name": "ChatSendboxToolbar",
    "memberof": "app/views/chats/chat-sendbox-toolbar.js",
    "static": true,
    "longname": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-sendbox-toolbar.js",
    "importStyle": "ChatSendboxToolbar",
    "description": "ChatSendboxToolbar 组件 ，显示聊天发送框工具栏界面",
    "examples": [
      "import ChatSendboxToolbar from './chat-sendbox-toolbar';\n<ChatSendboxToolbar />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatSendboxToolbar"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2463,
    "kind": "get",
    "name": "ChatSendboxToolbar",
    "memberof": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar.ChatSendboxToolbar",
    "access": "public",
    "description": "获取 ChatSendboxToolbar 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatSendboxToolbar} from './chat-sendbox-toolbar';\n<ChatSendboxToolbar />"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatSendboxToolbar>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2464,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar",
    "static": true,
    "longname": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2465,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar",
    "static": true,
    "longname": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2466,
    "kind": "member",
    "name": "handleSendBtnContextMenu",
    "memberof": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar",
    "static": false,
    "longname": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar#handleSendBtnContextMenu",
    "access": "private",
    "description": "处理发送按钮右键菜单事件",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2467,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sendbox-toolbar.js~ChatSendboxToolbar#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 113,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2468,
    "kind": "file",
    "name": "app/views/chats/chat-sendbox.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport {getKeyDecoration} from '../../utils/shortcut';\nimport Emojione from '../../components/emojione';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport {DraftEditor} from '../common/draft-editor';\nimport {ChatSendboxToolbar} from './chat-sendbox-toolbar';\nimport MessagesPreivewDialog from './messages-preview-dialog';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatSendbox 组件 ，显示一个聊天发送框\n * @class ChatSendbox\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatSendbox from './chat-sendbox';\n * <ChatSendbox />\n */\nexport default class ChatSendbox extends Component {\n    /**\n     * 获取 ChatSendbox 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatSendbox>}\n     * @readonly\n     * @static\n     * @memberof ChatSendbox\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatSendbox} from './chat-sendbox';\n     * <ChatSendbox />\n     */\n    static get ChatSendbox() {\n        return replaceViews('chats/chat-sendbox', ChatSendbox);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatSendbox\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chat: PropTypes.object,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatSendbox\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chat: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatSendbox 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            sendButtonDisabled: true\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatSendbox\n     * @return {void}\n     */\n    componentDidMount() {\n        this.onSendContentToChatHandler = App.im.ui.onSendContentToChat(this.props.chat.gid, content => {\n            if (content && content.content) {\n                switch (content.type) {\n                case 'image':\n                    this.editbox.appendImage(content.content);\n                    break;\n                default:\n                    this.editbox.appendContent(content.content);\n                }\n            }\n            this.editbox.focus();\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ChatSendbox\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.onSendContentToChatHandler);\n    }\n\n    /**\n     * 向聊天发送框添加图片\n     *\n     * @param {FileList|Object|Object[]} images 要添加的图片\n     * @memberof ChatSendbox\n     * @return {void}\n     */\n    appendImages(images) {\n        if (images instanceof FileList) {\n            const files = images;\n            images = [];\n            for (let i = 0; i < files.length; ++i) {\n                images.push(files[i]);\n            }\n        }\n        if (!Array.isArray(images)) {\n            images = [images];\n        }\n        images.forEach(image => {\n            this.editbox.appendImage(image);\n        });\n        this.editbox.focus();\n    }\n\n    /**\n     * 清空聊天发送框内的内容\n     * @memberof ChatSendbox\n     * @return {void}\n     */\n    clearContent() {\n        this.editbox.clearContent();\n        this.setState({sendButtonDisabled: true});\n    }\n\n    /**\n     * 激活发送框编辑器\n     *\n     * @memberof ChatSendbox\n     * @return {void}\n     */\n    focusEditor() {\n        this.editbox.focus();\n    }\n\n    /**\n     * 处理发送按钮点击事件\n     * @memberof ChatSendbox\n     * @private\n     * @return {void}\n     */\n    handleSendButtonClick = async () => {\n        if (this.state.sendButtonDisabled) {\n            return;\n        }\n\n        const contentList = this.editbox.getContentList();\n        this.clearContent();\n        this.focusEditor();\n        for (let i = 0; i < contentList.length; ++i) {\n            const content = contentList[i];\n            if (content.type === 'text') {\n                content.content = Emojione.toShort(content.content);\n                const trimContent = App.profile.userConfig.sendHDEmoticon ? content.content.trim() : false;\n                if (trimContent && Emojione.emojioneList[trimContent]) {\n                    await App.im.server.sendEmojiMessage(trimContent, this.props.chat); // eslint-disable-line\n                } else {\n                    await App.im.server.sendTextMessage(content.content, this.props.chat); // eslint-disable-line\n                }\n            } else if (content.type === 'image') {\n                await App.im.server.sendImageMessage(content.image, this.props.chat); // eslint-disable-line\n            }\n        }\n    }\n\n    /**\n     * 处理文本输入事件\n     * @param {Object} contentState DraftJS 内容状态对象\n     * @memberof ChatSendbox\n     * @private\n     * @return {void}\n     */\n    handleOnChange = (contentState) => {\n        this.setState({sendButtonDisabled: !contentState.hasText()});\n    }\n\n    /**\n     * 处理按下回车键事件\n     * @param {Event} e 事件对象\n     * @memberof ChatSendbox\n     * @private\n     * @return {void}\n     */\n    handleOnReturnKeyDown = e => {\n        const keyDecoration = getKeyDecoration(e);\n        if (keyDecoration === App.profile.userConfig.sendMessageHotkey) {\n            if (!this.state.sendButtonDisabled) {\n                setTimeout(() => {\n                    this.handleSendButtonClick();\n                }, 10);\n            }\n            e.preventDefault();\n            return 'handled';\n        }\n        return 'not-handled';\n    }\n\n    /**\n     * 处理点击预览按钮事件\n     * @param {Event} e 事件对象\n     * @memberof ChatSendbox\n     * @private\n     * @return {void}\n     */\n    handlePreviewBtnClick = e => {\n        if (this.state.sendButtonDisabled) {\n            return;\n        }\n\n        const messages = [];\n        const {chat} = this.props;\n        this.editbox.getContentList().forEach(content => {\n            if (content.type === 'text') {\n                content.content = Emojione.toShort(content.content);\n                const trimContent = App.profile.userConfig.sendHDEmoticon ? content.content.trim() : false;\n                if (trimContent && Emojione.emojioneList[trimContent]) {\n                    messages.push(App.im.server.createEmojiChatMessage(trimContent, chat));\n                } else {\n                    messages.push(App.im.server.createTextChatMessage(content.content, chat));\n                }\n            } else if (content.type === 'image') {\n                messages.push(App.im.server.createTextChatMessage(`![preview-image](${content.image.url || content.image.path})`, chat));\n            }\n        });\n        MessagesPreivewDialog.show(messages, {onHidden: () => {\n            this.editbox.focus();\n        }});\n    };\n\n    /**\n     * 处理获得焦点事件\n     * @param {Event} e 事件对象\n     * @memberof ChatSendbox\n     * @private\n     * @return {void}\n     */\n    handleOnFocus = e => {\n        App.im.ui.emitChatSendboxFocus(this.props.chat, this.editbox.getContent());\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatSendbox\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            ...other\n        } = this.props;\n\n        let placeholder = null;\n        if (chat.isOne2One) {\n            const theOtherOne = chat.getTheOtherOne(App);\n            if (theOtherOne && theOtherOne.isOffline) {\n                placeholder = Lang.format('chat.sendbox.placeholder.memberIsOffline', theOtherOne.displayName);\n            }\n        }\n        placeholder = placeholder || `${Lang.string('chat.sendbox.placeholder.sendMessage')}${App.profile.userConfig.sendMarkdown ? ' (Markdown)' : ''}`;\n        const {userConfig} = App.profile;\n\n        return (<div\n            {...other}\n            className={classes('app-chat-sendbox', className)}\n        >\n            <DraftEditor\n                className=\"app-chat-drafteditor white dock-top has-padding scroll-y\"\n                ref={e => {this.editbox = e;}}\n                placeholder={placeholder}\n                onChange={this.handleOnChange}\n                onReturnKeyDown={this.handleOnReturnKeyDown}\n                onFocus={this.handleOnFocus}\n            />\n            <ChatSendboxToolbar className=\"dock-bottom\" chatGid={chat.gid} userConfigChangeTime={userConfig && userConfig.lastChangeTime} sendButtonDisabled={this.state.sendButtonDisabled} onSendButtonClick={this.handleSendButtonClick} onPreviewButtonClick={this.handlePreviewBtnClick} />\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-sendbox.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2469,
    "kind": "class",
    "name": "ChatSendbox",
    "memberof": "app/views/chats/chat-sendbox.js",
    "static": true,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-sendbox.js",
    "importStyle": "ChatSendbox",
    "description": "ChatSendbox 组件 ，显示一个聊天发送框",
    "examples": [
      "import ChatSendbox from './chat-sendbox';\n<ChatSendbox />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatSendbox"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2470,
    "kind": "get",
    "name": "ChatSendbox",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox.ChatSendbox",
    "access": "public",
    "description": "获取 ChatSendbox 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatSendbox} from './chat-sendbox';\n<ChatSendbox />"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatSendbox>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2471,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "static": true,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2472,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "static": true,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2473,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatSendbox 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2474,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#state",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "{\"sendButtonDisabled\": boolean}"
      ]
    }
  },
  {
    "__docId__": 2475,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 84,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2476,
    "kind": "member",
    "name": "onSendContentToChatHandler",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#onSendContentToChatHandler",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2477,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 109,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2478,
    "kind": "method",
    "name": "appendImages",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#appendImages",
    "access": "public",
    "description": "向聊天发送框添加图片",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "FileList",
          "Object",
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": "要添加的图片"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2479,
    "kind": "method",
    "name": "clearContent",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#clearContent",
    "access": "public",
    "description": "清空聊天发送框内的内容",
    "lineNumber": 142,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2480,
    "kind": "method",
    "name": "focusEditor",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#focusEditor",
    "access": "public",
    "description": "激活发送框编辑器",
    "lineNumber": 153,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2481,
    "kind": "member",
    "name": "handleSendButtonClick",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#handleSendButtonClick",
    "access": "private",
    "description": "处理发送按钮点击事件",
    "lineNumber": 163,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2482,
    "kind": "member",
    "name": "handleOnChange",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#handleOnChange",
    "access": "private",
    "description": "处理文本输入事件",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "contentState",
        "description": "DraftJS 内容状态对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2483,
    "kind": "member",
    "name": "handleOnReturnKeyDown",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#handleOnReturnKeyDown",
    "access": "private",
    "description": "处理按下回车键事件",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2484,
    "kind": "member",
    "name": "handlePreviewBtnClick",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#handlePreviewBtnClick",
    "access": "private",
    "description": "处理点击预览按钮事件",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2485,
    "kind": "member",
    "name": "handleOnFocus",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#handleOnFocus",
    "access": "private",
    "description": "处理获得焦点事件",
    "lineNumber": 258,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2486,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 270,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2487,
    "kind": "member",
    "name": "editbox",
    "memberof": "app/views/chats/chat-sendbox.js~ChatSendbox",
    "static": false,
    "longname": "app/views/chats/chat-sendbox.js~ChatSendbox#editbox",
    "access": "public",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2488,
    "kind": "file",
    "name": "app/views/chats/chat-sidebar-files.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport Emojione from '../../components/emojione';\nimport Spinner from '../../components/spinner';\nimport {FileList} from '../common/file-list';\nimport replaceViews from '../replace-views';\n\n/**\n * 渲染加载中动画\n * @return {ReactNode|string|number|null|boolean} React 渲染内容\n * @private\n */\nconst renderLoading = () => {\n    return (<div className=\"dock center-content\" style={{top: HTML.rem(50)}}>\n        <Spinner label={Lang.string('chat.sidebar.tab.files.loading')} />\n    </div>);\n};\n\n/**\n * 渲染文件列表为空的提示界面\n * @return {ReactNode|string|number|null|boolean} React 渲染内容\n * @private\n */\nconst renderEmptyFileList = () => {\n    return (<div className=\"dock center-content\" style={{top: HTML.rem(50)}}>\n        <div>\n            <div className=\"text-center\" dangerouslySetInnerHTML={{__html: Emojione.toImage(':blowfish:')}} />\n            <div className=\"text-gray small\">{Lang.string('chat.sidebar.tab.files.noFilesHere')}</div>\n        </div>\n    </div>);\n};\n\n/**\n * 渲染文件列表\n * @param {FileData[]} files 文件列表\n * @private\n */\nconst renderFileList = files => {\n    return <FileList listItemProps={{smallIcon: true, showSender: true}} className=\"white rounded\" files={files} />;\n};\n\n/**\n * ChatSidebarFiles 组件 ，显示聊天侧边栏上的文件列表\n * @class ChatSidebarFiles\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatSidebarFiles from './chat-sidebar-files';\n * <ChatSidebarFiles />\n */\nexport default class ChatSidebarFiles extends Component {\n    /**\n     * 获取 ChatSidebarFiles 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatSidebarFiles>}\n     * @readonly\n     * @static\n     * @memberof ChatSidebarFiles\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatSidebarFiles} from './chat-sidebar-files';\n     * <ChatSidebarFiles />\n     */\n    static get ChatSidebarFiles() {\n        return replaceViews('chats/chat-sidebar-files', ChatSidebarFiles);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatSidebarFiles\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chat: PropTypes.object,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatSidebarFiles\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chat: null,\n        children: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatSidebarFiles 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            files: [],\n            loading: true\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatSidebarFiles\n     * @return {void}\n     */\n    componentDidMount() {\n        this.loadFiles();\n    }\n\n    /**\n     * 加载文件列表\n     * @memberof ChatSidebarFiles\n     * @return {void}\n     */\n    loadFiles() {\n        const chat = this.props.chat;\n        return App.im.chats.getChatFiles(chat).then(files => {\n            return this.setState({files, loading: false});\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatSidebarFiles\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        let {\n            chat,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const {files, loading} = this.state;\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-chat-sidebar-files has-padding', className)}\n        >\n            {\n                loading ? renderLoading() : files.length ? renderFileList(files) : renderEmptyFileList()\n            }\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-sidebar-files.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2489,
    "kind": "function",
    "name": "renderLoading",
    "memberof": "app/views/chats/chat-sidebar-files.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-sidebar-files.js~renderLoading",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-sidebar-files.js",
    "importStyle": null,
    "description": "渲染加载中动画",
    "lineNumber": 16,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2490,
    "kind": "function",
    "name": "renderEmptyFileList",
    "memberof": "app/views/chats/chat-sidebar-files.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-sidebar-files.js~renderEmptyFileList",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-sidebar-files.js",
    "importStyle": null,
    "description": "渲染文件列表为空的提示界面",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2491,
    "kind": "function",
    "name": "renderFileList",
    "memberof": "app/views/chats/chat-sidebar-files.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-sidebar-files.js~renderFileList",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-sidebar-files.js",
    "importStyle": null,
    "description": "渲染文件列表",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "FileData[]"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "文件列表"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2492,
    "kind": "class",
    "name": "ChatSidebarFiles",
    "memberof": "app/views/chats/chat-sidebar-files.js",
    "static": true,
    "longname": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-sidebar-files.js",
    "importStyle": "ChatSidebarFiles",
    "description": "ChatSidebarFiles 组件 ，显示聊天侧边栏上的文件列表",
    "examples": [
      "import ChatSidebarFiles from './chat-sidebar-files';\n<ChatSidebarFiles />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatSidebarFiles"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2493,
    "kind": "get",
    "name": "ChatSidebarFiles",
    "memberof": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles.ChatSidebarFiles",
    "access": "public",
    "description": "获取 ChatSidebarFiles 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatSidebarFiles} from './chat-sidebar-files';\n<ChatSidebarFiles />"
    ],
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatSidebarFiles>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2494,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles",
    "static": true,
    "longname": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2495,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles",
    "static": true,
    "longname": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2496,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatSidebarFiles 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2497,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles",
    "static": false,
    "longname": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2498,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 125,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2499,
    "kind": "method",
    "name": "loadFiles",
    "memberof": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles#loadFiles",
    "access": "public",
    "description": "加载文件列表",
    "lineNumber": 134,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2500,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-files.js~ChatSidebarFiles#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 149,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2501,
    "kind": "file",
    "name": "app/views/chats/chat-sidebar-peoples.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport Member from '../../core/models/member';\nimport {MemberList} from '../common/member-list';\nimport replaceViews from '../replace-views';\nimport ChatInviteDialog from './chat-invite-dialog';\nimport {showContextMenu} from '../../core/context-menu';\n\n/**\n * 处理聊天成员点击事件\n * @param {Member} member 聊天成员\n * @return {void}\n * @private\n */\nconst handleMemberItemClick = member => {\n    App.im.ui.sendContentToChat(`@${member.displayName} `);\n};\n\n/**\n * ChatSidebarPeoples 组件 ，显示聊天侧边栏成员列表界面\n * @class ChatSidebarPeoples\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatSidebarPeoples from './chat-sidebar-peoples';\n * <ChatSidebarPeoples />\n */\nexport default class ChatSidebarPeoples extends Component {\n    /**\n     * 获取 ChatSidebarPeoples 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatSidebarPeoples>}\n     * @readonly\n     * @static\n     * @memberof ChatSidebarPeoples\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatSidebarPeoples} from './chat-sidebar-peoples';\n     * <ChatSidebarPeoples />\n     */\n    static get ChatSidebarPeoples() {\n        return replaceViews('chats/chat-sidebar-peoples', ChatSidebarPeoples);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatSidebarPeoples\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chat: PropTypes.object,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatSidebarPeoples\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chat: null,\n        children: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatSidebarPeoples\n     * @return {void}\n     */\n    componentDidMount() {\n        this.dataChangeEventHandler = App.events.onDataChange(data => {\n            if (data && data.members) {\n                this.forceUpdate();\n            }\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ChatSidebarPeoples\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.dataChangeEventHandler);\n    }\n\n    /**\n     * 渲染成员列表项\n     *\n     * @param {Member} member 聊天成员\n     * @memberof ChatSidebarPeoples\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @private\n     */\n    handleItemRender = member => {\n        const {chat} = this.props;\n        let committerIcon = null;\n        let adminIcon = null;\n        if (!chat.isCommitter(member)) {\n            committerIcon = <div data-hint={Lang.string('chat.committers.blocked')} className=\"hint--left side-icon text-gray inline-block\"><Icon name=\"lock-outline\" /></div>;\n        }\n        if (chat.isAdmin(member)) {\n            adminIcon = <div data-hint={Lang.string('chat.role.admin')} className=\"hint--left side-icon text-gray inline-block\"><Icon name=\"account-circle\" /></div>;\n        }\n        if (committerIcon && adminIcon) {\n            return <div>{committerIcon}{adminIcon}</div>;\n        }\n        return committerIcon || adminIcon;\n    };\n\n    /**\n     * 处理聊天成员点击事件\n     * @param {Member} member 聊天成员\n     * @param {Event} event 事件对象\n     * @memberof ChatSidebarPeoples\n     * @private\n     * @return {void}\n     */\n    handleItemContextMenu = (member, event) => {\n        showContextMenu('chat.member', {\n            member,\n            event,\n            chat: this.props.chat\n        });\n    };\n\n    /**\n     * 处理邀请按钮点击事件\n     * @param {Event} e 事件对象\n     * @memberof ChatSidebarPeoples\n     * @private\n     * @return {void}\n     */\n    handleInviteBtnClick = e => {\n        ChatInviteDialog.show(this.props.chat);\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatSidebarPeoples\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const userAccount = App.profile.userAccount;\n        const members = Member.sort(chat.getMembersSet(App.members), [(x, y) => {\n            if (x.account === userAccount) return -1;\n            if (y.account === userAccount) return 1;\n            const xIsAdmin = chat.isAdmin(x);\n            const yIsAdmin = chat.isAdmin(y);\n            if (xIsAdmin && !yIsAdmin) return -1;\n            if (yIsAdmin && !xIsAdmin) return 1;\n            return 0;\n        }, 'status', 'namePinyin', '-id']);\n\n        let onlineCount = 0;\n        members.forEach(member => {\n            if (member.isOnline) {\n                onlineCount += 1;\n            }\n        });\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-chat-sidebar-peoples has-padding', className)}\n        >\n\n            <MemberList\n                onItemClick={handleMemberItemClick}\n                onItemContextMenu={this.handleItemContextMenu}\n                contentRender={this.handleItemRender}\n                className=\"white rounded compact\"\n                members={members}\n                listItemProps={{avatarSize: 20}}\n                heading={<header className=\"heading divider\">\n                    <div className=\"title small text-gray\">{onlineCount}/{members.length}</div>\n                    <nav className=\"nav\">{chat.canInvite(App.user) && <a onClick={this.handleInviteBtnClick}><Icon name=\"account-multiple-plus\" /> &nbsp;{Lang.string('chat.invite')}</a>}</nav>\n                </header>}\n            />\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-sidebar-peoples.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2502,
    "kind": "function",
    "name": "handleMemberItemClick",
    "memberof": "app/views/chats/chat-sidebar-peoples.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-sidebar-peoples.js~handleMemberItemClick",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/chat-sidebar-peoples.js",
    "importStyle": null,
    "description": "处理聊天成员点击事件",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "聊天成员"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2503,
    "kind": "class",
    "name": "ChatSidebarPeoples",
    "memberof": "app/views/chats/chat-sidebar-peoples.js",
    "static": true,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-sidebar-peoples.js",
    "importStyle": "ChatSidebarPeoples",
    "description": "ChatSidebarPeoples 组件 ，显示聊天侧边栏成员列表界面",
    "examples": [
      "import ChatSidebarPeoples from './chat-sidebar-peoples';\n<ChatSidebarPeoples />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatSidebarPeoples"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2504,
    "kind": "get",
    "name": "ChatSidebarPeoples",
    "memberof": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples.ChatSidebarPeoples",
    "access": "public",
    "description": "获取 ChatSidebarPeoples 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatSidebarPeoples} from './chat-sidebar-peoples';\n<ChatSidebarPeoples />"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatSidebarPeoples>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2505,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "static": true,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2506,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "static": true,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2507,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 83,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2508,
    "kind": "member",
    "name": "dataChangeEventHandler",
    "memberof": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "static": false,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples#dataChangeEventHandler",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2509,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 101,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2510,
    "kind": "member",
    "name": "handleItemRender",
    "memberof": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "static": false,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples#handleItemRender",
    "access": "private",
    "description": "渲染成员列表项",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "聊天成员"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2511,
    "kind": "member",
    "name": "handleItemContextMenu",
    "memberof": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "static": false,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples#handleItemContextMenu",
    "access": "private",
    "description": "处理聊天成员点击事件",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "member",
        "description": "聊天成员"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2512,
    "kind": "member",
    "name": "handleInviteBtnClick",
    "memberof": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "static": false,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples#handleInviteBtnClick",
    "access": "private",
    "description": "处理邀请按钮点击事件",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2513,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-peoples.js~ChatSidebarPeoples#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 164,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2514,
    "kind": "file",
    "name": "app/views/chats/chat-sidebar-profile.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport App from '../../core';\nimport {MemberProfile} from '../common/member-profile';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatSidebarProfile 组件 ，显示一个聊天侧边栏个人资料界面\n * @class ChatSidebarProfile\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatSidebarProfile from './chat-sidebar-profile';\n * <ChatSidebarProfile />\n */\nexport default class ChatSidebarProfile extends Component {\n    /**\n     * 获取 ChatSidebarProfile 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatSidebarProfile>}\n     * @readonly\n     * @static\n     * @memberof ChatSidebarProfile\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatSidebarProfile} from './chat-sidebar-profile';\n     * <ChatSidebarProfile />\n     */\n    static get ChatSidebarProfile() {\n        return replaceViews('chats/chat-sidebar-profile', ChatSidebarProfile);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatSidebarProfile\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chat: PropTypes.object,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatSidebarProfile\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chat: null,\n        children: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatSidebarProfile 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        const {chat} = this.props;\n        this.member = chat.getTheOtherOne(App);\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatSidebarProfile\n     * @return {void}\n     */\n    componentDidMount() {\n        this.dataChangeEventHandler = App.events.onDataChange(data => {\n            if (this.member && data && data.members && data.members[this.member.id]) {\n                this.forceUpdate();\n            }\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof ChatSidebarProfile\n     */\n    shouldComponentUpdate(nextProps) {\n        return nextProps.className !== this.props.className || nextProps.chat !== this.props.chat || nextProps.children !== this.props.children || nextProps.chat.getTheOtherOne(App).updateId !== this.lastMemberUpdateId;\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ChatSidebarProfile\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.dataChangeEventHandler);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatSidebarProfile\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const member = chat.getTheOtherOne(App);\n        this.lastMemberUpdateId = member.updateId;\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-chat-sidebar-profile has-padding', className)}\n        >\n            <MemberProfile compact hideChatBtn className=\"rounded white\" memberId={member.id} />\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-sidebar-profile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2515,
    "kind": "class",
    "name": "ChatSidebarProfile",
    "memberof": "app/views/chats/chat-sidebar-profile.js",
    "static": true,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-sidebar-profile.js",
    "importStyle": "ChatSidebarProfile",
    "description": "ChatSidebarProfile 组件 ，显示一个聊天侧边栏个人资料界面",
    "examples": [
      "import ChatSidebarProfile from './chat-sidebar-profile';\n<ChatSidebarProfile />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatSidebarProfile"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2516,
    "kind": "get",
    "name": "ChatSidebarProfile",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile.ChatSidebarProfile",
    "access": "public",
    "description": "获取 ChatSidebarProfile 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatSidebarProfile} from './chat-sidebar-profile';\n<ChatSidebarProfile />"
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatSidebarProfile>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2517,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "static": true,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2518,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "static": true,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2519,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatSidebarProfile 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2520,
    "kind": "member",
    "name": "member",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "static": false,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile#member",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2521,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2522,
    "kind": "member",
    "name": "dataChangeEventHandler",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "static": false,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile#dataChangeEventHandler",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2523,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2524,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 111,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2525,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 123,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2526,
    "kind": "member",
    "name": "lastMemberUpdateId",
    "memberof": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile",
    "static": false,
    "longname": "app/views/chats/chat-sidebar-profile.js~ChatSidebarProfile#lastMemberUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2527,
    "kind": "file",
    "name": "app/views/chats/chat-sidebar.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport {Tabs, TabPane} from '../../components/tabs';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport {ChatSidebarPeoples} from './chat-sidebar-peoples';\nimport {ChatSidebarFiles} from './chat-sidebar-files';\nimport {ChatSidebarProfile} from './chat-sidebar-profile';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatSidebar 组件 ，显示一个聊天侧边栏界面\n * @class ChatSidebar\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatSidebar from './chat-sidebar';\n * <ChatSidebar />\n */\nexport default class ChatSidebar extends Component {\n    /**\n     * 获取 ChatSidebar 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatSidebar>}\n     * @readonly\n     * @static\n     * @memberof ChatSidebar\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatSidebar} from './chat-sidebar';\n     * <ChatSidebar />\n     */\n    static get ChatSidebar() {\n        return replaceViews('chats/chat-sidebar', ChatSidebar);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatSidebar\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chat: PropTypes.object,\n        children: PropTypes.any,\n        closeButton: PropTypes.bool,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatSidebar\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chat: null,\n        children: null,\n        closeButton: true,\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof ChatSidebar\n     */\n    shouldComponentUpdate(nextProps) {\n        return this.props.className !== nextProps.className || this.props.children !== nextProps.children || this.props.closeButton !== nextProps.closeButton || this.props.chat !== nextProps.chat || this.lastChatId !== nextProps.updateId || (nextProps.chat.isOne2One && nextProps.chat.getTheOtherOne(App).updateId !== this.lastOtherOneUpdateId);\n    }\n\n    /**\n     * 处理侧边栏关闭按钮点击事件\n     * @memberof ChatSidebar\n     * @private\n     * @return {void}\n     */\n    handleCloseBtnClick = () => {\n        App.profile.userConfig.setChatSidebarHidden(this.props.chat.gid, true);\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatSidebar\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            closeButton,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        this.lastChatId = chat.updateId;\n        if (chat.isOne2One) {\n            this.lastOtherOneUpdateId = chat.getTheOtherOne(App).updateId;\n        }\n\n        return (\n            <div\n                {...other}\n                className={classes('app-chat-sidebar dock', className)}\n            >\n                {closeButton !== false && <div className=\"dock-right dock-top has-padding app-chat-sidebar-close hint--bottom-left dock\" data-hint={Lang.string('chat.sidebar.close')}>\n                    <button className=\"iconbutton btn rounded\" type=\"button\" onClick={this.handleCloseBtnClick}><Icon name=\"close\" /></button>\n                </div>}\n                <Tabs className=\"dock column single\" defaultActivePaneKey={chat.isOne2One ? 'profile' : 'peoples'} navClassName=\"shadow-divider flex-none\" contentClassName=\"flex-auto scroll-y\">\n                    {chat.isOne2One ? <TabPane key=\"profile\" label={Lang.string('chat.sidebar.tab.profile.label')}>\n                        <ChatSidebarProfile chat={chat} />\n                    </TabPane> : <TabPane key=\"peoples\" label={`${Lang.string('chat.sidebar.tab.peoples.label')}`}>\n                        <ChatSidebarPeoples chat={chat} />\n                    </TabPane>}\n                    <TabPane key=\"files\" label={`${Lang.string('chat.sidebar.tab.files.label')}`}>\n                        <ChatSidebarFiles chat={chat} />\n                    </TabPane>\n                </Tabs>\n                {children}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-sidebar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2528,
    "kind": "class",
    "name": "ChatSidebar",
    "memberof": "app/views/chats/chat-sidebar.js",
    "static": true,
    "longname": "app/views/chats/chat-sidebar.js~ChatSidebar",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-sidebar.js",
    "importStyle": "ChatSidebar",
    "description": "ChatSidebar 组件 ，显示一个聊天侧边栏界面",
    "examples": [
      "import ChatSidebar from './chat-sidebar';\n<ChatSidebar />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatSidebar"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2529,
    "kind": "get",
    "name": "ChatSidebar",
    "memberof": "app/views/chats/chat-sidebar.js~ChatSidebar",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-sidebar.js~ChatSidebar.ChatSidebar",
    "access": "public",
    "description": "获取 ChatSidebar 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatSidebar} from './chat-sidebar';\n<ChatSidebar />"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatSidebar>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2530,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-sidebar.js~ChatSidebar",
    "static": true,
    "longname": "app/views/chats/chat-sidebar.js~ChatSidebar.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2531,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-sidebar.js~ChatSidebar",
    "static": true,
    "longname": "app/views/chats/chat-sidebar.js~ChatSidebar.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2532,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/chat-sidebar.js~ChatSidebar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar.js~ChatSidebar#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2533,
    "kind": "member",
    "name": "handleCloseBtnClick",
    "memberof": "app/views/chats/chat-sidebar.js~ChatSidebar",
    "static": false,
    "longname": "app/views/chats/chat-sidebar.js~ChatSidebar#handleCloseBtnClick",
    "access": "private",
    "description": "处理侧边栏关闭按钮点击事件",
    "lineNumber": 84,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2534,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-sidebar.js~ChatSidebar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-sidebar.js~ChatSidebar#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 96,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2535,
    "kind": "member",
    "name": "lastChatId",
    "memberof": "app/views/chats/chat-sidebar.js~ChatSidebar",
    "static": false,
    "longname": "app/views/chats/chat-sidebar.js~ChatSidebar#lastChatId",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2536,
    "kind": "member",
    "name": "lastOtherOneUpdateId",
    "memberof": "app/views/chats/chat-sidebar.js~ChatSidebar",
    "static": false,
    "longname": "app/views/chats/chat-sidebar.js~ChatSidebar#lastOtherOneUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2537,
    "kind": "file",
    "name": "app/views/chats/chat-tip-popover.js",
    "content": "import React from 'react';\nimport Config from '../../config';\nimport Popover from '../../components/popover';\nimport Icon from '../../components/icon';\nimport profile from '../../core/profile';\n\n/**\n * 显示聊天功能提示面板\n * @param {{x: number, y: number}} position 提示面板显示位置\n * @param {function} callback 回调函数\n * @return {void}\n */\nexport const showChatTipPopoer = (position, callback) => {\n    const popoverId = 'app-chat-tip-popover';\n    const onRequestClose = () => {\n        Popover.hide(popoverId);\n    };\n    const content = (<div>\n        <div className=\"heading\">\n            <div className=\"title strong\">消息框小技巧</div>\n            <nav className=\"nav\">\n                <a\n                    className=\"text-gray small\"\n                    onClick={() => {\n                        profile.userConfig.showMessageTip = false;\n                        onRequestClose();\n                    }}\n                ><Icon name=\"close\" /> 关闭并不再提示</a>\n            </nav>\n        </div>\n        <div className=\"box\">\n            <ul style={{paddingLeft: 20, marginBottom: 0}}>\n                <li>拖拽图片和文件到消息框来发送；</li>\n                <li>使用 Markdown 语法来发送富文本；</li>\n                <li>你可以直接粘贴剪切板中的图片进行发送；</li>\n                {Config.system.screenCaptureDisabled ? null : <li>从截图按钮右键菜单上使用截图高级功能。</li>}\n            </ul>\n        </div>\n    </div>);\n    return Popover.show(position, content, {id: popoverId, width: 320, height: 140}, callback);\n};\n\nexport default {\n    show: showChatTipPopoer,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-tip-popover.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2538,
    "kind": "function",
    "name": "showChatTipPopoer",
    "memberof": "app/views/chats/chat-tip-popover.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-tip-popover.js~showChatTipPopoer",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-tip-popover.js",
    "importStyle": "{showChatTipPopoer}",
    "description": "显示聊天功能提示面板",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "{x: number, y: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "提示面板显示位置"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2539,
    "kind": "file",
    "name": "app/views/chats/chat-title.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport {ChatAvatar} from './chat-avatar';\nimport {StatusDot} from '../common/status-dot';\nimport MemberProfileDialog from '../common/member-profile-dialog';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatTitle 组件 ，显示聊天界面标题\n * @class ChatTitle\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatTitle from './chat-title';\n * <ChatTitle />\n */\nexport default class ChatTitle extends Component {\n    /**\n     * 获取 ChatTitle 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatTitle>}\n     * @readonly\n     * @static\n     * @memberof ChatTitle\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatTitle} from './chat-title';\n     * <ChatTitle />\n     */\n    static get ChatTitle() {\n        return replaceViews('chats/chat-title', ChatTitle);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatTitle\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chat: PropTypes.object,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatTitle\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chat: null,\n        children: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof ChatTitle\n     */\n    shouldComponentUpdate(nextProps) {\n        return (this.props.className !== nextProps.className ||\n            this.props.children !== nextProps.children ||\n            this.props.chat !== nextProps.chat || this.lastChatUpdateId !== nextProps.chat.updateId ||\n            (nextProps.chat.isOne2One && nextProps.chat.getTheOtherOne(App).updateId !== this.lastOtherOneUpdateId)\n        );\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatTitle\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const chatName = chat.getDisplayName(App, true);\n        const theOtherOne = chat.isOne2One ? chat.getTheOtherOne(App) : null;\n        const onTitleClick = theOtherOne ? MemberProfileDialog.show.bind(null, theOtherOne, null) : null;\n        this.lastOtherOneUpdateId = theOtherOne && theOtherOne.updateId;\n        this.lastChatUpdateId = chat.updateId;\n\n        return (<div className={classes('chat-title heading', className)} {...other}>\n            <ChatAvatar chat={chat} size={24} className={theOtherOne ? 'state' : ''} onClick={onTitleClick} />\n            {theOtherOne && <StatusDot status={theOtherOne.status} />}\n            {\n                theOtherOne ? <a className=\"strong rounded title flex-none text-primary\" onClick={onTitleClick}>{chatName}</a> : <strong className=\"title flex-none\">{chatName}</strong>\n            }\n            {chat.public && <div className=\"hint--bottom\" data-hint={Lang.string('chat.public.label')}><Icon className=\"text-green\" name=\"access-point\" /></div>}\n            {chat.mute && <div className=\"hint--bottom\" data-hint={Lang.string('chat.mute.label')}><Icon className=\"text-brown\" name=\"bell-off\" /></div>}\n            {chat.isDismissed && <div className=\"small label rounded dark\">{Lang.string('chat.group.dismissed')}</div>}\n            {chat.isDeleteOne2One && <div className=\"small label rounded dark\">{Lang.string('chat.deleted')}</div>}\n            <div className=\"flex-auto\" />\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-title.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2540,
    "kind": "class",
    "name": "ChatTitle",
    "memberof": "app/views/chats/chat-title.js",
    "static": true,
    "longname": "app/views/chats/chat-title.js~ChatTitle",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-title.js",
    "importStyle": "ChatTitle",
    "description": "ChatTitle 组件 ，显示聊天界面标题",
    "examples": [
      "import ChatTitle from './chat-title';\n<ChatTitle />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatTitle"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2541,
    "kind": "get",
    "name": "ChatTitle",
    "memberof": "app/views/chats/chat-title.js~ChatTitle",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-title.js~ChatTitle.ChatTitle",
    "access": "public",
    "description": "获取 ChatTitle 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatTitle} from './chat-title';\n<ChatTitle />"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatTitle>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2542,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-title.js~ChatTitle",
    "static": true,
    "longname": "app/views/chats/chat-title.js~ChatTitle.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2543,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-title.js~ChatTitle",
    "static": true,
    "longname": "app/views/chats/chat-title.js~ChatTitle.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2544,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/chat-title.js~ChatTitle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-title.js~ChatTitle#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2545,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-title.js~ChatTitle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-title.js~ChatTitle#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 87,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2546,
    "kind": "member",
    "name": "lastOtherOneUpdateId",
    "memberof": "app/views/chats/chat-title.js~ChatTitle",
    "static": false,
    "longname": "app/views/chats/chat-title.js~ChatTitle#lastOtherOneUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2547,
    "kind": "member",
    "name": "lastChatUpdateId",
    "memberof": "app/views/chats/chat-title.js~ChatTitle",
    "static": false,
    "longname": "app/views/chats/chat-title.js~ChatTitle#lastChatUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2548,
    "kind": "file",
    "name": "app/views/chats/chat-view.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport SplitPane from 'react-split-pane';\nimport {classes} from '../../utils/html-helper';\nimport DateHelper from '../../utils/date-helper';\nimport Avatar from '../../components/avatar';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport {ChatHeader} from './chat-header';\nimport {ChatMessages} from './chat-messages';\nimport {ChatSendbox} from './chat-sendbox';\nimport {ChatSidebar} from './chat-sidebar';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatView 组件 ，显示聊天界面\n * @class ChatView\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatView from './chat-view';\n * <ChatView />\n */\nexport default class ChatView extends Component {\n    /**\n     * 获取 ChatView 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatView>}\n     * @readonly\n     * @static\n     * @memberof ChatView\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatView} from './chat-view';\n     * <ChatView />\n     */\n    static get ChatView() {\n        return replaceViews('chats/chat-view', ChatView);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatView\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chatGid: PropTypes.string,\n        children: PropTypes.any,\n        hidden: PropTypes.bool,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatView\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chatGid: null,\n        children: null,\n        hidden: false,\n    };\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatView\n     * @return {void}\n     */\n    componentDidMount() {\n        const {chatGid} = this.props;\n        this.dataChangeHandler = App.events.onDataChange(data => {\n            if (\n                (data.chats && data.chats[chatGid]) ||\n                (data.members)\n            ) {\n                this.forceUpdate();\n            }\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ChatView\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.dataChangeHandler);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatView\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chatGid,\n            hidden,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const chat = App.im.chats.get(chatGid);\n\n        if (!chat || chat.delete) {\n            return <div key={chatGid} className={classes('box muted', {hidden})}>{Lang.string('chats.chat.selectOneOnMenu')}</div>;\n        }\n\n        const hideSidebar = App.profile.userConfig.isChatSidebarHidden(chat.gid, App.ui.isSmallScreen() || chat.isOne2One);\n        const isReadOnly = chat.isReadonly(App.profile.user);\n        const isRobot = chat.isRobot;\n\n        let chatView = null;\n        if (isReadOnly) {\n            let blockTip = null;\n            if (chat.isDeleteOne2One) {\n                blockTip = Lang.string('chat.deletedOne2OneTip');\n            } else if (chat.isDismissed) {\n                blockTip = Lang.format('chat.group.dismissTip', DateHelper.formatDate(chat.visibleDate));\n            } else {\n                blockTip = Lang.string('chat.committers.blockedTip');\n            }\n            chatView = (<div className=\"column single dock\">\n                <ChatHeader chat={chat} className=\"flex-none\" />\n                <ChatMessages chat={chat} className=\"flex-auto relative\" />\n                {isRobot ? null : <div className=\"flex-none gray text-gray heading\"><Avatar icon=\"lock-outline\" /><div className=\"title\">{blockTip}</div></div>}\n            </div>);\n        } else {\n            chatView = (<SplitPane split=\"horizontal\" primary=\"second\" maxSize={500} minSize={80} defaultSize={100} paneStyle={{userSelect: 'none'}}>\n                <div className=\"column single dock\">\n                    <ChatHeader chat={chat} className=\"flex-none\" />\n                    <ChatMessages chat={chat} className=\"flex-auto relative\" />\n                </div>\n                <ChatSendbox className=\"dock\" chat={chat} />\n            </SplitPane>);\n        }\n\n        return (<div\n            {...other}\n            className={classes('app-chat dock', className, {hidden, 'chat-readonly': isReadOnly})}\n        >\n            {isRobot ? chatView : <SplitPane className={hideSidebar ? 'soloPane1' : ''} split=\"vertical\" primary=\"second\" maxSize={360} minSize={150} defaultSize={200} paneStyle={{userSelect: 'none'}}>\n                {chatView}\n                <ChatSidebar chat={chat} />\n            </SplitPane>}\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chat-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2549,
    "kind": "class",
    "name": "ChatView",
    "memberof": "app/views/chats/chat-view.js",
    "static": true,
    "longname": "app/views/chats/chat-view.js~ChatView",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chat-view.js",
    "importStyle": "ChatView",
    "description": "ChatView 组件 ，显示聊天界面",
    "examples": [
      "import ChatView from './chat-view';\n<ChatView />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatView"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2550,
    "kind": "get",
    "name": "ChatView",
    "memberof": "app/views/chats/chat-view.js~ChatView",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chat-view.js~ChatView.ChatView",
    "access": "public",
    "description": "获取 ChatView 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatView} from './chat-view';\n<ChatView />"
    ],
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatView>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2551,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chat-view.js~ChatView",
    "static": true,
    "longname": "app/views/chats/chat-view.js~ChatView.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2552,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chat-view.js~ChatView",
    "static": true,
    "longname": "app/views/chats/chat-view.js~ChatView.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2553,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chat-view.js~ChatView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-view.js~ChatView#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 77,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2554,
    "kind": "member",
    "name": "dataChangeHandler",
    "memberof": "app/views/chats/chat-view.js~ChatView",
    "static": false,
    "longname": "app/views/chats/chat-view.js~ChatView#dataChangeHandler",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2555,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/chat-view.js~ChatView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-view.js~ChatView#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 99,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2556,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chat-view.js~ChatView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chat-view.js~ChatView#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 111,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2557,
    "kind": "file",
    "name": "app/views/chats/chats-cache.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport {ChatView} from './chat-view';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatsCache 组件 ，显示聊天缓存管理容器\n * @class ChatsCache\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatsCache from './chats-cache';\n * <ChatsCache />\n */\nexport default class ChatsCache extends Component {\n    /**\n     * 获取 ChatsCache 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatsCache>}\n     * @readonly\n     * @static\n     * @memberof ChatsCache\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatsCache} from './chats-cache';\n     * <ChatsCache />\n     */\n    static get ChatsCache() {\n        return replaceViews('chats/chat-caches', ChatsCache);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatsCache\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chatId: PropTypes.any,\n        children: PropTypes.any,\n        filterType: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatsCache\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chatId: null,\n        children: null,\n        filterType: false,\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatsCache\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chatId,\n            filterType,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        App.im.ui.activeChat(chatId);\n\n        return (\n            <div\n                {...other}\n                className={classes('app-chats-cache', className)}\n            >\n                {\n                    App.im.ui.getActivedCacheChatsGID().map(cgid => {\n                        if (cgid) {\n                            return <ChatView key={cgid} chatGid={cgid} hidden={!App.im.ui.isActiveChat(cgid)} />;\n                        }\n                        if (DEBUG) {\n                            console.warn('Cannot render undefined chat cache.');\n                        }\n                        return null;\n                    })\n                }\n                {children}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chats-cache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2558,
    "kind": "class",
    "name": "ChatsCache",
    "memberof": "app/views/chats/chats-cache.js",
    "static": true,
    "longname": "app/views/chats/chats-cache.js~ChatsCache",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chats-cache.js",
    "importStyle": "ChatsCache",
    "description": "ChatsCache 组件 ，显示聊天缓存管理容器",
    "examples": [
      "import ChatsCache from './chats-cache';\n<ChatsCache />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatsCache"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2559,
    "kind": "get",
    "name": "ChatsCache",
    "memberof": "app/views/chats/chats-cache.js~ChatsCache",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chats-cache.js~ChatsCache.ChatsCache",
    "access": "public",
    "description": "获取 ChatsCache 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatsCache} from './chats-cache';\n<ChatsCache />"
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatsCache>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2560,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chats-cache.js~ChatsCache",
    "static": true,
    "longname": "app/views/chats/chats-cache.js~ChatsCache.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2561,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chats-cache.js~ChatsCache",
    "static": true,
    "longname": "app/views/chats/chats-cache.js~ChatsCache.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2562,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chats-cache.js~ChatsCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-cache.js~ChatsCache#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 68,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2563,
    "kind": "file",
    "name": "app/views/chats/chats-dnd-container.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport StringHelper from '../../utils/string-helper';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport API from '../../core/network/api';\nimport Emojione from '../../components/emojione';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatsDndContainer 组件 ，显示聊天拖放功能交互容器\n * @class ChatsDndContainer\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatsDndContainer from './chats-dnd-container';\n * <ChatsDndContainer />\n */\nexport default class ChatsDndContainer extends PureComponent {\n    /**\n     * 获取 ChatsDndContainer 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatsDndContainer>}\n     * @readonly\n     * @static\n     * @memberof ChatsDndContainer\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatsDndContainer} from './chats-dnd-container';\n     * <ChatsDndContainer />\n     */\n    static get ChatsDndContainer() {\n        return replaceViews('chats/chats-dnd-container', ChatsDndContainer);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatsDndContainer\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatsDndContainer\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * 处理拖放进入事件\n     * @param {Event} e 事件对象\n     * @memberof ChatsDndContainer\n     * @private\n     * @return {void}\n     */\n    handleDndEnter = e => {\n        e.target.classList.add('hover');\n    }\n\n    /**\n     * 处理拖放离开事件\n     * @param {Event} e 事件对象\n     * @memberof ChatsDndContainer\n     * @private\n     * @return {void}\n     */\n    handleDndLeave = e => {\n        e.target.classList.remove('hover');\n    }\n\n    /**\n     * 处理拖放完成事件\n     * @param {Event} e 事件对象\n     * @memberof ChatsDndContainer\n     * @private\n     * @return {void}\n     */\n    handleDndDrop = e => {\n        e.target.classList.remove('hover');\n        if (e.dataTransfer.files && e.dataTransfer.files.length) {\n            let hasError = false;\n            for (let i = 0; i < e.dataTransfer.files.length; ++i) {\n                const file = e.dataTransfer.files[i];\n                if (API.checkUploadFileSize(App.user, file.size)) {\n                    if (file.type.startsWith('image/')) {\n                        App.im.ui.sendContentToChat(file, 'image');\n                    } else {\n                        App.im.ui.sendContentToChat(file, 'file');\n                    }\n                } else {\n                    hasError = true;\n                }\n            }\n            if (hasError) {\n                App.ui.showMessger(Lang.error({code: 'UPLOAD_FILE_IS_TOO_LARGE', formats: StringHelper.formatBytes(App.user.uploadFileSize)}), {type: 'warning'});\n            }\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatsDndContainer\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            ...other\n        } = this.props;\n\n        return (<div\n            className={classes('app-chats-dnd-container drag-n-drop-message center-content', className)}\n            {...other}\n            onDragEnter={this.handleDndEnter}\n            onDrop={this.handleDndDrop}\n            onDragLeave={this.handleDndLeave}\n        >\n            <div className=\"text-center\">\n                <div className=\"dnd-over\" dangerouslySetInnerHTML={{__html: Emojione.toImage(':hatching_chick:')}} />\n                <div className=\"dnd-hover\" dangerouslySetInnerHTML={{__html: Emojione.toImage(':hatched_chick:')}} />\n                <h1>{Lang.string('chats.drapNDropFileMessage')}</h1>\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chats-dnd-container.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2564,
    "kind": "class",
    "name": "ChatsDndContainer",
    "memberof": "app/views/chats/chats-dnd-container.js",
    "static": true,
    "longname": "app/views/chats/chats-dnd-container.js~ChatsDndContainer",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chats-dnd-container.js",
    "importStyle": "ChatsDndContainer",
    "description": "ChatsDndContainer 组件 ，显示聊天拖放功能交互容器",
    "examples": [
      "import ChatsDndContainer from './chats-dnd-container';\n<ChatsDndContainer />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatsDndContainer"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2565,
    "kind": "get",
    "name": "ChatsDndContainer",
    "memberof": "app/views/chats/chats-dnd-container.js~ChatsDndContainer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chats-dnd-container.js~ChatsDndContainer.ChatsDndContainer",
    "access": "public",
    "description": "获取 ChatsDndContainer 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatsDndContainer} from './chats-dnd-container';\n<ChatsDndContainer />"
    ],
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatsDndContainer>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2566,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chats-dnd-container.js~ChatsDndContainer",
    "static": true,
    "longname": "app/views/chats/chats-dnd-container.js~ChatsDndContainer.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2567,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chats-dnd-container.js~ChatsDndContainer",
    "static": true,
    "longname": "app/views/chats/chats-dnd-container.js~ChatsDndContainer.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2568,
    "kind": "member",
    "name": "handleDndEnter",
    "memberof": "app/views/chats/chats-dnd-container.js~ChatsDndContainer",
    "static": false,
    "longname": "app/views/chats/chats-dnd-container.js~ChatsDndContainer#handleDndEnter",
    "access": "private",
    "description": "处理拖放进入事件",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2569,
    "kind": "member",
    "name": "handleDndLeave",
    "memberof": "app/views/chats/chats-dnd-container.js~ChatsDndContainer",
    "static": false,
    "longname": "app/views/chats/chats-dnd-container.js~ChatsDndContainer#handleDndLeave",
    "access": "private",
    "description": "处理拖放离开事件",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2570,
    "kind": "member",
    "name": "handleDndDrop",
    "memberof": "app/views/chats/chats-dnd-container.js~ChatsDndContainer",
    "static": false,
    "longname": "app/views/chats/chats-dnd-container.js~ChatsDndContainer#handleDndDrop",
    "access": "private",
    "description": "处理拖放完成事件",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2571,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chats-dnd-container.js~ChatsDndContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-dnd-container.js~ChatsDndContainer#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 116,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2572,
    "kind": "file",
    "name": "app/views/chats/chats-history-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport {ChatsHistory} from './chats-history';\n\n/**\n * 显示聊天历史记录对话框界面\n * @param {Chat} chat 聊天对象\n * @param {function} callback 回调函数\n * @return {void}\n */\nexport const showChatsHistoryDialog = (chat, callback) => {\n    const modalId = 'app-chats-history-dialog';\n    return Modal.show({\n        id: modalId,\n        style: {\n            left: 10,\n            right: 10,\n            bottom: 0,\n            top: 10\n        },\n        className: 'app-chats-history-dialog dock primary-pale',\n        animation: 'enter-from-bottom',\n        actions: false,\n        content: <ChatsHistory chat={chat} />\n    }, callback);\n};\n\nexport default {\n    show: showChatsHistoryDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chats-history-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2573,
    "kind": "function",
    "name": "showChatsHistoryDialog",
    "memberof": "app/views/chats/chats-history-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chats-history-dialog.js~showChatsHistoryDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chats-history-dialog.js",
    "importStyle": "{showChatsHistoryDialog}",
    "description": "显示聊天历史记录对话框界面",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2574,
    "kind": "file",
    "name": "app/views/chats/chats-history.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport Avatar from '../../components/avatar';\nimport SearchControl from '../../components/search-control';\nimport SelectBox from '../../components/select-box';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport {ChatListItem} from './chat-list-item';\nimport {ChatHistory} from './chat-history';\nimport {ChatSearchResult} from './chat-search-result';\nimport replaceViews from '../replace-views';\nimport {getTimeBeforeDesc} from '../../utils/date-helper';\nimport ListItem from '../../components/list-item';\nimport Config from '../../config';\n\n/**\n * ChatsHistory 组件 ，显示聊天历史记录界面\n * @class ChatsHistory\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatsHistory from './chats-history';\n * <ChatsHistory />\n */\nexport default class ChatsHistory extends Component {\n    /**\n     * 获取 ChatsHistory 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatsHistory>}\n     * @readonly\n     * @static\n     * @memberof ChatsHistory\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatsHistory} from './chats-history';\n     * <ChatsHistory />\n     */\n    static get ChatsHistory() {\n        return replaceViews('chats/chats-hitory', ChatsHistory);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatsHistory\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        chat: PropTypes.object,\n        children: PropTypes.any,\n        startPageSize: PropTypes.number,\n        morePageSize: PropTypes.number,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatsHistory\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        chat: null,\n        children: null,\n        startPageSize: Config.ui['page.start.size'] || 20,\n        morePageSize: Config.ui['page.more.size'] || 20,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatsHistory 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        const {chat} = props;\n\n        /**\n         * 搜索聊天类型\n         * @type {{name: string, chats: Chat[]}[]}\n         * @private\n         */\n        this.chats = [\n            {name: 'contacts', chats: App.im.chats.getContactsChats()},\n            {name: 'groups', chats: App.im.chats.getGroups()}\n        ];\n\n        /**\n         * 搜索过滤聊天时间范围\n         * @type {string}\n         * @private\n         */\n        this.searchFilterTime = 'oneMonth';\n\n        /**\n         * 搜索过滤聊天类型\n         * @type {string}\n         * @private\n         */\n        this.searchFilterType = 'choosed';\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            isFetching: false,\n            choosed: chat,\n            search: '',\n            searchFilterType: this.searchFilterType,\n            searchFilterTime: this.searchFilterTime,\n            searching: false,\n            searchingChat: null,\n            searchTip: '',\n            searchResult: null,\n            searchResultTotal: 0,\n            searchProgress: 0,\n            expanded: chat ? {contacts: chat.isOne2One, groups: chat.isGroupOrSystem} : {contacts: true, groups: false},\n            chats: this.chats,\n            messageGoto: null,\n            groupPage: {contacts: 1, groups: 1}\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatsHistory\n     * @return {void}\n     */\n    componentDidMount() {\n        const updateFetchingMessage = (pager) => {\n            const message = `${Lang.string('chats.history.fetchingMessages')} ${Math.floor(pager.percent || 0)}%`;\n            this.setState({isFetching: true, message});\n        };\n        this.handleHistoryStart = App.im.server.onChatHistoryStart(updateFetchingMessage);\n        this.handleHistoryEnd = App.im.server.onChatHistoryEnd(() => {\n            this.setState({isFetching: false, message: ''});\n        });\n        this.handleHistory = App.im.server.onChatHistory(updateFetchingMessage);\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ChatsHistory\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.handleHistoryStart, this.handleHistoryEnd, this.handleHistory);\n    }\n\n    /**\n     * 处理分组标题点击事件\n     * @param {string} name 分组标题\n     * @memberof ChatsHistory\n     * @private\n     * @return {void}\n     */\n    handleGroupHeaderClick(name) {\n        const {expanded} = this.state;\n        expanded[name] = !expanded[name];\n        this.setState({expanded});\n    }\n\n    /**\n     * 处理聊天条目点击事件\n     * @param {Chat} chat 聊天对象\n     * @memberof ChatsHistory\n     * @private\n     * @return {void}\n     */\n    handleChatItemClick(chat) {\n        this.setState({choosed: chat}, () => {\n            if (this.state.search) {\n                this.startSearch();\n            }\n        });\n    }\n\n    /**\n     * 处理点击获取所有历史记录按钮事件\n     * @param {Event} e 事件对象\n     * @memberof ChatsHistory\n     * @private\n     * @return {void}\n     */\n    handleFetchAllBtnClick = e => {\n        App.ui.showContextMenu({x: e.clientX, y: e.clientY, target: e.target}, [\n            {label: Lang.string('chats.history.selectFetchTime'), disabled: true},\n            {label: `${Lang.string('time.oneWeek')} (${Lang.string('chats.history.sync.fast')})`, data: 'oneWeek'},\n            {label: Lang.string('time.oneMonth'), data: 'oneMonth'},\n            {label: Lang.string('time.halfYear'), data: 'halfYear'},\n            {label: Lang.string('time.oneYear'), data: 'oneYear'},\n            {label: Lang.string('time.twoYear'), data: 'twoYear'},\n            {label: `${Lang.string('time.all')} (${Lang.string('chats.history.sync.slow')})`, data: 'all'},\n        ], {\n            onItemClick: (item) => {\n                if (item.data) {\n                    const startDate = item.data === 'all' ? 0 : getTimeBeforeDesc(item.data);\n                    App.im.server.fetchChatsHistory('all', startDate);\n                }\n            }\n        });\n    }\n\n    /**\n     * 处理搜索关键字变更事件\n     * @param {string} search 搜索字符串\n     * @memberof ChatsHistory\n     * @private\n     * @return {void}\n     */\n    handleSearchChange = search => {\n        this.setState({search});\n        this.startSearch();\n    }\n\n    /**\n     * 处理聊天类型变更事件\n     * @param {string} searchFilterType 聊天类型\n     * @memberof ChatsHistory\n     * @private\n     * @return {void}\n     */\n    handleSearchFilterTypeChange = searchFilterType => {\n        this.setState({searchFilterType});\n        this.searchFilterType = searchFilterType;\n        this.startSearch();\n    }\n\n    /**\n     * 处理聊天时间范围值变更事件\n     * @param {string} searchFilterTime 聊天时间范围\n     * @memberof ChatsHistory\n     * @private\n     * @return {void}\n     */\n    handleSearchFilterTimeChange = searchFilterTime => {\n        this.setState({searchFilterTime});\n        this.searchFilterTime = searchFilterTime;\n        this.startSearch();\n    }\n\n    /**\n     * 处理跳转到指定消息事件\n     * @param {ChatMessage} messageGoto 要跳转的消息\n     * @memberof ChatsHistory\n     * @private\n     * @return {void}\n     */\n    handleRequestGoto = messageGoto => {\n        this.setState({messageGoto: messageGoto && {\n            time: new Date().getTime(),\n            gid: messageGoto.gid,\n            cgid: messageGoto.cgid,\n            id: messageGoto.id,\n        }});\n    }\n\n    /**\n     * 开始搜索\n     *\n     * @memberof ChatsHistory\n     * @return {void}\n     */\n    startSearch() {\n        if (!this.searchControl.isEmpty()) {\n            const search = this.searchControl.getValue();\n            const {searchFilterType, searchFilterTime} = this;\n            const searchId = [search, searchFilterTime, searchFilterType === 'choosed' ? this.state.choosed.gid : searchFilterType].join('|');\n            if (this.lastSearchId !== searchId) {\n                this.lastSearchId = searchId;\n                if (this.searchTask) {\n                    this.searchTask.cancel();\n                }\n                let chats = null;\n                switch (searchFilterType) {\n                case 'choosed':\n                    chats = [this.state.choosed];\n                    break;\n                case 'contacts':\n                    chats = this.chats[0].chats;\n                    break;\n                case 'groups':\n                    chats = this.chats[1].chats;\n                    break;\n                default:\n                    chats = [];\n                    chats.push(...this.chats[0].chats);\n                    chats.push(...this.chats[1].chats);\n                }\n                this.searchTask = App.im.chats.createCountMessagesTask(chats, search, searchFilterTime);\n                this.setState({\n                    groupPage: {contacts: 1, groups: 1},\n                    searchResult: {},\n                    searchResultTotal: 0,\n                    searchTip: Lang.string('chats.history.searching'),\n                    searching: true,\n                    searchProgress: 0,\n                    expanded: {\n                        contacts: !searchFilterType || searchFilterType === 'contacts' || (searchFilterType === 'choosed' && this.state.choosed.isOne2One),\n                        groups: !searchFilterType || searchFilterType === 'groups' || (searchFilterType === 'choosed' && this.state.choosed.isGroupOrSystem),\n                    },\n                });\n                this.searchTask.onTask = (result, searchProgress) => {\n                    let {searchResult, searchResultTotal} = this.state;\n                    searchResult = Object.assign(searchResult || {}, {\n                        [result.gid]: result.count\n                    });\n                    searchResultTotal += result.count;\n                    this.setState({searchResult, searchResultTotal, searchProgress});\n                };\n                this.searchTask.onTaskStart = (task, searchProgress) => {\n                    this.setState({\n                        searchingChat: task.chat,\n                        searchProgress,\n                        searchTip: Lang.format('chats.history.searching.format', task.chat.getDisplayName(App))\n                    });\n                };\n                this.searchTask.run().then(() => {\n                    this.setState({\n                        searchTip: Lang.format('chats.history.search.result.format', this.state.searchResultTotal),\n                        searching: false,\n                        searchProgress: 1,\n                        searchingChat: null\n                    });\n                }).catch(error => {\n                    if (error !== 'canceled') {\n                        this.setState({\n                            searchTip: Lang.error(error),\n                            searching: false,\n                            searchProgress: 1,\n                            searchingChat: null,\n                            gotoMessage: null\n                        });\n                    }\n                });\n            }\n        } else {\n            this.lastSearchId = '';\n            if (this.searchTask) {\n                this.searchTask.cancel();\n                this.searchTask = null;\n            }\n            this.setState({\n                search: '',\n                searchTip: '',\n                searching: false,\n                searchProgress: 0,\n                searchResult: null,\n                searchingChat: null,\n                gotoMessage: null\n            });\n        }\n    }\n\n    /**\n     * 处理显示请求下一页事件\n     *\n     * @param {string} group 分组名称\n     * @memberof ChatsHistory\n     * @return {void}\n     * @private\n     */\n    handleRequestMorePage(group) {\n        const {groupPage} = this.state;\n        groupPage[group] += 1;\n        this.setState({groupPage});\n    }\n\n    /**\n     * 渲染聊天分组\n     *\n     * @param {{name: string, chats: Chat[]}} group 分组\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @memberof ChatsHistory\n     */\n    renderChatsGroup(group) {\n        const {searchResult, searchFilterType} = this.state;\n        if (searchResult && searchFilterType && searchFilterType !== group.name && searchFilterType !== 'choosed') {\n            return null;\n        }\n        const isExpanded = this.state.expanded[group.name];\n        const chats = group.chats;\n        if (searchResult && searchFilterType !== 'choosed') {\n            chats.sort((chat1, chat2) => {\n                let result = (searchResult[chat2.gid] || 0) - (searchResult[chat1.gid] || 0);\n                if (result === 0) {\n                    result = chat2.id - chat1.id;\n                }\n                return result;\n            });\n        }\n        const itemsArray = [];\n        chats.forEach(chat => {\n            if (searchResult && searchResult[chat.gid] === 0 && searchFilterType !== 'choosed') {\n                return null;\n            }\n            itemsArray.push(chat);\n        });\n\n        const {startPageSize, morePageSize} = this.props;\n        const listViews = [];\n        const page = this.state.groupPage[group.name];\n        const maxIndex = page ? Math.min(itemsArray.length, startPageSize + (page > 1 ? (page - 1) * morePageSize : 0)) : itemsArray.length;\n        for (let i = 0; i < maxIndex; i += 1) {\n            const item = itemsArray[i];\n            listViews.push(this.renderChatItem(item));\n        }\n        const notShowCount = itemsArray.length - maxIndex;\n        if (notShowCount) {\n            listViews.push(<ListItem key=\"showMore\" icon=\"chevron-double-down\" className=\"flex-middle item muted\" title={<span className=\"title small\">{Lang.format('common.clickShowMoreFormat', notShowCount)}</span>} onClick={this.handleRequestMorePage.bind(this, group.name)} />);\n        }\n\n        return (<div key={group.name} className=\"app-chats-history-menu-group\">\n            <a className=\"heading\" onClick={this.handleGroupHeaderClick.bind(this, group.name)}>\n                <Avatar className=\"text-primary\" icon={isExpanded ? 'menu-down' : 'menu-right'} />\n                <div className=\"text-primary\">{Lang.string(`chats.history.group.${group.name}`)} ({itemsArray.length})</div>\n            </a>\n            {isExpanded && <div className=\"app-chats-history-menu-list list compact\">{listViews}</div>}\n        </div>);\n    }\n\n    /**\n     * 渲染聊天条目\n     *\n     * @param {Chat} chat 聊天对象\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @memberof ChatsHistory\n     */\n    renderChatItem(chat) {\n        const {searchResult, searchFilterType} = this.state;\n        const isChoosed = this.state.choosed && this.state.choosed.gid === chat.gid;\n        let badge = null;\n        if (searchResult) {\n            if (searchResult[chat.gid] === 0 && !isChoosed) {\n                return null;\n            }\n            if (this.state.searchingChat && this.state.searchingChat.gid === chat.gid) {\n                badge = <Icon name=\"loading\" square className=\"spin-fast muted inline-block\" />;\n            } else if (searchResult[chat.gid]) {\n                badge = <div className=\"label circle secondary label-sm\">{searchResult[chat.gid]}</div>;\n            } else if (searchFilterType === 'choosed' && isChoosed) {\n                badge = <div className=\"label circle important label-sm\">0</div>;\n            }\n        }\n        return (<ChatListItem\n            key={chat.gid}\n            badge={badge}\n            notUserLink=\"disabled\"\n            className={isChoosed ? 'item white text-primary' : 'item'}\n            onClick={this.handleChatItemClick.bind(this, chat)}\n            chat={chat}\n        />);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatsHistory\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            chat,\n            className,\n            children,\n            startPageSize,\n            morePageSize,\n            ...other\n        } = this.props;\n\n        const searchTimeOptions = [\n            {label: Lang.string('time.oneWeek'), value: 'oneWeek'},\n            {label: Lang.string('time.oneMonth'), value: 'oneMonth'},\n            {label: Lang.string('time.threeMonth'), value: 'threeMonth'},\n            {label: Lang.string('time.halfYear'), value: 'halfYear'},\n            {label: Lang.string('time.oneYear'), value: 'oneYear'},\n            {label: Lang.string('time.all'), value: ''},\n        ];\n        const searchTypeOptions = [\n            {label: Lang.string('chats.history.search.type.choosed'), value: 'choosed'},\n            {label: Lang.string('chats.history.search.type.contacts'), value: 'contacts'},\n            {label: Lang.string('chats.history.search.type.groups'), value: 'groups'},\n            {label: Lang.string('chats.history.search.type.all'), value: ''},\n        ];\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-chats-history dock column single', className)}\n        >\n            <div className=\"app-chats-history-header heading flex-none row single\">\n                <div className=\"flex-none title\">{Lang.string('chats.history.title')}</div>\n                <div className=\"flex-auto search-control row flex-middle\">\n                    <SearchControl\n                        disabled={this.state.isFetching}\n                        ref={e => {this.searchControl = e;}}\n                        changeDelay={500}\n                        onSearchChange={this.handleSearchChange}\n                        placeholder={Lang.string('chats.history.search.placeholder')}\n                    >\n                        <SelectBox value={this.state.searchFilterTime} onChange={this.handleSearchFilterTimeChange} options={searchTimeOptions} className=\"search-box-time dock dock-right small\" />\n                        <SelectBox value={this.state.searchFilterType} onChange={this.handleSearchFilterTypeChange} options={searchTypeOptions} className=\"search-box-type dock dock-right small\" />\n                    </SearchControl>\n                    {this.state.isFetching ? null : <div className=\"search-control-tip\">\n                        <small className=\"muted\">{this.state.searchTip}</small>\n                        <div className=\"progress\"><div className=\"bar\" style={{width: `${this.state.searchProgress * 100}%`}} /></div>\n                    </div>}\n                </div>\n                <nav style={{overflow: 'visible'}} className=\"flex-none nav hint--bottom\" data-hint={Lang.string('chats.history.fetchAllFromServer')}>\n                    {\n                        this.state.isFetching ? <a>\n                            <Icon name=\"sync spin\" /> &nbsp; <small>{this.state.message}</small>\n                        </a> : <a onClick={this.handleFetchAllBtnClick} className={HTML.classes('text-primary', {disabled: this.state.searching})}><Icon name=\"cloud-sync\" /> &nbsp; <small>{Lang.string('chats.history.fetchAll')}</small></a>\n                    }\n                </nav>\n            </div>\n            <div className=\"app-chats-history-content flex-auto row single\">\n                <div className=\"app-chats-history-menu primary-pale scroll-y flex-none\">\n                    {\n                        this.state.chats.map(this.renderChatsGroup.bind(this))\n                    }\n                </div>\n                {\n                    this.state.choosed ? <div className=\"row single flex-auto\">\n                        <ChatSearchResult\n                            className={HTML.classes('flex-none', {empty: !this.state.searchResult || !this.state.searchResult[this.state.choosed.gid]})}\n                            chat={this.state.choosed}\n                            searchKeys={this.state.search}\n                            searchFilterTime={this.state.searchFilterTime}\n                            searchCount={this.state.searchResult && this.state.searchResult[this.state.choosed.gid]}\n                            requestGoto={this.handleRequestGoto}\n                        />\n                        <ChatHistory searchKeys={this.state.search} gotoMessage={(this.state.searchResult && this.state.searchResult[this.state.choosed.gid] && this.state.messageGoto && this.state.messageGoto.cgid === this.state.choosed.gid) ? this.state.messageGoto : null} className=\"flex-auto white\" chat={this.state.choosed} />\n                    </div> : <div className=\"flex-auto center-content muted\"><div>{Lang.string('chats.history.selectChatTip')}</div></div>\n                }\n            </div>\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chats-history.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2575,
    "kind": "class",
    "name": "ChatsHistory",
    "memberof": "app/views/chats/chats-history.js",
    "static": true,
    "longname": "app/views/chats/chats-history.js~ChatsHistory",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chats-history.js",
    "importStyle": "ChatsHistory",
    "description": "ChatsHistory 组件 ，显示聊天历史记录界面",
    "examples": [
      "import ChatsHistory from './chats-history';\n<ChatsHistory />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatsHistory"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2576,
    "kind": "get",
    "name": "ChatsHistory",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chats-history.js~ChatsHistory.ChatsHistory",
    "access": "public",
    "description": "获取 ChatsHistory 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatsHistory} from './chats-history';\n<ChatsHistory />"
    ],
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatsHistory>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2577,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": true,
    "longname": "app/views/chats/chats-history.js~ChatsHistory.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2578,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": true,
    "longname": "app/views/chats/chats-history.js~ChatsHistory.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2579,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatsHistory 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2580,
    "kind": "member",
    "name": "chats",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#chats",
    "access": "private",
    "description": "搜索聊天类型",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "{name: string, chats: Chat[]}[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2581,
    "kind": "member",
    "name": "searchFilterTime",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#searchFilterTime",
    "access": "private",
    "description": "搜索过滤聊天时间范围",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2582,
    "kind": "member",
    "name": "searchFilterType",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#searchFilterType",
    "access": "private",
    "description": "搜索过滤聊天类型",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2583,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2584,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 141,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2585,
    "kind": "member",
    "name": "handleHistoryStart",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleHistoryStart",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2586,
    "kind": "member",
    "name": "handleHistoryEnd",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleHistoryEnd",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2587,
    "kind": "member",
    "name": "handleHistory",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleHistory",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2588,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 163,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2589,
    "kind": "method",
    "name": "handleGroupHeaderClick",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleGroupHeaderClick",
    "access": "private",
    "description": "处理分组标题点击事件",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "分组标题"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2590,
    "kind": "method",
    "name": "handleChatItemClick",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleChatItemClick",
    "access": "private",
    "description": "处理聊天条目点击事件",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2591,
    "kind": "member",
    "name": "handleFetchAllBtnClick",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleFetchAllBtnClick",
    "access": "private",
    "description": "处理点击获取所有历史记录按钮事件",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2592,
    "kind": "member",
    "name": "handleSearchChange",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleSearchChange",
    "access": "private",
    "description": "处理搜索关键字变更事件",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "搜索字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2593,
    "kind": "member",
    "name": "handleSearchFilterTypeChange",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleSearchFilterTypeChange",
    "access": "private",
    "description": "处理聊天类型变更事件",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchFilterType",
        "description": "聊天类型"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2595,
    "kind": "member",
    "name": "handleSearchFilterTimeChange",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleSearchFilterTimeChange",
    "access": "private",
    "description": "处理聊天时间范围值变更事件",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchFilterTime",
        "description": "聊天时间范围"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2597,
    "kind": "member",
    "name": "handleRequestGoto",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleRequestGoto",
    "access": "private",
    "description": "处理跳转到指定消息事件",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "messageGoto",
        "description": "要跳转的消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2598,
    "kind": "method",
    "name": "startSearch",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#startSearch",
    "access": "public",
    "description": "开始搜索",
    "lineNumber": 281,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2599,
    "kind": "member",
    "name": "lastSearchId",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#lastSearchId",
    "access": "public",
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2600,
    "kind": "member",
    "name": "searchTask",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#searchTask",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2603,
    "kind": "method",
    "name": "handleRequestMorePage",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#handleRequestMorePage",
    "access": "private",
    "description": "处理显示请求下一页事件",
    "lineNumber": 380,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2604,
    "kind": "method",
    "name": "renderChatsGroup",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#renderChatsGroup",
    "access": "public",
    "description": "渲染聊天分组",
    "lineNumber": 393,
    "params": [
      {
        "nullable": null,
        "types": [
          "{name: string, chats: Chat[]}"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    }
  },
  {
    "__docId__": 2605,
    "kind": "method",
    "name": "renderChatItem",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#renderChatItem",
    "access": "public",
    "description": "渲染聊天条目",
    "lineNumber": 446,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    }
  },
  {
    "__docId__": 2606,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 480,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2607,
    "kind": "member",
    "name": "searchControl",
    "memberof": "app/views/chats/chats-history.js~ChatsHistory",
    "static": false,
    "longname": "app/views/chats/chats-history.js~ChatsHistory#searchControl",
    "access": "public",
    "description": null,
    "lineNumber": 514,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2608,
    "kind": "file",
    "name": "app/views/chats/chats-suggest-panel.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport Config from '../../config';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport replaceViews from '../replace-views';\nimport FileData from '../../core/models/file-data';\nimport ImageHolder from '../../components/image-holder';\nimport Button from '../../components/button';\nimport Lang from '../../lang';\nimport ClickOutsideWrapper from '../../components/click-outside-wrapper';\n\n/**\n * ChatsSuggestPanel 组件 ，显示向聊天发送建议内容提示面板界面\n * @class ChatsSuggestPanel\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import ChatsSuggestPanel from './chats-suggest-panel';\n * <ChatsSuggestPanel />\n */\nexport default class ChatsSuggestPanel extends PureComponent {\n    /**\n     * 获取 ChatsSuggestPanel 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatsSuggestPanel>}\n     * @readonly\n     * @static\n     * @memberof ChatsSuggestPanel\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatsSuggestPanel} from './chats-suggest-panel';\n     * <ChatsSuggestPanel />\n     */\n    static get ChatsSuggestPanel() {\n        return replaceViews('chats/chats-suggest-panel', ChatsSuggestPanel);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatsSuggestPanel\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatsSuggestPanel\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ChatsSuggestPanel 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {image: null, show: false};\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ChatsSuggestPanel\n     * @return {void}\n     */\n    componentDidMount() {\n        this.suggestSendImageHandler = App.im.ui.onSuggestSendImage(image => {\n            this.showSuggestPanel(image);\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ChatsSuggestPanel\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.suggestSendImageHandler);\n        if (this.showSuggestPanelTimer) {\n            clearTimeout(this.showSuggestPanelTimer);\n            this.showSuggestPanelTimer = null;\n        }\n    }\n\n    /**\n     * 显示提示面板\n     *\n     * @param {FileData|Object} image 图片存储对象\n     * @memberof ChatsSuggestPanel\n     * @return {void}\n     */\n    showSuggestPanel(image) {\n        this.setState({image: FileData.create(image), show: true}, () => {\n            if (this.showSuggestPanelTimer) {\n                clearTimeout(this.showSuggestPanelTimer);\n            }\n            this.showSuggestPanelTimer = setTimeout(() => {\n                this.setState({show: false});\n                this.showSuggestPanelTimer = null;\n            }, Config.ui['chat.suggestPanelShowTime'] || 10000);\n        });\n    }\n\n    /**\n     * 处理关闭按钮点击事件\n     * @memberof ChatsSuggestPanel\n     * @private\n     * @return {void}\n     */\n    handleCloseBtnClick = () => {\n        if (this.state.show) {\n            if (this.showSuggestPanelTimer) {\n                clearTimeout(this.showSuggestPanelTimer);\n                this.showSuggestPanelTimer = null;\n            }\n            this.setState({show: false});\n        }\n    };\n\n    /**\n     * 处理发送按钮点击事件\n     * @memberof ChatsSuggestPanel\n     * @private\n     * @return {void}\n     */\n    handleSendBtnClick = () => {\n        if (this.state.image) {\n            App.im.server.sendImageMessage(this.state.image, App.im.ui.currentActiveChat);\n        }\n        this.handleCloseBtnClick();\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatsSuggestPanel\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {className} = this.props;\n        const {image, show} = this.state;\n\n        let imageView = null;\n        if (image) {\n            imageView = (<ImageHolder source={image.viewUrl}>\n                <div className=\"toolbar dock dock-bottom has-padding text-center\">\n                    <Button icon=\"message-image\" className=\"green rounded\" label={Lang.string('chat.sendClipboardImage')} onClick={this.handleSendBtnClick} />&nbsp; &nbsp;\n                    <Button icon=\"close\" className=\"blue rounded\" label={Lang.string('common.close')} onClick={this.handleCloseBtnClick} />\n                </div>\n            </ImageHolder>);\n        }\n\n        return (<ClickOutsideWrapper onClickOutside={this.handleCloseBtnClick} className={classes('dock dock-right dock-bottom layer app-chats-suggest-panel rounded has-pading scale-from-bottom shadow-3', className, {in: show})}>{imageView}</ClickOutsideWrapper>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/chats-suggest-panel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2609,
    "kind": "class",
    "name": "ChatsSuggestPanel",
    "memberof": "app/views/chats/chats-suggest-panel.js",
    "static": true,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/chats-suggest-panel.js",
    "importStyle": "ChatsSuggestPanel",
    "description": "ChatsSuggestPanel 组件 ，显示向聊天发送建议内容提示面板界面",
    "examples": [
      "import ChatsSuggestPanel from './chats-suggest-panel';\n<ChatsSuggestPanel />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatsSuggestPanel"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 2610,
    "kind": "get",
    "name": "ChatsSuggestPanel",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel.ChatsSuggestPanel",
    "access": "public",
    "description": "获取 ChatsSuggestPanel 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatsSuggestPanel} from './chats-suggest-panel';\n<ChatsSuggestPanel />"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatsSuggestPanel>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2611,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "static": true,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2612,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "static": true,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2613,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ChatsSuggestPanel 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2614,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "static": false,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2615,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 86,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2616,
    "kind": "member",
    "name": "suggestSendImageHandler",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "static": false,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel#suggestSendImageHandler",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2617,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 102,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2618,
    "kind": "member",
    "name": "showSuggestPanelTimer",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "static": false,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel#showSuggestPanelTimer",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2619,
    "kind": "method",
    "name": "showSuggestPanel",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel#showSuggestPanel",
    "access": "public",
    "description": "显示提示面板",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "FileData",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "图片存储对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2622,
    "kind": "member",
    "name": "handleCloseBtnClick",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "static": false,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel#handleCloseBtnClick",
    "access": "private",
    "description": "处理关闭按钮点击事件",
    "lineNumber": 135,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2624,
    "kind": "member",
    "name": "handleSendBtnClick",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "static": false,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel#handleSendBtnClick",
    "access": "private",
    "description": "处理发送按钮点击事件",
    "lineNumber": 151,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2625,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/chats-suggest-panel.js~ChatsSuggestPanel#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 166,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2626,
    "kind": "file",
    "name": "app/views/chats/external.js",
    "content": "import ChatAvatar from './chat-avatar';\nimport ChatTipPopover from './chat-tip-popover';\nimport ChatChangeFontPopover from './chat-change-font-popover';\nimport ChatTitle from './chat-title';\nimport ChatCommittersSettingDialog from './chat-committers-setting-dialog';\nimport ChatView from './chat-view';\nimport ChatCommittersSetting from './chat-committers-setting';\nimport ChatsCache from './chats-cache';\nimport ChatCreateDialog from './chat-create-dialog';\nimport ChatsDndContainer from './chats-dnd-container';\nimport ChatCreateGroups from './chat-create-groups';\nimport ChatsHistoryDialog from './chats-history-dialog';\nimport ChatCreate from './chat-create';\nimport ChatsHistory from './chats-history';\nimport ChatHeader from './chat-header';\nimport ChatHistory from './chat-history';\nimport Index from './index';\nimport ChatInviteDialog from './chat-invite-dialog';\nimport MenuHeader from './menu-header';\nimport ChatInvite from './chat-invite';\nimport MenuList from './menu-list';\nimport ChatJoinPublic from './chat-join-public';\nimport Menu from './menu';\nimport ChatListItem from './chat-list-item';\nimport MessageBroadcast from './message-broadcast';\nimport ChatMessages from './chat-messages';\nimport MessageContentFile from './message-content-file';\nimport ChatSearchResult from './chat-search-result';\nimport MessageContentImage from './message-content-image';\nimport ChatSendbox from './chat-sendbox';\nimport MessageContentText from './message-content-text';\nimport ChatSidebarFiles from './chat-sidebar-files';\nimport MessageDivider from './message-divider';\nimport ChatSidebarPeoples from './chat-sidebar-peoples';\nimport MessageListItem from './message-list-item';\nimport ChatSidebarProfile from './chat-sidebar-profile';\nimport MessageList from './message-list';\nimport ChatSidebar from './chat-sidebar';\nimport MessagesPreviewDialog from './messages-preview-dialog';\n\nexport default {\n    ChatAvatar,\n    ChatTipPopover,\n    ChatChangeFontPopover,\n    ChatTitle,\n    ChatCommittersSettingDialog,\n    ChatView,\n    ChatCommittersSetting,\n    ChatsCache,\n    ChatCreateDialog,\n    ChatsDndContainer,\n    ChatCreateGroups,\n    ChatsHistoryDialog,\n    ChatCreate,\n    ChatsHistory,\n    ChatHeader,\n    ChatHistory,\n    Index,\n    ChatInviteDialog,\n    MenuHeader,\n    ChatInvite,\n    MenuList,\n    ChatJoinPublic,\n    Menu,\n    ChatListItem,\n    MessageBroadcast,\n    ChatMessages,\n    MessageContentFile,\n    ChatSearchResult,\n    MessageContentImage,\n    ChatSendbox,\n    MessageContentText,\n    ChatSidebarFiles,\n    MessageDivider,\n    ChatSidebarPeoples,\n    MessageListItem,\n    ChatSidebarProfile,\n    MessageList,\n    ChatSidebar,\n    MessagesPreviewDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/external.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2627,
    "kind": "file",
    "name": "app/views/chats/index.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Config from '../../config';\nimport {Route, Redirect} from 'react-router-dom';\nimport SplitPane from 'react-split-pane';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport {Menu} from './menu';\nimport {ChatsCache} from './chats-cache';\nimport {ChatsDndContainer} from './chats-dnd-container';\nimport {ChatsSuggestPanel} from './chats-suggest-panel';\nimport replaceViews from '../replace-views';\n\n/**\n * ChatsIndex 组件 ，显示聊天主界面\n * @class ChatsIndex\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ChatsIndex from './index';\n * <ChatsIndex />\n */\nexport default class ChatsIndex extends Component {\n    /**\n     * 获取 ChatsIndex 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ChatsIndex>}\n     * @readonly\n     * @static\n     * @memberof ChatsIndex\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ChatsIndex} from './index';\n     * <ChatsIndex />\n     */\n    static get ChatsIndex() {\n        return replaceViews('chats/index', ChatsIndex);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ChatsIndex\n     * @type {Object}\n     */\n    static propTypes = {\n        match: PropTypes.object.isRequired,\n        hidden: PropTypes.bool,\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ChatsIndex\n     * @static\n     */\n    static defaultProps = {\n        hidden: false,\n        className: null,\n    };\n\n    /**\n     * 处理聊天缓存界面点击点击事件\n     * @memberof ChatsIndex\n     * @private\n     * @return {void}\n     */\n    handChatsCacheClick = () => {\n        App.ui.showMobileChatsMenu(false);\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ChatsIndex\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            hidden,\n            className,\n            match\n        } = this.props;\n\n        App.im.ui.activeChat(match.params.id);\n\n        return (<div className={classes('dock app-chats', className, {hidden})}>\n            <SplitPane split=\"vertical\" maxSize={400} minSize={200} defaultSize={200} paneStyle={{userSelect: 'none'}}>\n                <Menu className=\"dock\" filter={match.params.filterType} />\n                <ChatsCache onClick={this.handChatsCacheClick} className=\"dock\" filterType={match.params.filterType} chatId={match.params.id}>\n                    <ChatsDndContainer className=\"dock\" />\n                </ChatsCache>\n            </SplitPane>\n            <Route\n                path=\"/chats/:filterType\"\n                exact\n                render={props => {\n                    const activeChatId = App.im.ui.currentActiveChatId;\n                    if (activeChatId) {\n                        return <Redirect to={`${props.match.url}/${activeChatId}`} />;\n                    }\n                    return null;\n                }}\n            />\n            <ChatsSuggestPanel />\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2628,
    "kind": "class",
    "name": "ChatsIndex",
    "memberof": "app/views/chats/index.js",
    "static": true,
    "longname": "app/views/chats/index.js~ChatsIndex",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/index.js",
    "importStyle": "ChatsIndex",
    "description": "ChatsIndex 组件 ，显示聊天主界面",
    "examples": [
      "import ChatsIndex from './index';\n<ChatsIndex />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChatsIndex"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2629,
    "kind": "get",
    "name": "ChatsIndex",
    "memberof": "app/views/chats/index.js~ChatsIndex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/index.js~ChatsIndex.ChatsIndex",
    "access": "public",
    "description": "获取 ChatsIndex 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ChatsIndex} from './index';\n<ChatsIndex />"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ChatsIndex>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2630,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/index.js~ChatsIndex",
    "static": true,
    "longname": "app/views/chats/index.js~ChatsIndex.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2631,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/index.js~ChatsIndex",
    "static": true,
    "longname": "app/views/chats/index.js~ChatsIndex.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2632,
    "kind": "member",
    "name": "handChatsCacheClick",
    "memberof": "app/views/chats/index.js~ChatsIndex",
    "static": false,
    "longname": "app/views/chats/index.js~ChatsIndex#handChatsCacheClick",
    "access": "private",
    "description": "处理聊天缓存界面点击点击事件",
    "lineNumber": 69,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2633,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/index.js~ChatsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/index.js~ChatsIndex#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 81,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2634,
    "kind": "file",
    "name": "app/views/chats/menu-contact-list.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport Lang from '../../lang';\nimport {showContextMenu} from '../../core/context-menu';\nimport Icon from '../../components/icon';\nimport GroupList from '../../components/group-list';\nimport Button from '../../components/button';\nimport {ChatListItem} from './chat-list-item';\nimport {MemberListItem} from '../common/member-list-item';\nimport UserProfileDialog from '../common/user-profile-dialog';\nimport replaceViews from '../replace-views';\n\n/**\n * 讨论组聊天类型表\n * @type {{label: string, data: string}[]}\n * @private\n */\nconst GROUP_TYPES = [\n    {label: Lang.string('chats.menu.groupType.normal'), data: 'normal'},\n    {label: Lang.string('chats.menu.groupType.category'), data: 'category'},\n    {label: Lang.string('chats.menu.groupType.role'), data: 'role'},\n    {label: Lang.string('chats.menu.groupType.dept'), data: 'dept'},\n];\n\n/**\n * MenuContactList 组件 ，显示联系人列表界面\n * @class MenuContactList\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MenuContactList from './menu-contact-list';\n * <MenuContactList />\n */\nexport default class MenuContactList extends Component {\n    /**\n     * 获取 MenuContactList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MenuContactList>}\n     * @readonly\n     * @static\n     * @memberof MenuContactList\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MenuContactList} from './menu-contact-list';\n     * <MenuContactList />\n     */\n    static get MenuContactList() {\n        return replaceViews('chats/menu-contact-list', MenuContactList);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MenuContactList\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        search: PropTypes.string,\n        filter: PropTypes.string,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MenuContactList\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        search: null,\n        filter: null,\n        children: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 MenuContactList 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        const user = App.user;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            groupType: user ? user.config.contactsGroupByType : 'normal',\n            dragging: false,\n            dropTarget: null\n        };\n    }\n\n    /**\n     * 获取讨论组类型\n     * @memberof MenuContactList\n     * @type {string}\n     */\n    get groupType() {\n        // eslint-disable-next-line react/destructuring-assignment\n        return this.state.groupType;\n    }\n\n    /**\n     * 设置讨论组类型\n     * @param {string} groupType 讨论组类型\n     * @memberof MenuContactList\n     */\n    set groupType(groupType) {\n        this.setState({groupType}, () => {\n            const user = App.user;\n            if (user) {\n                user.config.contactsGroupByType = groupType;\n            }\n        });\n    }\n\n    /**\n     * 处理点击个人资料条目事件\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleUserItemClick = () => {\n        UserProfileDialog.show();\n    };\n\n    /**\n     * 处理列表设置按钮点击事件\n     * @param {Event} e 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleSettingBtnClick = e => {\n        const groupType = this.groupType;\n        const menus = GROUP_TYPES.map(type => ({\n            hidden: type.data === 'dept' && !App.members.hasDepts,\n            label: type.label,\n            data: type.data,\n            icon: type.data === groupType ? 'check text-success' : false\n        }));\n        menus.splice(0, 0, {label: Lang.string('chats.menu.switchView'), disabled: true});\n        App.ui.showContextMenu({x: e.clientX, y: e.clientY, target: e.target}, menus, {onItemClick: item => {\n            if (item && item.data) {\n                this.groupType = item.data;\n            }\n        }});\n        e.stopPropagation();\n    };\n\n    /**\n     * 处理联系人右键菜单事件\n     * @param {Event} event 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleItemContextMenu = (event) => {\n        const chat = App.im.chats.get(event.currentTarget.attributes['data-gid'].value);\n        showContextMenu('chat.menu', {\n            event,\n            chat,\n            menuType: 'contacts',\n            viewType: this.state.groupType\n        });\n    }\n\n    /**\n     * 渲染联系人聊天条目\n     *\n     * @param {Chat} chat 聊天对象\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @private\n     * @memberof MenuContactList\n     */\n    itemCreator = chat => {\n        return <ChatListItem onContextMenu={this.handleItemContextMenu} data-gid={chat.gid} key={chat.gid} filterType={this.props.filter} chat={chat} className=\"item\" />;\n    };\n\n    /**\n     * 处理分组标题右键菜单事件\n     * @param {Object} group 分组信息\n     * @param {Event} event 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleHeadingContextMenu(group, event) {\n        showContextMenu('chat.group', {group, event});\n    }\n\n    /**\n     * 处理分组拖放事件\n     * @param {Object} group 分组信息\n     * @param {Event} e 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleDragOver(group, e) {\n        if (!this.state.dropTarget || this.state.dropTarget.id !== group.id) {\n            this.setState({dropTarget: group});\n        }\n    }\n\n    /**\n     * 处理分组拖放完成事件\n     * @param {Object} group 分组信息\n     * @param {Event} e 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleDrop(group, e) {\n        const {dragging, dropTarget} = this.state;\n        if (dragging && dropTarget && dragging.id !== dropTarget.id) {\n            if (dropTarget.order < dragging.order) {\n                dragging.order = dropTarget.order - 0.5;\n            } else if (dropTarget.order > dragging.order) {\n                dragging.order = dropTarget.order + 0.5;\n            }\n            const categories = {};\n            this.sortedGroups.sort((x, y) => (x.order - y.order));\n            this.sortedGroups.forEach((x, idx) => {\n                x.order = idx + 1;\n                categories[x.id] = {key: x.key, order: x.order};\n            });\n            App.user.config.contactsCategories = categories;\n        }\n        e.stopPropagation();\n    }\n\n    /**\n     * 处理分组拖放开始事件\n     * @param {Object} group 分组信息\n     * @param {Event} e 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleDragStart(group, e) {\n        this.setState({dragging: group});\n        this.sortedGroups = this.groupChats;\n        e.stopPropagation();\n        return true;\n    }\n\n    /**\n     * 处理分组拖放结束事件\n     * @param {Object} group 分组信息\n     * @param {Event} e 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleDragEnd(group, e) {\n        this.setState({dragging: false});\n        e.stopPropagation();\n        return true;\n    }\n\n    /**\n     * 创建分组标题条目\n     *\n     * @param {Object} group 分组信息\n     * @param {Object} groupList 分组列表\n     * @memberof MenuContactList\n     * @private\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    headingCreator = (group, groupList) => {\n        const icon = groupList.isExpand ? groupList.props.expandIcon : groupList.props.collapseIcon;\n        let iconView = null;\n        if (icon) {\n            if (React.isValidElement(icon)) {\n                iconView = icon;\n            } else if (typeof icon === 'object') {\n                iconView = <Icon {...icon} />;\n            } else {\n                iconView = <Icon name={icon} />;\n            }\n        }\n        let countView = null;\n        if (!group.list.length) {\n            countView = '(0)';\n        } else if (!group.onlySubGroup) {\n            countView = `(${group.onlineCount || 0}/${group.list.length - (group.dept && group.dept.children ? group.dept.children.length : 0)})`;\n        }\n\n        const {dragging, dropTarget} = this.state;\n        const isDragging = dropTarget && dragging && dropTarget.id === group.id && dragging.id !== group.id;\n        const dragClasses = {\n            'is-dragging': isDragging,\n            'drop-top': isDragging && dropTarget.order < dragging.order,\n            'drop-bottom': isDragging && dropTarget.order > dragging.order,\n        };\n        return (<header\n            onContextMenu={this.handleHeadingContextMenu.bind(this, group)}\n            draggable={this.groupType === 'category'}\n            onDragOver={this.handleDragOver.bind(this, group)}\n            onDrop={this.handleDrop.bind(this, group)}\n            onDragStart={this.handleDragStart.bind(this, group)}\n            onDragEnd={this.handleDragEnd.bind(this, group)}\n            onClick={groupList.props.toggleWithHeading ? groupList.handleHeadingClick : null}\n            className={classes('heading', dragClasses)}\n        >\n            {iconView}\n            <div className=\"title\"><strong>{group.title || Lang.string('chats.menu.group.other')}</strong> {countView}</div>\n        </header>);\n    };\n\n    /**\n     * 判断分组是否默认为展开状态\n     *\n     * @param {Object} group 分组信息\n     * @memberof MenuContactList\n     * @returns {boolean} 如果返回 `true` 则为是展开状态，否则为不是展开状态\n     * @private\n     */\n    defaultExpand = (group) => {\n        return !!group.list.find(item => {\n            if (item.type === 'group') {\n                return this.defaultExpand(item);\n            }\n            let isExpand = App.im.ui.isActiveChat(item.gid);\n            if (!isExpand) {\n                isExpand = App.profile.userConfig.getChatMenuGroupState('contacts', this.groupType, group.id);\n            }\n            return isExpand;\n        });\n    };\n\n    /**\n     * 处理分组展开折叠变更事件\n     * @param {boolean} expanded 是否展开\n     * @param {Object} group 分组信息\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    onExpandChange = (expanded, group) => {\n        App.profile.userConfig.setChatMenuGroupState('contacts', this.groupType, group.id, expanded);\n    };\n\n    /**\n     * MenuContactList 组件 ，显示MenuContactList界面\n     * @class MenuContactList\n     * @see https://react.docschina.org/docs/components-and-props.html\n     * @extends {Component}\n     * @example\n     * import MenuContactList from './menu-contact-list';\n     * <MenuContactList />\n     */\n    render() {\n        const {\n            search,\n            filter,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const groupType = this.groupType;\n        const chats = App.im.chats.getContactsChats('onlineFirst', groupType);\n        const user = App.user;\n        this.groupChats = chats;\n\n        return (<div className={classes('app-chats-menu-list app-contact-list app-chat-group-list list scroll-y', className)} {...other}>\n            {user ? <MemberListItem\n                className=\"flex-middle app-member-me\"\n                member={user}\n                avatarSize={24}\n                showStatusDot={false}\n                onClick={this.handleUserItemClick}\n                title={<div className=\"title\">{user.displayName} &nbsp;{user.role ? <div className=\"label rounded primary-pale text-gray small member-role-label\">{user.getRoleName(App)}</div> : null}</div>}\n            >\n                <div className=\"btn-wrapper hint--left\" data-hint={Lang.string('common.setting')}><Button onClick={this.handleSettingBtnClick} className=\"iconbutton rounded\" icon=\"format-list-bulleted\" /></div>\n            </MemberListItem> : null}\n            <GroupList\n                group={{list: chats, root: true}}\n                defaultExpand={this.defaultExpand}\n                itemCreator={this.itemCreator}\n                headingCreator={this.headingCreator}\n                onExpandChange={this.onExpandChange}\n                hideEmptyGroup={groupType !== 'category'}\n                forceCollapse={!!this.state.dragging}\n            />\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/menu-contact-list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2635,
    "kind": "variable",
    "name": "GROUP_TYPES",
    "memberof": "app/views/chats/menu-contact-list.js",
    "static": true,
    "longname": "app/views/chats/menu-contact-list.js~GROUP_TYPES",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/menu-contact-list.js",
    "importStyle": null,
    "description": "讨论组聊天类型表",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "{label: string, data: string}[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2636,
    "kind": "class",
    "name": "MenuContactList",
    "memberof": "app/views/chats/menu-contact-list.js",
    "static": true,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/menu-contact-list.js",
    "importStyle": "MenuContactList",
    "description": "MenuContactList 组件 ，显示联系人列表界面",
    "examples": [
      "import MenuContactList from './menu-contact-list';\n<MenuContactList />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MenuContactList"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2637,
    "kind": "get",
    "name": "MenuContactList",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList.MenuContactList",
    "access": "public",
    "description": "获取 MenuContactList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MenuContactList} from './menu-contact-list';\n<MenuContactList />"
    ],
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MenuContactList>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2638,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": true,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2639,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": true,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2640,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 MenuContactList 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2641,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2642,
    "kind": "get",
    "name": "groupType",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#groupType",
    "access": "public",
    "description": "获取讨论组类型",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2643,
    "kind": "set",
    "name": "groupType",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#groupType",
    "access": "public",
    "description": "设置讨论组类型",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "groupType",
        "description": "讨论组类型"
      }
    ]
  },
  {
    "__docId__": 2644,
    "kind": "member",
    "name": "handleUserItemClick",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#handleUserItemClick",
    "access": "private",
    "description": "处理点击个人资料条目事件",
    "lineNumber": 131,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2645,
    "kind": "member",
    "name": "handleSettingBtnClick",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#handleSettingBtnClick",
    "access": "private",
    "description": "处理列表设置按钮点击事件",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2647,
    "kind": "member",
    "name": "handleItemContextMenu",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#handleItemContextMenu",
    "access": "private",
    "description": "处理联系人右键菜单事件",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2648,
    "kind": "member",
    "name": "itemCreator",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#itemCreator",
    "access": "private",
    "description": "渲染联系人聊天条目",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2649,
    "kind": "method",
    "name": "handleHeadingContextMenu",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#handleHeadingContextMenu",
    "access": "private",
    "description": "处理分组标题右键菜单事件",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2650,
    "kind": "method",
    "name": "handleDragOver",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#handleDragOver",
    "access": "private",
    "description": "处理分组拖放事件",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2651,
    "kind": "method",
    "name": "handleDrop",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#handleDrop",
    "access": "private",
    "description": "处理分组拖放完成事件",
    "lineNumber": 222,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2652,
    "kind": "method",
    "name": "handleDragStart",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#handleDragStart",
    "access": "private",
    "description": "处理分组拖放开始事件",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2653,
    "kind": "member",
    "name": "sortedGroups",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#sortedGroups",
    "access": "public",
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2654,
    "kind": "method",
    "name": "handleDragEnd",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#handleDragEnd",
    "access": "private",
    "description": "处理分组拖放结束事件",
    "lineNumber": 264,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2655,
    "kind": "member",
    "name": "headingCreator",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#headingCreator",
    "access": "private",
    "description": "创建分组标题条目",
    "lineNumber": 279,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "groupList",
        "description": "分组列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2656,
    "kind": "member",
    "name": "defaultExpand",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#defaultExpand",
    "access": "private",
    "description": "判断分组是否默认为展开状态",
    "lineNumber": 328,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是展开状态，否则为不是展开状态"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是展开状态，否则为不是展开状态"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2657,
    "kind": "member",
    "name": "onExpandChange",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#onExpandChange",
    "access": "private",
    "description": "处理分组展开折叠变更事件",
    "lineNumber": 349,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "expanded",
        "description": "是否展开"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2658,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#render",
    "access": "public",
    "description": "MenuContactList 组件 ，显示MenuContactList界面",
    "examples": [
      "import MenuContactList from './menu-contact-list';\n<MenuContactList />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 362,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MenuContactList"
      },
      {
        "tagName": "@extends",
        "tagValue": "{Component}"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2659,
    "kind": "member",
    "name": "groupChats",
    "memberof": "app/views/chats/menu-contact-list.js~MenuContactList",
    "static": false,
    "longname": "app/views/chats/menu-contact-list.js~MenuContactList#groupChats",
    "access": "public",
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2660,
    "kind": "file",
    "name": "app/views/chats/menu-group-list.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport Lang from '../../lang';\nimport {showContextMenu} from '../../core/context-menu';\nimport Icon from '../../components/icon';\nimport GroupList from '../../components/group-list';\nimport {ChatListItem} from './chat-list-item';\nimport replaceViews from '../replace-views';\n\n/**\n * MenuGroupList 组件 ，显示讨论组列表界面\n * @class MenuGroupList\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MenuGroupList from './menu-group-list';\n * <MenuGroupList />\n */\nexport default class MenuGroupList extends Component {\n    /**\n     * 获取 MenuGroupList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MenuGroupList>}\n     * @readonly\n     * @static\n     * @memberof MenuGroupList\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MenuGroupList} from './menu-group-list';\n     * <MenuGroupList />\n     */\n    static get MenuGroupList() {\n        return replaceViews('chats/menu-group-list', MenuGroupList);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MenuGroupList\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        search: PropTypes.string,\n        filter: PropTypes.string,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MenuGroupList\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        search: null,\n        filter: null,\n        children: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 MenuGroupList 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            dragging: false,\n            dropTarget: null\n        };\n    }\n\n    /**\n     * 处理讨论组右键菜单事件\n     * @param {Event} event 事件对象\n     * @memberof MenuGroupList\n     * @private\n     * @return {void}\n     */\n    handleItemContextMenu(event) {\n        const chat = App.im.chats.get(event.currentTarget.attributes['data-gid'].value);\n        showContextMenu('chat.menu', {\n            event,\n            chat,\n            menuType: 'groups',\n            viewType: 'category'\n        });\n    }\n\n    /**\n     * 检查列表条目是否为分组\n     *\n     * @param {Object} item 列表条目\n     * @memberof MenuGroupList\n     * @returns {boolean} 如果返回 `true` 则为是分组，否则为不是分组\n     * @private\n     */\n    checkIsGroup = item => {\n        return item.list && item.entityType !== 'Chat';\n    };\n\n    /**\n     * 渲染讨论组列表聊天条目\n     *\n     * @param {Chat} chat 聊天对象\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @private\n     * @memberof MenuContactList\n     */\n    itemCreator = chat => {\n        return <ChatListItem onContextMenu={this.handleItemContextMenu} data-gid={chat.gid} key={chat.gid} filterType={this.props.filter} chat={chat} className=\"item\" />;\n    };\n\n    /**\n     * 处理分组标题右键菜单事件\n     * @param {Object} group 分组信息\n     * @param {Event} event 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleHeadingContextMenu(group, event) {\n        showContextMenu('chat.group', {group, event, type: 'group'});\n    }\n\n    /**\n     * 处理分组拖放事件\n     * @param {Object} group 分组信息\n     * @param {Event} e 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleDragOver(group, e) {\n        if (!this.state.dropTarget || this.state.dropTarget.id !== group.id) {\n            this.setState({dropTarget: group});\n        }\n    }\n\n    /**\n     * 处理分组拖放完成事件\n     * @param {Object} group 分组信息\n     * @param {Event} e 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleDrop(group, e) {\n        const {dragging, dropTarget} = this.state;\n        if (dragging && dropTarget && dragging.id !== dropTarget.id) {\n            if (dropTarget.order < dragging.order) {\n                dragging.order = dropTarget.order - 0.5;\n            } else if (dropTarget.order > dragging.order) {\n                dragging.order = dropTarget.order + 0.5;\n            }\n            const categories = {};\n            this.sortedGroups.sort((x, y) => (x.order - y.order));\n            this.sortedGroups.forEach((x, idx) => {\n                x.order = idx + 1;\n                categories[x.id] = {key: x.key, order: x.order};\n            });\n            App.user.config.groupsCategories = categories;\n        }\n        e.stopPropagation();\n    }\n\n    /**\n     * 处理分组拖放开始事件\n     * @param {Object} group 分组信息\n     * @param {Event} e 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleDragStart(group, e) {\n        this.setState({dragging: group});\n        this.sortedGroups = this.groupChats;\n        e.stopPropagation();\n        return true;\n    }\n\n    /**\n     * 处理分组拖放结束事件\n     * @param {Object} group 分组信息\n     * @param {Event} e 事件对象\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    handleDragEnd(group, e) {\n        this.setState({dragging: false});\n        e.stopPropagation();\n        return true;\n    }\n\n    /**\n     * 创建分组标题条目\n     *\n     * @param {Object} group 分组信息\n     * @param {Object} groupList 分组列表\n     * @memberof MenuContactList\n     * @private\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    headingCreator = (group, groupList) => {\n        const icon = groupList.isExpand ? groupList.props.expandIcon : groupList.props.collapseIcon;\n        let iconView = null;\n        if (icon) {\n            if (React.isValidElement(icon)) {\n                iconView = icon;\n            } else if (typeof icon === 'object') {\n                iconView = <Icon {...icon} />;\n            } else {\n                iconView = <Icon name={icon} />;\n            }\n        }\n        const {dragging, dropTarget} = this.state;\n        const isDragging = dropTarget && dragging && dropTarget.id === group.id && dragging.id !== group.id;\n        const dragClasses = {\n            'is-dragging': isDragging,\n            'drop-top': isDragging && dropTarget.order < dragging.order,\n            'drop-bottom': isDragging && dropTarget.order > dragging.order,\n        };\n        return (<header\n            onContextMenu={this.handleHeadingContextMenu.bind(this, group)}\n            onClick={groupList.props.toggleWithHeading ? groupList.handleHeadingClick : null}\n            className={classes('heading', dragClasses)}\n            draggable\n            onDragOver={this.handleDragOver.bind(this, group)}\n            onDrop={this.handleDrop.bind(this, group)}\n            onDragStart={this.handleDragStart.bind(this, group)}\n            onDragEnd={this.handleDragEnd.bind(this, group)}\n        >\n            {iconView}\n            <div className=\"title strong\">{group.title || Lang.string('chats.menu.group.other')} ({group.list.length})</div>\n        </header>);\n    };\n\n    /**\n     * 判断分组是否默认为展开状态\n     *\n     * @param {Object} group 分组信息\n     * @memberof MenuContactList\n     * @returns {boolean} 如果返回 `true` 则为是展开状态，否则为不是展开状态\n     * @private\n     */\n    defaultExpand = (group) => {\n        return group.list && !!group.list.find(item => {\n            let isExpand = App.im.ui.isActiveChat(item.gid);\n            if (!isExpand) {\n                isExpand = App.profile.userConfig.getChatMenuGroupState('groups', this.groupType, group.id);\n            }\n            return isExpand;\n        });\n    };\n\n    /**\n     * 处理分组展开折叠变更事件\n     * @param {boolean} expanded 是否展开\n     * @param {Object} group 分组信息\n     * @memberof MenuContactList\n     * @private\n     * @return {void}\n     */\n    onExpandChange = (expanded, group) => {\n        App.profile.userConfig.setChatMenuGroupState('groups', this.groupType, group.id, expanded);\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MenuGroupList\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            search,\n            filter,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const chats = App.im.chats.getGroups(true, 'category');\n        this.groupChats = chats;\n\n        return (<div className={classes('app-chats-menu-list app-chat-group-list list scroll-y', className)} {...other}>\n            {\n                GroupList.render(chats, {\n                    defaultExpand: this.defaultExpand,\n                    itemCreator: this.itemCreator,\n                    headingCreator: this.headingCreator,\n                    hideEmptyGroup: true,\n                    checkIsGroup: this.checkIsGroup,\n                    onExpandChange: this.onExpandChange,\n                    forceCollapse: !!this.state.dragging\n                })\n            }\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/menu-group-list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2661,
    "kind": "class",
    "name": "MenuGroupList",
    "memberof": "app/views/chats/menu-group-list.js",
    "static": true,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/menu-group-list.js",
    "importStyle": "MenuGroupList",
    "description": "MenuGroupList 组件 ，显示讨论组列表界面",
    "examples": [
      "import MenuGroupList from './menu-group-list';\n<MenuGroupList />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MenuGroupList"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2662,
    "kind": "get",
    "name": "MenuGroupList",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList.MenuGroupList",
    "access": "public",
    "description": "获取 MenuGroupList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MenuGroupList} from './menu-group-list';\n<MenuGroupList />"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MenuGroupList>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2663,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "static": true,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2664,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "static": true,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2665,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 MenuGroupList 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2666,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2667,
    "kind": "method",
    "name": "handleItemContextMenu",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#handleItemContextMenu",
    "access": "private",
    "description": "处理讨论组右键菜单事件",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2668,
    "kind": "member",
    "name": "checkIsGroup",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#checkIsGroup",
    "access": "private",
    "description": "检查列表条目是否为分组",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是分组，否则为不是分组"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "列表条目"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是分组，否则为不是分组"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2669,
    "kind": "member",
    "name": "itemCreator",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#itemCreator",
    "access": "private",
    "description": "渲染讨论组列表聊天条目",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2670,
    "kind": "method",
    "name": "handleHeadingContextMenu",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#handleHeadingContextMenu",
    "access": "private",
    "description": "处理分组标题右键菜单事件",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2671,
    "kind": "method",
    "name": "handleDragOver",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#handleDragOver",
    "access": "private",
    "description": "处理分组拖放事件",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2672,
    "kind": "method",
    "name": "handleDrop",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#handleDrop",
    "access": "private",
    "description": "处理分组拖放完成事件",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2673,
    "kind": "method",
    "name": "handleDragStart",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#handleDragStart",
    "access": "private",
    "description": "处理分组拖放开始事件",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2674,
    "kind": "member",
    "name": "sortedGroups",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#sortedGroups",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2675,
    "kind": "method",
    "name": "handleDragEnd",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#handleDragEnd",
    "access": "private",
    "description": "处理分组拖放结束事件",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2676,
    "kind": "member",
    "name": "headingCreator",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#headingCreator",
    "access": "private",
    "description": "创建分组标题条目",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "groupList",
        "description": "分组列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2677,
    "kind": "member",
    "name": "defaultExpand",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#defaultExpand",
    "access": "private",
    "description": "判断分组是否默认为展开状态",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为是展开状态，否则为不是展开状态"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为是展开状态，否则为不是展开状态"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2678,
    "kind": "member",
    "name": "onExpandChange",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#onExpandChange",
    "access": "private",
    "description": "处理分组展开折叠变更事件",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "expanded",
        "description": "是否展开"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "分组信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2679,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 288,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2680,
    "kind": "member",
    "name": "groupChats",
    "memberof": "app/views/chats/menu-group-list.js~MenuGroupList",
    "static": false,
    "longname": "app/views/chats/menu-group-list.js~MenuGroupList#groupChats",
    "access": "public",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2681,
    "kind": "file",
    "name": "app/views/chats/menu-header.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport SearchControl from '../../components/search-control';\nimport Icon from '../../components/icon';\nimport Lang from '../../lang';\nimport ChatCreateDialog from './chat-create-dialog';\nimport replaceViews from '../replace-views';\n\n/**\n * MenuHeader 组件 ，显示聊天菜单头部界面\n * @class MenuHeader\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MenuHeader from './menu-header';\n * <MenuHeader />\n */\nexport default class MenuHeader extends PureComponent {\n    /**\n     * 获取 MenuHeader 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MenuHeader>}\n     * @readonly\n     * @static\n     * @memberof MenuHeader\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MenuHeader} from './menu-header';\n     * <MenuHeader />\n     */\n    static get MenuHeader() {\n        return replaceViews('chats/menu-header', MenuHeader);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MenuHeader\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        onSearchChange: PropTypes.func,\n        onSearchFocus: PropTypes.func,\n        children: PropTypes.any,\n        defaultSearch: PropTypes.string,\n        filter: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MenuHeader\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        onSearchChange: null,\n        onSearchFocus: null,\n        children: null,\n        defaultSearch: '',\n        filter: null\n    };\n\n    /**\n     * 处理创建聊天按钮点击事件\n     * @param {Event} event 事件对象\n     * @memberof MenuHeader\n     * @private\n     * @return {void}\n     */\n    handleCreateBtnClick = () => {\n        ChatCreateDialog.show();\n    }\n\n    /**\n     * 清除聊天搜索关键字\n     * @memberof MenuHeader\n     * @return {void}\n     */\n    clearSearch() {\n        this.searchControl.setValue('');\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MenuHeader\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            children,\n            onSearchChange,\n            onSearchFocus,\n            defaultSearch,\n            filter,\n            ...other\n        } = this.props;\n\n        return (<div className={HTML.classes('app-chats-menu-header', className)} {...other}>\n            <SearchControl\n                ref={e => {this.searchControl = e;}}\n                hotkeyScope=\"chatsMenuSearch\"\n                onFocusChange={onSearchFocus}\n                defaultValue={defaultSearch}\n                className=\"app-chats-search\"\n                onSearchChange={onSearchChange}\n                placeholder={Lang.string('chats.search.recents')}\n            />\n            <div className=\"app-chats-create-btn hint--bottom\" data-hint={Lang.string('chats.create.label')}>\n                <button type=\"button\" className=\"btn rounded iconbutton\" onClick={this.handleCreateBtnClick}><Icon name=\"comment-plus-outline\" className=\"icon-2x\" /></button>\n            </div>\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/menu-header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2682,
    "kind": "class",
    "name": "MenuHeader",
    "memberof": "app/views/chats/menu-header.js",
    "static": true,
    "longname": "app/views/chats/menu-header.js~MenuHeader",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/menu-header.js",
    "importStyle": "MenuHeader",
    "description": "MenuHeader 组件 ，显示聊天菜单头部界面",
    "examples": [
      "import MenuHeader from './menu-header';\n<MenuHeader />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MenuHeader"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2683,
    "kind": "get",
    "name": "MenuHeader",
    "memberof": "app/views/chats/menu-header.js~MenuHeader",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/menu-header.js~MenuHeader.MenuHeader",
    "access": "public",
    "description": "获取 MenuHeader 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MenuHeader} from './menu-header';\n<MenuHeader />"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MenuHeader>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2684,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/menu-header.js~MenuHeader",
    "static": true,
    "longname": "app/views/chats/menu-header.js~MenuHeader.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2685,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/menu-header.js~MenuHeader",
    "static": true,
    "longname": "app/views/chats/menu-header.js~MenuHeader.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2686,
    "kind": "member",
    "name": "handleCreateBtnClick",
    "memberof": "app/views/chats/menu-header.js~MenuHeader",
    "static": false,
    "longname": "app/views/chats/menu-header.js~MenuHeader#handleCreateBtnClick",
    "access": "private",
    "description": "处理创建聊天按钮点击事件",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2687,
    "kind": "method",
    "name": "clearSearch",
    "memberof": "app/views/chats/menu-header.js~MenuHeader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-header.js~MenuHeader#clearSearch",
    "access": "public",
    "description": "清除聊天搜索关键字",
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2688,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/menu-header.js~MenuHeader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-header.js~MenuHeader#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 94,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2689,
    "kind": "member",
    "name": "searchControl",
    "memberof": "app/views/chats/menu-header.js~MenuHeader",
    "static": false,
    "longname": "app/views/chats/menu-header.js~MenuHeader#searchControl",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2690,
    "kind": "file",
    "name": "app/views/chats/menu-list.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport App from '../../core';\nimport {showContextMenu} from '../../core/context-menu';\nimport {MenuContactList} from './menu-contact-list';\nimport {MenuGroupList} from './menu-group-list';\nimport {MenuSearchList} from './menu-search-list';\nimport {MenuRecentList} from './menu-recent-list';\nimport replaceViews from '../replace-views';\n\n/**\n * MenuList 组件 ，显示聊天列表界面\n * @class MenuList\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MenuList from './menu-list';\n * <MenuList />\n */\nexport default class MenuList extends Component {\n    /**\n     * 获取 MenuList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MenuList>}\n     * @readonly\n     * @static\n     * @memberof MenuList\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MenuList} from './menu-list';\n     * <MenuList />\n     */\n    static get MenuList() {\n        return replaceViews('chats/menu-list', MenuList);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MenuList\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        search: PropTypes.string,\n        filter: PropTypes.string,\n        children: PropTypes.any,\n        onRequestClearSearch: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MenuList\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        search: null,\n        filter: null,\n        children: null,\n        onRequestClearSearch: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof MenuList\n     * @return {void}\n     */\n    componentDidMount() {\n        this.dataChangeHandler = App.events.onDataChange(data => {\n            let needForceUpdate = false;\n            if (this.props.search) {\n                needForceUpdate = true;\n            } else if (this.props.filter === 'groups' && data.chats && Object.keys(data.chats).some(x => data.chats[x].isGroupOrSystem)) {\n                needForceUpdate = true;\n            } else if (this.props.filter === 'contacts' && ((data.chats && Object.keys(data.chats).some(x => data.chats[x].isOne2One)) || data.members)) {\n                needForceUpdate = true;\n            } else {\n                needForceUpdate = true;\n            }\n            if (needForceUpdate) {\n                this.forceUpdate();\n            }\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof MenuList\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.dataChangeHandler);\n    }\n\n    /**\n     * 处理聊天右键菜单事件\n     * @param {Chat} chat 聊天对象\n     * @param {Event} event 事件对象\n     * @memberof MenuList\n     * @private\n     * @return {void}\n     */\n    handleItemContextMenu = (chat, event) => {\n        showContextMenu('chat.menu', {\n            event,\n            chat,\n            menuType: this.props.filter,\n            viewType: this.props.filter === 'groups' ? 'category' : ''\n        });\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MenuList\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            search,\n            filter,\n            onRequestClearSearch,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        if (search) {\n            return <MenuSearchList className={className} search={search} onRequestClearSearch={onRequestClearSearch} {...other} />;\n        } else if (filter === 'contacts') {\n            return <MenuContactList className={className} filter={filter} {...other} />;\n        } else if (filter === 'groups') {\n            return <MenuGroupList className={className} filter={filter} {...other} />;\n        }\n        return <MenuRecentList className={className} filter=\"recents\" {...other} />;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/menu-list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2691,
    "kind": "class",
    "name": "MenuList",
    "memberof": "app/views/chats/menu-list.js",
    "static": true,
    "longname": "app/views/chats/menu-list.js~MenuList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/menu-list.js",
    "importStyle": "MenuList",
    "description": "MenuList 组件 ，显示聊天列表界面",
    "examples": [
      "import MenuList from './menu-list';\n<MenuList />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MenuList"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2692,
    "kind": "get",
    "name": "MenuList",
    "memberof": "app/views/chats/menu-list.js~MenuList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/menu-list.js~MenuList.MenuList",
    "access": "public",
    "description": "获取 MenuList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MenuList} from './menu-list';\n<MenuList />"
    ],
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MenuList>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2693,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/menu-list.js~MenuList",
    "static": true,
    "longname": "app/views/chats/menu-list.js~MenuList.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2694,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/menu-list.js~MenuList",
    "static": true,
    "longname": "app/views/chats/menu-list.js~MenuList.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2695,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/menu-list.js~MenuList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-list.js~MenuList#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2696,
    "kind": "member",
    "name": "dataChangeHandler",
    "memberof": "app/views/chats/menu-list.js~MenuList",
    "static": false,
    "longname": "app/views/chats/menu-list.js~MenuList#dataChangeHandler",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2697,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/menu-list.js~MenuList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-list.js~MenuList#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 103,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2698,
    "kind": "member",
    "name": "handleItemContextMenu",
    "memberof": "app/views/chats/menu-list.js~MenuList",
    "static": false,
    "longname": "app/views/chats/menu-list.js~MenuList#handleItemContextMenu",
    "access": "private",
    "description": "处理聊天右键菜单事件",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Chat"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "聊天对象"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2699,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/menu-list.js~MenuList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-list.js~MenuList#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 132,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2700,
    "kind": "file",
    "name": "app/views/chats/menu-recent-list.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport {ChatListItem} from './chat-list-item';\nimport replaceViews from '../replace-views';\nimport {showContextMenu} from '../../core/context-menu';\n\n/**\n * MenuRecentList 组件 ，显示最近聊天列表界面\n * @class MenuRecentList\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MenuRecentList from './menu-recent-list';\n * <MenuRecentList />\n */\nexport default class MenuRecentList extends Component {\n    /**\n     * 获取 MenuRecentList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MenuRecentList>}\n     * @readonly\n     * @static\n     * @memberof MenuRecentList\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MenuRecentList} from './menu-recent-list';\n     * <MenuRecentList />\n     */\n    static get MenuRecentList() {\n        return replaceViews('chats/menu-recent-list', MenuRecentList);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MenuRecentList\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        filter: PropTypes.string,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MenuRecentList\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        filter: null,\n        children: null,\n    };\n\n    /**\n     * 处理聊天右键菜单事件\n     * @param {Event} event 事件对象\n     * @memberof MenuRecentList\n     * @private\n     * @return {void}\n     */\n    handleItemContextMenu = (event) => {\n        const chat = App.im.chats.get(event.currentTarget.attributes['data-gid'].value);\n        showContextMenu('chat.menu', {\n            event,\n            chat,\n            menuType: this.props.filter,\n            viewType: ''\n        });\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MenuRecentList\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            filter,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const chats = App.im.chats.getRecents();\n        let hasActiveChatItem = false;\n        const activeChat = App.im.ui.currentActiveChat;\n        const chatItemsView = chats.map(chat => {\n            if (activeChat && activeChat.gid === chat.gid) {\n                hasActiveChatItem = true;\n            }\n            return <ChatListItem onContextMenu={this.handleItemContextMenu} data-gid={chat.gid} key={chat.gid} filterType={filter} chat={chat} className=\"item\" />;\n        });\n        if (!hasActiveChatItem && activeChat) {\n            chatItemsView.splice(0, 0, <ChatListItem onContextMenu={this.handleItemContextMenu} data-gid={activeChat.gid} key={activeChat.gid} filterType={filter} chat={activeChat} className=\"item\" />);\n        }\n\n        return (<div className={classes('app-chats-menu-list list scroll-y', className)} {...other}>\n            {chatItemsView}\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/menu-recent-list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2701,
    "kind": "class",
    "name": "MenuRecentList",
    "memberof": "app/views/chats/menu-recent-list.js",
    "static": true,
    "longname": "app/views/chats/menu-recent-list.js~MenuRecentList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/menu-recent-list.js",
    "importStyle": "MenuRecentList",
    "description": "MenuRecentList 组件 ，显示最近聊天列表界面",
    "examples": [
      "import MenuRecentList from './menu-recent-list';\n<MenuRecentList />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MenuRecentList"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2702,
    "kind": "get",
    "name": "MenuRecentList",
    "memberof": "app/views/chats/menu-recent-list.js~MenuRecentList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/menu-recent-list.js~MenuRecentList.MenuRecentList",
    "access": "public",
    "description": "获取 MenuRecentList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MenuRecentList} from './menu-recent-list';\n<MenuRecentList />"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MenuRecentList>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2703,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/menu-recent-list.js~MenuRecentList",
    "static": true,
    "longname": "app/views/chats/menu-recent-list.js~MenuRecentList.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2704,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/menu-recent-list.js~MenuRecentList",
    "static": true,
    "longname": "app/views/chats/menu-recent-list.js~MenuRecentList.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2705,
    "kind": "member",
    "name": "handleItemContextMenu",
    "memberof": "app/views/chats/menu-recent-list.js~MenuRecentList",
    "static": false,
    "longname": "app/views/chats/menu-recent-list.js~MenuRecentList#handleItemContextMenu",
    "access": "private",
    "description": "处理聊天右键菜单事件",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2706,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/menu-recent-list.js~MenuRecentList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-recent-list.js~MenuRecentList#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 84,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2707,
    "kind": "file",
    "name": "app/views/chats/menu-search-list.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport hotkeys from 'hotkeys-js';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport {showContextMenu} from '../../core/context-menu';\nimport {ChatListItem} from './chat-list-item';\nimport replaceViews from '../replace-views';\nimport ROUTES from '../common/routes';\nimport ListItem from '../../components/list-item';\nimport Lang from '../../lang';\nimport Config from '../../config';\n\n/**\n * MenuSearchList 组件 ，显示聊天搜索结果列表界面\n * @class MenuSearchList\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MenuSearchList from './menu-search-list';\n * <MenuSearchList />\n */\nexport default class MenuSearchList extends Component {\n    /**\n     * 获取 MenuSearchList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MenuSearchList>}\n     * @readonly\n     * @static\n     * @memberof MenuSearchList\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MenuSearchList} from './menu-search-list';\n     * <MenuSearchList />\n     */\n    static get MenuSearchList() {\n        return replaceViews('chats/menu-search-list', MenuSearchList);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MenuSearchList\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        search: PropTypes.string,\n        filter: PropTypes.string,\n        children: PropTypes.any,\n        onRequestClearSearch: PropTypes.func,\n        startPageSize: PropTypes.number,\n        morePageSize: PropTypes.number,\n        defaultPage: PropTypes.number\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MenuSearchList\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        search: null,\n        filter: null,\n        children: null,\n        onRequestClearSearch: null,\n        startPageSize: Config.ui['page.start.size'] || 20,\n        morePageSize: Config.ui['page.more.size'] || 20,\n        defaultPage: 1\n    };\n\n    /**\n     * React 组件构造函数，创建一个 MenuSearchList 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            select: '',\n            page: props.defaultPage\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof MenuSearchList\n     * @return {void}\n     */\n    componentDidMount() {\n        hotkeys('up', 'chatsMenuSearch', e => {\n            const {chats, selectIndex} = this;\n            const length = chats.length;\n            if (length > 1) {\n                this.setState({select: chats[((selectIndex - 1) + length) % length]});\n            } else if (length) {\n                this.setState({select: chats[0]});\n            }\n            e.preventDefault();\n        });\n        hotkeys('down', 'chatsMenuSearch', e => {\n            const {chats, selectIndex} = this;\n            const length = chats.length;\n            if (length > 1) {\n                this.setState({select: chats[((selectIndex + 1) + length) % length]});\n            } else if (length) {\n                this.setState({select: chats[0]});\n            }\n            e.preventDefault();\n        });\n        hotkeys('enter', 'chatsMenuSearch', e => {\n            const {select} = this;\n            if (this.props.onRequestClearSearch && select) {\n                window.location.hash = `#${ROUTES.chats.chat.id(select.gid, this.props.filter)}`;\n                this.props.onRequestClearSearch();\n            }\n            e.preventDefault();\n        });\n        hotkeys('esc', 'chatsMenuSearch', e => {\n            if (this.props.onRequestClearSearch) {\n                this.props.onRequestClearSearch();\n            }\n            e.preventDefault();\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillReceiveProps`\n     * 在装配了的组件接收到新属性前调用。若你需要更新状态响应属性改变（例如，重置它），你可能需对比this.props和nextProps并在该方法中使用this.setState()处理状态改变。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @see https://doc.react-china.org/docs/react-component.html#unsafe_componentwillreceiveprops\n     * @private\n     * @memberof MenuSearchList\n     * @return {void}\n     * @todo 考虑使用 `UNSAFE_componentWillReceiveProps` 替换 `componentWillReceiveProps`\n     */\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.search !== this.props.search) {\n            this.setState({select: ''});\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof MenuSearchList\n     * @return {void}\n     */\n    componentWillUnmount() {\n        hotkeys.deleteScope('chatsMenuSearch');\n    }\n\n    /**\n     * 处理聊天右键菜单事件\n     * @param {Event} event 事件对象\n     * @memberof MenuSearchList\n     * @private\n     * @return {void}\n     */\n    handleItemContextMenu = event => {\n        const chat = App.im.chats.get(event.currentTarget.attributes['data-gid'].value);\n        showContextMenu('chat.menu', {\n            event,\n            chat,\n            menuType: this.props.filter,\n            viewType: ''\n        });\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MenuSearchList\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            search,\n            filter,\n            className,\n            children,\n            onRequestClearSearch,\n            startPageSize,\n            morePageSize,\n            defaultPage,\n            ...other\n        } = this.props;\n\n        const chats = App.im.chats.search(search, filter);\n        let {select} = this.state;\n        if (!select && chats.length) {\n            select = chats[0];\n        }\n        this.select = select;\n        this.chats = chats;\n\n        const list = chats;\n        const listViews = [];\n        const {page} = this.state;\n        const maxIndex = page ? Math.min(list.length, startPageSize + (page > 1 ? (page - 1) * morePageSize : 0)) : list.length;\n        for (let i = 0; i < maxIndex; i += 1) {\n            const chat = list[i];\n            const isSelected = select && chat.gid === select.gid;\n            if (isSelected) {\n                this.selectIndex = i;\n            }\n            listViews.push(<ChatListItem\n                onMouseEnter={() => this.setState({select: chat})}\n                onContextMenu={this.handleItemContextMenu.bind(this, chat)}\n                key={chat.gid}\n                data-gid={chat.gid}\n                filterType={filter}\n                chat={chat}\n                className={classes('item', {hover: isSelected})}\n            />);\n        }\n        const notShowCount = list.length - maxIndex;\n        if (notShowCount) {\n            listViews.push(<ListItem key=\"showMore\" icon=\"chevron-double-down\" className=\"flex-middle item muted\" title={<span className=\"title small\">{Lang.format('common.clickShowMoreFormat', notShowCount)}</span>} onClick={this.handleRequestMorePage} />);\n        }\n\n        return (<div className={classes('app-chats-menu-list list scroll-y', className)} {...other}>\n            {listViews}\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/menu-search-list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2708,
    "kind": "class",
    "name": "MenuSearchList",
    "memberof": "app/views/chats/menu-search-list.js",
    "static": true,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/menu-search-list.js",
    "importStyle": "MenuSearchList",
    "description": "MenuSearchList 组件 ，显示聊天搜索结果列表界面",
    "examples": [
      "import MenuSearchList from './menu-search-list';\n<MenuSearchList />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MenuSearchList"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2709,
    "kind": "get",
    "name": "MenuSearchList",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList.MenuSearchList",
    "access": "public",
    "description": "获取 MenuSearchList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MenuSearchList} from './menu-search-list';\n<MenuSearchList />"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MenuSearchList>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2710,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "static": true,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2711,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "static": true,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2712,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 MenuSearchList 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2713,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "static": false,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2714,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 104,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2715,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList#componentWillReceiveProps",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillReceiveProps`\n在装配了的组件接收到新属性前调用。若你需要更新状态响应属性改变（例如，重置它），你可能需对比this.props和nextProps并在该方法中使用this.setState()处理状态改变。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#unsafe_componentwillreceiveprops"
    ],
    "lineNumber": 152,
    "todo": [
      "考虑使用 `UNSAFE_componentWillReceiveProps` 替换 `componentWillReceiveProps`"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2716,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 168,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2717,
    "kind": "member",
    "name": "handleItemContextMenu",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "static": false,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList#handleItemContextMenu",
    "access": "private",
    "description": "处理聊天右键菜单事件",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2718,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 197,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2719,
    "kind": "member",
    "name": "select",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "static": false,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList#select",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2720,
    "kind": "member",
    "name": "chats",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "static": false,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList#chats",
    "access": "public",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2721,
    "kind": "member",
    "name": "selectIndex",
    "memberof": "app/views/chats/menu-search-list.js~MenuSearchList",
    "static": false,
    "longname": "app/views/chats/menu-search-list.js~MenuSearchList#selectIndex",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2722,
    "kind": "file",
    "name": "app/views/chats/menu.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes, getSearchParam} from '../../utils/html-helper';\nimport {MenuHeader} from './menu-header';\nimport {MenuList} from './menu-list';\nimport replaceViews from '../replace-views';\n\n/**\n * Menu 组件 ，显示聊天列表界面\n * @class Menu\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import Menu from './menu';\n * <Menu />\n */\nexport default class Menu extends Component {\n    /**\n     * 获取 Menu 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<Menu>}\n     * @readonly\n     * @static\n     * @memberof Menu\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {Menu} from './menu';\n     * <Menu />\n     */\n    static get Menu() {\n        return replaceViews('chats/menu', Menu);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Menu\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        filter: PropTypes.string,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Menu\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        filter: null,\n        children: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 Menu 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * 默认搜索字符串\n         * @type {string}\n         * @private\n         */\n        this.defaultSearch = getSearchParam('search');\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            search: this.defaultSearch,\n            searchFocus: false\n        };\n    }\n\n    /**\n     * 处理搜索字符串变更事件\n     * @param {string} search 搜索字符串\n     * @memberof Menu\n     * @private\n     * @return {void}\n     */\n    handleSearchChange = search => {\n        this.setState({search});\n    };\n\n    /**\n     * 处理搜索框获得焦点事件\n     * @param {boolean} searchFocus 搜索框是否获得焦点\n     * @memberof Menu\n     * @private\n     * @return {void}\n     */\n    handleSearchFocusChange = searchFocus => {\n        if (this.blurSearchTimer) {\n            clearTimeout(this.blurSearchTimer);\n        }\n        if (searchFocus) {\n            this.setState({searchFocus});\n        } else {\n            this.blurSearchTimer = setTimeout(() => {\n                this.setState({searchFocus: false});\n                this.blurSearchTimer = null;\n            }, 200);\n        }\n    };\n\n    /**\n     * 处理请求清空搜索框事件\n     *\n     * @memberof Menu\n     * @return {void}\n     */\n    onRequestClearSearch = () => {\n        this.menuHeader.clearSearch();\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Menu\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            filter,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        return (<div className={classes('app-chats-menu primary-pale', className)} {...other}>\n            <MenuHeader\n                ref={e => {this.menuHeader = e;}}\n                filter={filter}\n                defaultSearch={this.defaultSearch}\n                onSearchChange={this.handleSearchChange}\n                onSearchFocus={this.handleSearchFocusChange}\n                className=\"dock-top\"\n            />\n            <MenuList onRequestClearSearch={this.onRequestClearSearch} search={this.state.searchFocus ? this.state.search : ''} filter={filter} className=\"dock-bottom\" />\n            {children}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/menu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2723,
    "kind": "class",
    "name": "Menu",
    "memberof": "app/views/chats/menu.js",
    "static": true,
    "longname": "app/views/chats/menu.js~Menu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/menu.js",
    "importStyle": "Menu",
    "description": "Menu 组件 ，显示聊天列表界面",
    "examples": [
      "import Menu from './menu';\n<Menu />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Menu"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2724,
    "kind": "get",
    "name": "Menu",
    "memberof": "app/views/chats/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/menu.js~Menu.Menu",
    "access": "public",
    "description": "获取 Menu 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {Menu} from './menu';\n<Menu />"
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<Menu>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2725,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/menu.js~Menu",
    "static": true,
    "longname": "app/views/chats/menu.js~Menu.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2726,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/menu.js~Menu",
    "static": true,
    "longname": "app/views/chats/menu.js~Menu.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2727,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu.js~Menu#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 Menu 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2728,
    "kind": "member",
    "name": "defaultSearch",
    "memberof": "app/views/chats/menu.js~Menu",
    "static": false,
    "longname": "app/views/chats/menu.js~Menu#defaultSearch",
    "access": "private",
    "description": "默认搜索字符串",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2729,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/menu.js~Menu",
    "static": false,
    "longname": "app/views/chats/menu.js~Menu#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2730,
    "kind": "member",
    "name": "handleSearchChange",
    "memberof": "app/views/chats/menu.js~Menu",
    "static": false,
    "longname": "app/views/chats/menu.js~Menu#handleSearchChange",
    "access": "private",
    "description": "处理搜索字符串变更事件",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "搜索字符串"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2731,
    "kind": "member",
    "name": "handleSearchFocusChange",
    "memberof": "app/views/chats/menu.js~Menu",
    "static": false,
    "longname": "app/views/chats/menu.js~Menu#handleSearchFocusChange",
    "access": "private",
    "description": "处理搜索框获得焦点事件",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "searchFocus",
        "description": "搜索框是否获得焦点"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2732,
    "kind": "member",
    "name": "blurSearchTimer",
    "memberof": "app/views/chats/menu.js~Menu",
    "longname": "app/views/chats/menu.js~Menu#blurSearchTimer",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2734,
    "kind": "member",
    "name": "onRequestClearSearch",
    "memberof": "app/views/chats/menu.js~Menu",
    "static": false,
    "longname": "app/views/chats/menu.js~Menu#onRequestClearSearch",
    "access": "public",
    "description": "处理请求清空搜索框事件",
    "lineNumber": 123,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2735,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/menu.js~Menu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/menu.js~Menu#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 135,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2736,
    "kind": "member",
    "name": "menuHeader",
    "memberof": "app/views/chats/menu.js~Menu",
    "static": false,
    "longname": "app/views/chats/menu.js~Menu#menuHeader",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2737,
    "kind": "file",
    "name": "app/views/chats/message-broadcast.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport Avatar from '../../components/avatar';\nimport App from '../../core';\nimport StringHelper from '../../utils/string-helper';\nimport replaceViews from '../replace-views';\n\n/**\n * MessageBroadcast 组件 ，显示广播聊天消息条目\n * @class MessageBroadcast\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MessageBroadcast from './message-broadcast';\n * <MessageBroadcast />\n */\nexport default class MessageBroadcast extends Component {\n    /**\n     * 获取 MessageBroadcast 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MessageBroadcast>}\n     * @readonly\n     * @static\n     * @memberof MessageBroadcast\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MessageBroadcast} from './message-broadcast';\n     * <MessageBroadcast />\n     */\n    static get MessageBroadcast() {\n        return replaceViews('chats/message-broadcast', MessageBroadcast);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MessageBroadcast\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        prefix: PropTypes.string,\n        children: PropTypes.any,\n        contentConverter: PropTypes.func,\n        message: PropTypes.object.isRequired,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MessageBroadcast\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        prefix: null,\n        children: null,\n        contentConverter: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof MessageBroadcast\n     */\n    shouldComponentUpdate(nextProps) {\n        return nextProps.className !== this.props.className || nextProps.message !== this.props.message || nextProps.message.content !== this.props.message.content;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MessageBroadcast\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            message,\n            className,\n            children,\n            prefix,\n            contentConverter,\n            ...other\n        } = this.props;\n\n        let content = message.renderedTextContent(content => {\n            return content.replace(/我/g, `@${message.getSender(App.members).account}${content.substr(1)}`);\n        }, App.im.ui.renderChatMessageContent, App.im.ui.linkMembersInText);\n\n        if (StringHelper.isNotEmpty(prefix)) {\n            content = prefix + content;\n        }\n\n        return (<div className={classes('app-message-broadcast has-padding-xs space-sm primary-pale flex-inline flex-middle row single', className)} {...other}>\n            <Avatar className=\"avatar-sm flex-none\" icon=\"bell text-secondary\" />\n            <div\n                className=\"content markdown-content\"\n                dangerouslySetInnerHTML={{__html: contentConverter ? contentConverter(content) : content}}\n            />\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/message-broadcast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2738,
    "kind": "class",
    "name": "MessageBroadcast",
    "memberof": "app/views/chats/message-broadcast.js",
    "static": true,
    "longname": "app/views/chats/message-broadcast.js~MessageBroadcast",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/message-broadcast.js",
    "importStyle": "MessageBroadcast",
    "description": "MessageBroadcast 组件 ，显示广播聊天消息条目",
    "examples": [
      "import MessageBroadcast from './message-broadcast';\n<MessageBroadcast />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MessageBroadcast"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2739,
    "kind": "get",
    "name": "MessageBroadcast",
    "memberof": "app/views/chats/message-broadcast.js~MessageBroadcast",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-broadcast.js~MessageBroadcast.MessageBroadcast",
    "access": "public",
    "description": "获取 MessageBroadcast 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MessageBroadcast} from './message-broadcast';\n<MessageBroadcast />"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MessageBroadcast>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2740,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/message-broadcast.js~MessageBroadcast",
    "static": true,
    "longname": "app/views/chats/message-broadcast.js~MessageBroadcast.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2741,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/message-broadcast.js~MessageBroadcast",
    "static": true,
    "longname": "app/views/chats/message-broadcast.js~MessageBroadcast.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2742,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/message-broadcast.js~MessageBroadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-broadcast.js~MessageBroadcast#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2743,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/message-broadcast.js~MessageBroadcast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-broadcast.js~MessageBroadcast#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 83,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2744,
    "kind": "file",
    "name": "app/views/chats/message-content-card.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport {openUrl} from '../../core/ui';\nimport replaceViews from '../replace-views';\nimport Button from '../../components/button';\nimport Avatar from '../../components/avatar';\nimport StringHelper from '../../utils/string-helper';\nimport Lang from '../../lang';\nimport WebView from '../common/webview';\n\n/**\n * 处理动作按钮点击事件\n * @param {{url: string}} action 动作对象\n * @param {Event} e 事件对象\n * @return {void}\n * @private\n */\nconst handleActionButtonClick = (action, e) => {\n    if (action.url && openUrl(action.url, e.target)) {\n        e.stopPropagation();\n    } else if (action.click) {\n        action.click(e);\n        e.stopPropagation();\n    }\n};\n\n/**\n * 处理菜单图标点击事件\n * @param {{click: function(event: Event)}} menuItem 动作对象\n * @param {Event} e 事件对象\n * @return {void}\n * @private\n */\nconst handleMenuIconClick = (menuItem, e) => {\n    if (menuItem.click) {\n        menuItem.click(e);\n        e.stopPropagation();\n    }\n};\n\n/**\n * MessageContentCard 组件 ，显示消息卡片界面\n * @class MessageContentCard\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MessageContentCard from './message-content-card';\n * <MessageContentCard />\n */\nexport default class MessageContentCard extends Component {\n    /**\n     * 获取 MessageContentCard 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MessageContentCard>}\n     * @readonly\n     * @static\n     * @memberof MessageContentCard\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MessageContentCard} from './message-content-card';\n     * <MessageContentCard />\n     */\n    static get MessageContentCard() {\n        return replaceViews('chats/message-content-card', MessageContentCard);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MessageContentCard\n     * @type {Object}\n     */\n    static propTypes = {\n        baseClassName: PropTypes.string,\n        card: PropTypes.object.isRequired,\n        className: PropTypes.string,\n        header: PropTypes.any,\n        children: PropTypes.any,\n        style: PropTypes.object,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MessageContentCard\n     * @static\n     */\n    static defaultProps = {\n        baseClassName: 'layer rounded shadow-2',\n        className: '',\n        header: null,\n        style: null,\n        children: null,\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MessageContentCard\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            card,\n            className,\n            baseClassName,\n            header,\n            children,\n            style,\n            ...other\n        } = this.props;\n\n        const {\n            image, title, subtitle, content, icon, actions, url, htmlContent, webviewContent, contentType, contentUrl, originContentType, menu, provider, clickable,\n        } = card;\n        let topView = null;\n        if (contentUrl) {\n            if (contentType === 'image') {\n                topView = <img src={contentUrl} alt={contentUrl} />;\n            } else if (contentType === 'video') {\n                topView = (\n                    <video controls>\n                        <source src={contentUrl} type={originContentType} />\n                    </video>\n                );\n            }\n        }\n        if (!topView && image) {\n            topView = React.isValidElement(image) ? image : <div className=\"img\" style={{backgroundImage: `url(${image})`}} />;\n        }\n\n        const titleView = title ? (React.isValidElement(title) ? title : <h4>{title}</h4>) : null;\n        const subTitleView = subtitle ? (React.isValidElement(subtitle) ? subtitle : <h5>{subtitle}</h5>) : null;\n        const avatarView = icon ? Avatar.render(icon) : null;\n\n        let contentView = null;\n        if (StringHelper.isNotEmpty(content)) {\n            if (React.isValidElement(content)) {\n                contentView = content;\n            } else if (webviewContent) {\n                contentView = <WebView className=\"relative\" {...content} />;\n            } else if (htmlContent) {\n                contentView = <div className=\"content\" dangerouslySetInnerHTML={{__html: content}} />;\n            } else {\n                contentView = <div className=\"content\">{content}</div>;\n            }\n        }\n\n        const actionsButtons = [];\n        if (actions) {\n            actions.forEach((action, idx) => {\n                actionsButtons.push(<Button className={action.btnClass || 'rounded primary outline'} key={idx} label={action.label} icon={action.icon} onClick={handleActionButtonClick.bind(this, action)} />);\n            });\n        }\n\n        const cardsMenu = [];\n        if (menu && menu.length) {\n            menu.forEach((menuItem, menuItemIndex) => {\n                cardsMenu.push(<div key={menuItemIndex} className=\"hint--top-left\" data-hint={menuItem.label}><a className=\"btn rounded iconbutton\" onClick={menuItem.click ? handleMenuIconClick.bind(this, menuItem) : null} href={menuItem.url}><Avatar auto={menuItem.icon} className=\"avatar-sm\" /></a></div>);\n            });\n        }\n        if (provider) {\n            cardsMenu.push(<div key=\"provider\" className=\"hint--top-left\" data-hint={Lang.format('chat.message.provider.format', provider.label || provider.name)}><a className=\"btn rounded iconbutton\" onClick={provider.click} href={provider.url}><Avatar auto={provider.icon} className=\"avatar-sm\" /></a></div>);\n        }\n\n        const clickView = (clickable && clickable !== true) ? <a className=\"dock\" href={url || contentUrl} title={titleView ? title : null} /> : null;\n        return (<div\n            className={classes('app-message-card', baseClassName, className, {\n                'app-link state': clickable === true,\n                'with-avatar': !!avatarView,\n                'only-title': !contentView && !subTitleView && !actionsButtons.length\n            })}\n            data-url={url}\n            style={Object.assign({}, style, card.style)}\n            {...other}\n        >\n            {topView}\n            {(header || titleView || avatarView || subTitleView) ? <header>\n                {avatarView}\n                <hgroup>\n                    {titleView}\n                    {subTitleView}\n                    {clickable === 'title' ? clickView : null}\n                </hgroup>\n                {header}\n                {clickable === 'header' ? clickView : null}\n            </header> : null}\n            {contentView}\n            {clickable === 'content' ? clickView : null}\n            {actionsButtons && actionsButtons.length ? <nav className=\"nav actions gray\">{actionsButtons}</nav> : null}\n            {children}\n            {cardsMenu && cardsMenu.length ? <div className=\"app-menu-card-menu\">{cardsMenu}</div> : null}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/message-content-card.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2745,
    "kind": "function",
    "name": "handleActionButtonClick",
    "memberof": "app/views/chats/message-content-card.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-content-card.js~handleActionButtonClick",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/message-content-card.js",
    "importStyle": null,
    "description": "处理动作按钮点击事件",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "{url: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "动作对象"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2746,
    "kind": "function",
    "name": "handleMenuIconClick",
    "memberof": "app/views/chats/message-content-card.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-content-card.js~handleMenuIconClick",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/message-content-card.js",
    "importStyle": null,
    "description": "处理菜单图标点击事件",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "{click: function(event: Event)}"
        ],
        "spread": false,
        "optional": false,
        "name": "menuItem",
        "description": "动作对象"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2747,
    "kind": "class",
    "name": "MessageContentCard",
    "memberof": "app/views/chats/message-content-card.js",
    "static": true,
    "longname": "app/views/chats/message-content-card.js~MessageContentCard",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/message-content-card.js",
    "importStyle": "MessageContentCard",
    "description": "MessageContentCard 组件 ，显示消息卡片界面",
    "examples": [
      "import MessageContentCard from './message-content-card';\n<MessageContentCard />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MessageContentCard"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2748,
    "kind": "get",
    "name": "MessageContentCard",
    "memberof": "app/views/chats/message-content-card.js~MessageContentCard",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-content-card.js~MessageContentCard.MessageContentCard",
    "access": "public",
    "description": "获取 MessageContentCard 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MessageContentCard} from './message-content-card';\n<MessageContentCard />"
    ],
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MessageContentCard>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2749,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/message-content-card.js~MessageContentCard",
    "static": true,
    "longname": "app/views/chats/message-content-card.js~MessageContentCard.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2750,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/message-content-card.js~MessageContentCard",
    "static": true,
    "longname": "app/views/chats/message-content-card.js~MessageContentCard.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2751,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/message-content-card.js~MessageContentCard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-card.js~MessageContentCard#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 105,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2752,
    "kind": "file",
    "name": "app/views/chats/message-content-file.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport {FileListItem} from '../common/file-list-item';\nimport replaceViews from '../replace-views';\n\n/**\n * MessageContentFile 组件 ，显示聊天消息文件内容界面\n * @class MessageContentFile\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MessageContentFile from './message-content-file';\n * <MessageContentFile />\n */\nexport default class MessageContentFile extends Component {\n    /**\n     * 获取 MessageContentFile 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MessageContentFile>}\n     * @readonly\n     * @static\n     * @memberof MessageContentFile\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MessageContentFile} from './message-content-file';\n     * <MessageContentFile />\n     */\n    static get MessageContentFile() {\n        return replaceViews('chats/chat-content-file', MessageContentFile);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MessageContentFile\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        message: PropTypes.object.isRequired,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MessageContentFile\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof MessageContentFile\n     */\n    shouldComponentUpdate(nextProps) {\n        return nextProps.className !== this.props.className || nextProps.message !== this.props.message || nextProps.message.updateId !== this.lastMessageUpdateId;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MessageContentFile\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            message,\n            className,\n            ...other\n        } = this.props;\n\n        const content = message.fileContent;\n        this.lastMessageUpdateId = message.updateId;\n\n        return <FileListItem className={HTML.classes('app-message-content-file layer rounded flex-inline shadow-2 list-item', className)} file={content} {...other} />;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/message-content-file.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2753,
    "kind": "class",
    "name": "MessageContentFile",
    "memberof": "app/views/chats/message-content-file.js",
    "static": true,
    "longname": "app/views/chats/message-content-file.js~MessageContentFile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/message-content-file.js",
    "importStyle": "MessageContentFile",
    "description": "MessageContentFile 组件 ，显示聊天消息文件内容界面",
    "examples": [
      "import MessageContentFile from './message-content-file';\n<MessageContentFile />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MessageContentFile"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2754,
    "kind": "get",
    "name": "MessageContentFile",
    "memberof": "app/views/chats/message-content-file.js~MessageContentFile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-content-file.js~MessageContentFile.MessageContentFile",
    "access": "public",
    "description": "获取 MessageContentFile 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MessageContentFile} from './message-content-file';\n<MessageContentFile />"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MessageContentFile>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2755,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/message-content-file.js~MessageContentFile",
    "static": true,
    "longname": "app/views/chats/message-content-file.js~MessageContentFile.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2756,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/message-content-file.js~MessageContentFile",
    "static": true,
    "longname": "app/views/chats/message-content-file.js~MessageContentFile.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2757,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/message-content-file.js~MessageContentFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-file.js~MessageContentFile#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2758,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/message-content-file.js~MessageContentFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-file.js~MessageContentFile#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2759,
    "kind": "member",
    "name": "lastMessageUpdateId",
    "memberof": "app/views/chats/message-content-file.js~MessageContentFile",
    "static": false,
    "longname": "app/views/chats/message-content-file.js~MessageContentFile#lastMessageUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2760,
    "kind": "file",
    "name": "app/views/chats/message-content-image.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types'; // eslint-disable-line\nimport Platform from 'Platform';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport Lang from '../../lang';\nimport Emojione from '../../components/emojione';\nimport ImageViewer from '../../components/image-viewer';\nimport replaceViews from '../replace-views';\nimport ImageHolder from '../../components/image-holder';\nimport FileData from '../../core/models/file-data';\nimport {showContextMenu} from '../../core/context-menu';\n\n/**\n * 当前是否为浏览器平台\n * @type {boolean}\n * @private\n */\nconst isBrowser = Platform.type === 'browser';\n\n/**\n * MessageContentImage 组件 ，显示聊天消息图片内容界面\n * @class MessageContentImage\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MessageContentImage from './message-content-image';\n * <MessageContentImage />\n */\nexport default class MessageContentImage extends Component {\n    /**\n     * 获取 MessageContentImage 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MessageContentImage>}\n     * @readonly\n     * @static\n     * @memberof MessageContentImage\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MessageContentImage} from './message-content-image';\n     * <MessageContentImage />\n     */\n    static get MessageContentImage() {\n        return replaceViews('chats/message-content-image', MessageContentImage);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MessageContentImage\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        message: PropTypes.object.isRequired,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MessageContentImage\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 MessageContentImage 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        const {message} = this.props;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            download: null,\n            url: message.attachFile ? message.attachFile.viewUrl : ''\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof MessageContentImage\n     * @return {void}\n     */\n    componentDidMount() {\n        const {message} = this.props;\n        const image = message.imageContent;\n        if (!this.state.url && image.id && image.send === true) {\n            this.downloadImage(image);\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof MessageContentImage\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps.className !== this.props.className || nextProps.message !== this.props.message || nextProps.message.updateId !== this.lastMessageUpdateId || nextState.download !== this.state.download || nextState.url || this.state.url;\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidUpdate`\n     * componentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。\n     *\n     * @param {Object} prevProps 更新前的属性值\n     * @param {Object} prevState 更新前的状态值\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidUpdate\n     * @private\n     * @memberof MessageContentImage\n     * @return {void}\n     */\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof MessageContentImage\n     * @return {void}\n     */\n    componentWillUnmount() {\n        this.unMounted = true;\n    }\n\n    /**\n     * 下载图片\n     *\n     * @param {FileData|Object} image 图片对象\n     * @memberof MessageContentImage\n     */\n    downloadImage(image) {\n        if (this.state.download === null) {\n            App.im.files.downloadFile(image, progress => {\n                if (this.unMounted) return;\n                this.setState({download: progress});\n            }).then(file => {\n                if (this.unMounted) return;\n                this.setState({url: isBrowser ? file.url : `file://${file.localPath}`, download: true});\n            }).catch(error => {\n                if (this.unMounted) return;\n                this.setState({download: false});\n            });\n        }\n    }\n\n    /**\n     * 处理图片右键菜单事件\n     * @param {Event} event 事件对象\n     * @memberof MessageContentImage\n     * @private\n     * @return {void}\n     */\n    handleImageContextMenu = event => {\n        if (isBrowser) return;\n        showContextMenu('image', {\n            event,\n            url: this.state.url || this.imageUrl,\n            dataType: this.imageType,\n            file: this.props.message.attachFile\n        });\n    };\n\n    /**\n     * 处理表情右键菜单事件\n     * @param {Event} event 事件对象\n     * @memberof MessageContentImage\n     * @private\n     * @return {void}\n     */\n    handleEmojiContextMenu = event => {\n        if (isBrowser) return;\n        const image = this.props.message.imageContent;\n        showContextMenu('emoji', {event, emoji: Emojione.shortnameToUnicode(image.content)});\n    };\n\n    /**\n     * 处理双击图片事件\n     * @param {Event} event 事件对象\n     * @memberof MessageContentImage\n     * @private\n     * @return {void}\n     */\n    handleImageDoubleClick = () => {\n        ImageViewer.show(this.state.url || this.imageUrl, null, null);\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MessageContentImage\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            message,\n            className,\n            ...other\n        } = this.props;\n\n        this.lastMessageUpdateId = message.updateId;\n        let image = message.imageContent;\n\n        if (image.type === 'emoji') {\n            return (<div\n                {...other}\n                onContextMenu={this.handleEmojiContextMenu}\n                className={classes(' emojione-hd', className)}\n                dangerouslySetInnerHTML={{__html: Emojione.toImage(image.content)}}\n            />);\n        }\n        if (image.type === 'base64') {\n            this.imageUrl = image.content;\n            this.imageType = image.type;\n            return (<img\n                onContextMenu={this.handleImageContextMenu}\n                data-fail={Lang.string('file.downloadFailed')}\n                onError={e => e.target.classList.add('broken')}\n                onDoubleClick={this.handleImageDoubleClick}\n                src={image.content}\n                alt={image.type}\n            />);\n        }\n        const holderProps = {\n            width: image.width,\n            height: image.height,\n            alt: image.name\n        };\n        image = FileData.create(image);\n\n        if (image.isOK) {\n            const imageUrl = this.state.url;\n            if (imageUrl) {\n                holderProps.status = 'ok';\n                holderProps.onContextMenu = this.handleImageContextMenu;\n                holderProps.source = imageUrl;\n                holderProps.onDoubleClick = this.handleImageDoubleClick;\n            } else {\n                holderProps.status = 'loading';\n                holderProps.progress = typeof this.state.download === 'number' ? this.state.download : 0;\n                holderProps.loadingText = Lang.string('file.loading');\n                if (!message.isSender(App.user.id)) {\n                    holderProps.progress = 50 + (holderProps.progress / 2);\n                }\n            }\n        } else if (typeof image.send === 'number') {\n            holderProps.status = 'loading';\n            holderProps.progress = image.send;\n            holderProps.previewUrl = this.state.url;\n            if (!message.isSender(App.user.id)) {\n                holderProps.loadingText = Lang.string('file.loading');\n                holderProps.progress /= 2;\n            } else {\n                holderProps.loadingText = Lang.string('file.sending');\n            }\n        } else {\n            holderProps.status = 'broken';\n        }\n\n        return <ImageHolder {...holderProps} />;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/message-content-image.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2761,
    "kind": "variable",
    "name": "isBrowser",
    "memberof": "app/views/chats/message-content-image.js",
    "static": true,
    "longname": "app/views/chats/message-content-image.js~isBrowser",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/message-content-image.js",
    "importStyle": null,
    "description": "当前是否为浏览器平台",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2762,
    "kind": "class",
    "name": "MessageContentImage",
    "memberof": "app/views/chats/message-content-image.js",
    "static": true,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/message-content-image.js",
    "importStyle": "MessageContentImage",
    "description": "MessageContentImage 组件 ，显示聊天消息图片内容界面",
    "examples": [
      "import MessageContentImage from './message-content-image';\n<MessageContentImage />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MessageContentImage"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2763,
    "kind": "get",
    "name": "MessageContentImage",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage.MessageContentImage",
    "access": "public",
    "description": "获取 MessageContentImage 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MessageContentImage} from './message-content-image';\n<MessageContentImage />"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MessageContentImage>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2764,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "static": true,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2765,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "static": true,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2766,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 MessageContentImage 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2767,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2768,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 99,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2769,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2770,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#componentDidUpdate",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidUpdate`\ncomponentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidUpdate"
    ],
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "更新前的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "更新前的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2771,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 145,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2772,
    "kind": "member",
    "name": "unMounted",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#unMounted",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2773,
    "kind": "method",
    "name": "downloadImage",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#downloadImage",
    "access": "public",
    "description": "下载图片",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "FileData",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "图片对象"
      }
    ],
    "return": null
  },
  {
    "__docId__": 2774,
    "kind": "member",
    "name": "handleImageContextMenu",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#handleImageContextMenu",
    "access": "private",
    "description": "处理图片右键菜单事件",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2775,
    "kind": "member",
    "name": "handleEmojiContextMenu",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#handleEmojiContextMenu",
    "access": "private",
    "description": "处理表情右键菜单事件",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2776,
    "kind": "member",
    "name": "handleImageDoubleClick",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#handleImageDoubleClick",
    "access": "private",
    "description": "处理双击图片事件",
    "lineNumber": 207,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2777,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 219,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2778,
    "kind": "member",
    "name": "lastMessageUpdateId",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#lastMessageUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2779,
    "kind": "member",
    "name": "imageUrl",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#imageUrl",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2780,
    "kind": "member",
    "name": "imageType",
    "memberof": "app/views/chats/message-content-image.js~MessageContentImage",
    "static": false,
    "longname": "app/views/chats/message-content-image.js~MessageContentImage#imageType",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2781,
    "kind": "file",
    "name": "app/views/chats/message-content-text.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport replaceViews from '../replace-views';\n\n/**\n * MessageContentText 组件 ，显示聊天消息文本内容界面\n * @class MessageContentText\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MessageContentText from './message-content-text';\n * <MessageContentText />\n */\nexport default class MessageContentText extends Component {\n    /**\n     * 获取 MessageContentText 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MessageContentText>}\n     * @readonly\n     * @static\n     * @memberof MessageContentText\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MessageContentText} from './message-content-text';\n     * <MessageContentText />\n     */\n    static get MessageContentText() {\n        return replaceViews('chats/message-content-text', MessageContentText);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MessageContentText\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        message: PropTypes.object.isRequired,\n        contentConverter: PropTypes.func,\n        fontSize: PropTypes.any\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MessageContentText\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        contentConverter: null,\n        fontSize: null\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof MessageContentText\n     */\n    shouldComponentUpdate(nextProps) {\n        return nextProps.className !== this.props.className || nextProps.contentConverter !== this.props.contentConverter || nextProps.message !== this.props.message || nextProps.message.content !== this.props.message.content || nextProps.fontSize !== this.props.fontSize;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MessageContentText\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            message,\n            className,\n            contentConverter,\n            fontSize,\n            ...other\n        } = this.props;\n\n        const content = message.renderedTextContent(App.im.ui.renderChatMessageContent, App.im.ui.linkMembersInText);\n\n        return (<div\n            {...other}\n            className={classes('app-message-content-text markdown-content', className, {\n                'is-content-block': message.isBlockContent\n            })}\n            dangerouslySetInnerHTML={{__html: contentConverter ? contentConverter(content) : content}}\n        />);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/message-content-text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2782,
    "kind": "class",
    "name": "MessageContentText",
    "memberof": "app/views/chats/message-content-text.js",
    "static": true,
    "longname": "app/views/chats/message-content-text.js~MessageContentText",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/message-content-text.js",
    "importStyle": "MessageContentText",
    "description": "MessageContentText 组件 ，显示聊天消息文本内容界面",
    "examples": [
      "import MessageContentText from './message-content-text';\n<MessageContentText />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MessageContentText"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2783,
    "kind": "get",
    "name": "MessageContentText",
    "memberof": "app/views/chats/message-content-text.js~MessageContentText",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-content-text.js~MessageContentText.MessageContentText",
    "access": "public",
    "description": "获取 MessageContentText 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MessageContentText} from './message-content-text';\n<MessageContentText />"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MessageContentText>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2784,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/message-content-text.js~MessageContentText",
    "static": true,
    "longname": "app/views/chats/message-content-text.js~MessageContentText.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2785,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/message-content-text.js~MessageContentText",
    "static": true,
    "longname": "app/views/chats/message-content-text.js~MessageContentText.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2786,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/message-content-text.js~MessageContentText",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-text.js~MessageContentText#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2787,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/message-content-text.js~MessageContentText",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-text.js~MessageContentText#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 79,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2788,
    "kind": "file",
    "name": "app/views/chats/message-content-url.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport replaceViews from '../replace-views';\nimport MessageContentCard from './message-content-card';\nimport {getUrlMeta} from '../../core/ui';\nimport WebView from '../common/webview';\nimport Lang from '../../lang';\nimport Button from '../../components/button';\n\n/**\n * MessageContentUrl 组件 ，显示聊天消息网址卡片内容界面\n * @class MessageContentUrl\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import MessageContentUrl from './message-content-url';\n * <MessageContentUrl />\n */\nexport default class MessageContentUrl extends PureComponent {\n    /**\n     * 获取 MessageContentUrl 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MessageContentUrl>}\n     * @readonly\n     * @static\n     * @memberof MessageContentUrl\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MessageContentUrl} from './message-content-url';\n     * <MessageContentUrl />\n     */\n    static get MessageContentUrl() {\n        return replaceViews('chats/message-content-url', MessageContentUrl);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MessageContentUrl\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        url: PropTypes.string.isRequired,\n        data: PropTypes.object,\n        sleep: PropTypes.bool,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MessageContentUrl\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        data: null,\n        sleep: false\n    };\n\n    /**\n     * React 组件构造函数，创建一个 MessageContentUrl 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        const {data, sleep} = props;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {meta: data && data.title ? data : null, sleep};\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof MessageContentUrl\n     * @return {void}\n     */\n    componentDidMount() {\n        this.getUrlMeta();\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillReceiveProps`\n     * 在装配了的组件接收到新属性前调用。若你需要更新状态响应属性改变（例如，重置它），你可能需对比this.props和nextProps并在该方法中使用this.setState()处理状态改变。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @see https://doc.react-china.org/docs/react-component.html#unsafe_componentwillreceiveprops\n     * @private\n     * @memberof MessageContentUrl\n     * @return {void}\n     * @todo 考虑使用 `UNSAFE_componentWillReceiveProps` 替换 `componentWillReceiveProps`\n     */\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.url !== this.props.url) {\n            this.setState({meta: null});\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof MessageContentUrl\n     * @return {void}\n     */\n    componentWillUnmount() {\n        this.unmounted = true;\n    }\n\n    /**\n     * 获取网址信息\n     *\n     * @param {boolean} [disableCache=false] 是否禁用缓存\n     * @memberof MessageContentUrl\n     * @return {void}\n     */\n    getUrlMeta(disableCache = false) {\n        if (this.state.meta && !this.state.loading) {\n            return;\n        }\n        const {url} = this.props;\n        getUrlMeta(url, disableCache).then(meta => {\n            if (this.unmounted) {\n                return;\n            }\n            return this.setState({meta, loading: false});\n        }).catch(_ => {\n            if (this.unmounted) {\n                return;\n            }\n            if (DEBUG) {\n                console.error('Get url meta error', _);\n            }\n            return this.setState({meta: {url, title: url}, loading: false});\n        });\n    }\n\n    /**\n     * 获取网址信息（禁用缓存）\n     *\n     * @memberof MessageContentUrl\n     * @return {void}\n     */\n    tryGetUrlMeta() {\n        this.setState({loading: true}, () => {\n            this.getUrlMeta(true);\n        });\n    }\n\n    /**\n     * 尝试强制获取网址信息\n     *\n     * @memberof MessageContentUrl\n     * @return {void}\n     */\n    loadSleep = () => {\n        this.setState({sleep: false, loading: true}, () => {\n            this.getUrlMeta(true);\n        });\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MessageContentUrl\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            url,\n            className,\n            data,\n            sleep,\n            ...other\n        } = this.props;\n\n        const {meta, loading} = this.state;\n\n        if (this.state.sleep) {\n            const card = {\n                icon: 'mdi-web icon-2x text-info',\n                clickable: 'title',\n                url,\n                title: url,\n            };\n            const reloadBtn = (<div className=\"flex-none hint--top has-padding-sm\" data-hint={Lang.string('chat.message.loadCard')}><Button onClick={this.loadSleep} className=\"iconbutton rounded text-primary\" icon=\"mdi-cards-playing-outline\" /></div>);\n            return <MessageContentCard header={reloadBtn} card={card} className={classes('app-message-content-url relative')} {...other} />;\n        }\n\n        const card = Object.assign({\n            clickable: 'content',\n            title: url,\n        }, meta, {\n            icon: (meta && !loading) ? (meta.icon === false ? null : (meta.icon || 'mdi-web icon-2x text-info')) : 'mdi-loading muted spin',\n        });\n\n        if (meta && !loading) {\n            if (!card.menu) {\n                card.menu = [];\n            }\n            const {webviewContent, content} = card;\n            if (webviewContent) {\n                const {originSrc, ...webviewProps} = content;\n                card.content = <WebView className=\"relative\" {...webviewProps} ref={e => {this.webview = e;}} />;\n                card.clickable = 'header';\n                card.menu.push({\n                    label: Lang.string('common.moreActions'),\n                    url: `!showContextMenu/link/?url=${encodeURIComponent(url)}`,\n                    icon: 'mdi-share',\n                }, {\n                    label: Lang.string('ext.app.open'),\n                    url: `!openUrlInDialog/${encodeURIComponent(originSrc || content.src)}/?size=lg&insertCss=${encodeURIComponent(content.insertCss)}`,\n                    icon: 'mdi-open-in-app'\n                });\n                if (DEBUG && content.type !== 'iframe') {\n                    card.menu.push({\n                        label: Lang.string('ext.app.openDevTools'),\n                        click: () => {\n                            if (this.webview && this.webview.webview && this.webview.webview.openDevTools) {\n                                this.webview.webview.openDevTools();\n                            } else if (DEBUG) {\n                                console.warn('Cannot open dev tools for current webview.');\n                            }\n                        },\n                        icon: 'mdi-auto-fix'\n                    });\n                }\n            }\n            card.menu.push({\n                label: Lang.string('chat.message.refreshCard'),\n                click: () => {\n                    if (this.webview) {\n                        this.webview.reloadWebview();\n                    } else {\n                        this.tryGetUrlMeta();\n                    }\n                },\n                icon: 'mdi-refresh'\n            });\n        }\n\n        return <MessageContentCard card={card} className={classes('app-message-content-url relative')} {...other} />;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/message-content-url.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2789,
    "kind": "class",
    "name": "MessageContentUrl",
    "memberof": "app/views/chats/message-content-url.js",
    "static": true,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/message-content-url.js",
    "importStyle": "MessageContentUrl",
    "description": "MessageContentUrl 组件 ，显示聊天消息网址卡片内容界面",
    "examples": [
      "import MessageContentUrl from './message-content-url';\n<MessageContentUrl />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MessageContentUrl"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 2790,
    "kind": "get",
    "name": "MessageContentUrl",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl.MessageContentUrl",
    "access": "public",
    "description": "获取 MessageContentUrl 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MessageContentUrl} from './message-content-url';\n<MessageContentUrl />"
    ],
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MessageContentUrl>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2791,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "static": true,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2792,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "static": true,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2793,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 MessageContentUrl 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2794,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2795,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 90,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2796,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#componentWillReceiveProps",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillReceiveProps`\n在装配了的组件接收到新属性前调用。若你需要更新状态响应属性改变（例如，重置它），你可能需对比this.props和nextProps并在该方法中使用this.setState()处理状态改变。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#unsafe_componentwillreceiveprops"
    ],
    "lineNumber": 105,
    "todo": [
      "考虑使用 `UNSAFE_componentWillReceiveProps` 替换 `componentWillReceiveProps`"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2797,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 121,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2798,
    "kind": "member",
    "name": "unmounted",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#unmounted",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2799,
    "kind": "method",
    "name": "getUrlMeta",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#getUrlMeta",
    "access": "public",
    "description": "获取网址信息",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "disableCache",
        "description": "是否禁用缓存"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2800,
    "kind": "method",
    "name": "tryGetUrlMeta",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#tryGetUrlMeta",
    "access": "public",
    "description": "获取网址信息（禁用缓存）",
    "lineNumber": 159,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2801,
    "kind": "member",
    "name": "loadSleep",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#loadSleep",
    "access": "public",
    "description": "尝试强制获取网址信息",
    "lineNumber": 171,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2802,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 185,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2803,
    "kind": "member",
    "name": "webview",
    "memberof": "app/views/chats/message-content-url.js~MessageContentUrl",
    "static": false,
    "longname": "app/views/chats/message-content-url.js~MessageContentUrl#webview",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2804,
    "kind": "file",
    "name": "app/views/chats/message-divider.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport DateHelper from '../../utils/date-helper';\nimport Lang from '../../lang';\nimport replaceViews from '../replace-views';\n\n/**\n * MessageDivider 组件 ，显示聊天列表分隔线界面\n * @class MessageDivider\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import MessageDivider from './message-divider';\n * <MessageDivider />\n */\nexport default class MessageDivider extends PureComponent {\n    /**\n     * 获取 MessageDivider 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MessageDivider>}\n     * @readonly\n     * @static\n     * @memberof MessageDivider\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MessageDivider} from './message-divider';\n     * <MessageDivider />\n     */\n    static get MessageDivider() {\n        return replaceViews('chats/message-divider', MessageDivider);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MessageDivider\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        children: PropTypes.any,\n        date: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MessageDivider\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        date: null,\n        children: null,\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MessageDivider\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            date,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        let dateStr = null;\n        if (date) {\n            dateStr = DateHelper.formatDate(date, 'YYYY-M-d');\n            if (DateHelper.isToday(date)) {\n                dateStr = `${Lang.string('time.today')} ${dateStr}`;\n            } else if (DateHelper.isYestoday(date)) {\n                dateStr = `${Lang.string('time.yestoday')} ${dateStr}`;\n            }\n        }\n\n        return (<div className={HTML.classes('app-message-divider', className)} {...other}>\n            <div className=\"content\">{dateStr}{children}</div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/message-divider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2805,
    "kind": "class",
    "name": "MessageDivider",
    "memberof": "app/views/chats/message-divider.js",
    "static": true,
    "longname": "app/views/chats/message-divider.js~MessageDivider",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/message-divider.js",
    "importStyle": "MessageDivider",
    "description": "MessageDivider 组件 ，显示聊天列表分隔线界面",
    "examples": [
      "import MessageDivider from './message-divider';\n<MessageDivider />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MessageDivider"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 2806,
    "kind": "get",
    "name": "MessageDivider",
    "memberof": "app/views/chats/message-divider.js~MessageDivider",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-divider.js~MessageDivider.MessageDivider",
    "access": "public",
    "description": "获取 MessageDivider 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MessageDivider} from './message-divider';\n<MessageDivider />"
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MessageDivider>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2807,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/message-divider.js~MessageDivider",
    "static": true,
    "longname": "app/views/chats/message-divider.js~MessageDivider.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2808,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/message-divider.js~MessageDivider",
    "static": true,
    "longname": "app/views/chats/message-divider.js~MessageDivider.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2809,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/message-divider.js~MessageDivider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-divider.js~MessageDivider#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 66,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2810,
    "kind": "file",
    "name": "app/views/chats/message-list-item.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport {formatDate, isSameDay, isToday} from '../../utils/date-helper';\nimport App from '../../core';\nimport Lang from '../../lang';\nimport Icon from '../../components/icon';\nimport MemberProfileDialog from '../common/member-profile-dialog';\nimport {UserAvatar} from '../common/user-avatar';\nimport {MessageDivider} from './message-divider';\nimport {MessageContentFile} from './message-content-file';\nimport {MessageContentImage} from './message-content-image';\nimport {MessageContentText} from './message-content-text';\nimport {MessageBroadcast} from './message-broadcast';\nimport {NotificationMessage} from './notification-message';\nimport {MessageContentUrl} from './message-content-url';\nimport replaceViews from '../replace-views';\nimport ChatMessage from '../../core/models/chat-message';\nimport {showContextMenu} from '../../core/context-menu';\n\n/**\n * 连续的聊天消息显示时间标签最小时间间隔，单位毫秒\n * @type {number}\n * @private\n */\nconst showTimeLabelInterval = 1000 * 60 * 5;\n\n/**\n * MessageListItem 组件 ，显示聊天列表条目界面\n * @class MessageListItem\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MessageListItem from './message-list-item';\n * <MessageListItem />\n */\nexport default class MessageListItem extends Component {\n    /**\n     * 获取 MessageListItem 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MessageListItem>}\n     * @readonly\n     * @static\n     * @memberof MessageListItem\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MessageListItem} from './message-list-item';\n     * <MessageListItem />\n     */\n    static get MessageListItem() {\n        return replaceViews('chats/message-list-item', MessageListItem);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MessageListItem\n     * @type {Object}\n     */\n    static propTypes = {\n        message: PropTypes.object.isRequired,\n        lastMessage: PropTypes.object,\n        font: PropTypes.object,\n        ignoreStatus: PropTypes.bool,\n        showDateDivider: PropTypes.any,\n        hideHeader: PropTypes.any,\n        staticUI: PropTypes.bool,\n        avatarSize: PropTypes.number,\n        dateFormater: PropTypes.string,\n        textContentConverter: PropTypes.func,\n        className: PropTypes.string,\n        children: PropTypes.any,\n        sleepUrlCard: PropTypes.bool,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MessageListItem\n     * @static\n     */\n    static defaultProps = {\n        lastMessage: null,\n        children: null,\n        font: null,\n        className: null,\n        showDateDivider: 0,\n        hideHeader: 0,\n        staticUI: false,\n        avatarSize: null,\n        dateFormater: 'hh:mm',\n        ignoreStatus: false,\n        textContentConverter: null,\n        sleepUrlCard: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 MessageListItem 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {sharing: false};\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof MessageListItem\n     * @return {void}\n     */\n    componentDidMount() {\n        if (!this.props.ignoreStatus) {\n            this.checkResendMessage();\n        }\n        if (this.needGetSendInfo && this.needGetSendInfo !== true) {\n            App.server.tryGetTempUserInfo(this.needGetSendInfo);\n            this.needGetSendInfo = true;\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof MessageListItem\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.state.sharing !== nextState.sharing ||\n            this.props.message !== nextProps.message || nextProps.message.updateId !== this.lastMessageUpdateId ||\n            this.props.lastMessage !== nextProps.lastMessage ||\n            this.props.showDateDivider !== nextProps.showDateDivider ||\n            this.props.hideHeader !== nextProps.hideHeader ||\n            this.props.ignoreStatus !== nextProps.ignoreStatus ||\n            this.props.font !== nextProps.font || (this.props.font && nextProps.font && this.lastFontSize !== nextProps.font.size) ||\n            this.props.className !== nextProps.className ||\n            this.props.dateFormater !== nextProps.dateFormater ||\n            this.props.textContentConverter !== nextProps.textContentConverter ||\n            this.props.avatarSize !== nextProps.avatarSize ||\n            this.props.children !== nextProps.children ||\n            (this.lastSenderUpdateId !== false && this.lastSenderUpdateId !== nextProps.message.getSender(App.members).updateId) ||\n            this.props.staticUI !== nextProps.staticUI);\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidUpdate`\n     * componentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。\n     *\n     * @param {Object} prevProps 更新前的属性值\n     * @param {Object} prevState 更新前的状态值\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidUpdate\n     * @private\n     * @memberof MessageListItem\n     * @return {void}\n     */\n    componentDidUpdate() {\n        if (!this.props.ignoreStatus) {\n            this.checkResendMessage();\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof MessageListItem\n     * @return {void}\n     */\n    componentWillUnmount() {\n        clearTimeout(this.checkResendTask);\n    }\n\n    /**\n     * 处理点击发送者名称事件\n     * @param {Member} sender 发送者\n     * @param {ChatMessage} message 聊天消息\n     * @memberof MessageListItem\n     * @private\n     * @return {void}\n     */\n    handleSenderNameClick(sender, message) {\n        App.im.ui.sendContentToChat(`@${sender.displayName} `);\n    }\n\n    /**\n     * 处理显示用户右键菜单事件\n     * @param {Event} event 事件对象\n     * @memberof MessageListItem\n     * @private\n     * @return {void}\n     */\n    handleUserContextMenu = event => {\n        const {message} = this.props;\n        const sender = message.getSender(App.members);\n        showContextMenu('chat.member', {event, member: sender, chat: App.im.chats.get(message.cgid)});\n    }\n\n    /**\n     * 检查是否需要重新发送消息\n     * @memberof MessageListItem\n     * @return {void}\n     */\n    checkResendMessage() {\n        const {message} = this.props;\n        if (message.needCheckResend) {\n            clearTimeout(this.checkResendTask);\n            this.checkResendTask = setTimeout(() => {\n                if (message.needResend) {\n                    this.forceUpdate();\n                }\n            }, 10500);\n        }\n    }\n\n    /**\n     * 处理重新发送按钮点击事件\n     * @memberof MessageListItem\n     * @private\n     * @return {void}\n     */\n    handleResendBtnClick = () => {\n        const message = this.props.message;\n        message.date = new Date().getTime();\n        if (message.needCheckResend) {\n            App.im.server.sendChatMessage(message);\n        }\n        this.forceUpdate();\n    };\n\n    /**\n     * 处理删除按钮点击事件\n     * @memberof MessageListItem\n     * @private\n     * @return {void}\n     */\n    handleDeleteBtnClick = () => {\n        const message = this.props.message;\n        if (message.needCheckResend) {\n            App.im.chats.deleteLocalMessage(this.props.message);\n        }\n    };\n\n    /**\n     * 处理分享按钮点击事件\n     * @param {Event} event 事件对象\n     * @memberof MessageListItem\n     * @private\n     * @return {void}\n     */\n    handleShareBtnClick = event => {\n        if (showContextMenu('message.text', {\n            event,\n            message: this.props.message,\n            options: {onHidden: () => {\n                this.setState({sharing: false});\n            }}\n        })) {\n            this.setState({sharing: true});\n        }\n    };\n\n    /**\n     * 处理显示消息内容上下文菜单事件\n     * @param {Event} event 事件对象\n     * @memberof MessageListItem\n     * @private\n     * @return {void}\n     */\n    handleContentContextMenu = event => {\n        if (event.target.tagName === 'WEBVIEW') {\n            return;\n        }\n\n        if (showContextMenu(this.isUrlContent ? 'link' : 'message.text', {\n            event,\n            message: this.props.message,\n            options: {\n                copy: !this.isUrlContent,\n                selectAll: true,\n                linkTarget: true,\n                onHidden: () => {\n                    this.setState({sharing: false});\n                }\n            }\n        })) {\n            this.setState({sharing: true});\n        }\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MessageListItem\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        let {\n            message,\n            lastMessage,\n            showDateDivider,\n            hideHeader,\n            ignoreStatus,\n            font,\n            className,\n            dateFormater,\n            textContentConverter,\n            avatarSize,\n            children,\n            staticUI,\n            sleepUrlCard,\n            ...other\n        } = this.props;\n\n        this.lastMessageUpdateId = message.updateId;\n        this.lastFontSize = font && font.size;\n\n        const basicFontStyle = font ? {\n            fontSize: `${font.size}px`,\n            lineHeight: font.lineHeight,\n        } : null;\n        if (showDateDivider === 0) {\n            showDateDivider = !lastMessage || !isSameDay(message.date, lastMessage.date);\n        }\n\n        if (message.isBroadcast) {\n            return (<div className={classes('app-message-item app-message-item-broadcast', className)} {...other}>\n                {showDateDivider && <MessageDivider date={message.date} />}\n                <MessageBroadcast contentConverter={textContentConverter} style={basicFontStyle} message={message} />\n            </div>);\n        }\n\n        const needCheckResend = !ignoreStatus && message.needCheckResend;\n        const needResend = !ignoreStatus && needCheckResend && message.needResend;\n        const isNotification = message.isNotification;\n\n        if (hideHeader === 0) {\n            hideHeader = !showDateDivider && lastMessage && lastMessage.senderId === message.senderId && lastMessage.type === message.type;\n        }\n\n        let headerView = null;\n        let timeLabelView = null;\n        let contentView = null;\n        let resendButtonsView = null;\n        this.isTextContent = false;\n        this.isUrlContent = false;\n\n        const titleFontStyle = font ? {\n            fontSize: `${font.title}px`,\n            lineHeight: font.titleLineHeight,\n        } : null;\n\n        if (!hideHeader) {\n            const sender = message.getSender(App.members);\n            this.lastSenderUpdateId = sender.updateId;\n            if (sender.temp) {\n                this.needGetSendInfo = sender.id;\n            }\n            headerView = (<div className=\"app-message-item-header\">\n                <UserAvatar size={avatarSize} className=\"state\" user={sender} onContextMenu={this.handleUserContextMenu} onClick={isNotification ? null : MemberProfileDialog.show.bind(null, sender, null)} />\n                <header style={titleFontStyle}>\n                    {isNotification ? <span className=\"title text-primary\">{sender.displayName}</span> : <a className=\"title rounded text-primary\" onContextMenu={staticUI ? null : this.handleUserContextMenu} onClick={staticUI ? MemberProfileDialog.show.bind(null, sender, null) : this.handleSenderNameClick.bind(this, sender, message)}>{sender.displayName}</a>}\n                    <small className=\"time\">{formatDate(message.date, dateFormater)}</small>\n                </header>\n            </div>);\n        } else {\n            this.lastSenderUpdateId = false;\n        }\n\n        if (isNotification) {\n            contentView = <NotificationMessage message={message} />;\n        } else if (message.isFileContent) {\n            contentView = <MessageContentFile message={message} />;\n        } else if (message.isImageContent) {\n            contentView = <MessageContentImage message={message} />;\n        } else if (message.isObjectContent) {\n            const objectContent = message.objectContent;\n            if (objectContent && objectContent.type === ChatMessage.OBJECT_TYPES.url && objectContent.url) {\n                const sleep = sleepUrlCard === null ? !isToday(message.date) : sleepUrlCard;\n                contentView = <MessageContentUrl url={objectContent.url} data={objectContent} sleep={sleep} />;\n                this.isUrlContent = true;\n            } else {\n                contentView = <div className=\"box red-pale\">[Unknown Object]</div>;\n            }\n        } else {\n            contentView = <MessageContentText id={`message-content-${message.gid}`} contentConverter={textContentConverter} fontSize={this.lastFontSize} style={basicFontStyle} message={message} />;\n            this.isTextContent = true;\n        }\n\n        if (!headerView) {\n            let hideTimeLabel = false;\n            if (hideHeader && !showDateDivider && lastMessage && message.date && (message.date - lastMessage.date) <= showTimeLabelInterval) {\n                hideTimeLabel = true;\n            }\n            timeLabelView = <span className={classes('app-message-item-time-label', {'as-dot': hideTimeLabel})}>{formatDate(message.date, 'hh:mm')}</span>;\n        }\n\n        if (!staticUI && !ignoreStatus && needResend) {\n            resendButtonsView = (<nav className=\"nav nav-sm app-message-item-actions\">\n                <a onClick={this.handleResendBtnClick}><Icon name=\"refresh\" /> {Lang.string('chat.message.resend')}</a>\n                <a onClick={this.handleDeleteBtnClick}><Icon name=\"delete\" /> {Lang.string('common.delete')}</a>\n            </nav>);\n        }\n\n        let actionsView = null;\n        if (this.isTextContent) {\n            actionsView = (<div className=\"actions\">\n                <div className=\"hint--top-left\"><button className=\"btn btn-sm iconbutton rounded\" type=\"button\" onClick={this.handleShareBtnClick}><Icon name=\"share\" /></button></div>\n            </div>);\n        }\n\n        return (<div\n            {...other}\n            className={classes('app-message-item', className, {\n                'app-message-sending': !ignoreStatus && needCheckResend && !needResend,\n                'app-message-send-fail': !ignoreStatus && needResend,\n                'with-avatar': !hideHeader,\n                sharing: this.state.sharing\n            })}\n        >\n            {showDateDivider && <MessageDivider date={message.date} />}\n            {headerView}\n            {timeLabelView}\n            {contentView && <div className={classes(`app-message-content content-type-${message.contentType}`, {'content-type-text': message.isPlainTextContent})} onContextMenu={this.isTextContent || this.isUrlContent ? this.handleContentContextMenu : null}>{contentView}{actionsView}</div>}\n            {resendButtonsView}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/message-list-item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2811,
    "kind": "variable",
    "name": "showTimeLabelInterval",
    "memberof": "app/views/chats/message-list-item.js",
    "static": true,
    "longname": "app/views/chats/message-list-item.js~showTimeLabelInterval",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/chats/message-list-item.js",
    "importStyle": null,
    "description": "连续的聊天消息显示时间标签最小时间间隔，单位毫秒",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2812,
    "kind": "class",
    "name": "MessageListItem",
    "memberof": "app/views/chats/message-list-item.js",
    "static": true,
    "longname": "app/views/chats/message-list-item.js~MessageListItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/message-list-item.js",
    "importStyle": "MessageListItem",
    "description": "MessageListItem 组件 ，显示聊天列表条目界面",
    "examples": [
      "import MessageListItem from './message-list-item';\n<MessageListItem />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MessageListItem"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2813,
    "kind": "get",
    "name": "MessageListItem",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-list-item.js~MessageListItem.MessageListItem",
    "access": "public",
    "description": "获取 MessageListItem 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MessageListItem} from './message-list-item';\n<MessageListItem />"
    ],
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MessageListItem>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2814,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": true,
    "longname": "app/views/chats/message-list-item.js~MessageListItem.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2815,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": true,
    "longname": "app/views/chats/message-list-item.js~MessageListItem.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2816,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 MessageListItem 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2817,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2818,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 124,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2819,
    "kind": "member",
    "name": "needGetSendInfo",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#needGetSendInfo",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2820,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2821,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#componentDidUpdate",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidUpdate`\ncomponentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidUpdate"
    ],
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "更新前的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "更新前的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2822,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 188,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2823,
    "kind": "method",
    "name": "handleSenderNameClick",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#handleSenderNameClick",
    "access": "private",
    "description": "处理点击发送者名称事件",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "Member"
        ],
        "spread": false,
        "optional": false,
        "name": "sender",
        "description": "发送者"
      },
      {
        "nullable": null,
        "types": [
          "ChatMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "聊天消息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2824,
    "kind": "member",
    "name": "handleUserContextMenu",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#handleUserContextMenu",
    "access": "private",
    "description": "处理显示用户右键菜单事件",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2825,
    "kind": "method",
    "name": "checkResendMessage",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#checkResendMessage",
    "access": "public",
    "description": "检查是否需要重新发送消息",
    "lineNumber": 222,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2826,
    "kind": "member",
    "name": "checkResendTask",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#checkResendTask",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2827,
    "kind": "member",
    "name": "handleResendBtnClick",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#handleResendBtnClick",
    "access": "private",
    "description": "处理重新发送按钮点击事件",
    "lineNumber": 240,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2828,
    "kind": "member",
    "name": "handleDeleteBtnClick",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#handleDeleteBtnClick",
    "access": "private",
    "description": "处理删除按钮点击事件",
    "lineNumber": 255,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2829,
    "kind": "member",
    "name": "handleShareBtnClick",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#handleShareBtnClick",
    "access": "private",
    "description": "处理分享按钮点击事件",
    "lineNumber": 269,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2830,
    "kind": "member",
    "name": "handleContentContextMenu",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#handleContentContextMenu",
    "access": "private",
    "description": "处理显示消息内容上下文菜单事件",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2831,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 317,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2832,
    "kind": "member",
    "name": "lastMessageUpdateId",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#lastMessageUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 335,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2833,
    "kind": "member",
    "name": "lastFontSize",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#lastFontSize",
    "access": "public",
    "description": null,
    "lineNumber": 336,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2834,
    "kind": "member",
    "name": "isTextContent",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#isTextContent",
    "access": "public",
    "description": null,
    "lineNumber": 365,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2835,
    "kind": "member",
    "name": "isUrlContent",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#isUrlContent",
    "access": "public",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2836,
    "kind": "member",
    "name": "lastSenderUpdateId",
    "memberof": "app/views/chats/message-list-item.js~MessageListItem",
    "static": false,
    "longname": "app/views/chats/message-list-item.js~MessageListItem#lastSenderUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2841,
    "kind": "file",
    "name": "app/views/chats/message-list.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport {MessageListItem} from './message-list-item';\nimport replaceViews from '../replace-views';\nimport App from '../../core';\n\n/**\n * MessageList 组件 ，显示聊天消息列表界面\n * @class MessageList\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MessageList from './message-list';\n * <MessageList />\n */\nexport default class MessageList extends Component {\n    /**\n     * 获取 MessageList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MessageList>}\n     * @readonly\n     * @static\n     * @memberof MessageList\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MessageList} from './message-list';\n     * <MessageList />\n     */\n    static get MessageList() {\n        return replaceViews('chats/message-list', MessageList);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MessageList\n     * @type {Object}\n     */\n    static propTypes = {\n        messages: PropTypes.array.isRequired,\n        stayBottom: PropTypes.bool,\n        staticUI: PropTypes.bool,\n        showDateDivider: PropTypes.any,\n        className: PropTypes.string,\n        font: PropTypes.object,\n        listItemProps: PropTypes.object,\n        children: PropTypes.any,\n        listItemCreator: PropTypes.func,\n        header: PropTypes.any,\n        onScroll: PropTypes.func,\n        sleepUrlCard: PropTypes.bool,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MessageList\n     * @static\n     */\n    static defaultProps = {\n        showDateDivider: 0,\n        stayBottom: true,\n        staticUI: false,\n        className: null,\n        font: null,\n        listItemProps: null,\n        children: null,\n        listItemCreator: null,\n        header: null,\n        onScroll: null,\n        sleepUrlCard: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof MessageList\n     * @return {void}\n     */\n    componentDidMount() {\n        this.onChatActiveHandler = App.im.ui.onActiveChat(chat => {\n            if (this.lastMessage && (this.waitNewMessage || this.isScrollBottom) && this.lastMessage.cgid === chat.gid) {\n                this.waitNewMessage = null;\n                this.scrollToBottom(500);\n                App.im.ui.sendContentToChat();\n            }\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidUpdate`\n     * componentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。\n     *\n     * @param {Object} prevProps 更新前的属性值\n     * @param {Object} prevState 更新前的状态值\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidUpdate\n     * @private\n     * @memberof MessageList\n     * @return {void}\n     */\n    componentDidUpdate() {\n        if (this.props.stayBottom) {\n            const {messages} = this.props;\n            const newMessage = this.checkHasNewMessages(messages);\n            if (newMessage) {\n                if (App.im.ui.isActiveChat(newMessage.cgid)) {\n                    if (newMessage.isSender(App.profile.userId) || this.isScrollBottom) {\n                        this.scrollToBottom(100);\n                    }\n                } else {\n                    this.waitNewMessage = newMessage;\n                }\n            }\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof MessageList\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.onChatActiveHandler);\n    }\n\n    /**\n     * 将消息列表滚动到底部\n     *\n     * @memberof MessageList\n     * @return {void}\n     */\n    scrollToBottom = () => {\n        this.element.scrollTop = this.element.scrollHeight - this.element.clientHeight;\n    }\n\n    /**\n     * 检查消息列表是否有新的消息\n     *\n     * @param {ChatMessage[]} messages 消息列表\n     * @returns {boolean} 如果返回 `true` 则为有新的消息，否则为没有有新的消息\n     * @memberof MessageList\n     */\n    checkHasNewMessages(messages) {\n        const lastMessage = this.lastMessage;\n        const thisLastMessage = messages && messages.length ? messages[messages.length - 1] : null;\n        this.lastMessage = thisLastMessage;\n        if (lastMessage !== thisLastMessage && thisLastMessage && ((!lastMessage && thisLastMessage) || thisLastMessage.date > lastMessage.date || thisLastMessage.id > lastMessage.id)) {\n            return thisLastMessage;\n        }\n        return false;\n    }\n\n    /**\n     * 检查消息列表是否有已显示的旧的消息\n     *\n     * @param {ChatMessage[]} messages 消息列表\n     * @returns {boolean} 如果返回 `true` 则为有已显示的旧的消息，否则为没有有已显示的旧的消息\n     * @memberof MessageList\n     */\n    checkHasNewOlderMessages(messages) {\n        const lastFirstMessage = this.lastFirstMessage;\n        const thisFirstMessage = messages && messages.length ? messages[0] : null;\n        this.lastFirstMessage = thisFirstMessage;\n        if (thisFirstMessage && lastFirstMessage && (thisFirstMessage.date < lastFirstMessage.date || thisFirstMessage.id < lastFirstMessage.id)) {\n            return lastFirstMessage;\n        }\n    }\n\n    /**\n     * 处理消息列表滚动事件\n     * @param {Event} e 事件对象\n     * @memberof MessageList\n     * @private\n     * @return {void}\n     */\n    handleScroll = e => {\n        const target = e.target;\n        if (!target.classList.contains('app-message-list')) {\n            return;\n        }\n        const scrollInfo = {\n            scrollHeight: target.scrollHeight,\n            scrollTop: target.scrollTop,\n            target,\n            isAtTop: target.scrollTop === 0,\n            isAtBottom: (target.scrollHeight - target.scrollTop) === target.clientHeight\n        };\n        this.scrollInfo = scrollInfo;\n        if (this.props.onScroll) {\n            this.props.onScroll(scrollInfo, e);\n        }\n    }\n\n    /**\n     * 获取是否滚动到底部\n     * @memberof MessageList\n     * @type {boolean}\n     */\n    get isScrollBottom() {\n        return this.scrollInfo ? this.scrollInfo.isAtBottom : true;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MessageList\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            messages,\n            className,\n            showDateDivider,\n            font,\n            stayBottom,\n            children,\n            listItemProps,\n            listItemCreator,\n            staticUI,\n            header,\n            onScroll,\n            sleepUrlCard,\n            ...other\n        } = this.props;\n\n        let lastMessage = null;\n        const messagesView = [];\n        if (messages) {\n            messages.forEach(message => {\n                const messageListItem = listItemCreator ? listItemCreator(message, lastMessage) : <MessageListItem id={`message-${message.gid}`} staticUI={staticUI} font={font} showDateDivider={showDateDivider} lastMessage={lastMessage} key={message.gid} message={message} {...listItemProps} sleepUrlCard={sleepUrlCard} />;\n                lastMessage = message;\n                messagesView.unshift(messageListItem);\n            });\n        }\n\n        return (<div\n            {...other}\n            className={classes('app-message-list flex column-reverse', className, {'app-message-list-static': staticUI})}\n            onScroll={this.handleScroll}\n            ref={e => {this.element = e;}}\n        >\n            {messagesView}\n            {header}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/message-list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2842,
    "kind": "class",
    "name": "MessageList",
    "memberof": "app/views/chats/message-list.js",
    "static": true,
    "longname": "app/views/chats/message-list.js~MessageList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/message-list.js",
    "importStyle": "MessageList",
    "description": "MessageList 组件 ，显示聊天消息列表界面",
    "examples": [
      "import MessageList from './message-list';\n<MessageList />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MessageList"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2843,
    "kind": "get",
    "name": "MessageList",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/message-list.js~MessageList.MessageList",
    "access": "public",
    "description": "获取 MessageList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MessageList} from './message-list';\n<MessageList />"
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MessageList>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2844,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "static": true,
    "longname": "app/views/chats/message-list.js~MessageList.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2845,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "static": true,
    "longname": "app/views/chats/message-list.js~MessageList.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2846,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2847,
    "kind": "member",
    "name": "onChatActiveHandler",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#onChatActiveHandler",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2848,
    "kind": "member",
    "name": "waitNewMessage",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#waitNewMessage",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2849,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#componentDidUpdate",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidUpdate`\ncomponentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidUpdate"
    ],
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "更新前的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "更新前的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2851,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 132,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2852,
    "kind": "member",
    "name": "scrollToBottom",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#scrollToBottom",
    "access": "public",
    "description": "将消息列表滚动到底部",
    "lineNumber": 142,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2853,
    "kind": "method",
    "name": "checkHasNewMessages",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#checkHasNewMessages",
    "access": "public",
    "description": "检查消息列表是否有新的消息",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为有新的消息，否则为没有有新的消息"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage[]"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "消息列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为有新的消息，否则为没有有新的消息"
    }
  },
  {
    "__docId__": 2854,
    "kind": "member",
    "name": "lastMessage",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#lastMessage",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2855,
    "kind": "method",
    "name": "checkHasNewOlderMessages",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#checkHasNewOlderMessages",
    "access": "public",
    "description": "检查消息列表是否有已显示的旧的消息",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为有已显示的旧的消息，否则为没有有已显示的旧的消息"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage[]"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "消息列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为有已显示的旧的消息，否则为没有有已显示的旧的消息"
    }
  },
  {
    "__docId__": 2856,
    "kind": "member",
    "name": "lastFirstMessage",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#lastFirstMessage",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2857,
    "kind": "member",
    "name": "handleScroll",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#handleScroll",
    "access": "private",
    "description": "处理消息列表滚动事件",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2858,
    "kind": "member",
    "name": "scrollInfo",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "longname": "app/views/chats/message-list.js~MessageList#scrollInfo",
    "access": "public",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2859,
    "kind": "get",
    "name": "isScrollBottom",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#isScrollBottom",
    "access": "public",
    "description": "获取是否滚动到底部",
    "lineNumber": 209,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2860,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 221,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2861,
    "kind": "member",
    "name": "element",
    "memberof": "app/views/chats/message-list.js~MessageList",
    "static": false,
    "longname": "app/views/chats/message-list.js~MessageList#element",
    "access": "public",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2862,
    "kind": "file",
    "name": "app/views/chats/messages-preview-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport Lang from '../../lang';\nimport {MessageList} from './message-list';\n\n/**\n * 显示聊天消息预览对话框\n * @param {ChatMessage[]} messages 聊天消息列表\n * @param {Object} props 对话框属性\n * @param {function} callback 回调函数\n * @return {void}\n */\nexport const showMessagesPreviewDialog = (messages, props, callback) => {\n    const modalId = 'app-messages-preview-dialog';\n    return Modal.show(Object.assign({\n        id: modalId,\n        title: Lang.string('chat.sendbox.toolbar.previewDraft'),\n        animation: 'enter-from-bottom',\n        style: {\n            bottom: 0,\n            top: 'auto',\n            width: '65%',\n            minWidth: 400,\n            position: 'absolute'\n        },\n        actions: false,\n        contentClassName: 'box',\n        content: <MessageList listItemProps={{ignoreStatus: true}} showDateDivider={false} messages={messages} />\n    }, props), callback);\n};\n\nexport default {\n    show: showMessagesPreviewDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/messages-preview-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2863,
    "kind": "function",
    "name": "showMessagesPreviewDialog",
    "memberof": "app/views/chats/messages-preview-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/messages-preview-dialog.js~showMessagesPreviewDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/messages-preview-dialog.js",
    "importStyle": "{showMessagesPreviewDialog}",
    "description": "显示聊天消息预览对话框",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "ChatMessage[]"
        ],
        "spread": false,
        "optional": false,
        "name": "messages",
        "description": "聊天消息列表"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "对话框属性"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2864,
    "kind": "file",
    "name": "app/views/chats/notification-message.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport App from '../../core';\nimport replaceViews from '../replace-views';\nimport Button from '../../components/button';\nimport Lang from '../../lang';\n\n/**\n * NotificationMessage 组件 ，显示通知消息界面\n * @class NotificationMessage\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import NotificationMessage from './notification-message';\n * <NotificationMessage />\n */\nexport default class NotificationMessage extends Component {\n    /**\n     * 获取 NotificationMessage 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<NotificationMessage>}\n     * @readonly\n     * @static\n     * @memberof NotificationMessage\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {NotificationMessage} from './notification-message';\n     * <NotificationMessage />\n     */\n    static get NotificationMessage() {\n        return replaceViews('chats/notification-message', NotificationMessage);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof NotificationMessage\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        message: PropTypes.object.isRequired,\n        contentConverter: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof NotificationMessage\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        contentConverter: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof NotificationMessage\n     */\n    shouldComponentUpdate(nextProps) {\n        return nextProps.className !== this.props.className || nextProps.contentConverter !== this.props.contentConverter || nextProps.message !== this.props.message || nextProps.message.content !== this.props.message.content;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof NotificationMessage\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        let {\n            message,\n            className,\n            contentConverter,\n            ...other\n        } = this.props;\n\n        const content = message.renderedTextContent(App.im.ui.renderChatMessageContent, App.im.ui.linkMembersInText);\n        const {notification, actions} = message;\n\n        let actionsButtons = [];\n        if (notification.url) {\n            actionsButtons.push(<Button btnClass=\"\" key=\"primaryUrl\" label={Lang.string('common.viewDetail')} icon=\"arrow-right-bold-circle\" type=\"a\" href={notification.url} className=\"text-primary\" />);\n        }\n        if (actions) {\n            actions.forEach((action, idx) => {\n                actionsButtons.push(<Button btnClass=\"\" key={idx} label={action.label || action.lable} icon={action.icon} type=\"a\" href={action.url} className={`text-${action.type}`} />);\n            });\n        }\n\n        return (<div\n            {...other}\n            className={classes('app-message-notification layer rounded shadow-2', className)}\n        >\n            <div className=\"markdown-content\" dangerouslySetInnerHTML={{__html: contentConverter ? contentConverter(content) : content}} />\n            {actionsButtons && actionsButtons.length ? <nav className=\"actions nav gray\">{actionsButtons}</nav> : null}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/chats/notification-message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2865,
    "kind": "class",
    "name": "NotificationMessage",
    "memberof": "app/views/chats/notification-message.js",
    "static": true,
    "longname": "app/views/chats/notification-message.js~NotificationMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/chats/notification-message.js",
    "importStyle": "NotificationMessage",
    "description": "NotificationMessage 组件 ，显示通知消息界面",
    "examples": [
      "import NotificationMessage from './notification-message';\n<NotificationMessage />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "NotificationMessage"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2866,
    "kind": "get",
    "name": "NotificationMessage",
    "memberof": "app/views/chats/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/chats/notification-message.js~NotificationMessage.NotificationMessage",
    "access": "public",
    "description": "获取 NotificationMessage 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {NotificationMessage} from './notification-message';\n<NotificationMessage />"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<NotificationMessage>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2867,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/chats/notification-message.js~NotificationMessage",
    "static": true,
    "longname": "app/views/chats/notification-message.js~NotificationMessage.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2868,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/chats/notification-message.js~NotificationMessage",
    "static": true,
    "longname": "app/views/chats/notification-message.js~NotificationMessage.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2869,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/chats/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/notification-message.js~NotificationMessage#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2870,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/chats/notification-message.js~NotificationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/chats/notification-message.js~NotificationMessage#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 79,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2871,
    "kind": "file",
    "name": "app/views/common/about-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport {About} from './about';\nimport Lang from '../../lang';\n\n/**\n * 显示应用关于对话框\n * @param {function} callback 回调函数\n * @return {void}\n */\nexport const showAboutDialog = (callback) => {\n    return Modal.show({\n        title: Lang.string('common.about'),\n        actions: false,\n        id: 'app-about-dialog',\n        content: <About />\n    }, callback);\n};\n\nexport default {\n    show: showAboutDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/about-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2872,
    "kind": "function",
    "name": "showAboutDialog",
    "memberof": "app/views/common/about-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/about-dialog.js~showAboutDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/about-dialog.js",
    "importStyle": "{showAboutDialog}",
    "description": "显示应用关于对话框",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2873,
    "kind": "file",
    "name": "app/views/common/about.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport Config from '../../config';\nimport HTML from '../../utils/html-helper';\nimport Lang from '../../lang';\nimport {BuildInfo} from '../common/build-info';\nimport replaceViews from '../replace-views';\n\n/**\n * About 组件 ，显示应用关于界面\n * @class About\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import About from './about';\n * <About />\n */\nexport default class About extends PureComponent {\n    /**\n     * 获取 About 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<About>}\n     * @readonly\n     * @static\n     * @memberof About\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {About} from './about';\n     * <About />\n     */\n    static get About() {\n        return replaceViews('common/about', About);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof About\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof About\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof About\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            ...other\n        } = this.props;\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-about center-content space', className)}\n        >\n            <section className=\"text-center\">\n                <img src={`${Config.media['image.path']}logo.png`} alt=\"logo\" />\n                <BuildInfo className=\"space-sm\" />\n                {Config.pkg.homepage ? <div className=\"space-xl\"><a target=\"_blank\" className=\"btn rounded text-primary strong\" href={Config.pkg.homepage}><strong>{Config.pkg.homepage}</strong></a></div> : null}\n                {Config.pkg.license ? <div><a target=\"_blank\" className=\"btn rounded\" href=\"https://github.com/easysoft/xuanxuan/blob/master/LICENSE\">{`Open source license ${Config.pkg.license}`}</a></div> : null}\n                {Config.pkg.company ? <div><a target=\"_blank\" className=\"btn rounded\" href=\"http://cnezsoft.com/\">{Lang.format('common.copyrightFormat', {year: new Date().getFullYear(), name: Config.pkg.company})}</a></div> : null}\n                {Config.ui.about ? <div>{Config.ui.about}</div> : null}\n                <div><a target=\"_blank\" className=\"btn rounded\" href=\"http://emojione.com/\">Thanks to EmojiOne for providing free emoji icons</a></div>\n            </section>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/about.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2874,
    "kind": "class",
    "name": "About",
    "memberof": "app/views/common/about.js",
    "static": true,
    "longname": "app/views/common/about.js~About",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/about.js",
    "importStyle": "About",
    "description": "About 组件 ，显示应用关于界面",
    "examples": [
      "import About from './about';\n<About />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "About"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 2875,
    "kind": "get",
    "name": "About",
    "memberof": "app/views/common/about.js~About",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/about.js~About.About",
    "access": "public",
    "description": "获取 About 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {About} from './about';\n<About />"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<About>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2876,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/about.js~About",
    "static": true,
    "longname": "app/views/common/about.js~About.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2877,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/about.js~About",
    "static": true,
    "longname": "app/views/common/about.js~About.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2878,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/about.js~About",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/about.js~About#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 63,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2879,
    "kind": "file",
    "name": "app/views/common/build-info.js",
    "content": "import React, {PureComponent} from 'react';\nimport Config from '../../config';\nimport Platform from 'Platform';\nimport DateHelper from '../../utils/date-helper';\nimport replaceViews from '../replace-views';\n\n/**\n * package.json 内容\n * @type {Object}\n * @private\n */\nconst PKG = Config.pkg;\n\n/**\n * BuildInfo 组件 ，显示构建信息\n * @class BuildInfo\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import BuildInfo from './build-info';\n * <BuildInfo />\n */\nexport default class BuildInfo extends PureComponent {\n    /**\n     * 获取 BuildInfo 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<BuildInfo>}\n     * @readonly\n     * @static\n     * @memberof BuildInfo\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {BuildInfo} from './build-info';\n     * <BuildInfo />\n     */\n    static get BuildInfo() {\n        return replaceViews('common/build-info', BuildInfo);\n    }\n\n    /**\n     * 处理点击事件\n     * @memberof BuildInfo\n     * @private\n     * @return {void}\n     */\n    handleClick = () => {\n        const now = new Date().getTime();\n        if (!this.lastClickTime) {\n            this.lastClickTime = now;\n        }\n\n        if (!this.clickTimes) {\n            this.clickTimes = 1;\n        } else if (now - this.lastClickTime < 400) {\n            this.clickTimes += 1;\n            this.lastClickTime = now;\n            if (this.clickTimes >= 5) {\n                if (Platform.ui.openDevTools) {\n                    Platform.ui.openDevTools();\n                }\n            }\n        } else {\n            this.clickTimes = 0;\n            this.lastClickTime = 0;\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof BuildInfo\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        return <div onClick={this.handleClick} {...this.props}>v{PKG.version}{PKG.distributeTime ? (` (${DateHelper.format(PKG.distributeTime, 'YYYYMMDDHHmm')})`) : null}{PKG.buildVersion ? `.${PKG.buildVersion}` : null} {Config.system.specialVersion ? (` for ${Config.system.specialVersion}`) : ''} {DEBUG ? '[debug]' : ''}</div>;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/build-info.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2880,
    "kind": "variable",
    "name": "PKG",
    "memberof": "app/views/common/build-info.js",
    "static": true,
    "longname": "app/views/common/build-info.js~PKG",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/build-info.js",
    "importStyle": null,
    "description": "package.json 内容",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2881,
    "kind": "class",
    "name": "BuildInfo",
    "memberof": "app/views/common/build-info.js",
    "static": true,
    "longname": "app/views/common/build-info.js~BuildInfo",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/build-info.js",
    "importStyle": "BuildInfo",
    "description": "BuildInfo 组件 ，显示构建信息",
    "examples": [
      "import BuildInfo from './build-info';\n<BuildInfo />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BuildInfo"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 2882,
    "kind": "get",
    "name": "BuildInfo",
    "memberof": "app/views/common/build-info.js~BuildInfo",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/build-info.js~BuildInfo.BuildInfo",
    "access": "public",
    "description": "获取 BuildInfo 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {BuildInfo} from './build-info';\n<BuildInfo />"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<BuildInfo>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2883,
    "kind": "member",
    "name": "handleClick",
    "memberof": "app/views/common/build-info.js~BuildInfo",
    "static": false,
    "longname": "app/views/common/build-info.js~BuildInfo#handleClick",
    "access": "private",
    "description": "处理点击事件",
    "lineNumber": 44,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2884,
    "kind": "member",
    "name": "lastClickTime",
    "memberof": "app/views/common/build-info.js~BuildInfo",
    "longname": "app/views/common/build-info.js~BuildInfo#lastClickTime",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2885,
    "kind": "member",
    "name": "clickTimes",
    "memberof": "app/views/common/build-info.js~BuildInfo",
    "longname": "app/views/common/build-info.js~BuildInfo#clickTimes",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2890,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/build-info.js~BuildInfo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/build-info.js~BuildInfo#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2891,
    "kind": "file",
    "name": "app/views/common/draft-editor.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Editor,\n    EditorState,\n    RichUtils,\n    Entity,\n    AtomicBlockUtils,\n    convertToRaw,\n    CompositeDecorator,\n    Modifier\n} from 'draft-js';\nimport Emojione from '../../components/emojione';\nimport App from '../../core';\nimport timeSequence from '../../utils/time-sequence';\nimport Lang from '../../lang';\nimport replaceViews from '../replace-views';\n\n/**\n * DraftJS Atomic 组件\n * @param {Object} props React 组件属性\n * @return {ReactNode|string|number|null|boolean} React 渲染内容\n * @private\n */\nconst AtomicComponent = props => {\n    const key = props.block.getEntityAt(0);\n    if (!key) {\n        return null;\n    }\n    const entity = Entity.get(key);\n    const type = entity.getType();\n    if (type === 'image') {\n        const data = entity.getData();\n        return (<img\n            className=\"draft-editor-image\"\n            src={data.src}\n            alt={data.alt || ''}\n        />);\n    } else if (type === 'emoji') {\n        const emoji = entity.getData().emoji;\n        const emojionePngPath = Emojione.imagePathPNG + emoji.unicode + '.png' + Emojione.cacheBustParam;\n        return <span><img className=\"emojione\" style={{maxWidth: 20, maxHeight: 20}} contentEditable=\"false\" data-offset-key={props.offsetKey} src={emojionePngPath} alt={Emojione.shortnameToUnicode(emoji.shortname)} title={emoji.name} />&nbsp;</span>;\n    }\n    return null;\n};\n\n/**\n * 使用正则表达式查找内容\n * @param {Regex} regex 正则表达式\n * @param {Object} contentBlock 内容块\n * @param {function} callback 回调函数\n * @return {void}\n * @private\n */\nconst findWithRegex = (regex, contentBlock, callback) => {\n    const text = contentBlock.getText();\n    let matchArr;\n    let start;\n    while ((matchArr = regex.exec(text)) !== null) {\n        start = matchArr.index;\n        callback(start, start + matchArr[0].length);\n    }\n};\n\n/**\n * @所有人文本\n * @type {string}\n * @private\n */\nconst langAtAll = Lang.string('chat.message.atAll');\n\n/**\n * DraftJS CompositeDecorator 对象\n * @type {CompositeDecorator}\n * @private\n */\nconst draftDecorator = new CompositeDecorator([{\n    strategy: (contentBlock, callback, contentState) => {\n        findWithRegex(Emojione.regUnicode, contentBlock, callback);\n    },\n    component: (props) => {\n        const unicode = props.decoratedText.trim();\n        const map = Emojione.mapUnicodeCharactersToShort();\n        const emoji = Emojione.emojioneList[map[unicode]];\n        if (emoji) {\n            const emojionePngPath = Emojione.imagePathPNG + emoji.uc_base + '.' + Emojione.imageType;\n            const backgroundImage = 'url(' + emojionePngPath + ') no-repeat left top';\n            return <span title={unicode} data-offset-key={props.offsetKey} style={{width: 16, height: 16, display: 'inline-block', overflow: 'hidden', whiteSpace: 'nowrap', background: backgroundImage, backgroundSize: 'contain', textAlign: 'right', verticalAlign: 'bottom', position: 'relative', top: -2, fontSize: '16px', color: 'transparent'}}>{props.children}</span>;\n        }\n        return <span data-offset-key={props.offsetKey}>{props.children}</span>;\n    }\n}, {\n    strategy: (contentBlock, callback, contentState) => {\n        findWithRegex(/@[\\u4e00-\\u9fa5_\\w]+[，。,\\.\\/\\s:@\\n]/g, contentBlock, callback);\n    },\n    component: (props) => {\n        const guess = props.decoratedText.substr(1).trim().replace(/[，。,\\.\\/\\s:@\\n]/g, '');\n        if (guess) {\n            if (guess === 'all' || guess === langAtAll) {\n                return <span title={langAtAll} className=\"at-all text-primary\" data-offset-key={props.offsetKey}>{props.children}</span>;\n            } else {\n                const member = App.members.guess(guess);\n                if (member && member.id) {\n                    return <a className=\"app-link text-primary\" href={'@Member/' + member.id} title={'@' + member.displayName} data-offset-key={props.offsetKey}>{props.children}</a>;\n                }\n            }\n        }\n        return <span data-offset-key={props.offsetKey}>{props.children}</span>;\n    }\n}, {\n    strategy: (contentBlock, callback, contentState) => {\n        findWithRegex(/(https?):\\/\\/[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]/g, contentBlock, callback);\n    },\n    component: (props) => {\n        const url = props.decoratedText;\n        return <a className=\"text-primary\" data-offset-key={props.offsetKey} href={url}>{props.children}</a>;\n    }\n}]);\n\n\nexport default class DraftEditor extends PureComponent {\n    /**\n     * 获取 DraftEditor 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<DraftEditor>}\n     * @readonly\n     * @static\n     * @memberof DraftEditor\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {DraftEditor} from './draft-editor';\n     * <DraftEditor />\n     */\n    static get DraftEditor() {\n        return replaceViews('common/draft-editor', DraftEditor);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof DraftEditor\n     * @type {Object}\n     */\n    static propTypes = {\n        placeholder: PropTypes.string,\n        onChange: PropTypes.func,\n        handleKey: PropTypes.bool,\n        onReturnKeyDown: PropTypes.func,\n        onPastedText: PropTypes.func,\n        onPastedFiles: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof DraftEditor\n     * @static\n     */\n    static defaultProps = {\n        placeholder: null,\n        onChange: null,\n        onReturnKeyDown: null,\n        onPastedText: null,\n        onPastedFiles: null,\n        handleKey: false,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 DraftEditor 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {editorState: EditorState.createEmpty(draftDecorator)};\n\n        this.onChange = this.onChange.bind(this);\n        this.handleKeyCommand = this.handleKeyCommand.bind(this);\n        this.handleReturn = this.handleReturn.bind(this);\n        this.blockRendererFn = this.blockRendererFn.bind(this);\n        this.handlePastedText = this.handlePastedText.bind(this);\n        this.handlePastedFiles = this.handlePastedFiles.bind(this);\n    }\n\n    /**\n     * 获取输入框文本内容\n     *\n     * @return {string} 输入框文本内容\n     * @memberof DraftEditor\n     */\n    getContent() {\n        return this.state.editorState.getCurrentContent().getPlainText();\n    }\n\n    /**\n     * 清空输入框文本内容\n     *\n     * @return {void}\n     * @memberof DraftEditor\n     */\n    clearContent() {\n        this.onChange(EditorState.createEmpty(draftDecorator));\n    }\n\n    /**\n     * 向输入框添加文本内容\n     *\n     * @param {string} content 文本内容\n     * @param {boolean} asNewLine 是否添加到新的一行\n     * @param {function} callback 回调函数\n     * @memberof DraftEditor\n     * @return {void}\n     */\n    appendContent(content, asNewLine, callback) {\n        if (content !== null && content !== undefined) {\n            const editorState = this.state.editorState;\n            const selection = editorState.getSelection();\n            const contentState = editorState.getCurrentContent();\n            const ncs = Modifier.insertText(contentState, selection, content);\n            const newEditorState = EditorState.push(editorState, ncs, 'insert-fragment');\n            this.onChange(newEditorState, callback);\n        }\n    }\n\n    /**\n     * 向输入框添加 Emoji 表情\n     *\n     * @param {Object|{shortname: string}} emoji Emojione 表情对象\n     * @param {function} callback 回调函数\n     * @memberof DraftEditor\n     * @return {void}\n     */\n    appendEmojione(emoji, callback) {\n        this.appendContent(Emojione.shortnameToUnicode(emoji.shortname), callback);\n    }\n\n    /**\n     * 向输入框添加图片\n     *\n     * @param {FileData|Blob|File|{path: string}|{url:string}} image 图片\n     * @param {function} callback 回调函数\n     * @memberof DraftEditor\n     * @return {void}\n     */\n    appendImage(image, callback) {\n        const {editorState} = this.state;\n        const contentState = editorState.getCurrentContent();\n        let imageSrc = image.path || image.url;\n        if (!imageSrc) {\n            if (image.blob) {\n                imageSrc = URL.createObjectURL(image.blob);\n            } else if (image instanceof Blob || image instanceof File) {\n                imageSrc = URL.createObjectURL(image);\n            }\n        } else if (!imageSrc.startsWith('http://') && !imageSrc.startsWith('https://')) {\n            imageSrc = `file://${imageSrc}`;\n        }\n        const contentStateWithEntity = contentState.createEntity(\n            'image',\n            'IMMUTABLE',\n            {src: imageSrc, alt: image.name || '', image}\n        );\n        const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n        const newEditorState = EditorState.set(\n            editorState,\n            {currentContent: contentStateWithEntity}\n        );\n        this.onChange(AtomicBlockUtils.insertAtomicBlock(newEditorState, entityKey, ' '), callback);\n    }\n\n    /**\n     * 获取输入框内容列表\n     * @memberof DraftEditor\n     * @return {{type: string, content: string, image: Object}[]} 内容列表\n     */\n    getContentList() {\n        const contents = [];\n        const editorState = this.state.editorState;\n        const contentState = editorState.getCurrentContent();\n        const raw = convertToRaw(contentState);\n        let thisTextContent = '';\n        raw.blocks.forEach(block => {\n            if (block.type === 'atomic') {\n                if (thisTextContent.length && thisTextContent.trim().length) {\n                    contents.push({type: 'text', content: thisTextContent});\n                    thisTextContent = '';\n                }\n                if (block.entityRanges && block.entityRanges.length) {\n                    contents.push({type: 'image', image: raw.entityMap[block.entityRanges[0].key].data.image});\n                }\n            } else {\n                if (thisTextContent.length) {\n                    thisTextContent += '\\n';\n                }\n                thisTextContent += block.text;\n            }\n        });\n        if (thisTextContent.length && thisTextContent.trim().length) {\n            contents.push({type: 'text', content: thisTextContent});\n            thisTextContent = '';\n        }\n        return contents;\n    }\n\n    /**\n     * 激活输入框\n     * @param {number} [delay=100] 延迟事件，单位毫秒\n     * @return {void}\n     */\n    focus(delay = 100) {\n        setTimeout(() => {\n            this.editor.focus();\n        }, delay);\n    }\n\n    /**\n     * 处理输入框值变更事件\n     * @param {EditorState} editorState DraftJS EditorState 对象\n     * @param {function} callback 回调函数\n     * @memberof DraftEditor\n     * @private\n     * @return {void}\n     */\n    onChange(editorState, callback) {\n        const contentState = editorState.getCurrentContent();\n        this.setState({editorState}, () => {\n            if (callback) {\n                callback(contentState);\n            }\n            if (this.props.onChange) {\n                this.props.onChange(contentState);\n            }\n        });\n    }\n\n    /**\n     * 处理键盘命令事件\n     * @param {string} command 命令名称\n     * @memberof DraftEditor\n     * @private\n     * @return {void}\n     */\n    handleKeyCommand(command) {\n        if (!this.props.handleKey) {\n            return;\n        }\n        const newState = RichUtils.handleKeyCommand(this.state.editorState, command);\n        if (newState) {\n            this.onChange(newState);\n            return 'handled';\n        }\n        return 'not-handled';\n    }\n\n    /**\n     * 处理回车键按下事件\n     * @param {Event} e 事件对象\n     * @memberof DraftEditor\n     * @private\n     * @return {void}\n     */\n    handleReturn(e) {\n        if (this.props.onReturnKeyDown) {\n            return this.props.onReturnKeyDown(e);\n        }\n        return 'not-handled';\n    }\n\n    /**\n     * 处理粘贴文本事件\n     * @param {string} text 要粘贴的纯文本\n     * @param {string} html 要粘贴的 HTML 文本\n     * @memberof DraftEditor\n     * @private\n     * @return {void}\n     */\n    handlePastedText(text, html) {\n        if (this.props.onPastedText) {\n            this.props.onPastedText(text, html);\n        } else {\n            this.appendContent(text || html);\n        }\n        return 'handled';\n    }\n\n    /**\n     * 处理粘贴文件事件\n     * @param {Blob[]} files 文件列表\n     * @memberof DraftEditor\n     * @private\n     * @return {void}\n     */\n    handlePastedFiles(files) {\n        if (this.props.onPastedFiles) {\n            this.props.onPastedFiles(files);\n        } else {\n            const date = new Date();\n            files.forEach(blob => {\n                if (blob.type.startsWith('image/')) {\n                    this.appendImage({\n                        lastModified: date.getTime(),\n                        lastModifiedDate: date,\n                        name: `clipboard-image-${timeSequence()}.png`,\n                        size: blob.size,\n                        blob,\n                        type: blob.type\n                    });\n                }\n            });\n        }\n        return 'handled';\n    }\n\n    /**\n     * DrafJS blockRendererFn 回调函数\n     * @param {Object} contentBlock 内容块对象\n     * @memberof DraftEditor\n     * @private\n     * @return {Object} 内容对象\n     */\n    blockRendererFn(contentBlock) {\n        const type = contentBlock.getType();\n        let result = null;\n\n        if (type === 'atomic') {\n            result = {\n                component: AtomicComponent,\n                editable: true,\n            };\n        }\n\n        return result;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof DraftEditor\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            placeholder,\n            onReturnKeyDown,\n            onPastedFiles,\n            onPastedText,\n            handleKey,\n            ...other\n        } = this.props;\n\n        return (<div {...other} onClick={() => {this.focus(0);}}>\n            <Editor\n                ref={e => {this.editor = e;}}\n                placeholder={placeholder}\n                editorState={this.state.editorState}\n                onChange={this.onChange}\n                handleKeyCommand={this.handleKeyCommand}\n                handleReturn={this.handleReturn}\n                blockRendererFn={this.blockRendererFn}\n                handlePastedText={this.handlePastedText}\n                handlePastedFiles={this.handlePastedFiles}\n            />\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/draft-editor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2892,
    "kind": "function",
    "name": "AtomicComponent",
    "memberof": "app/views/common/draft-editor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/draft-editor.js~AtomicComponent",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/draft-editor.js",
    "importStyle": null,
    "description": "DraftJS Atomic 组件",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "React 组件属性"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    }
  },
  {
    "__docId__": 2893,
    "kind": "function",
    "name": "findWithRegex",
    "memberof": "app/views/common/draft-editor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/draft-editor.js~findWithRegex",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/draft-editor.js",
    "importStyle": null,
    "description": "使用正则表达式查找内容",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Regex"
        ],
        "spread": false,
        "optional": false,
        "name": "regex",
        "description": "正则表达式"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "contentBlock",
        "description": "内容块"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2894,
    "kind": "variable",
    "name": "langAtAll",
    "memberof": "app/views/common/draft-editor.js",
    "static": true,
    "longname": "app/views/common/draft-editor.js~langAtAll",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/draft-editor.js",
    "importStyle": null,
    "description": "@所有人文本",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2895,
    "kind": "variable",
    "name": "draftDecorator",
    "memberof": "app/views/common/draft-editor.js",
    "static": true,
    "longname": "app/views/common/draft-editor.js~draftDecorator",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/draft-editor.js",
    "importStyle": null,
    "description": "DraftJS CompositeDecorator 对象",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "CompositeDecorator"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2896,
    "kind": "class",
    "name": "DraftEditor",
    "memberof": "app/views/common/draft-editor.js",
    "static": true,
    "longname": "app/views/common/draft-editor.js~DraftEditor",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/draft-editor.js",
    "importStyle": "DraftEditor",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~PureComponent"
    ]
  },
  {
    "__docId__": 2897,
    "kind": "get",
    "name": "DraftEditor",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/draft-editor.js~DraftEditor.DraftEditor",
    "access": "public",
    "description": "获取 DraftEditor 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {DraftEditor} from './draft-editor';\n<DraftEditor />"
    ],
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<DraftEditor>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2898,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "static": true,
    "longname": "app/views/common/draft-editor.js~DraftEditor.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2899,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "static": true,
    "longname": "app/views/common/draft-editor.js~DraftEditor.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 159,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2900,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 DraftEditor 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2901,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 182,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2908,
    "kind": "method",
    "name": "getContent",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#getContent",
    "access": "public",
    "description": "获取输入框文本内容",
    "lineNumber": 198,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "输入框文本内容"
    },
    "params": []
  },
  {
    "__docId__": 2909,
    "kind": "method",
    "name": "clearContent",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#clearContent",
    "access": "public",
    "description": "清空输入框文本内容",
    "lineNumber": 208,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2910,
    "kind": "method",
    "name": "appendContent",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#appendContent",
    "access": "public",
    "description": "向输入框添加文本内容",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "文本内容"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "asNewLine",
        "description": "是否添加到新的一行"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2911,
    "kind": "method",
    "name": "appendEmojione",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#appendEmojione",
    "access": "public",
    "description": "向输入框添加 Emoji 表情",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "{shortname: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "emoji",
        "description": "Emojione 表情对象"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2912,
    "kind": "method",
    "name": "appendImage",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#appendImage",
    "access": "public",
    "description": "向输入框添加图片",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "FileData",
          "Blob",
          "File",
          "{path: string}",
          "{url:string}"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "图片"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2913,
    "kind": "method",
    "name": "getContentList",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#getContentList",
    "access": "public",
    "description": "获取输入框内容列表",
    "lineNumber": 283,
    "return": {
      "nullable": null,
      "types": [
        "{type: string, content: string, image: Object}[]"
      ],
      "spread": false,
      "description": "内容列表"
    },
    "params": []
  },
  {
    "__docId__": 2914,
    "kind": "method",
    "name": "focus",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#focus",
    "access": "public",
    "description": "激活输入框",
    "lineNumber": 317,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "100",
        "defaultRaw": 100,
        "name": "delay",
        "description": "延迟事件，单位毫秒"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2915,
    "kind": "method",
    "name": "onChange",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#onChange",
    "access": "private",
    "description": "处理输入框值变更事件",
    "lineNumber": 331,
    "params": [
      {
        "nullable": null,
        "types": [
          "EditorState"
        ],
        "spread": false,
        "optional": false,
        "name": "editorState",
        "description": "DraftJS EditorState 对象"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2916,
    "kind": "method",
    "name": "handleKeyCommand",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#handleKeyCommand",
    "access": "private",
    "description": "处理键盘命令事件",
    "lineNumber": 350,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "命令名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2917,
    "kind": "method",
    "name": "handleReturn",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#handleReturn",
    "access": "private",
    "description": "处理回车键按下事件",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2918,
    "kind": "method",
    "name": "handlePastedText",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#handlePastedText",
    "access": "private",
    "description": "处理粘贴文本事件",
    "lineNumber": 384,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "要粘贴的纯文本"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": "要粘贴的 HTML 文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2919,
    "kind": "method",
    "name": "handlePastedFiles",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#handlePastedFiles",
    "access": "private",
    "description": "处理粘贴文件事件",
    "lineNumber": 400,
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob[]"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "文件列表"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2920,
    "kind": "method",
    "name": "blockRendererFn",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#blockRendererFn",
    "access": "private",
    "description": "DrafJS blockRendererFn 回调函数",
    "lineNumber": 428,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "contentBlock",
        "description": "内容块对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "内容对象"
    }
  },
  {
    "__docId__": 2921,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 450,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2922,
    "kind": "member",
    "name": "editor",
    "memberof": "app/views/common/draft-editor.js~DraftEditor",
    "static": false,
    "longname": "app/views/common/draft-editor.js~DraftEditor#editor",
    "access": "public",
    "description": null,
    "lineNumber": 462,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2923,
    "kind": "file",
    "name": "app/views/common/emoji-popover.js",
    "content": "import React from 'react';\nimport EmojiPicker from 'emojione-picker';\nimport Popover from '../../components/popover';\nimport Lang from '../../lang';\nimport profile from '../../core/profile';\nimport Emojione from '../../components/emojione';\n\n/**\n * Emoji 分类信息\n * @type {Map<string, {title: string, emoji: string}>}\n * @private\n */\nconst emojioneCategories = {\n    people: {\n        title: Lang.string('emoji.category.people', '表情与人物'),\n        emoji: 'smile'\n    },\n    nature: {\n        title: Lang.string('emoji.category.nature', '动物与自然'),\n        emoji: 'hamster'\n    },\n    food: {\n        title: Lang.string('emoji.category.food', '食物与饮料'),\n        emoji: 'pizza'\n    },\n    activity: {\n        title: Lang.string('emoji.category.activity', '活动'),\n        emoji: 'soccer'\n    },\n    travel: {\n        title: Lang.string('emoji.category.travel', '旅行与地点'),\n        emoji: 'earth_americas'\n    },\n    objects: {\n        title: Lang.string('emoji.category.objects', '物体'),\n        emoji: 'bulb'\n    },\n    symbols: {\n        title: Lang.string('emoji.category.symbols', '符号'),\n        emoji: 'clock9'\n    },\n    flags: {\n        title: Lang.string('emoji.category.flags', '旗帜'),\n        emoji: 'flag_gb'\n    }\n};\n\n/**\n * 显示 Emoji 选择提示面板\n * @param {{x: number, y: number}} position 提示框显示位置\n * @param {function(data: Object)} onSelectEmoji 当选择 Emoji 表情时的回调函数\n * @param {function} callback 回调函数\n * @return {void}\n */\nexport const showEmojiPopover = (position, onSelectEmoji, callback) => {\n    const popoverId = 'app-emoji-popover';\n    const {enableSearchInEmojionePicker} = profile.userConfig;\n    return Popover.show(\n        position,\n        <EmojiPicker\n            categories={emojioneCategories}\n            style={{height: 260, width: 280}}\n            search={enableSearchInEmojionePicker ? true : undefined}\n            searchPlaceholder={enableSearchInEmojionePicker ? Lang.string('common.search') : undefined}\n            emojione={{imagePathPNG: Emojione.imagePathPNG, imageType: Emojione.imageType}}\n            onChange={data => {\n                if (onSelectEmoji) {\n                    onSelectEmoji(data);\n                }\n                Popover.hide(popoverId);\n            }}\n        />,\n        {\n            id: popoverId, width: 280, height: 261, cache: true\n        },\n        callback\n    );\n};\n\nexport default {\n    show: showEmojiPopover,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/emoji-popover.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2924,
    "kind": "variable",
    "name": "emojioneCategories",
    "memberof": "app/views/common/emoji-popover.js",
    "static": true,
    "longname": "app/views/common/emoji-popover.js~emojioneCategories",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/emoji-popover.js",
    "importStyle": null,
    "description": "Emoji 分类信息",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, {title: string, emoji: string}>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2925,
    "kind": "function",
    "name": "showEmojiPopover",
    "memberof": "app/views/common/emoji-popover.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/emoji-popover.js~showEmojiPopover",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/emoji-popover.js",
    "importStyle": "{showEmojiPopover}",
    "description": "显示 Emoji 选择提示面板",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "{x: number, y: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "提示框显示位置"
      },
      {
        "nullable": null,
        "types": [
          "function(data: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "onSelectEmoji",
        "description": "当选择 Emoji 表情时的回调函数"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2926,
    "kind": "file",
    "name": "app/views/common/external.js",
    "content": "import AboutDialog from './about-dialog';\nimport MemberProfileDialog from './member-profile-dialog';\nimport About from './about';\nimport MemberProfile from './member-profile';\nimport BuildInfo from './build-info';\nimport Routes from './routes';\nimport DraftEditor from './draft-editor';\nimport StatusDot from './status-dot';\nimport EmojiPopover from './emoji-popover';\nimport {UserAvatar} from './user-avatar';\nimport UserChangePasswordDialog from './user-change-password-dialog';\nimport FileListItem from './file-list-item';\nimport UserListItem from './user-list-item';\nimport FileList from './file-list';\nimport UserProfileDialog from './user-profile-dialog';\nimport HotkeySettingDialog from './hotkey-setting-dialog';\nimport UserSettingDialog from './user-setting-dialog';\nimport MemberListItem from './member-list-item';\nimport UserSetting from './user-setting';\nimport MemberList from './member-list';\n\nexport default {\n    AboutDialog,\n    MemberProfileDialog,\n    About,\n    MemberProfile,\n    BuildInfo,\n    Routes,\n    DraftEditor,\n    StatusDot,\n    EmojiPopover,\n    UserAvatar,\n    UserChangePasswordDialog,\n    FileListItem,\n    UserListItem,\n    FileList,\n    UserProfileDialog,\n    HotkeySettingDialog,\n    UserSettingDialog,\n    MemberListItem,\n    UserSetting,\n    MemberList,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/external.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2927,
    "kind": "file",
    "name": "app/views/common/file-list-item.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Platform from 'Platform';\nimport {classes} from '../../utils/html-helper';\nimport getFileIcon from '../../utils/mdi-file-icon';\nimport {formatBytes} from '../../utils/string-helper';\nimport {formatDate} from '../../utils/date-helper';\nimport Icon from '../../components/icon';\nimport Avatar from '../../components/avatar';\nimport Messager from '../../components/messager';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport {UserAvatar} from './user-avatar';\nimport replaceViews from '../replace-views';\nimport FileData from '../../core/models/file-data';\n\n/**\n * 检查当前平台是否是浏览器\n * @type {boolean}\n * @private\n */\nconst isBrowserPlatform = Platform.type === 'browser';\n\n/**\n * FileListItem 组件 ，显示文件列表条目界面\n * @class FileListItem\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import FileListItem from './file-list-item';\n * <FileListItem />\n */\nexport default class FileListItem extends Component {\n    /**\n     * 获取 FileListItem 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<FileListItem>}\n     * @readonly\n     * @static\n     * @memberof FileListItem\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {FileListItem} from './file-list-item';\n     * <FileListItem />\n     */\n    static get FileListItem() {\n        return replaceViews('common/file-list-item', FileListItem);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof FileListItem\n     * @type {Object}\n     */\n    static propTypes = {\n        file: PropTypes.object.isRequired,\n        smallIcon: PropTypes.bool,\n        showSender: PropTypes.bool,\n        className: PropTypes.string,\n        showDate: PropTypes.bool,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof FileListItem\n     * @static\n     */\n    static defaultProps = {\n        className: 'flex-middle',\n        smallIcon: false,\n        showSender: false,\n        showDate: false,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 FileListItem 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            download: false,\n            localPath: '',\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof FileListItem\n     * @return {void}\n     */\n    componentDidMount() {\n        this.checkLocalPath();\n    }\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof FileListItem\n     */\n    shouldComponentUpdate(nextProps, nextStates) {\n        return nextStates.download !== this.state.download || nextStates.localPath !== this.state.localPath || nextProps.className !== this.props.className || nextProps.smallIcon !== this.props.smallIcon || nextProps.showSender !== this.props.showSender || nextProps.showDate !== this.props.showDate || nextProps.file !== this.props.file || nextProps.file.send !== this.props.file.send || nextProps.file.id !== this.props.file.id || nextProps.file.name !== this.props.file.name;\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidUpdate`\n     * componentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。\n     *\n     * @param {Object} prevProps 更新前的属性值\n     * @param {Object} prevState 更新前的状态值\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidUpdate\n     * @private\n     * @memberof FileListItem\n     * @return {void}\n     */\n    componentDidUpdate() {\n        this.checkLocalPath();\n    }\n\n    /**\n     * 检查文件在本地是否存在\n     * @memberof FileListItem\n     * @returns {boolean} 如果返回 `true` 则为存在，否则为不存在\n     * @private\n     */\n    checkLocalPath() {\n        const {localPath} = this.state;\n        let {file} = this.props;\n        file = FileData.create(file);\n        if (!isBrowserPlatform && file.send === true && localPath !== false && !localPath) {\n            App.im.files.checkCache(file).then(existsPath => {\n                this.setState({localPath: existsPath});\n            }).catch(error => {\n                if (DEBUG) {\n                    console.error('API.checkCache error', error);\n                }\n                this.setState({localPath: false});\n            });\n        }\n    }\n\n    /**\n     * 处理点击下载按钮事件\n     * @param {FileData} file 文件对象\n     * @memberof FileListItem\n     * @private\n     * @return {void}\n     */\n    handleDownloadBtnClick(file) {\n        if (Platform.dialog.showSaveDialog) {\n            Platform.dialog.showSaveDialog({filename: file.name}, filename => {\n                if (filename) {\n                    file.path = filename;\n                    this.setState({download: 0});\n                    App.im.files.downloadFile(file, progress => {\n                        this.setState({download: progress});\n                    }).then(theFile => {\n                        this.setState({download: false, localPath: filename});\n                        return Messager.show(Lang.format('file.fileSavedAt.format', filename), {\n                            actions: [{\n                                label: Lang.string('file.open'),\n                                click: () => {\n                                    Platform.ui.openFileItem(filename);\n                                }\n                            }, {\n                                label: Lang.string('file.openFolder'),\n                                click: () => {\n                                    Platform.ui.showItemInFolder(filename);\n                                }\n                            }]\n                        });\n                    }).catch(error => {\n                        this.setState({download: false});\n                        if (error) {\n                            Messager.show(Lang.error(error), {type: 'danger'});\n                        }\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof FileListItem\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        let {\n            file,\n            className,\n            smallIcon,\n            showSender,\n            showDate,\n            ...other\n        } = this.props;\n\n        file = FileData.create(file);\n\n        const fileName = file.name;\n        const ext = fileName.substr(fileName.lastIndexOf('.'));\n        let fileStatus = null;\n        let actions = null;\n        if (file.send === false) {\n            fileStatus = <span className=\"text-danger small\">{Lang.string('file.uploadFailed')} </span>;\n        } else if (typeof file.send === 'number') {\n            const percent = Math.floor(file.send);\n            actions = <Avatar className=\"avatar secondary outline small circle\" label={`${percent}%`} />;\n        } else if (file.send === true) {\n            file.makeUrl(App.profile.user);\n            if (isBrowserPlatform) {\n                actions = <div className=\"hint--top\" data-hint={Lang.string('file.download')}><a href={file.url} download={fileName} target=\"_blank\" className=\"btn iconbutton text-primary rounded\"><Icon name=\"download\" /></a></div>;\n            } else {\n                const {localPath, download} = this.state;\n                if (download !== false) {\n                    fileStatus = <span className=\"text-primary small\">{Lang.string('file.downloading')} </span>;\n                    actions = <Avatar className=\"avatar secondary outline small circle\" label={`${Math.floor(download)}%`} />;\n                } else if (localPath) {\n                    actions = [\n                        <div key=\"action-open\" className=\"hint--top\" data-hint={Lang.string('file.open')}><button onClick={Platform.ui.openFileItem.bind(this, localPath)} type=\"button\" className=\"btn iconbutton text-primary rounded\"><Icon name=\"open-in-app\" /></button></div>,\n                        <div key=\"action-open-folder\" className=\"hint--top-left\" data-hint={Lang.string('file.openFolder')}><button onClick={Platform.ui.showItemInFolder.bind(this, localPath)} type=\"button\" className=\"btn iconbutton text-primary rounded\"><Icon name=\"folder-outline\" /></button></div>,\n                        <div key=\"action-download\" className=\"hint--top\" data-hint={Lang.string('file.download')}><button onClick={this.handleDownloadBtnClick.bind(this, file)} type=\"button\" className=\"btn iconbutton text-primary rounded\"><Icon name=\"download\" /></button></div>\n                    ];\n                } else {\n                    actions = <div className=\"hint--top\" data-hint={Lang.string('file.download')}><button onClick={this.handleDownloadBtnClick.bind(this, file)} type=\"button\" className=\"btn iconbutton text-primary rounded\"><Icon name=\"download\" /></button></div>;\n                }\n            }\n        }\n\n        const sender = showSender && file.senderId && App.members.get(file.senderId);\n\n        return (\n            <div\n                {...other}\n                className={classes('app-file-list-item item row flex-middle single', className)}\n            >\n                {smallIcon ? null : <Avatar skin={{code: ext, pale: true}} className=\"flex-none\" icon={getFileIcon(ext)} />}\n                <div className=\"content\">\n                    <div className=\"title\">{fileName}</div>\n                    <div className=\"sub-content\">\n                        {fileStatus}\n                        {sender ? <span><UserAvatar size={16} user={sender} /> <small className=\"muted\">{sender.displayName}</small></span> : null}\n                        <span className=\"muted small\">{formatBytes(file.size)}</span>\n                        {showDate && <span className=\"small muted\">{formatDate(file.date)}</span>}\n                    </div>\n                </div>\n                {actions && <div className=\"actions\">{actions}</div>}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/file-list-item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2928,
    "kind": "variable",
    "name": "isBrowserPlatform",
    "memberof": "app/views/common/file-list-item.js",
    "static": true,
    "longname": "app/views/common/file-list-item.js~isBrowserPlatform",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/file-list-item.js",
    "importStyle": null,
    "description": "检查当前平台是否是浏览器",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2929,
    "kind": "class",
    "name": "FileListItem",
    "memberof": "app/views/common/file-list-item.js",
    "static": true,
    "longname": "app/views/common/file-list-item.js~FileListItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/file-list-item.js",
    "importStyle": "FileListItem",
    "description": "FileListItem 组件 ，显示文件列表条目界面",
    "examples": [
      "import FileListItem from './file-list-item';\n<FileListItem />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "FileListItem"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2930,
    "kind": "get",
    "name": "FileListItem",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/file-list-item.js~FileListItem.FileListItem",
    "access": "public",
    "description": "获取 FileListItem 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {FileListItem} from './file-list-item';\n<FileListItem />"
    ],
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<FileListItem>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2931,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "static": true,
    "longname": "app/views/common/file-list-item.js~FileListItem.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2932,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "static": true,
    "longname": "app/views/common/file-list-item.js~FileListItem.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2933,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/file-list-item.js~FileListItem#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 FileListItem 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2934,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "static": false,
    "longname": "app/views/common/file-list-item.js~FileListItem#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2935,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/file-list-item.js~FileListItem#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 107,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2936,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/file-list-item.js~FileListItem#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2937,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/file-list-item.js~FileListItem#componentDidUpdate",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidUpdate`\ncomponentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidUpdate"
    ],
    "lineNumber": 135,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "更新前的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "更新前的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2938,
    "kind": "method",
    "name": "checkLocalPath",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/file-list-item.js~FileListItem#checkLocalPath",
    "access": "private",
    "description": "检查文件在本地是否存在",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则为存在，否则为不存在"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则为存在，否则为不存在"
    },
    "params": []
  },
  {
    "__docId__": 2939,
    "kind": "method",
    "name": "handleDownloadBtnClick",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/file-list-item.js~FileListItem#handleDownloadBtnClick",
    "access": "private",
    "description": "处理点击下载按钮事件",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "FileData"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "文件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2940,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/file-list-item.js~FileListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/file-list-item.js~FileListItem#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 210,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2941,
    "kind": "file",
    "name": "app/views/common/file-list.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport {FileListItem} from './file-list-item';\nimport replaceViews from '../replace-views';\nimport ListItem from '../../components/list-item';\nimport Lang from '../../lang';\nimport Config from '../../config';\n\n/**\n * FileList 组件 ，显示文件列表界面\n * @class FileList\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import FileList from './file-list';\n * <FileList />\n */\nexport default class FileList extends Component {\n    /**\n     * 获取 FileList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<FileList>}\n     * @readonly\n     * @static\n     * @memberof FileList\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {FileList} from './file-list';\n     * <FileList />\n     */\n    static get FileList() {\n        return replaceViews('common/file-list', FileList);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof FileList\n     * @type {Object}\n     */\n    static propTypes = {\n        files: PropTypes.array.isRequired,\n        listItemProps: PropTypes.object,\n        className: PropTypes.string,\n        startPageSize: PropTypes.number,\n        morePageSize: PropTypes.number,\n        defaultPage: PropTypes.number,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof FileList\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        listItemProps: null,\n        startPageSize: Config.ui['page.start.size'] || 20,\n        morePageSize: Config.ui['page.more.size'] || 20,\n        defaultPage: 1,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 FileList 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {page: props.defaultPage};\n    }\n\n    /**\n     * 处理显示更多事件\n     * @param {Event} event 事件对象\n     * @memberof FileList\n     * @private\n     * @return {void}\n     */\n    handleRequestMorePage = () => {\n        this.setState({page: this.state.page + 1});\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof FileList\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            files,\n            className,\n            listItemProps,\n            startPageSize,\n            morePageSize,\n            defaultPage,\n            ...other\n        } = this.props;\n\n        const listViews = [];\n        if (files) {\n            const {page} = this.state;\n            const maxIndex = page ? Math.min(files.length, startPageSize + (page > 1 ? (page - 1) * morePageSize : 0)) : files.length;\n            for (let i = 0; i < maxIndex; i += 1) {\n                const file = files[i];\n                let itemProps = null;\n                if (typeof listItemProps === 'function') {\n                    itemProps = listItemProps(file);\n                } else {\n                    itemProps = listItemProps;\n                }\n                listViews.push(<FileListItem {...itemProps} key={file.id} file={file} />);\n            }\n            const notShowCount = files.length - maxIndex;\n            if (notShowCount) {\n                listViews.push(<ListItem key=\"showMore\" icon=\"chevron-double-down\" className=\"flex-middle item muted\" title={<span className=\"title small\">{Lang.format('common.clickShowMoreFormat', notShowCount)}</span>} onClick={this.handleRequestMorePage} />);\n            }\n        }\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-file-list list', className)}\n        >{listViews}</div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/file-list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2942,
    "kind": "class",
    "name": "FileList",
    "memberof": "app/views/common/file-list.js",
    "static": true,
    "longname": "app/views/common/file-list.js~FileList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/file-list.js",
    "importStyle": "FileList",
    "description": "FileList 组件 ，显示文件列表界面",
    "examples": [
      "import FileList from './file-list';\n<FileList />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "FileList"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2943,
    "kind": "get",
    "name": "FileList",
    "memberof": "app/views/common/file-list.js~FileList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/file-list.js~FileList.FileList",
    "access": "public",
    "description": "获取 FileList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {FileList} from './file-list';\n<FileList />"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<FileList>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2944,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/file-list.js~FileList",
    "static": true,
    "longname": "app/views/common/file-list.js~FileList.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2945,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/file-list.js~FileList",
    "static": true,
    "longname": "app/views/common/file-list.js~FileList.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2946,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/common/file-list.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/file-list.js~FileList#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 FileList 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2947,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/common/file-list.js~FileList",
    "static": false,
    "longname": "app/views/common/file-list.js~FileList#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2948,
    "kind": "member",
    "name": "handleRequestMorePage",
    "memberof": "app/views/common/file-list.js~FileList",
    "static": false,
    "longname": "app/views/common/file-list.js~FileList#handleRequestMorePage",
    "access": "private",
    "description": "处理显示更多事件",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2949,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/file-list.js~FileList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/file-list.js~FileList#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 101,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2950,
    "kind": "file",
    "name": "app/views/common/hotkey-setting-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport HotkeyInputControl from '../../components/hotkey-input-control';\nimport {enableGlobalShortcut, disableGlobalShortcut} from '../../core/ui';\n\n/**\n * 显示快捷键设置对话框\n * @param {string} title 对话框标题\n * @param {string} defaultHotkey 默认快捷键\n * @param {function} onKeySelect 有按键按下时的回调函数\n * @param {function} callback 对话框显示完成时的回调函数\n * @return {void}\n */\nexport const showHotkeySettingDialog = (title, defaultHotkey, onKeySelect, callback) => {\n    let userHotKey = defaultHotkey;\n    disableGlobalShortcut();\n    return Modal.show({\n        title,\n        onHidden: enableGlobalShortcut,\n        onSubmit: () => {\n            if (userHotKey !== defaultHotkey && onKeySelect) {\n                onKeySelect(userHotKey);\n            }\n        },\n        content: <div>\n            <HotkeyInputControl\n                placeholder={defaultHotkey}\n                onChange={key => {\n                    userHotKey = key;\n                }}\n            />\n        </div>\n    }, callback);\n};\n\nexport default {\n    show: showHotkeySettingDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/hotkey-setting-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2951,
    "kind": "function",
    "name": "showHotkeySettingDialog",
    "memberof": "app/views/common/hotkey-setting-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/hotkey-setting-dialog.js~showHotkeySettingDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/hotkey-setting-dialog.js",
    "importStyle": "{showHotkeySettingDialog}",
    "description": "显示快捷键设置对话框",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "对话框标题"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultHotkey",
        "description": "默认快捷键"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onKeySelect",
        "description": "有按键按下时的回调函数"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "对话框显示完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2952,
    "kind": "file",
    "name": "app/views/common/member-list-item.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport {UserAvatar} from './user-avatar';\nimport {StatusDot} from './status-dot';\nimport Member from '../../core/models/member';\nimport replaceViews from '../replace-views';\n\n/**\n * MemberListItem 组件 ，显示成员列表条目界面\n * @class MemberListItem\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MemberListItem from './member-list-item';\n * <MemberListItem />\n */\nexport default class MemberListItem extends Component {\n    /**\n     * 获取 MemberListItem 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MemberListItem>}\n     * @readonly\n     * @static\n     * @memberof MemberListItem\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MemberListItem} from './member-list-item';\n     * <MemberListItem />\n     */\n    static get MemberListItem() {\n        return replaceViews('common/member-list-item', MemberListItem);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MemberListItem\n     * @type {Object}\n     */\n    static propTypes = {\n        member: PropTypes.instanceOf(Member).isRequired,\n        avatarSize: PropTypes.number,\n        showStatusDot: PropTypes.bool,\n        className: PropTypes.string,\n        avatarClassName: PropTypes.string,\n        title: PropTypes.any,\n        children: PropTypes.any,\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MemberListItem\n     * @static\n     */\n    static defaultProps = {\n        avatarSize: 30,\n        showStatusDot: true,\n        className: 'flex-middle',\n        avatarClassName: null,\n        title: null,\n        children: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof MemberListItem\n     */\n    shouldComponentUpdate(nextProps) {\n        return nextProps.children !== this.props.children || nextProps.className !== this.props.className || nextProps.avatarSize !== this.props.avatarSize || nextProps.showStatusDot !== this.props.showStatusDot || nextProps.avatarClassName !== this.props.avatarClassName || nextProps.title !== this.props.title || nextProps.member !== this.props.member || nextProps.member.updateId !== this.lastMemberUpdateId;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MemberListItem\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            member,\n            avatarSize,\n            avatarClassName,\n            showStatusDot,\n            className,\n            children,\n            title,\n            ...other\n        } = this.props;\n\n        this.lastMemberUpdateId = member.updateId;\n\n        let titleView = null;\n        if (title) {\n            if (React.isValidElement(title)) {\n                titleView = title;\n            } else {\n                titleView = <div className=\"title\">{title}</div>;\n            }\n        } else {\n            titleView = <div className=\"title\">{member.displayName}</div>;\n        }\n\n        return (<a\n            {...other}\n            className={HTML.classes('app-member-list-item item', className)}\n        >\n            <UserAvatar className={avatarClassName} size={avatarSize} user={member} />\n            {showStatusDot && <StatusDot status={member.status} />}\n            {titleView}\n            {children}\n        </a>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/member-list-item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2953,
    "kind": "class",
    "name": "MemberListItem",
    "memberof": "app/views/common/member-list-item.js",
    "static": true,
    "longname": "app/views/common/member-list-item.js~MemberListItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/member-list-item.js",
    "importStyle": "MemberListItem",
    "description": "MemberListItem 组件 ，显示成员列表条目界面",
    "examples": [
      "import MemberListItem from './member-list-item';\n<MemberListItem />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MemberListItem"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2954,
    "kind": "get",
    "name": "MemberListItem",
    "memberof": "app/views/common/member-list-item.js~MemberListItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/member-list-item.js~MemberListItem.MemberListItem",
    "access": "public",
    "description": "获取 MemberListItem 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MemberListItem} from './member-list-item';\n<MemberListItem />"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MemberListItem>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2955,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/member-list-item.js~MemberListItem",
    "static": true,
    "longname": "app/views/common/member-list-item.js~MemberListItem.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2956,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/member-list-item.js~MemberListItem",
    "static": true,
    "longname": "app/views/common/member-list-item.js~MemberListItem.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2957,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/common/member-list-item.js~MemberListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/member-list-item.js~MemberListItem#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2958,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/member-list-item.js~MemberListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/member-list-item.js~MemberListItem#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 87,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2959,
    "kind": "member",
    "name": "lastMemberUpdateId",
    "memberof": "app/views/common/member-list-item.js~MemberListItem",
    "static": false,
    "longname": "app/views/common/member-list-item.js~MemberListItem#lastMemberUpdateId",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2960,
    "kind": "file",
    "name": "app/views/common/member-list.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Member from '../../core/models/member';\nimport {MemberListItem} from './member-list-item';\nimport replaceViews from '../replace-views';\nimport ListItem from '../../components/list-item';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport Config from '../../config';\n\n/**\n * MemberList 组件 ，显示成员列表界面\n * @class MemberList\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MemberList from './member-list';\n * <MemberList />\n */\nexport default class MemberList extends Component {\n    /**\n     * 获取 MemberList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MemberList>}\n     * @readonly\n     * @static\n     * @memberof MemberList\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MemberList} from './member-list';\n     * <MemberList />\n     */\n    static get MemberList() {\n        return replaceViews('common/member-list', MemberList);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MemberList\n     * @type {Object}\n     */\n    static propTypes = {\n        members: PropTypes.arrayOf(PropTypes.instanceOf(Member)).isRequired,\n        listItemProps: PropTypes.object,\n        onItemClick: PropTypes.func,\n        onItemContextMenu: PropTypes.func,\n        itemRender: PropTypes.func,\n        contentRender: PropTypes.func,\n        className: PropTypes.string,\n        avatarClassName: PropTypes.string,\n        heading: PropTypes.any,\n        startPageSize: PropTypes.number,\n        morePageSize: PropTypes.number,\n        defaultPage: PropTypes.number,\n        eventBindObject: PropTypes.object,\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MemberList\n     * @static\n     */\n    static defaultProps = {\n        listItemProps: null,\n        onItemClick: null,\n        onItemContextMenu: null,\n        className: null,\n        avatarClassName: null,\n        itemRender: null,\n        contentRender: null,\n        heading: null,\n        startPageSize: Config.ui['page.start.size'] || 20,\n        morePageSize: Config.ui['page.more.size'] || 20,\n        defaultPage: 1,\n        eventBindObject: null\n    };\n\n    /**\n     * React 组件构造函数，创建一个 MemberList 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {page: props.defaultPage};\n    }\n\n    /**\n     * 处理请求显示更多列表条目事件\n     * @memberof MemberList\n     * @private\n     * @return {void}\n     */\n    handleRequestMorePage = () => {\n        this.setState({page: this.state.page + 1});\n    };\n\n    /**\n     * 处理列表条目点击事件\n     * @param {Event} e 事件对象\n     * @memberof MemberList\n     * @private\n     * @return {void}\n     */\n    handleOnItemClick = e => {\n        const {onItemClick, eventBindObject} = this.props;\n        if (onItemClick) {\n            const member = App.members.get(e.currentTarget.attributes['data-id'].value);\n            onItemClick.call(eventBindObject, member, e);\n        }\n    };\n\n    /**\n     * 处理显示条目右键菜单事件\n     * @param {Event} e 事件对象\n     * @memberof MemberList\n     * @private\n     * @return {void}\n     */\n    handleOnItemContextMenu = e => {\n        const {onItemContextMenu, eventBindObject} = this.props;\n        if (onItemContextMenu) {\n            const member = App.members.get(e.currentTarget.attributes['data-id'].value);\n            onItemContextMenu.call(eventBindObject, member, e);\n        }\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MemberList\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            members,\n            className,\n            listItemProps,\n            itemRender,\n            onItemClick,\n            onItemContextMenu,\n            avatarClassName,\n            heading,\n            startPageSize,\n            morePageSize,\n            defaultPage,\n            contentRender,\n            eventBindObject,\n            ...other\n        } = this.props;\n\n        const listViews = [];\n        const {page} = this.state;\n        const maxIndex = page ? Math.min(members.length, startPageSize + (page > 1 ? (page - 1) * morePageSize : 0)) : members.length;\n        for (let i = 0; i < maxIndex; i += 1) {\n            const member = members[i];\n            if (itemRender) {\n                listViews.push(itemRender(member));\n            } else {\n                let itemProps = null;\n                if (typeof listItemProps === 'function') {\n                    itemProps = listItemProps(member);\n                } else {\n                    itemProps = listItemProps;\n                }\n                listViews.push(<MemberListItem data-id={member.id} avatarClassName={avatarClassName} onContextMenu={this.handleOnItemContextMenu} onClick={this.handleOnItemClick} {...itemProps} key={member.account} member={member}>{contentRender && contentRender(member)}</MemberListItem>);\n            }\n        }\n        const notShowCount = members.length - maxIndex;\n        if (notShowCount) {\n            listViews.push(<ListItem key=\"showMore\" icon=\"chevron-double-down\" className=\"flex-middle item muted\" title={<span className=\"title small\">{Lang.format('common.clickShowMoreFormat', notShowCount)}</span>} onClick={this.handleRequestMorePage} />);\n        }\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-member-list list', className)}\n        >\n            {heading}\n            {listViews}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/member-list.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2961,
    "kind": "class",
    "name": "MemberList",
    "memberof": "app/views/common/member-list.js",
    "static": true,
    "longname": "app/views/common/member-list.js~MemberList",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/member-list.js",
    "importStyle": "MemberList",
    "description": "MemberList 组件 ，显示成员列表界面",
    "examples": [
      "import MemberList from './member-list';\n<MemberList />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MemberList"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2962,
    "kind": "get",
    "name": "MemberList",
    "memberof": "app/views/common/member-list.js~MemberList",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/member-list.js~MemberList.MemberList",
    "access": "public",
    "description": "获取 MemberList 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MemberList} from './member-list';\n<MemberList />"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MemberList>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2963,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/member-list.js~MemberList",
    "static": true,
    "longname": "app/views/common/member-list.js~MemberList.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2964,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/member-list.js~MemberList",
    "static": true,
    "longname": "app/views/common/member-list.js~MemberList.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2965,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/common/member-list.js~MemberList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/member-list.js~MemberList#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 MemberList 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 2966,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/common/member-list.js~MemberList",
    "static": false,
    "longname": "app/views/common/member-list.js~MemberList#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2967,
    "kind": "member",
    "name": "handleRequestMorePage",
    "memberof": "app/views/common/member-list.js~MemberList",
    "static": false,
    "longname": "app/views/common/member-list.js~MemberList#handleRequestMorePage",
    "access": "private",
    "description": "处理请求显示更多列表条目事件",
    "lineNumber": 104,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2968,
    "kind": "member",
    "name": "handleOnItemClick",
    "memberof": "app/views/common/member-list.js~MemberList",
    "static": false,
    "longname": "app/views/common/member-list.js~MemberList#handleOnItemClick",
    "access": "private",
    "description": "处理列表条目点击事件",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2969,
    "kind": "member",
    "name": "handleOnItemContextMenu",
    "memberof": "app/views/common/member-list.js~MemberList",
    "static": false,
    "longname": "app/views/common/member-list.js~MemberList#handleOnItemContextMenu",
    "access": "private",
    "description": "处理显示条目右键菜单事件",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2970,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/member-list.js~MemberList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/member-list.js~MemberList#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 146,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2971,
    "kind": "file",
    "name": "app/views/common/member-profile-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport App from '../../core';\nimport {MemberProfile} from './member-profile';\n\n/**\n * 显示成员个人资料对话框\n * @param {number|{id: number}} memberId 成员 ID 或成员对象\n * @param {function} callback 对话框显示完成时的回调函数\n * @return {void}\n */\nexport const showProfileDialog = (memberId, callback) => {\n    if (typeof memberId === 'object') {\n        memberId = memberId.id;\n    }\n    const modalId = `member-${memberId}`;\n    return Modal.show({\n        actions: false,\n        id: modalId,\n        headingClassName: 'dock-right dock-top',\n        className: 'app-member-profile-dialog',\n        content: <MemberProfile memberId={memberId} onRequestClose={() => (Modal.hide(modalId))} />\n    }, callback);\n};\n\nexport default {\n    show: showProfileDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/member-profile-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2972,
    "kind": "function",
    "name": "showProfileDialog",
    "memberof": "app/views/common/member-profile-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/member-profile-dialog.js~showProfileDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/member-profile-dialog.js",
    "importStyle": "{showProfileDialog}",
    "description": "显示成员个人资料对话框",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "{id: number}"
        ],
        "spread": false,
        "optional": false,
        "name": "memberId",
        "description": "成员 ID 或成员对象"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "对话框显示完成时的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2973,
    "kind": "file",
    "name": "app/views/common/member-profile.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport Avatar from '../../components/avatar';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport Member from '../../core/models/member';\nimport ROUTES from '../common/routes';\nimport {UserAvatar} from './user-avatar';\nimport {StatusDot} from './status-dot';\nimport replaceViews from '../replace-views';\n\n/**\n * MemberProfile 组件 ，显示成员个人资料界面\n * @class MemberProfile\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import MemberProfile from './member-profile';\n * <MemberProfile />\n */\nexport default class MemberProfile extends Component {\n    /**\n     * 获取 MemberProfile 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<MemberProfile>}\n     * @readonly\n     * @static\n     * @memberof MemberProfile\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {MemberProfile} from './member-profile';\n     * <MemberProfile />\n     */\n    static get MemberProfile() {\n        return replaceViews('common/member-profile', MemberProfile);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof MemberProfile\n     * @type {Object}\n     */\n    static propTypes = {\n        memberId: PropTypes.any.isRequired,\n        className: PropTypes.string,\n        compact: PropTypes.bool,\n        hideChatBtn: PropTypes.bool,\n        onRequestClose: PropTypes.func,\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof MemberProfile\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        onRequestClose: null,\n        compact: false,\n        hideChatBtn: false,\n    };\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof MemberProfile\n     * @return {void}\n     */\n    componentDidMount() {\n        this.dataChangeEventHandler = App.events.onDataChange(data => {\n            if (data && data.members && data.members[this.props.memberId]) {\n                this.forceUpdate();\n            }\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof MemberProfile\n     */\n    shouldComponentUpdate(nextProps) {\n        return nextProps.compact !== this.props.compact || nextProps.className !== this.props.className || nextProps.hideChatBtn !== this.props.hideChatBtn || nextProps.onRequestClose !== this.props.onRequestClose || nextProps.memberId !== this.props.memberId;\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof MemberProfile\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.dataChangeEventHandler);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof MemberProfile\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            memberId,\n            className,\n            onRequestClose,\n            hideChatBtn,\n            compact,\n            ...other\n        } = this.props;\n\n        const member = App.members.get(memberId);\n        const roleName = member.getRoleName(App);\n        const deptName = member.getDeptName(App);\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-member-profile space user-selectable', className, {compact})}\n        >\n            <header className=\"list-item flex-middle space-sm\">\n                <UserAvatar className=\"avatar-xl flex-none\" user={member} />\n                <div className=\"content has-padding\">\n                    <h3 className=\"title strong\">{member.displayName} <small className=\"muted\">@{member.account}</small></h3>\n                    <div className=\"flex flex-middle infos\">\n                        <StatusDot status={member.status} label />\n                        {member.gender ? <div>{member.gender === 'f' ? <Icon name=\"human-female text-purple\" /> : <Icon name=\"human-male text-blue\" />}{Lang.string(`member.gender.${member.gender}`)}</div> : null}\n                        {roleName ? <div><Icon name=\"account-card-details text-gray\" />{roleName}</div> : null}\n                        {(roleName && deptName) ? '·' : null}\n                        {deptName ? <div>{(!roleName) ? <Icon name=\"account-card-details text-gray\" /> : null}{deptName}</div> : null}\n                    </div>\n                </div>\n                {!hideChatBtn && !member.isDeleted && member.account !== App.profile.userAccount && <a href={`#${ROUTES.chats.contacts.id([member.id, App.profile.user.id].sort().join('&'))}`} onClick={onRequestClose} className=\"btn btn-lg rounded text-primary primary-pale\"><Icon name=\"comment-text-outline\" /> &nbsp;{Lang.string('member.profile.sendMessage')}</a>}\n            </header>\n            <div className=\"divider\" />\n            <div className=\"heading\">\n                <div className=\"title small text-gray\">{Lang.string('member.profile.contactInfo')}</div>\n            </div>\n            {member.mobile && <div className=\"list-item contact-info-item\">\n                <Avatar icon=\"cellphone\" className=\"flex-none circle blue\" />\n                <div className=\"content\">\n                    <div className=\"subtitle\">{Lang.string('member.profile.mobile')}</div>\n                    <input type=\"input\" className=\"input clean\" readOnly value={member.mobile} />\n                </div>\n            </div>}\n            {member.email && <div className=\"list-item contact-info-item\">\n                <Avatar icon=\"email\" className=\"flex-none circle red\" />\n                <div className=\"content\">\n                    <div className=\"subtitle\">{Lang.string('member.profile.email')}</div>\n                    <input type=\"input\" className=\"input clean\" readOnly value={member.email} />\n                </div>\n            </div>}\n            {member.phone && <div className=\"list-item contact-info-item\">\n                <Avatar icon=\"phone\" className=\"flex-none circle green\" />\n                <div className=\"content\">\n                    <div className=\"subtitle\">{Lang.string('member.profile.phone')}</div>\n                    <input type=\"input\" className=\"input clean\" readOnly value={member.phone} />\n                </div>\n            </div>}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/member-profile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2974,
    "kind": "class",
    "name": "MemberProfile",
    "memberof": "app/views/common/member-profile.js",
    "static": true,
    "longname": "app/views/common/member-profile.js~MemberProfile",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/member-profile.js",
    "importStyle": "MemberProfile",
    "description": "MemberProfile 组件 ，显示成员个人资料界面",
    "examples": [
      "import MemberProfile from './member-profile';\n<MemberProfile />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MemberProfile"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2975,
    "kind": "get",
    "name": "MemberProfile",
    "memberof": "app/views/common/member-profile.js~MemberProfile",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/member-profile.js~MemberProfile.MemberProfile",
    "access": "public",
    "description": "获取 MemberProfile 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {MemberProfile} from './member-profile';\n<MemberProfile />"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<MemberProfile>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2976,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/member-profile.js~MemberProfile",
    "static": true,
    "longname": "app/views/common/member-profile.js~MemberProfile.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2977,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/member-profile.js~MemberProfile",
    "static": true,
    "longname": "app/views/common/member-profile.js~MemberProfile.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2978,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/common/member-profile.js~MemberProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/member-profile.js~MemberProfile#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 77,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2979,
    "kind": "member",
    "name": "dataChangeEventHandler",
    "memberof": "app/views/common/member-profile.js~MemberProfile",
    "static": false,
    "longname": "app/views/common/member-profile.js~MemberProfile#dataChangeEventHandler",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2980,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/common/member-profile.js~MemberProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/member-profile.js~MemberProfile#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2981,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/common/member-profile.js~MemberProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/member-profile.js~MemberProfile#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 108,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 2982,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/member-profile.js~MemberProfile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/member-profile.js~MemberProfile#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 120,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2983,
    "kind": "file",
    "name": "app/views/common/routes.js",
    "content": "/**\n * 路由名称配置表\n * @type {Map}\n */\nexport default {\n    chats: {\n        _: '/chats',\n        __: '/chats/:filterType/:id?',\n        chat: {\n            __: '/chats/:filterType/:id',\n            id: (id, filterType) => (`/chats/${filterType || ':filterType'}/${id}`)\n        },\n        recents: {\n            __: '/chats/recents',\n            id: (id) => (`/chats/recents/${id}`)\n        },\n        contacts: {\n            __: '/chats/contacts',\n            id: (id) => (`/chats/contacts/${id}`)\n        },\n        groups: {\n            __: '/chats/groups',\n            id: (id) => (`/chats/groups/${id}`)\n        }\n    },\n    exts: {\n        _: '/exts',\n        app: {\n            __: '/exts/app/:id',\n            id: (id) => (`/exts/app/${id}`)\n        }\n    },\n    apps: {\n        __: '/:app/:filterType?/:id?/:params?',\n    },\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/routes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2984,
    "kind": "file",
    "name": "app/views/common/status-dot.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport {STATUS} from '../../core/models/member';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport replaceViews from '../replace-views';\n\n/**\n * 状态颜色表\n * @type {Map<string, string>}\n * @private\n */\nconst statusColors = {\n    unverified: '#ccc',\n    disconnect: '#ccc',\n    logined: '#18ffff',\n    online: '#00e676',\n    busy: '#ffab00',\n    away: '#ff1744',\n};\n\n/**\n * StatusDot 组件 ，显示状态原典标识\n * @class StatusDot\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import StatusDot from './status-dot';\n * <StatusDot />\n */\nexport default class StatusDot extends PureComponent {\n    /**\n     * 获取 StatusDot 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<StatusDot>}\n     * @readonly\n     * @static\n     * @memberof StatusDot\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {StatusDot} from './status-dot';\n     * <StatusDot />\n     */\n    static get StatusDot() {\n        return replaceViews('common/status-dot', StatusDot);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof StatusDot\n     * @type {Object}\n     */\n    static propTypes = {\n        size: PropTypes.number,\n        className: PropTypes.string,\n        label: PropTypes.any,\n        style: PropTypes.object,\n        status: PropTypes.any,\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof StatusDot\n     * @static\n     */\n    static defaultProps = {\n        size: 14,\n        className: 'circle',\n        style: null,\n        label: null,\n        status: null,\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof StatusDot\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        let {\n            size,\n            className,\n            style,\n            status,\n            label,\n            ...other\n        } = this.props;\n\n        if (App.profile.isUserOnline) {\n            status = STATUS.getName(status);\n        } else {\n            status = 'disconnect';\n        }\n        style = Object.assign({\n            backgroundColor: statusColors[status],\n            border: '1px solid #fff'\n        }, style);\n\n        if (size) {\n            size = HTML.rem(size);\n            style.width = size;\n            style.height = size;\n        }\n\n        const dotView = <span className={HTML.classes('inline-block status-dot', className, `status-${status}`)} style={style} {...other} />;\n\n        if (label) {\n            if (label === true) {\n                label = Lang.string(`member.status.${status === 'unverified' ? 'offline' : status}`);\n            }\n            return <div className=\"app-member-status\">{dotView} &nbsp; <span className=\"status-label muted\">{label}</span></div>;\n        }\n        return dotView;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/status-dot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2985,
    "kind": "variable",
    "name": "statusColors",
    "memberof": "app/views/common/status-dot.js",
    "static": true,
    "longname": "app/views/common/status-dot.js~statusColors",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/status-dot.js",
    "importStyle": null,
    "description": "状态颜色表",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2986,
    "kind": "class",
    "name": "StatusDot",
    "memberof": "app/views/common/status-dot.js",
    "static": true,
    "longname": "app/views/common/status-dot.js~StatusDot",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/status-dot.js",
    "importStyle": "StatusDot",
    "description": "StatusDot 组件 ，显示状态原典标识",
    "examples": [
      "import StatusDot from './status-dot';\n<StatusDot />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "StatusDot"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 2987,
    "kind": "get",
    "name": "StatusDot",
    "memberof": "app/views/common/status-dot.js~StatusDot",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/status-dot.js~StatusDot.StatusDot",
    "access": "public",
    "description": "获取 StatusDot 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {StatusDot} from './status-dot';\n<StatusDot />"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<StatusDot>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2988,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/status-dot.js~StatusDot",
    "static": true,
    "longname": "app/views/common/status-dot.js~StatusDot.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2989,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/status-dot.js~StatusDot",
    "static": true,
    "longname": "app/views/common/status-dot.js~StatusDot.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2990,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/status-dot.js~StatusDot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/status-dot.js~StatusDot#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2991,
    "kind": "file",
    "name": "app/views/common/user-avatar.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Avatar from '../../components/avatar';\nimport HTML from '../../utils/html-helper';\nimport App from '../../core';\nimport {StatusDot} from './status-dot';\nimport replaceViews from '../replace-views';\n\n/**\n * UserAvatar 组件 ，显示用户头像界面\n * @class UserAvatar\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import UserAvatar from './user-avatar';\n * <UserAvatar />\n */\nexport default class UserAvatar extends Component {\n    /**\n     * 获取 UserAvatar 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<UserAvatar>}\n     * @readonly\n     * @static\n     * @memberof UserAvatar\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {UserAvatar} from './user-avatar';\n     * <UserAvatar />\n     */\n    static get UserAvatar() {\n        return replaceViews('common/user-avatar', UserAvatar);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof UserAvatar\n     * @type {Object}\n     */\n    static propTypes = {\n        user: PropTypes.object,\n        className: PropTypes.string,\n        showStatusDot: PropTypes.bool,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof UserAvatar\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        showStatusDot: null,\n        user: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof UserAvatar\n     */\n    shouldComponentUpdate(nextProps) {\n        return nextProps.className !== this.props.className || nextProps.user !== this.props.user || !nextProps.user || !this.props.user || nextProps.user.status !== this.props.user.status || nextProps.user.avatar !== this.props.user.avatar || nextProps.user.realname !== this.props.user.realname;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof UserAvatar\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            user,\n            className,\n            showStatusDot,\n            ...other\n        } = this.props;\n\n        let statusDot = null;\n        if (showStatusDot) {\n            statusDot = <StatusDot status={user.status} />;\n        }\n\n        if (!user) {\n            return <Avatar className={HTML.classes('circle user-avatar', className)} icon=\"account\" {...other}>{statusDot}</Avatar>;\n        }\n\n        const avatarImageSrc = user.getAvatar(App.user && App.user.server);\n        if (avatarImageSrc) {\n            return <Avatar className={HTML.classes('circle user-avatar', className)} image={avatarImageSrc} imageClassName=\"circle\" {...other}>{statusDot}</Avatar>;\n        }\n        const name = user.realname || user.account;\n        if (name && name.length) {\n            return <Avatar skin={{code: user.id || name, textColor: '#fff'}} className={HTML.classes('circle user-avatar', className)} label={name[0].toUpperCase()} {...other}>{statusDot}</Avatar>;\n        }\n        return <Avatar skin={{code: user.id, textColor: '#fff'}} className={HTML.classes('circle user-avatar', className)} icon=\"account\" {...other}>{statusDot}</Avatar>;\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/user-avatar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2992,
    "kind": "class",
    "name": "UserAvatar",
    "memberof": "app/views/common/user-avatar.js",
    "static": true,
    "longname": "app/views/common/user-avatar.js~UserAvatar",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/user-avatar.js",
    "importStyle": "UserAvatar",
    "description": "UserAvatar 组件 ，显示用户头像界面",
    "examples": [
      "import UserAvatar from './user-avatar';\n<UserAvatar />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "UserAvatar"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 2993,
    "kind": "get",
    "name": "UserAvatar",
    "memberof": "app/views/common/user-avatar.js~UserAvatar",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/user-avatar.js~UserAvatar.UserAvatar",
    "access": "public",
    "description": "获取 UserAvatar 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {UserAvatar} from './user-avatar';\n<UserAvatar />"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<UserAvatar>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2994,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/user-avatar.js~UserAvatar",
    "static": true,
    "longname": "app/views/common/user-avatar.js~UserAvatar.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2995,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/user-avatar.js~UserAvatar",
    "static": true,
    "longname": "app/views/common/user-avatar.js~UserAvatar.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2996,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/common/user-avatar.js~UserAvatar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-avatar.js~UserAvatar#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 2997,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/user-avatar.js~UserAvatar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-avatar.js~UserAvatar#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 2998,
    "kind": "file",
    "name": "app/views/common/user-change-password-dialog.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from '../../components/modal';\nimport InputControl from '../../components/input-control';\nimport Messager from '../../components/messager';\nimport App from '../../core';\nimport HTML from '../../utils/html-helper';\nimport StringHelper from '../../utils/string-helper';\nimport Lang from '../../lang';\n\n/**\n * UserChangePassword-Dialog 组件 ，显示修改用户密码界面\n * @class UserChangePassword-Dialog\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import UserChangePassword-Dialog from './user-change-password-dialog';\n * <UserChangePassword-Dialog />\n */\nexport class UserChangePassword extends Component {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof UserChangePassword-Dialog\n     * @type {Object}\n     */\n    static propTypes = {\n        onFinish: PropTypes.func,\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof UserChangePassword-Dialog\n     * @static\n     */\n    static defaultProps = {\n        onFinish: null,\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 UserChangePassword-Dialog 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            oldPassword: '',\n            password1: '',\n            password2: '',\n            message: '',\n            doing: false\n        };\n    }\n\n    /**\n     * 处理输入框值变更事件\n     * @param {string} name 属性名称\n     * @param {string} value 属性值\n     * @memberof UserChangePassword-Dialog\n     * @private\n     * @return {void}\n     */\n    handleInputChange(name, value) {\n        this.setState({[name]: value, message: ''});\n    }\n\n    /**\n     * 处理取消按钮点击事件\n     * @memberof UserChangePassword-Dialog\n     * @private\n     * @return {void}\n     */\n    handleCancelBtnClick = () => {\n        if (this.props.onFinish) {\n            this.props.onFinish(false);\n        }\n    }\n\n    /**\n     * 处理确定按钮点击事件\n     * @memberof UserChangePassword-Dialog\n     * @private\n     * @return {void}\n     */\n    handleConfirmBtnClick = () => {\n        if (StringHelper.isEmpty(this.state.password1)) {\n            return this.setState({message: Lang.format('user.changePassword.inputRequired', Lang.string('user.changePassword.newPassword'))});\n        }\n        if (this.state.password1.length < 6) {\n            return this.setState({message: Lang.string('user.changePassword.denySimplePassword')});\n        }\n        if (StringHelper.isEmpty(this.state.password2)) {\n            return this.setState({message: Lang.format('user.changePassword.inputRequired', Lang.string('user.changePassword.newPasswordRepeat'))});\n        }\n        if (this.state.password1 !== this.state.password2) {\n            return this.setState({message: Lang.string('user.changePassword.passwordNotSame')});\n        }\n        this.setState({doing: true});\n        App.server.socket.changeUserPassword(this.state.password1).then(() => {\n            this.setState({doing: false});\n            if (this.props.onFinish) {\n                this.props.onFinish(true);\n            }\n        }).catch(error => {\n            this.setState({\n                message: Lang.error(error) || Lang.string('user.changePassword.failed'),\n                doing: false\n            });\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof UserChangePassword-Dialog\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            onFinish,\n            className,\n            ...other\n        } = this.props;\n        return (<div className={HTML.classes('app-user-change-pwd', className)} {...other}>\n            {this.state.message && <div className=\"box danger rounded space-sm\">{this.state.message}</div>}\n            <InputControl inputType=\"password\" className={this.state.message && (StringHelper.isEmpty(this.state.password1) || this.state.password1 !== this.state.password2) ? 'has-error' : ''} disabled={this.state.doing} onChange={this.handleInputChange.bind(this, 'password1')} value={this.state.password1} label={Lang.string('user.changePassword.newPassword')} />\n            <InputControl inputType=\"password\" className={this.state.message && (StringHelper.isEmpty(this.state.password2) || this.state.password1 !== this.state.password2) ? 'has-error' : ''} disabled={this.state.doing} onChange={this.handleInputChange.bind(this, 'password2')} value={this.state.password2} label={Lang.string('user.changePassword.newPasswordRepeat')} />\n            <div className=\"has-padding-v\">\n                <button disabled={this.state.doing} onClick={this.handleConfirmBtnClick} type=\"button\" className=\"btn primary btn-wide\">{Lang.string('user.changePassword.btn.confirm')}</button>\n                 &nbsp;\n                <button disabled={this.state.doing} onClick={this.handleCancelBtnClick} type=\"button\" className=\"btn gray btn-wide\">{Lang.string('common.cancel')}</button>\n            </div>\n        </div>);\n    }\n}\n\n/**\n * 显示修改密码对话框\n * @param {function} callback 对话框显示回调函数\n * @return {void}\n */\nexport const showUserChangePasswordDialog = (callback) => {\n    const modalId = 'user-change-pwd';\n    const onFinish = result => {\n        Modal.hide(modalId);\n        if (result) {\n            Messager.show(Lang.string('user.changePassword.success'), {type: 'success'});\n        }\n    };\n    return Modal.show({\n        actions: false,\n        id: modalId,\n        className: 'app-user-change-pwd-dialog',\n        content: <UserChangePassword onFinish={onFinish} />,\n        title: Lang.string('user.changePassword.heading')\n    }, callback);\n};\n\nexport default {\n    show: showUserChangePasswordDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/user-change-password-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2999,
    "kind": "class",
    "name": "UserChangePassword",
    "memberof": "app/views/common/user-change-password-dialog.js",
    "static": true,
    "longname": "app/views/common/user-change-password-dialog.js~UserChangePassword",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/user-change-password-dialog.js",
    "importStyle": "{UserChangePassword}",
    "description": "UserChangePassword-Dialog 组件 ，显示修改用户密码界面",
    "examples": [
      "import UserChangePassword-Dialog from './user-change-password-dialog';\n<UserChangePassword-Dialog />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "UserChangePassword-Dialog"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3000,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/user-change-password-dialog.js~UserChangePassword",
    "static": true,
    "longname": "app/views/common/user-change-password-dialog.js~UserChangePassword.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3001,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/user-change-password-dialog.js~UserChangePassword",
    "static": true,
    "longname": "app/views/common/user-change-password-dialog.js~UserChangePassword.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3002,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/common/user-change-password-dialog.js~UserChangePassword",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-change-password-dialog.js~UserChangePassword#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 UserChangePassword-Dialog 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3003,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/common/user-change-password-dialog.js~UserChangePassword",
    "static": false,
    "longname": "app/views/common/user-change-password-dialog.js~UserChangePassword#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3004,
    "kind": "method",
    "name": "handleInputChange",
    "memberof": "app/views/common/user-change-password-dialog.js~UserChangePassword",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-change-password-dialog.js~UserChangePassword#handleInputChange",
    "access": "private",
    "description": "处理输入框值变更事件",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "属性名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "属性值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3005,
    "kind": "member",
    "name": "handleCancelBtnClick",
    "memberof": "app/views/common/user-change-password-dialog.js~UserChangePassword",
    "static": false,
    "longname": "app/views/common/user-change-password-dialog.js~UserChangePassword#handleCancelBtnClick",
    "access": "private",
    "description": "处理取消按钮点击事件",
    "lineNumber": 86,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3006,
    "kind": "member",
    "name": "handleConfirmBtnClick",
    "memberof": "app/views/common/user-change-password-dialog.js~UserChangePassword",
    "static": false,
    "longname": "app/views/common/user-change-password-dialog.js~UserChangePassword#handleConfirmBtnClick",
    "access": "private",
    "description": "处理确定按钮点击事件",
    "lineNumber": 98,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3007,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/user-change-password-dialog.js~UserChangePassword",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-change-password-dialog.js~UserChangePassword#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 133,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3008,
    "kind": "function",
    "name": "showUserChangePasswordDialog",
    "memberof": "app/views/common/user-change-password-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/user-change-password-dialog.js~showUserChangePasswordDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/user-change-password-dialog.js",
    "importStyle": "{showUserChangePasswordDialog}",
    "description": "显示修改密码对话框",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "对话框显示回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3009,
    "kind": "file",
    "name": "app/views/common/user-list-item.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport {UserAvatar} from './user-avatar';\nimport replaceViews from '../replace-views';\n\n/**\n * UserListItem 组件 ，显示用户列表条目界面\n * @class UserListItem\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import UserListItem from './user-list-item';\n * <UserListItem />\n */\nexport default class UserListItem extends Component {\n    /**\n     * 获取 UserListItem 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<UserListItem>}\n     * @readonly\n     * @static\n     * @memberof UserListItem\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {UserListItem} from './user-list-item';\n     * <UserListItem />\n     */\n    static get UserListItem() {\n        return replaceViews('common/user-list-item', UserListItem);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof UserListItem\n     * @type {Object}\n     */\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        className: PropTypes.string,\n        avatarSize: PropTypes.number,\n        avatarClassName: PropTypes.string,\n        children: PropTypes.any,\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof UserListItem\n     * @static\n     */\n    static defaultProps = {\n        avatarSize: 30,\n        className: 'flex-middle',\n        avatarClassName: null,\n        children: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`shouldComponentUpdate`\n     * 让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。\n     *\n     * @param {Object} nextProps 即将更新的属性值\n     * @param {Object} nextState 即将更新的状态值\n     * @returns {boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用\n     * @memberof UserListItem\n     */\n    shouldComponentUpdate(nextProps) {\n        return nextProps.children !== this.props.children || nextProps.className !== this.props.className || nextProps.avatarSize !== this.props.avatarSize || nextProps.avatarClassName !== this.props.avatarClassName || nextProps.user !== this.props.user || nextProps.user.account !== this.props.user.account || nextProps.user.avatar !== this.props.user.avatar || nextProps.user.realname !== this.props.user.realname || nextProps.user.server !== this.props.user.server;\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof UserListItem\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            user,\n            avatarSize,\n            avatarClassName,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        return (<a\n            {...other}\n            className={HTML.classes('app-user-list-item item', className)}\n        >\n            <UserAvatar className={avatarClassName} size={avatarSize} user={user} />\n            <div className=\"content\">\n                <div className=\"title\">{user.displayName} <small className=\"muted\">@{user.account}</small></div>\n                <div className=\"subtitle\">{user.serverUrl}</div>\n            </div>\n            {children}\n        </a>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/user-list-item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3010,
    "kind": "class",
    "name": "UserListItem",
    "memberof": "app/views/common/user-list-item.js",
    "static": true,
    "longname": "app/views/common/user-list-item.js~UserListItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/user-list-item.js",
    "importStyle": "UserListItem",
    "description": "UserListItem 组件 ，显示用户列表条目界面",
    "examples": [
      "import UserListItem from './user-list-item';\n<UserListItem />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "UserListItem"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3011,
    "kind": "get",
    "name": "UserListItem",
    "memberof": "app/views/common/user-list-item.js~UserListItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/user-list-item.js~UserListItem.UserListItem",
    "access": "public",
    "description": "获取 UserListItem 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {UserListItem} from './user-list-item';\n<UserListItem />"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<UserListItem>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3012,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/user-list-item.js~UserListItem",
    "static": true,
    "longname": "app/views/common/user-list-item.js~UserListItem.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3013,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/user-list-item.js~UserListItem",
    "static": true,
    "longname": "app/views/common/user-list-item.js~UserListItem.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3014,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "app/views/common/user-list-item.js~UserListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-list-item.js~UserListItem#shouldComponentUpdate",
    "access": "public",
    "description": "React 组件生命周期函数：`shouldComponentUpdate`\n让React知道当前状态或属性的改变是否不影响组件的输出。默认行为是在每一次状态的改变重渲，在大部分情况下你应该依赖于默认行为。",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} 如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "即将更新的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "即将更新的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果返回 `true` 则继续渲染组件，否则为 `false` 而后的 `UNSAFE_componentWillUpdate()`，`render()`， 和 `componentDidUpdate()` 将不会被调用"
    }
  },
  {
    "__docId__": 3015,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/user-list-item.js~UserListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-list-item.js~UserListItem#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 81,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3016,
    "kind": "file",
    "name": "app/views/common/user-profile-dialog.js",
    "content": "import {profile} from '../../core';\nimport MemberProfileDialog from './member-profile-dialog';\n\n/**\n * 显示个人资料对话框\n * @param {function} callback 对话框显示回调函数\n * @return {void}\n */\nexport const showUserProfileDialog = (callback) => {\n    const {user} = profile;\n    if (user) {\n        return MemberProfileDialog.show(user, callback);\n    } else if (callback) {\n        callback(false);\n    }\n};\n\nexport default {\n    show: showUserProfileDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/user-profile-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3017,
    "kind": "function",
    "name": "showUserProfileDialog",
    "memberof": "app/views/common/user-profile-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/user-profile-dialog.js~showUserProfileDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/user-profile-dialog.js",
    "importStyle": "{showUserProfileDialog}",
    "description": "显示个人资料对话框",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "对话框显示回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3018,
    "kind": "file",
    "name": "app/views/common/user-setting-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport DEFAULT_USER_CONFIG from '../../core/profile/user-default-config';\nimport Messager from '../../components/messager';\nimport UserSetting from './user-setting';\n\n/**\n * 显示个人设置对话框\n * @param {function} callback 对话框显示回调函数\n * @return {void}\n */\nexport const showUserSettingDialog = (callback) => {\n    let userSetting = null;\n    App.ui.disableGlobalShortcut();\n    return Modal.show({\n        title: Lang.string('common.setting'),\n        id: 'app-user-setting-dialog',\n        actions: [\n            {\n                type: 'submit',\n                label: Lang.string('common.save'),\n                click: () => {\n                    if (userSetting) {\n                        App.user.config.set(userSetting.getSettings());\n                    }\n                }\n            }, {\n                type: 'cancel',\n            }, {\n                type: 'secondary',\n                className: 'text-danger pull-left',\n                label: Lang.string('setting.btn.reset'),\n                click: () => {\n                    if (userSetting) {\n                        userSetting.setSettings(DEFAULT_USER_CONFIG);\n                        Messager.show(Lang.string('setting.message.reset'), {autoHide: true});\n                    }\n                    return false;\n                }\n            }\n        ],\n        onHidden: App.ui.enableGlobalShortcut,\n        content: <UserSetting ref={e => {userSetting = e;}} settings={App.profile.userConfig.plain()} />\n    }, callback);\n};\n\nexport default {\n    show: showUserSettingDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/user-setting-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3019,
    "kind": "function",
    "name": "showUserSettingDialog",
    "memberof": "app/views/common/user-setting-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/user-setting-dialog.js~showUserSettingDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/user-setting-dialog.js",
    "importStyle": "{showUserSettingDialog}",
    "description": "显示个人设置对话框",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "对话框显示回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3020,
    "kind": "file",
    "name": "app/views/common/user-setting.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Platform from 'Platform';\nimport Config from '../../config';\nimport {classes} from '../../utils/html-helper';\nimport {formatKeyDecoration} from '../../utils/shortcut';\nimport HotkeyInputControl from '../../components/hotkey-input-control';\nimport Lang from '../../lang';\nimport Checkbox from '../../components/checkbox';\nimport SelectBox from '../../components/select-box';\nimport timeSequence from '../../utils/time-sequence';\n\n/**\n * 当前平台是否是浏览器\n * @type {boolean}\n * @private\n */\nconst isBrowser = Platform.type === 'browser';\n\n/**\n * 判断是否已关闭通知功能\n * @param {Object} state React 状态对象\n * @return {boolean} 如果是 `true` 则为已关闭通知功能\n * @private\n */\nconst isNotificationOff = state => {\n    return !state['ui.notify.enableSound'];\n};\n\n/**\n * 判断是否已关闭通知栏图标闪烁功能\n * @param {Object} state React 状态对象\n * @return {boolean} 如果是 `true` 则为已关闭通知栏图标闪烁功能\n * @private\n */\nconst isFlashTrayIconOff = state => {\n    return isBrowser || !state['ui.notify.flashTrayIcon'];\n};\n\n/**\n * 判断是否已关闭桌面通知功能\n * @param {Object} state React 状态对象\n * @return {boolean} 如果是 `true` 则为已关闭桌面通知功能\n * @private\n */\nconst isWindowNotificationOff = state => {\n    return !state['ui.notify.enableWindowNotification'];\n};\n\n/**\n * 个人配置界面列表项清单\n * @type {Map[]}\n * @private\n */\nconst configs = [\n    {\n        name: 'chats',\n        title: Lang.string('setting.section.chats'),\n        items: [\n            {\n                type: 'boolean',\n                name: 'ui.chat.sendHDEmoticon',\n                caption: Lang.string('setting.chats.sendHDEmoticon')\n            }, {\n                type: 'boolean',\n                name: 'ui.chat.showMessageTip',\n                caption: Lang.string('setting.chats.showMessageTip')\n            }, {\n                type: 'boolean',\n                name: 'ui.chat.enableSearchInEmojionePicker',\n                caption: Lang.string('setting.chats.enableSearchInEmojionePicker')\n            }, {\n                type: 'boolean',\n                name: 'ui.chat.enableAnimate',\n                caption: Lang.string('setting.chats.enableAnimate'),\n                hidden: 'TODO: chats animate is not ready in current version.'\n            }, {\n                type: 'boolean',\n                name: 'ui.chat.listenClipboardImage',\n                caption: Lang.string('setting.chats.listenClipboardImage'),\n                hidden: isBrowser\n            }\n        ]\n    }, {\n        name: 'notification',\n        title: Lang.string('setting.section.notification'),\n        items: [\n            {\n                type: 'boolean',\n                name: 'ui.notify.enableSound',\n                caption: Lang.string('setting.notification.enableSoundNotification')\n            }, {\n                type: 'select',\n                name: 'ui.notify.playSoundCondition',\n                className: 'level-2',\n                options: [\n                    {value: '', label: Lang.string('setting.notification.onNeed')},\n                    {value: 'onWindowBlur', label: Lang.string('setting.notification.onWindowBlur')},\n                    {value: 'onWindowHide', label: Lang.string('setting.notification.onWindowHide')},\n                ],\n                hidden: isNotificationOff,\n                caption: Lang.string('setting.notification.playSoundCondition')\n            }, {\n                type: 'boolean',\n                className: 'level-2',\n                name: 'ui.notify.muteOnUserIsBusy',\n                hidden: isNotificationOff,\n                caption: Lang.string('setting.notification.muteOnUserIsBusy')\n            }, {\n                type: 'boolean',\n                name: 'ui.notify.flashTrayIcon',\n                hidden: isBrowser,\n                caption: Lang.string('setting.notification.flashTrayIcon')\n            }, {\n                type: 'select',\n                name: 'ui.notify.flashTrayIconCondition',\n                className: 'level-2',\n                options: [\n                    {value: '', label: Lang.string('setting.notification.onNeed')},\n                    {value: 'onWindowBlur', label: Lang.string('setting.notification.onWindowBlur')},\n                    {value: 'onWindowHide', label: Lang.string('setting.notification.onWindowHide')},\n                ],\n                hidden: isFlashTrayIconOff,\n                caption: Lang.string('setting.notification.flashTrayIconCondition')\n            }, {\n                type: 'boolean',\n                name: 'ui.notify.enableWindowNotification',\n                caption: Lang.string('setting.notification.enableWindowNotification')\n            }, {\n                type: 'select',\n                name: 'ui.notify.windowNotificationCondition',\n                className: 'level-2',\n                options: [\n                    {value: 'onWindowBlur', label: Lang.string('setting.notification.onWindowBlur')},\n                    isBrowser ? null : {value: 'onWindowHide', label: Lang.string('setting.notification.onWindowHide')},\n                ],\n                hidden: isWindowNotificationOff,\n                caption: Lang.string('setting.notification.windowNotificationCondition')\n            }, {\n                type: 'boolean',\n                className: 'level-2',\n                hidden: isWindowNotificationOff,\n                name: 'ui.notify.safeWindowNotification',\n                caption: Lang.string('setting.notification.safeWindowNotificationTip')\n            }\n        ]\n    }, {\n        name: 'navigation',\n        title: Lang.string('setting.section.navigation'),\n        items: [\n            {\n                type: 'boolean',\n                name: 'ui.navbar.avatarPosition',\n                caption: Lang.string('setting.navigation.showAvatarOnBottom'),\n                getConverter: value => {\n                    return value === 'bottom';\n                },\n                setConverter: value => {\n                    return value ? 'bottom' : 'top';\n                },\n            }\n        ]\n    }, {\n        name: 'windows',\n        hidden: isBrowser,\n        title: Lang.string('setting.section.windows'),\n        items: [\n            {\n                type: 'boolean',\n                name: 'ui.app.hideWindowOnBlur',\n                caption: Lang.string('setting.windows.hideWindowOnBlur')\n            }, {\n                type: 'boolean',\n                name: 'ui.app.removeFromTaskbarOnHide',\n                caption: Lang.string('setting.windows.removeFromTaskbarOnHide')\n            }, {\n                type: 'select',\n                name: 'ui.app.onClose',\n                hidden: !Platform.ui.showQuitConfirmDialog,\n                options: [\n                    {value: 'ask', label: Lang.string('setting.windows.askEveryTime')},\n                    {value: 'minimize', label: Lang.string('setting.windows.minimizeMainWindow')},\n                    {value: 'close', label: Lang.string('setting.windows.quitApp')},\n                ],\n                caption: Lang.string('setting.windows.onClickCloseButton')\n            }\n        ]\n    }, {\n        name: 'hotkeys',\n        hidden: isBrowser,\n        title: Lang.string('setting.section.hotkeys'),\n        items: [\n            {\n                type: 'select',\n                name: 'shortcut.sendMessage',\n                options: Config.ui['hotkey.sendMessageOptions'].map(formatKeyDecoration),\n                caption: Lang.string('setting.hotkeys.sendMessage')\n            }, {\n                hidden: isBrowser,\n                type: 'hotkey',\n                name: 'shortcut.captureScreen',\n                caption: Lang.string('setting.hotkeys.globalCaptureScreen')\n            }, {\n                type: 'hotkey',\n                hidden: isBrowser,\n                name: 'shortcut.focusWindow',\n                caption: Lang.string('setting.hotkeys.globalFocusWindow')\n            }\n        ]\n    }\n];\n\n/**\n * UserSetting 组件 ，显示个人设置界面\n * @class UserSetting\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import UserSetting from './user-setting';\n * <UserSetting />\n */\nexport default class UserSetting extends Component {\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof UserSetting\n     * @type {Object}\n     */\n    static propTypes = {\n        settings: PropTypes.object.isRequired,\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof UserSetting\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 UserSetting 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = Object.assign({}, this.props.settings);\n    }\n\n    /**\n     * 获取当前设置的个人配置对象\n     *\n     * @return {Object} 个人配置对象\n     * @memberof UserSetting\n     */\n    getSettings() {\n        return this.state;\n    }\n\n    /**\n     * 设置当前设置的个人配置对象\n     *\n     * @param {Object} settings 个人配置对象\n     * @memberof UserSetting\n     * @return {void}\n     */\n    setSettings(settings) {\n        this.setState(Object.assign({}, settings));\n    }\n\n    /**\n     * 修改个人配置\n     *\n     * @param {Object|{name: string}} item 配置项对象\n     * @param {any} value 配置项值\n     * @memberof UserSetting\n     * @return {void}\n     */\n    changeConfig(item, value) {\n        const name = item.name;\n        if (typeof value === 'object' && value.target) {\n            if (value.target.type === 'checkbox') {\n                value = value.target.checked;\n            } else {\n                value = value.target.value;\n            }\n        }\n        if (item.setConverter) {\n            value = item.setConverter(value);\n        }\n        this.setState({[name]: value});\n    }\n\n    /**\n     * 渲染普通配置项\n     *\n     * @param {Object} item 配置项对象\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @memberof UserSetting\n     */\n    renderConfigItem(item) {\n        if (item.hidden) {\n            let hidden = item.hidden;\n            if (typeof item.hidden === 'function') {\n                hidden = item.hidden(this.state);\n            }\n            if (hidden) {\n                return null;\n            }\n        }\n        switch (item.type) {\n        case 'boolean':\n            return this.renderBooleanItem(item);\n        case 'select':\n            return this.renderSelectItem(item);\n        case 'hotkey':\n            return this.renderHotkeyItem(item);\n        }\n        return null;\n    }\n\n    /**\n     * 渲染快捷键配置项\n     *\n     * @param {Object} item 配置项对象\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @memberof UserSetting\n     */\n    renderHotkeyItem(item) {\n        let value = this.state[item.name];\n        if (item.getConverter) {\n            value = item.getConverter(value);\n        }\n        return <HotkeyInputControl key={item.name} defaultValue={value} labelStyle={{flex: 1}} onChange={this.changeConfig.bind(this, item)} label={item.caption} className={classes('flex', item.className)} />;\n    }\n\n    /**\n     * 渲染选择框配置项\n     *\n     * @param {Object} item 配置项对象\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @memberof UserSetting\n     */\n    renderSelectItem(item) {\n        let value = this.state[item.name];\n        if (item.getConverter) {\n            value = item.getConverter(value);\n        }\n        const controlId = `selectbox-${timeSequence()}`;\n        return (<div className={classes('control flex', item.className)} key={item.name}>\n            <label htmlFor={controlId} style={{flex: '1 1 0%'}}>{item.caption}</label>\n            <SelectBox selectProps={{id: controlId}} value={value} options={item.options} onChange={this.changeConfig.bind(this, item)} selectClassName=\"rounded\" />\n        </div>);\n    }\n\n    /**\n     * 渲染布尔值配置项\n     *\n     * @param {Object} item 配置项对象\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     * @memberof UserSetting\n     */\n    renderBooleanItem(item) {\n        let value = this.state[item.name];\n        if (item.getConverter) {\n            value = item.getConverter(value);\n        }\n        const checked = !!value;\n        return (<div className={classes('control', item.className)} key={item.name}>\n            <Checkbox checked={checked} label={item.caption} onChange={this.changeConfig.bind(this, item)} />\n        </div>);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof UserSetting\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            settings,\n            className,\n            ...other\n        } = this.props;\n\n        return (<div\n            {...other}\n            className={classes('app-user-setting space', className)}\n        >\n            {\n                configs.map(section => {\n                    if (section.hidden) {\n                        return null;\n                    }\n                    return (<section key={section.name} className={`space app-setting-group-${section.name}`}>\n                        <header className=\"heading divider space-sm\">\n                            <strong className=\"title text-gray\">{section.title}</strong>\n                        </header>\n                        <div className=\"items\">\n                            {\n                                section.items.map(item => {\n                                    return this.renderConfigItem(item);\n                                })\n                            }\n                        </div>\n                    </section>);\n                })\n            }\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/user-setting.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3021,
    "kind": "variable",
    "name": "isBrowser",
    "memberof": "app/views/common/user-setting.js",
    "static": true,
    "longname": "app/views/common/user-setting.js~isBrowser",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/user-setting.js",
    "importStyle": null,
    "description": "当前平台是否是浏览器",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3022,
    "kind": "function",
    "name": "isNotificationOff",
    "memberof": "app/views/common/user-setting.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/user-setting.js~isNotificationOff",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/user-setting.js",
    "importStyle": null,
    "description": "判断是否已关闭通知功能",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "React 状态对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果是 `true` 则为已关闭通知功能"
    }
  },
  {
    "__docId__": 3023,
    "kind": "function",
    "name": "isFlashTrayIconOff",
    "memberof": "app/views/common/user-setting.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/user-setting.js~isFlashTrayIconOff",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/user-setting.js",
    "importStyle": null,
    "description": "判断是否已关闭通知栏图标闪烁功能",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "React 状态对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果是 `true` 则为已关闭通知栏图标闪烁功能"
    }
  },
  {
    "__docId__": 3024,
    "kind": "function",
    "name": "isWindowNotificationOff",
    "memberof": "app/views/common/user-setting.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/user-setting.js~isWindowNotificationOff",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/user-setting.js",
    "importStyle": null,
    "description": "判断是否已关闭桌面通知功能",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "React 状态对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "如果是 `true` 则为已关闭桌面通知功能"
    }
  },
  {
    "__docId__": 3025,
    "kind": "variable",
    "name": "configs",
    "memberof": "app/views/common/user-setting.js",
    "static": true,
    "longname": "app/views/common/user-setting.js~configs",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/user-setting.js",
    "importStyle": null,
    "description": "个人配置界面列表项清单",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "Map[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3026,
    "kind": "class",
    "name": "UserSetting",
    "memberof": "app/views/common/user-setting.js",
    "static": true,
    "longname": "app/views/common/user-setting.js~UserSetting",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/user-setting.js",
    "importStyle": "UserSetting",
    "description": "UserSetting 组件 ，显示个人设置界面",
    "examples": [
      "import UserSetting from './user-setting';\n<UserSetting />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "UserSetting"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3027,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "static": true,
    "longname": "app/views/common/user-setting.js~UserSetting.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 230,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3028,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "static": true,
    "longname": "app/views/common/user-setting.js~UserSetting.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 242,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3029,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-setting.js~UserSetting#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 UserSetting 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3030,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "static": false,
    "longname": "app/views/common/user-setting.js~UserSetting#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 260,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3031,
    "kind": "method",
    "name": "getSettings",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-setting.js~UserSetting#getSettings",
    "access": "public",
    "description": "获取当前设置的个人配置对象",
    "lineNumber": 269,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "个人配置对象"
    },
    "params": []
  },
  {
    "__docId__": 3032,
    "kind": "method",
    "name": "setSettings",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-setting.js~UserSetting#setSettings",
    "access": "public",
    "description": "设置当前设置的个人配置对象",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "个人配置对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3033,
    "kind": "method",
    "name": "changeConfig",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-setting.js~UserSetting#changeConfig",
    "access": "public",
    "description": "修改个人配置",
    "lineNumber": 292,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "{name: string}"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "配置项对象"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "配置项值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3034,
    "kind": "method",
    "name": "renderConfigItem",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-setting.js~UserSetting#renderConfigItem",
    "access": "public",
    "description": "渲染普通配置项",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "配置项对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    }
  },
  {
    "__docId__": 3035,
    "kind": "method",
    "name": "renderHotkeyItem",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-setting.js~UserSetting#renderHotkeyItem",
    "access": "public",
    "description": "渲染快捷键配置项",
    "lineNumber": 342,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "配置项对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    }
  },
  {
    "__docId__": 3036,
    "kind": "method",
    "name": "renderSelectItem",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-setting.js~UserSetting#renderSelectItem",
    "access": "public",
    "description": "渲染选择框配置项",
    "lineNumber": 357,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "配置项对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    }
  },
  {
    "__docId__": 3037,
    "kind": "method",
    "name": "renderBooleanItem",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-setting.js~UserSetting#renderBooleanItem",
    "access": "public",
    "description": "渲染布尔值配置项",
    "lineNumber": 376,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "配置项对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    }
  },
  {
    "__docId__": 3038,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/user-setting.js~UserSetting",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/user-setting.js~UserSetting#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 395,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3039,
    "kind": "file",
    "name": "app/views/common/webview-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport WebViewFrame from './webview-frame';\nimport timeSequence from '../../utils/time-sequence';\n\n/**\n * 在对话框中显示一个网页\n * @param {string} sourceUrl 网页源地址\n * @param {Object} options Webview 选项\n * @param {function} callback 对话框显示完成回调函数\n * @return {void}\n */\nexport const showWebviewDialog = (sourceUrl, options, callback) => {\n    let width = (options && options.width);\n    let height = (options && options.height);\n    if (options && options.size) {\n        if (options.size === 'lg') {\n            width = width || (window.innerWidth - 40);\n            height = height || (window.innerHeight - 40);\n        } else if (options.size === 'full') {\n            width = width || '100%';\n            height = height || '100%';\n        }\n    }\n    if (typeof height === 'number') {\n        height = `${height}px`;\n    }\n    if (typeof width === 'number') {\n        width = `${width}px`;\n    }\n    const displayId = `display-${timeSequence()}`;\n    return Modal.show({\n        id: displayId,\n        style: {width: width || 860, height: height || 640},\n        headingClassName: 'dock dock-right dock-top',\n        actions: false,\n        animation: 'enter-from-bottom fade',\n        contentClassName: 'no-padding flex stretch',\n        content: <WebViewFrame displayId={displayId} src={sourceUrl} options={options} />\n    }, callback);\n};\n\nexport default {\n    show: showWebviewDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/webview-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3040,
    "kind": "function",
    "name": "showWebviewDialog",
    "memberof": "app/views/common/webview-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/webview-dialog.js~showWebviewDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/webview-dialog.js",
    "importStyle": "{showWebviewDialog}",
    "description": "在对话框中显示一个网页",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": "网页源地址"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Webview 选项"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "对话框显示完成回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3041,
    "kind": "file",
    "name": "app/views/common/webview-frame.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport WebView from './webview';\nimport Avatar from '../../components/avatar';\nimport Icon from '../../components/icon';\nimport {openUrlInBrowser} from '../../core/ui';\nimport replaceViews from '../replace-views';\n\n/**\n * WebviewFrame 组件 ，显示网页视图界面\n * @class WebviewFrame\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import WebviewFrame from './webview-frame';\n * <WebviewFrame />\n */\nexport default class WebViewFrame extends Component {\n    /**\n     * 获取 WebviewFrame 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<WebviewFrame>}\n     * @readonly\n     * @static\n     * @memberof WebviewFrame\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {WebviewFrame} from './webview-frame';\n     * <WebviewFrame />\n     */\n    static get WebViewFrame() {\n        return replaceViews('common/webview-frame', WebViewFrame);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof WebviewFrame\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        onLoadingChange: PropTypes.func,\n        onPageTitleUpdated: PropTypes.func,\n        options: PropTypes.object,\n        src: PropTypes.string.isRequired,\n        displayId: PropTypes.any\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof WebviewFrame\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        onLoadingChange: null,\n        onPageTitleUpdated: null,\n        options: null,\n        displayId: null\n    };\n\n    /**\n     * React 组件构造函数，创建一个 WebviewFrame 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            title: props.src,\n            favicon: 'mdi-web',\n            loading: false,\n            maximize: false\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof WebviewFrame\n     * @return {void}\n     */\n    componentDidMount() {\n        const webview = this.webview.webview;\n        if (webview && webview.addEventListener) {\n            webview.addEventListener('page-favicon-updated', this.handleFaviconUpdated);\n        }\n    }\n\n    /**\n     * 重新加载网页\n     * @private\n     * @memberof WebviewFrame\n     * @return {void}\n     */\n    reloadWebview() {\n        if (this.webviewId) {\n            const webview = document.getElementById(this.webviewId);\n            webview.reload();\n        }\n    }\n\n    /**\n     * 处理网站 Favicon 更新事件\n     * @param {Event} e 事件对象\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handleFaviconUpdated = e => {\n        if (e.favicons && e.favicons.length) {\n            this.setState({favicon: e.favicons[0]});\n        }\n    };\n\n    /**\n     * 处理网页标题更新事件\n     * @param {string} title 网页标题\n     * @param {boolean} explicitSet 是否为以明确设置的网页标题\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handlePageTitleChange = (title, explicitSet) => {\n        const {onPageTitleUpdated} = this.props;\n        if (title !== this.state.title) {\n            this.setState({title: title});\n        }\n        if (onPageTitleUpdated) {\n            onPageTitleUpdated(title, explicitSet);\n        }\n    };\n\n    /**\n     * 处理网也加载状态更新事件\n     * @param {boolean} loading 是否正在加载\n     * @param {...any} params 其他参数\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handleLoadingChange = (loading, ...params) => {\n        this.setState({loading});\n        const {onLoadingChange} = this.props;\n        if (onLoadingChange) {\n            onLoadingChange(loading, ...params);\n        }\n    };\n\n    /**\n     * 处理点击重新载入按钮事件\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handleReloadBtnClick = () => {\n        this.setState({loading: true}, () => {\n            this.webview.reloadWebview();\n        });\n    };\n\n    /**\n     * 处理点击停止加载按钮事件\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handleStopBtnClick = () => {\n        if (this.webview && this.webview.webview && this.webview.webview.stop) {\n            this.webview.webview.stop();\n        }\n    };\n\n    /**\n     * 处理点击返回按钮事件\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handleGoBackBtnClick = () => {\n        if (this.webview && this.webview.webview && this.webview.webview.goBack) {\n            this.webview.webview.goBack();\n        }\n    };\n\n    /**\n     * 处理点击前进按钮事件\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handleGoForwardBtnClick = () => {\n        if (this.webview && this.webview.webview && this.webview.webview.goForward) {\n            this.webview.webview.goForward();\n        }\n    };\n\n    /**\n     * 处理点击在浏览器打开按钮事件\n     * @param {Event} event 事件对象\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handleOpenBtnClick = () => {\n        if (this.webview && this.webview.webview && this.webview.webview.getURL) {\n            openUrlInBrowser(this.webview.webview.getURL());\n        } else {\n            openUrlInBrowser(this.props.src);\n        }\n    };\n\n    /**\n     * 处理点击最大化按钮事件\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handleMaximizeBtnClick = () => {\n        const {displayId} = this.props;\n        if (displayId) {\n            const displayEle = document.getElementById(displayId);\n            if (displayEle) {\n                displayEle.classList.toggle('fullscreen');\n                this.setState({maximize: displayEle.classList.contains('fullscreen')});\n            }\n        }\n    };\n\n    /**\n     * 处理点击开发者工具按钮事件\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handleDevBtnClick = () => {\n        if (this.webview && this.webview.webview) {\n            this.webview.webview.openDevTools();\n        }\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof WebviewFrame\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        let {\n            className,\n            onLoadingChange,\n            onPageTitleUpdated,\n            src,\n            options,\n            displayId,\n            ...other\n        } = this.props;\n\n        const isMaximize = this.state.maximize;\n        const webview = this.webview && this.webview.webview;\n\n        return (<div className={classes('webview-frame column', className)} {...other}>\n            <div className=\"heading flex-none shadow-2\" style={{zIndex: 1031}}>\n                {Avatar.render(this.state.loading ? 'mdi-loading spin muted' : this.state.favicon)}\n                <div title={this.state.title} className=\"title text-ellipsis strong\">{this.state.title}</div>\n                <nav className=\"nav\" style={{marginRight: 40}}>\n                    {DEBUG ? <a onClick={this.handleDevBtnClick}>{Icon.render('auto-fix')}</a> : null}\n                    <a onClick={this.handleOpenBtnClick}>{Icon.render('open-in-new')}</a>\n                    <a className={webview && webview.canGoBack && webview.canGoBack() ? '' : 'disabled'} onClick={this.handleGoBackBtnClick}>{Icon.render('arrow-left')}</a>\n                    <a className={webview && webview.canGoForward && webview.canGoForward() ? '' : 'disabled'} onClick={this.handleGoForwardBtnClick}>{Icon.render('arrow-right')}</a>\n                    {this.state.loading ? <a onClick={this.handleStopBtnClick}>{Icon.render('close-circle-outline')}</a> : <a onClick={this.handleReloadBtnClick}>{Icon.render('reload')}</a>}\n                    {displayId ? <a onClick={this.handleMaximizeBtnClick}>{Icon.render(isMaximize ? 'window-restore' : 'window-maximize')}</a> : null}\n                </nav>\n            </div>\n            <WebView ref={e => {this.webview = e;}} className=\"flex-auto relative\" src={src} {...options} onLoadingChange={this.handleLoadingChange} onPageTitleUpdated={this.handlePageTitleChange} />\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/webview-frame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3042,
    "kind": "class",
    "name": "WebViewFrame",
    "memberof": "app/views/common/webview-frame.js",
    "static": true,
    "longname": "app/views/common/webview-frame.js~WebViewFrame",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/webview-frame.js",
    "importStyle": "WebViewFrame",
    "description": "WebviewFrame 组件 ，显示网页视图界面",
    "examples": [
      "import WebviewFrame from './webview-frame';\n<WebviewFrame />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "WebviewFrame"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3043,
    "kind": "get",
    "name": "WebViewFrame",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/webview-frame.js~WebViewFrame.WebViewFrame",
    "access": "public",
    "description": "获取 WebviewFrame 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {WebviewFrame} from './webview-frame';\n<WebviewFrame />"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<WebviewFrame>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3044,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": true,
    "longname": "app/views/common/webview-frame.js~WebViewFrame.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3045,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": true,
    "longname": "app/views/common/webview-frame.js~WebViewFrame.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3046,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 WebviewFrame 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3047,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3048,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3049,
    "kind": "method",
    "name": "reloadWebview",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#reloadWebview",
    "access": "private",
    "description": "重新加载网页",
    "lineNumber": 110,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3050,
    "kind": "member",
    "name": "handleFaviconUpdated",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#handleFaviconUpdated",
    "access": "private",
    "description": "处理网站 Favicon 更新事件",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3051,
    "kind": "member",
    "name": "handlePageTitleChange",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#handlePageTitleChange",
    "access": "private",
    "description": "处理网页标题更新事件",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "网页标题"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "explicitSet",
        "description": "是否为以明确设置的网页标题"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3052,
    "kind": "member",
    "name": "handleLoadingChange",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#handleLoadingChange",
    "access": "private",
    "description": "处理网也加载状态更新事件",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "loading",
        "description": "是否正在加载"
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "params",
        "description": "其他参数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3053,
    "kind": "member",
    "name": "handleReloadBtnClick",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#handleReloadBtnClick",
    "access": "private",
    "description": "处理点击重新载入按钮事件",
    "lineNumber": 170,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3054,
    "kind": "member",
    "name": "handleStopBtnClick",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#handleStopBtnClick",
    "access": "private",
    "description": "处理点击停止加载按钮事件",
    "lineNumber": 182,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3055,
    "kind": "member",
    "name": "handleGoBackBtnClick",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#handleGoBackBtnClick",
    "access": "private",
    "description": "处理点击返回按钮事件",
    "lineNumber": 194,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3056,
    "kind": "member",
    "name": "handleGoForwardBtnClick",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#handleGoForwardBtnClick",
    "access": "private",
    "description": "处理点击前进按钮事件",
    "lineNumber": 206,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3057,
    "kind": "member",
    "name": "handleOpenBtnClick",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#handleOpenBtnClick",
    "access": "private",
    "description": "处理点击在浏览器打开按钮事件",
    "lineNumber": 219,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3058,
    "kind": "member",
    "name": "handleMaximizeBtnClick",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#handleMaximizeBtnClick",
    "access": "private",
    "description": "处理点击最大化按钮事件",
    "lineNumber": 233,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3059,
    "kind": "member",
    "name": "handleDevBtnClick",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#handleDevBtnClick",
    "access": "private",
    "description": "处理点击开发者工具按钮事件",
    "lineNumber": 250,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3060,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 264,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3061,
    "kind": "member",
    "name": "webview",
    "memberof": "app/views/common/webview-frame.js~WebViewFrame",
    "static": false,
    "longname": "app/views/common/webview-frame.js~WebViewFrame#webview",
    "access": "public",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3062,
    "kind": "file",
    "name": "app/views/common/webview.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Platform from 'Platform';\nimport {classes} from '../../utils/html-helper';\nimport timeSequence from '../../utils/time-sequence';\nimport replaceViews from '../replace-views';\n\n/**\n * 获取当前平台是否为 Electron 平台\n * @type {boolean}\n * @private\n */\nconst isElectron = Platform.type === 'electron';\n\n/**\n * Webview 组件 ，显示 Webview 界面\n * @class Webview\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import Webview from './webview';\n * <Webview />\n */\nexport default class WebView extends Component {\n    /**\n     * 获取 Webview 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<Webview>}\n     * @readonly\n     * @static\n     * @memberof Webview\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {Webview} from './webview';\n     * <Webview />\n     */\n    static get WebView() {\n        return replaceViews('common/webview', WebView);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Webview\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        onLoadingChange: PropTypes.func,\n        onPageTitleUpdated: PropTypes.func,\n        src: PropTypes.string.isRequired,\n        insertCss: PropTypes.string,\n        executeJavaScript: PropTypes.string,\n        onExeCuteJavaScript: PropTypes.func,\n        onNavigate: PropTypes.func,\n        onDomReady: PropTypes.func,\n        injectForm: PropTypes.any,\n        useMobileAgent: PropTypes.bool,\n        hideBeforeDOMReady: PropTypes.bool,\n        style: PropTypes.object,\n        type: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Webview\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        onLoadingChange: null,\n        onPageTitleUpdated: null,\n        insertCss: null,\n        executeJavaScript: null,\n        onExeCuteJavaScript: null,\n        onNavigate: null,\n        injectForm: null,\n        onDomReady: null,\n        useMobileAgent: false,\n        hideBeforeDOMReady: true,\n        style: null,\n        type: 'auto'\n    };\n\n    /**\n     * React 组件构造函数，创建一个 Webview 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * Webview ID\n         * @type {string}\n         * @private\n         */\n        this.webviewId = `webview-${timeSequence()}`;\n\n        const {type} = props;\n\n        /**\n         * 是否使用 Electron 内置 Webview 实现\n         * @type {boolean}\n         * @private\n         */\n        this.isWebview = (type === 'auto' && isElectron) || type === 'webview';\n\n        /**\n         * 是否使用 iframe 实现 Webview\n         * @type {boolean}\n         * @private\n         */\n        this.isIframe = !this.isWebview;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            errorCode: null,\n            errorDescription: null,\n            domReady: false\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof Webview\n     * @return {void}\n     */\n    componentDidMount() {\n        const {webview} = this;\n        if (webview) {\n            if (this.isWebview) {\n                webview.addEventListener('did-start-loading', this.handleLoadingStart);\n                webview.addEventListener('did-finish-load', this.handleLoadingStop);\n                webview.addEventListener('did-stop-loading', this.handleLoadingStop);\n                webview.addEventListener('page-title-updated', this.handlePageTitleChange);\n                webview.addEventListener('did-fail-load', this.handleLoadFail);\n                webview.addEventListener('new-window', this.handleNewWindow);\n                webview.addEventListener('dom-ready', this.handleDomReady);\n                webview.addEventListener('will-navigate', this.handleWillNavigate);\n            } else if (this.isIframe) {\n                const {iframe} = webview;\n                iframe.onload = () => {\n                    if (iframe.contentWindow.document.readyState !== 'loading') {\n                        this.handleDomReady();\n                    } else {\n                        iframe.contentWindow.document.addEventListener('DOMContentLoaded', e => {\n                            this.handleDomReady();\n                        });\n                    }\n                };\n                if (iframe.contentWindow.document.readyState !== 'loading') {\n                    this.handleDomReady();\n                }\n            }\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof Webview\n     * @return {void}\n     */\n    componentWillUnmount() {\n        const {webview} = this;\n        if (webview) {\n            if (this.isWebview) {\n                webview.removeEventListener('did-start-loading', this.handleLoadingStart);\n                webview.removeEventListener('did-stop-loading', this.handleLoadingStop);\n                webview.removeEventListener('page-title-updated', this.handlePageTitleChange);\n                webview.removeEventListener('did-fail-load', this.handleLoadFail);\n                webview.removeEventListener('new-window', this.handleNewWindow);\n                webview.removeEventListener('dom-ready', this.handleDomReady);\n                webview.removeEventListener('will-navigate', this.handleWillNavigate);\n            } else if (this.isIframe) {\n                const {iframe} = webview;\n                if (iframe) {\n                    iframe.onoad = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * 获取 Webview 对象\n     * @memberof Webview\n     * @type {Object}\n     */\n    get webview() {\n        let webview = document.getElementById(this.webviewId);\n        if (webview && this.isIframe) {\n            webview = {\n                contentWindow: webview.contentWindow,\n                iframe: webview,\n                reload() {\n                    webview.contentWindow.location.reload();\n                },\n                insertCSS(css) {\n                    const {document} = webview.contentWindow;\n                    const styleEle = document.createElement('style');\n                    styleEle.innerHTML = css;\n                    document.head.appendChild(styleEle);\n                },\n                executeJavaScript(code, userGesture, callback) {\n                    const {document} = webview.contentWindow;\n                    const scriptEle = document.createElement('script');\n                    scriptEle.innerHTML = code;\n                    document.body.appendChild(scriptEle);\n                    callback && callback();\n                }\n            };\n        }\n        return webview;\n    }\n\n    /**\n     * 重新载入 Webview\n     *\n     * @memberof WebView\n     * @return {void}\n     */\n    reloadWebview() {\n        const {webview} = this;\n        if (webview) {\n            webview.reload();\n        }\n    }\n\n    /**\n     * 处理导航到其他页面事件\n     * @param {Event} e 事件对象\n     * @memberof Webview\n     * @private\n     * @return {void}\n     */\n    handleWillNavigate = e => {\n        const {onNavigate} = this.props;\n        if (onNavigate) {\n            onNavigate(e.url, e);\n        }\n    }\n\n    /**\n     * 处理在新窗口打开事件\n     * @param {Event} e 事件对象\n     * @memberof Webview\n     * @private\n     * @return {void}\n     */\n    handleNewWindow = e => {\n        if (Platform.ui.openExternal) {\n            Platform.ui.openExternal(e.url);\n        }\n    };\n\n    /**\n     * 处理页面标题变更事件\n     * @param {Event} e 事件对象\n     * @memberof Webview\n     * @private\n     * @return {void}\n     */\n    handlePageTitleChange = e => {\n        const {onPageTitleUpdated} = this.props;\n        if (onPageTitleUpdated) {\n            onPageTitleUpdated(e.title, e.explicitSet);\n        }\n    };\n\n    /**\n     * 处理开始加载事件\n     * @memberof Webview\n     * @private\n     * @return {void}\n     */\n    handleLoadingStart = () => {\n        const {onLoadingChange} = this.props;\n        if (onLoadingChange) {\n            onLoadingChange(true);\n        }\n        this.setState({\n            errorCode: null,\n            errorDescription: null,\n            // domReady: false\n        });\n    };\n\n    /**\n     * 处理加载失败事件\n     * @param {Event} e 事件对象\n     * @memberof Webview\n     * @private\n     * @return {void}\n     */\n    handleLoadFail = (e) => {\n        const {errorCode, errorDescription, validatedURL} = e;\n        const {onLoadingChange} = this.props;\n        if (onLoadingChange) {\n            onLoadingChange(false, errorCode, errorDescription, validatedURL);\n        }\n        this.setState({\n            errorCode,\n            errorDescription,\n            domReady: true,\n        });\n        if (DEBUG) {\n            console.error('Cannot load webview', e);\n        }\n    };\n\n    /**\n     * 处理停止加载事件\n     * @memberof Webview\n     * @private\n     * @return {void}\n     */\n    handleLoadingStop = () => {\n        const {onLoadingChange} = this.props;\n        if (onLoadingChange) {\n            onLoadingChange(false);\n        }\n        this.setState({\n            domReady: true\n        });\n    };\n\n    /**\n     * 处理 Dom 加载完毕事件\n     * @memberof Webview\n     * @private\n     * @return {void}\n     */\n    handleDomReady = () => {\n        const {webview} = this;\n        const {onDomReady} = this.props;\n        const {insertCss, executeJavaScript, onExeCuteJavaScript} = this.props;\n        if (insertCss) {\n            webview.insertCSS(insertCss);\n            if (DEBUG) {\n                console.log('Webview.insertCSS', insertCss);\n            }\n        }\n        if (executeJavaScript) {\n            webview.executeJavaScript(executeJavaScript, false, onExeCuteJavaScript);\n            if (DEBUG) {\n                console.log('Webview.executeJavaScript', executeJavaScript);\n            }\n        }\n        let {injectForm} = this.props;\n        if (injectForm) {\n            if (typeof injectForm === 'string') {\n                injectForm = JSON.parse(injectForm);\n            }\n            const injectScriptLines = ['(function(){'];\n            Object.keys(injectForm).forEach((key, index) => {\n                if (key && key[0] !== '$') {\n                    let keyValue = injectForm[key];\n                    if (keyValue) {\n                        keyValue = keyValue.replace(/`/g, '\\\\`');\n                    }\n                    injectScriptLines.push(\n                        `document.querySelectorAll('${key}').forEach(ele => {if(ele.tagName === 'INPUT' || ele.tagName === 'SELECT' || ele.tagName === 'TEXTAREA') {ele.value = \\`${keyValue}\\`;}});`\n                    );\n                }\n            });\n            ['click', 'submit', 'focus', 'input', 'paste'].forEach(key => {\n                const eventSelector = injectForm[`$${key}`];\n                if (eventSelector) {\n                    injectScriptLines.push(\n                        `document.querySelectorAll('${eventSelector}').forEach(ele => {ele.dispatchEvent(new Event('${key}'));});`\n                    );\n                }\n            });\n\n            injectScriptLines.push('}());');\n            const injectScriptCode = injectScriptLines.join('\\n');\n            if (DEBUG) {\n                console.log('Webview.injectForm', {injectForm, injectScriptCode});\n            }\n            webview.executeJavaScript(injectScriptCode, false, () => {\n                if (DEBUG) {\n                    console.log('Webview.injectForm.finish', injectForm);\n                }\n            });\n        }\n        if (onDomReady) {\n            onDomReady();\n        }\n\n        const {contextmenu} = Platform;\n        if (this.isWebview && contextmenu && (contextmenu.showInputContextMenu || contextmenu.showSelectionContextMenu)) {\n            const webContents = webview.getWebContents();\n            if (webContents) {\n                webContents.on('context-menu', (e, props) => {\n                    const {selectionText, isEditable} = props;\n                    if (isEditable) {\n                        if (contextmenu.showInputContextMenu) {\n                            contextmenu.showInputContextMenu();\n                        }\n                    } else if (selectionText && selectionText.trim() !== '') {\n                        if (contextmenu.showSelectionContextMenu) {\n                            contextmenu.showSelectionContextMenu();\n                        }\n                    }\n                });\n            }\n        }\n\n        this.setState({domReady: true, loading: false});\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Webview\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            onLoadingChange,\n            onPageTitleUpdated,\n            src,\n            style,\n            useMobileAgent,\n            hideBeforeDOMReady,\n            ...options\n        } = this.props;\n\n        let webviewHtml = '';\n        const {isWebview} = this;\n        if (isWebview) {\n            webviewHtml = `<webview id=\"${this.webviewId}\" src=\"${src}\" class=\"dock fluid-v fluid\" ${options && options.nodeintegration ? 'nodeintegration' : ''} ${options && options.preload ? (` preload=\"${options.preload}\"`) : ''} />`;\n        } else {\n            webviewHtml = `<iframe sandbox=\"allow-forms allow-modals allow-pointer-lock allow-popups allow-presentation allow-scripts\" id=\"${this.webviewId}\" src=\"${src}\" scrolling=\"auto\" allowtransparency=\"true\" hidefocus frameborder=\"0\" class=\"dock fluid-v fluid\" />`;\n        }\n        if (this.state.errorCode) {\n            webviewHtml += `<div class=\"dock box gray\"><h1>ERROR ${this.state.errorCode}</h1><h2>${src}</h2><div>${this.state.errorDescription}</div></div>`;\n        }\n\n        return (\n            <div\n                className={classes('webview fade', className, {in: !hideBeforeDOMReady || this.state.domReady})}\n                dangerouslySetInnerHTML={{__html: webviewHtml}} // eslint-disable-line\n                style={style}\n            />\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/common/webview.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3063,
    "kind": "variable",
    "name": "isElectron",
    "memberof": "app/views/common/webview.js",
    "static": true,
    "longname": "app/views/common/webview.js~isElectron",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/common/webview.js",
    "importStyle": null,
    "description": "获取当前平台是否为 Electron 平台",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3064,
    "kind": "class",
    "name": "WebView",
    "memberof": "app/views/common/webview.js",
    "static": true,
    "longname": "app/views/common/webview.js~WebView",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/common/webview.js",
    "importStyle": "WebView",
    "description": "Webview 组件 ，显示 Webview 界面",
    "examples": [
      "import Webview from './webview';\n<Webview />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Webview"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3065,
    "kind": "get",
    "name": "WebView",
    "memberof": "app/views/common/webview.js~WebView",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/common/webview.js~WebView.WebView",
    "access": "public",
    "description": "获取 Webview 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {Webview} from './webview';\n<Webview />"
    ],
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<Webview>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3066,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/common/webview.js~WebView",
    "static": true,
    "longname": "app/views/common/webview.js~WebView.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3067,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/common/webview.js~WebView",
    "static": true,
    "longname": "app/views/common/webview.js~WebView.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3068,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/common/webview.js~WebView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/webview.js~WebView#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 Webview 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3069,
    "kind": "member",
    "name": "webviewId",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#webviewId",
    "access": "private",
    "description": "Webview ID",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3070,
    "kind": "member",
    "name": "isWebview",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#isWebview",
    "access": "private",
    "description": "是否使用 Electron 内置 Webview 实现",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3071,
    "kind": "member",
    "name": "isIframe",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#isIframe",
    "access": "private",
    "description": "是否使用 iframe 实现 Webview",
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3072,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3073,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/common/webview.js~WebView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/webview.js~WebView#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 140,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3074,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/common/webview.js~WebView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/webview.js~WebView#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 180,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3075,
    "kind": "get",
    "name": "webview",
    "memberof": "app/views/common/webview.js~WebView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/webview.js~WebView#webview",
    "access": "public",
    "description": "获取 Webview 对象",
    "lineNumber": 205,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3076,
    "kind": "method",
    "name": "reloadWebview",
    "memberof": "app/views/common/webview.js~WebView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/webview.js~WebView#reloadWebview",
    "access": "public",
    "description": "重新载入 Webview",
    "lineNumber": 238,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3077,
    "kind": "member",
    "name": "handleWillNavigate",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#handleWillNavigate",
    "access": "private",
    "description": "处理导航到其他页面事件",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3078,
    "kind": "member",
    "name": "handleNewWindow",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#handleNewWindow",
    "access": "private",
    "description": "处理在新窗口打开事件",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3079,
    "kind": "member",
    "name": "handlePageTitleChange",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#handlePageTitleChange",
    "access": "private",
    "description": "处理页面标题变更事件",
    "lineNumber": 279,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3080,
    "kind": "member",
    "name": "handleLoadingStart",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#handleLoadingStart",
    "access": "private",
    "description": "处理开始加载事件",
    "lineNumber": 292,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3081,
    "kind": "member",
    "name": "handleLoadFail",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#handleLoadFail",
    "access": "private",
    "description": "处理加载失败事件",
    "lineNumber": 311,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3082,
    "kind": "member",
    "name": "handleLoadingStop",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#handleLoadingStop",
    "access": "private",
    "description": "处理停止加载事件",
    "lineNumber": 333,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3083,
    "kind": "member",
    "name": "handleDomReady",
    "memberof": "app/views/common/webview.js~WebView",
    "static": false,
    "longname": "app/views/common/webview.js~WebView#handleDomReady",
    "access": "private",
    "description": "处理 Dom 加载完毕事件",
    "lineNumber": 349,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3084,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/common/webview.js~WebView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/common/webview.js~WebView#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 436,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3085,
    "kind": "file",
    "name": "app/views/external.js",
    "content": "import chats from './chats/external';\nimport common from './common/external';\nimport exts from './exts/external';\nimport index from './index/external';\nimport login from './login/external';\nimport main from './main/external';\n\nexport default {\n    chats,\n    common,\n    exts,\n    index,\n    login,\n    main\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/external.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3086,
    "kind": "file",
    "name": "app/views/exts/app-extensions.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Lang from '../../lang';\nimport SearchControl from '../../components/search-control';\nimport Icon from '../../components/icon';\nimport Button from '../../components/button';\nimport Exts from '../../exts';\nimport OpenedApp from '../../exts/opened-app';\nimport App from '../../core';\nimport {ExtensionListItem} from './extension-list-item';\nimport replaceViews from '../replace-views';\n\n/**\n * 扩展类型表\n * @type {{type: string, label:string}[]}\n * @private\n */\nconst extensionTypes = [\n    {type: '', label: Lang.string('ext.extensions.all')},\n    {type: 'app', label: Lang.string('ext.extensions.apps')},\n    {type: 'plugin', label: Lang.string('ext.extensions.plugins')},\n    {type: 'theme', label: Lang.string('ext.extensions.themes')},\n];\n\n/**\n * AppExtensions 组件 ，显示“应用”扩展界面\n * @class AppExtensions\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import AppExtensions from './app-extensions';\n * <AppExtensions />\n */\nexport default class AppExtensions extends Component {\n    /**\n     * 获取 AppExtensions 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<AppExtensions>}\n     * @readonly\n     * @static\n     * @memberof AppExtensions\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {AppExtensions} from './app-extensions';\n     * <AppExtensions />\n     */\n    static get AppExtensions() {\n        return replaceViews('exts/app-extensions', AppExtensions);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof AppExtensions\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        app: PropTypes.instanceOf(OpenedApp).isRequired,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof AppExtensions\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 AppExtensions 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        const {app} = props;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            search: '',\n            showInstalled: true,\n            type: (app.params && app.params.type) ? app.params.type : ''\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof AppExtensions\n     * @return {void}\n     */\n    componentDidMount() {\n        this.onExtChangeHandler = Exts.all.onExtensionChange(() => {\n            this.forceUpdate();\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof AppExtensions\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.onExtChangeHandler);\n    }\n\n    /**\n     * 处理点击导航项目事件\n     * @param {string} extType 导航类型名称\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleNavItemClick(extType) {\n        this.props.app.params = {type: extType.type};\n        this.setState({type: extType.type});\n    }\n\n    /**\n     * 处理搜索文本变更事件\n     * @param {string} search 搜索文本\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleSearchChange = search => {\n        this.setState({search});\n    };\n\n    /**\n     * 处理点击设置按钮事件\n     * @param {Extension} ext 点击的扩展对象\n     * @param {Event} e 事件对象\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleSettingBtnClick(ext, e) {\n        const menuItems = Exts.ui.createSettingContextMenu(ext);\n        App.ui.showContextMenu({x: e.clientX, y: e.clientY, target: e.target}, menuItems);\n        e.preventDefault();\n        e.stopPropagation();\n    }\n\n    /**\n     * 处理点击扩展项条目事件\n     * @param {Extension} ext 点击的扩展对象\n     * @param {Event} e 事件对象\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleExtensionItemClick(ext, e) {\n        Exts.ui.showExtensionDetailDialog(ext);\n        if (DEBUG) {\n            console.collapse('Extension View', 'greenBg', ext.displayName, 'greenPale');\n            console.log('extension', ext);\n            console.groupEnd();\n        }\n    }\n\n    /**\n     * 处理点击安装按钮事件\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleInstallBtnClick = () => {\n        Exts.ui.installExtension();\n    };\n\n    /**\n     * 处理点击菜单按钮事件\n     * @param {Event} e 事件对象\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleMenuBtnClick = e => {\n        const menu = [{\n            label: Lang.string('ext.extensions.installDevExtension'),\n            click: () => {\n                Exts.ui.installExtension(true);\n            }\n        }];\n        App.ui.showContextMenu({x: e.clientX, y: e.clientY, target: e.target}, menu);\n    };\n\n    /**\n     * 处理点击重新载入按钮事件\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleRestartBtnClick = () => {\n        App.ui.reloadWindow();\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof AppExtensions\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            app,\n        } = this.props;\n\n        const {search, type} = this.state;\n        const extensions = search ? Exts.all.search(search, type) : Exts.all.getTypeList(type);\n        const needRestartExts = extensions && extensions.filter(x => x.needRestart);\n\n        return (<div className={HTML.classes('app-ext-extensions dock column single', className)}>\n            <header className=\"app-ext-extensions-header app-ext-common-header has-padding heading divider flex-none\">\n                <nav className=\"nav\">\n                    {\n                        extensionTypes.map(extType => {\n                            return <a key={extType.type} onClick={this.handleNavItemClick.bind(this, extType)} className={extType.type === type ? 'active' : ''}>{extType.label}</a>;\n                        })\n                    }\n                </nav>\n                <div className=\"search-box\">\n                    <SearchControl onSearchChange={this.handleSearchChange} />\n                </div>\n                <nav className=\"toolbar\">\n                    <div className=\"nav-item has-padding-sm hint--left\" data-hint={Lang.string('ext.extensions.installLocalExtTip')}>\n                        <Button onClick={this.handleInstallBtnClick} className=\"rounded outline green hover-solid\" icon=\"package-variant\" label={Lang.string('ext.extensions.installLocalExtension')} />\n                    </div>\n                    <div className=\"nav-item has-padding-sm hint--left\" data-hint={Lang.string('ext.extensions.moreActions')}>\n                        <Button onClick={this.handleMenuBtnClick} className=\"rounded outline primary hover-solid\" icon=\"menu\" />\n                    </div>\n                </nav>\n            </header>\n            {\n                needRestartExts && needRestartExts.length ? <div className=\"warning-pale text-warning flex-none center-content\"><div className=\"heading\">\n                    <Icon name=\"information\" />\n                    <div className=\"title\">{Lang.format('ext.extensions.needRestartTip.format', needRestartExts.length)}</div>\n                    <Button onClick={this.handleRestartBtnClick} className=\"outline warning hover-solid rounded\" label={Lang.string('ext.extensions.restart')} icon=\"restart\" />\n                </div></div> : null\n            }\n            <div className=\"app-exts-list list has-padding multi-lines with-avatar flex-auto scroll-y content-start\">\n                <div className=\"heading\">\n                    <div className=\"title\">{Lang.string(search ? 'ext.extensions.searchResult' : 'ext.extensions.installed')}{type ? ` - ${Lang.string('ext.type.' + type)}` : ''} ({extensions.length})</div>\n                </div>\n                {\n                    extensions.map(ext => {\n                        const onContextMenu = this.handleSettingBtnClick.bind(this, ext);\n                        return (<ExtensionListItem\n                            showType={!type}\n                            key={ext.name}\n                            onContextMenu={onContextMenu}\n                            onSettingBtnClick={onContextMenu}\n                            onClick={this.handleExtensionItemClick.bind(this, ext)}\n                            className=\"item flex-middle\"\n                            extension={ext}\n                        />);\n                    })\n                }\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/exts/app-extensions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3087,
    "kind": "variable",
    "name": "extensionTypes",
    "memberof": "app/views/exts/app-extensions.js",
    "static": true,
    "longname": "app/views/exts/app-extensions.js~extensionTypes",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/exts/app-extensions.js",
    "importStyle": null,
    "description": "扩展类型表",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "{type: string, label:string}[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3088,
    "kind": "class",
    "name": "AppExtensions",
    "memberof": "app/views/exts/app-extensions.js",
    "static": true,
    "longname": "app/views/exts/app-extensions.js~AppExtensions",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/exts/app-extensions.js",
    "importStyle": "AppExtensions",
    "description": "AppExtensions 组件 ，显示“应用”扩展界面",
    "examples": [
      "import AppExtensions from './app-extensions';\n<AppExtensions />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AppExtensions"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3089,
    "kind": "get",
    "name": "AppExtensions",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/exts/app-extensions.js~AppExtensions.AppExtensions",
    "access": "public",
    "description": "获取 AppExtensions 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {AppExtensions} from './app-extensions';\n<AppExtensions />"
    ],
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<AppExtensions>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3090,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "static": true,
    "longname": "app/views/exts/app-extensions.js~AppExtensions.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3091,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "static": true,
    "longname": "app/views/exts/app-extensions.js~AppExtensions.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3092,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 AppExtensions 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3093,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3094,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 105,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3095,
    "kind": "member",
    "name": "onExtChangeHandler",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#onExtChangeHandler",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3096,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 121,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3097,
    "kind": "method",
    "name": "handleNavItemClick",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#handleNavItemClick",
    "access": "private",
    "description": "处理点击导航项目事件",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "extType",
        "description": "导航类型名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3098,
    "kind": "member",
    "name": "handleSearchChange",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#handleSearchChange",
    "access": "private",
    "description": "处理搜索文本变更事件",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "搜索文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3099,
    "kind": "method",
    "name": "handleSettingBtnClick",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#handleSettingBtnClick",
    "access": "private",
    "description": "处理点击设置按钮事件",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "ext",
        "description": "点击的扩展对象"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3100,
    "kind": "method",
    "name": "handleExtensionItemClick",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#handleExtensionItemClick",
    "access": "private",
    "description": "处理点击扩展项条目事件",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "ext",
        "description": "点击的扩展对象"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3101,
    "kind": "member",
    "name": "handleInstallBtnClick",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#handleInstallBtnClick",
    "access": "private",
    "description": "处理点击安装按钮事件",
    "lineNumber": 186,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3102,
    "kind": "member",
    "name": "handleMenuBtnClick",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#handleMenuBtnClick",
    "access": "private",
    "description": "处理点击菜单按钮事件",
    "lineNumber": 197,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3103,
    "kind": "member",
    "name": "handleRestartBtnClick",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#handleRestartBtnClick",
    "access": "private",
    "description": "处理点击重新载入按钮事件",
    "lineNumber": 213,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3104,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/exts/app-extensions.js~AppExtensions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-extensions.js~AppExtensions#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 225,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3105,
    "kind": "file",
    "name": "app/views/exts/app-files.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Lang from '../../lang';\nimport SearchControl from '../../components/search-control';\nimport OpenedApp from '../../exts/opened-app';\nimport App from '../../core';\nimport Spinner from '../../components/spinner';\nimport {FileList} from '../common/file-list';\nimport replaceViews from '../replace-views';\n\n/**\n * 文件类型清单\n * @type {{type: string, label: string}[]}\n * @private\n */\nconst fileTypes = [\n    {type: '', label: Lang.string('ext.files.all')},\n    {type: 'doc', label: Lang.string('ext.files.docs')},\n    {type: 'image', label: Lang.string('ext.files.images')},\n    {type: 'program', label: Lang.string('ext.files.programs')},\n    {type: 'other', label: Lang.string('ext.files.others')},\n];\n\n/**\n * 最大显示的文件数目\n * @type {number}\n * @private\n */\nconst MAX_SHOW_FILES_COUNT = 200;\n\n/**\n * AppFiles 组件 ，显示“文件”应用界面\n * @class AppFiles\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import AppFiles from './app-files';\n * <AppFiles />\n */\nexport default class AppFiles extends PureComponent {\n    /**\n     * 获取 AppFiles 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<AppFiles>}\n     * @readonly\n     * @static\n     * @memberof AppFiles\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {AppFiles} from './app-files';\n     * <AppFiles />\n     */\n    static get AppFiles() {\n        return replaceViews('exts/app-files', AppFiles);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof AppFiles\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        app: PropTypes.instanceOf(OpenedApp).isRequired,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof AppFiles\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 AppFiles 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        const {app} = props;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            search: '',\n            files: [],\n            loading: false,\n            type: (app.params && app.params.type) ? app.params.type : ''\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof AppFiles\n     * @return {void}\n     */\n    componentDidMount() {\n        this.loadFiles();\n        this.onUserLoginHandler = App.server.onUserLogin(() => {\n            this.loadFiles();\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof AppFiles\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.onUserLoginHandler);\n    }\n\n    /**\n     * 处理点击导航项目事件\n     * @param {string} extType 导航类型名称\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleNavItemClick(fileType) {\n        this.props.app.params = {type: fileType.type};\n        this.loadFiles(null, fileType.type);\n    }\n\n    /**\n     * 处理搜索文本变更事件\n     * @param {string} search 搜索文本\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleSearchChange = search => {\n        this.loadFiles(search);\n    };\n\n    /**\n     * 加载文件列表\n     * @param {string} [search=null] 搜索字符串\n     * @param {string} [type=null] 搜索文件类型值\n     * @return {void}\n     */\n    loadFiles(search = null, type = null) {\n        if (this.state.loading) {\n            // App.ui.showMessger(Lang.string('common.waiting'));\n            return;\n        }\n        const state = {search: this.state.search, type: this.state.type};\n        if (search !== null) {\n            state.search = search;\n        }\n        if (type !== null) {\n            state.type = type;\n        }\n        const searchId = `${this.state.search} :${this.state.type}`;\n        if (!App.profile.isUserVertified) {\n            return this.setState({files: [], loading: false});\n        }\n        if (this.searchId !== searchId) {\n            state.loading = true;\n            state.files = [];\n            this.setState(state, () => {\n                App.im.files.search(state.search, state.type).then(files => {\n                    this.setState({files, loading: false});\n                }).catch(error => {\n                    if (error) {\n                        App.ui.showMessger(Lang.string(error), {type: 'danger'});\n                        if (DEBUG) {\n                            console.error('load files error', error);\n                        }\n                    }\n                    this.setState({files: [], loading: false});\n                });\n            });\n        } else {\n            this.setState(state);\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof AppFiles\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            app,\n        } = this.props;\n\n        const {loading, type} = this.state;\n        const filesCount = this.state.files ? this.state.files.length : 0;\n        let showFiles = filesCount ? this.state.files : [];\n        if (showFiles.length > MAX_SHOW_FILES_COUNT) {\n            showFiles = showFiles.slice(0, MAX_SHOW_FILES_COUNT);\n        }\n\n        return (<div className={HTML.classes('app-ext-files dock single column', className)}>\n            <header className=\"app-ext-files-header app-ext-common-header has-padding heading divider flex-none\">\n                <nav className=\"nav\">\n                    {\n                        fileTypes.map(fileType => {\n                            return <a key={fileType.type} onClick={this.handleNavItemClick.bind(this, fileType)} className={fileType.type === type ? 'active' : ''}>{fileType.label}</a>;\n                        })\n                    }\n                </nav>\n                <div className=\"search-box flex-none\">\n                    <SearchControl onSearchChange={this.handleSearchChange} changeDelay={1000} />\n                </div>\n            </header>\n            <div className=\"flex-auto content-start scroll-y\">\n                {filesCount ? <div className=\"heading gray\">\n                    <div className=\"title strong muted small\">{Lang.format('ext.files.findCount.format', filesCount)}</div>\n                </div> : null}\n                <FileList listItemProps={{showDate: true, showSender: true}} files={showFiles} className=\"app-ext-files-list multi-lines with-avatar\" />\n                {showFiles.length < filesCount && <div className=\"heading divider-top\"><small className=\"title muted\">{Lang.format('ext.files.findToMany.format', filesCount, showFiles.length, filesCount - showFiles.length)}</small></div>}\n                {loading && <Spinner className=\"has-padding-lg\" label={Lang.string('common.loading')} />}\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/exts/app-files.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3106,
    "kind": "variable",
    "name": "fileTypes",
    "memberof": "app/views/exts/app-files.js",
    "static": true,
    "longname": "app/views/exts/app-files.js~fileTypes",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/exts/app-files.js",
    "importStyle": null,
    "description": "文件类型清单",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "{type: string, label: string}[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3107,
    "kind": "variable",
    "name": "MAX_SHOW_FILES_COUNT",
    "memberof": "app/views/exts/app-files.js",
    "static": true,
    "longname": "app/views/exts/app-files.js~MAX_SHOW_FILES_COUNT",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/exts/app-files.js",
    "importStyle": null,
    "description": "最大显示的文件数目",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3108,
    "kind": "class",
    "name": "AppFiles",
    "memberof": "app/views/exts/app-files.js",
    "static": true,
    "longname": "app/views/exts/app-files.js~AppFiles",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/exts/app-files.js",
    "importStyle": "AppFiles",
    "description": "AppFiles 组件 ，显示“文件”应用界面",
    "examples": [
      "import AppFiles from './app-files';\n<AppFiles />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AppFiles"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 3109,
    "kind": "get",
    "name": "AppFiles",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/exts/app-files.js~AppFiles.AppFiles",
    "access": "public",
    "description": "获取 AppFiles 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {AppFiles} from './app-files';\n<AppFiles />"
    ],
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<AppFiles>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3110,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "static": true,
    "longname": "app/views/exts/app-files.js~AppFiles.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3111,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "static": true,
    "longname": "app/views/exts/app-files.js~AppFiles.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3112,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-files.js~AppFiles#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 AppFiles 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3113,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "static": false,
    "longname": "app/views/exts/app-files.js~AppFiles#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3114,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-files.js~AppFiles#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 112,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3115,
    "kind": "member",
    "name": "onUserLoginHandler",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "static": false,
    "longname": "app/views/exts/app-files.js~AppFiles#onUserLoginHandler",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3116,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-files.js~AppFiles#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 129,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3117,
    "kind": "method",
    "name": "handleNavItemClick",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-files.js~AppFiles#handleNavItemClick",
    "access": "private",
    "description": "处理点击导航项目事件",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "extType",
        "description": "导航类型名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3118,
    "kind": "member",
    "name": "handleSearchChange",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "static": false,
    "longname": "app/views/exts/app-files.js~AppFiles#handleSearchChange",
    "access": "private",
    "description": "处理搜索文本变更事件",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "搜索文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3119,
    "kind": "method",
    "name": "loadFiles",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-files.js~AppFiles#loadFiles",
    "access": "public",
    "description": "加载文件列表",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "search",
        "description": "搜索字符串"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "type",
        "description": "搜索文件类型值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3120,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/exts/app-files.js~AppFiles",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-files.js~AppFiles#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 207,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3121,
    "kind": "file",
    "name": "app/views/exts/app-home.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Lang from '../../lang';\nimport AppAvatar from '../../components/app-avatar';\nimport SearchControl from '../../components/search-control';\nimport Button from '../../components/button';\nimport Exts from '../../exts';\nimport ROUTES from '../common/routes';\nimport App from '../../core';\nimport replaceViews from '../replace-views';\n\n/**\n * AppHome 组件 ，显示应用“主页”界面\n * @class AppHome\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import AppHome from './app-home';\n * <AppHome />\n */\nexport default class AppHome extends PureComponent {\n    /**\n     * 获取 AppHome 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<AppHome>}\n     * @readonly\n     * @static\n     * @memberof AppHome\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {AppHome} from './app-home';\n     * <AppHome />\n     */\n    static get AppHome() {\n        return replaceViews('exts/app-home', AppHome);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof AppHome\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof AppHome\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 AppHome 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            search: '',\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof AppHome\n     * @return {void}\n     */\n    componentDidMount() {\n        this.onExtChangeHandler = Exts.all.onExtensionChange((changedExtensions) => {\n            if (changedExtensions.some(x => x.isApp)) {\n                this.forceUpdate();\n            }\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof AppHome\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.onExtChangeHandler);\n    }\n\n    /**\n     * 处理搜索文本变更事件\n     * @param {string} search 搜索文本\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleSearchChange = search => {\n        this.setState({search});\n    };\n\n    /**\n     * 处理应用右键菜单事件\n     * @param {Event} e 事件对象\n     * @memberof AppHome\n     * @private\n     * @return {void}\n     */\n    handleAppContextMenu = e => {\n        const app = Exts.all.getExt(e.currentTarget.attributes['data-name'].value);\n        App.ui.showContextMenu({x: e.clientX, y: e.clientY, target: e.target}, Exts.ui.createAppContextMenu(app));\n        e.preventDefault();\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof AppHome\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n        } = this.props;\n\n        const {search} = this.state;\n        const apps = (search ? Exts.all.searchApps(search) : Exts.all.apps).filter(x => (!x.isFixed && !x.hidden && !x.disabled));\n\n        return (<div className={HTML.classes('app-ext-home dock column single', className)}>\n            <header className=\"app-ext-home-header app-ext-common-header has-padding heading divider flex-none\">\n                <div className=\"title text-gray small\">{Lang.format(search ? 'ext.home.findAppsCount.format' : 'ext.home.appsCount.format', apps.length)}</div>\n                <div className=\"search-box\">\n                    <SearchControl onSearchChange={this.handleSearchChange} />\n                </div>\n                <nav className=\"toolbar\">\n                    <div className=\"nav-item hint--bottom-left has-padding-sm\" data-hint={Lang.string('ext.home.manageInExtensionsApp')}>\n                        <Button type=\"a\" href={`#${ROUTES.exts.app.id('extensions/type=app')}`} className=\"iconbutton rounded\" icon=\"settings-box text-gray icon-2x\" />\n                    </div>\n                </nav>\n            </header>\n            <div className=\"app-exts-apps row has-padding flex-auto scroll-y content-start\">\n                {\n                    apps.map(app => {\n                        if (!app.avatarUIConfig) {\n                            app.avatarUIConfig = {auto: app.appIcon, skin: app.appAccentColor, className: 'rounded shadow-1'};\n                        }\n                        return <AppAvatar onContextMenu={this.handleAppContextMenu} data-name={app.name} key={app.name} title={`【${app.displayName}】${app.description || ''}`} href={`#${ROUTES.exts.app.id(app.name)}`} avatar={app.avatarUIConfig} label={app.displayName} />;\n                    })\n                }\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/exts/app-home.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3122,
    "kind": "class",
    "name": "AppHome",
    "memberof": "app/views/exts/app-home.js",
    "static": true,
    "longname": "app/views/exts/app-home.js~AppHome",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/exts/app-home.js",
    "importStyle": "AppHome",
    "description": "AppHome 组件 ，显示应用“主页”界面",
    "examples": [
      "import AppHome from './app-home';\n<AppHome />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AppHome"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 3123,
    "kind": "get",
    "name": "AppHome",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/exts/app-home.js~AppHome.AppHome",
    "access": "public",
    "description": "获取 AppHome 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {AppHome} from './app-home';\n<AppHome />"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<AppHome>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3124,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "static": true,
    "longname": "app/views/exts/app-home.js~AppHome.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3125,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "static": true,
    "longname": "app/views/exts/app-home.js~AppHome.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3126,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-home.js~AppHome#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 AppHome 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3127,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "static": false,
    "longname": "app/views/exts/app-home.js~AppHome#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3128,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-home.js~AppHome#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 88,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3129,
    "kind": "member",
    "name": "onExtChangeHandler",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "static": false,
    "longname": "app/views/exts/app-home.js~AppHome#onExtChangeHandler",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3130,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-home.js~AppHome#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3131,
    "kind": "member",
    "name": "handleSearchChange",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "static": false,
    "longname": "app/views/exts/app-home.js~AppHome#handleSearchChange",
    "access": "private",
    "description": "处理搜索文本变更事件",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "搜索文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3132,
    "kind": "member",
    "name": "handleAppContextMenu",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "static": false,
    "longname": "app/views/exts/app-home.js~AppHome#handleAppContextMenu",
    "access": "private",
    "description": "处理应用右键菜单事件",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3133,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/exts/app-home.js~AppHome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-home.js~AppHome#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 142,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3134,
    "kind": "file",
    "name": "app/views/exts/app-themes.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Lang from '../../lang';\nimport SearchControl from '../../components/search-control';\nimport Icon from '../../components/icon';\nimport Avatar from '../../components/avatar';\nimport OpenedApp from '../../exts/opened-app';\nimport Exts from '../../exts';\nimport App from '../../core';\nimport replaceViews from '../replace-views';\nimport Skin from '../../utils/skin';\n\n/**\n * AppThemes 组件 ，显示应用“主题”界面\n * @class AppThemes\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import AppThemes from './app-themes';\n * <AppThemes />\n */\nexport default class AppThemes extends PureComponent {\n    /**\n     * 获取 AppThemes 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<AppThemes>}\n     * @readonly\n     * @static\n     * @memberof AppThemes\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {AppThemes} from './app-themes';\n     * <AppThemes />\n     */\n    static get AppThemes() {\n        return replaceViews('exts/app-themes', AppThemes);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof AppThemes\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        app: PropTypes.instanceOf(OpenedApp).isRequired,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof AppThemes\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 AppThemes 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        const {app} = props;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            search: '',\n            showInstalled: true,\n            type: (app.params && app.params.type) ? app.params.type : ''\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof AppThemes\n     * @return {void}\n     */\n    componentDidMount() {\n        this.onExtChangeHandler = Exts.all.onExtensionChange((changedExtensions) => {\n            if (changedExtensions.some(x => x.isTheme)) {\n                this.forceUpdate();\n            }\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof AppThemes\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.onExtChangeHandler);\n    }\n\n    /**\n     * 处理搜索文本变更事件\n     * @param {string} search 搜索文本\n     * @memberof AppExtensions\n     * @private\n     * @return {void}\n     */\n    handleSearchChange = search => {\n        this.setState({search});\n    };\n\n    /**\n     * 处理点击主题事件\n     * @param {ThemeExtension} theme 主题\n     * @memberof AppThemes\n     * @private\n     * @return {void}\n     */\n    handleThemeClick = theme => {\n        const error = Exts.themes.setCurrentTheme(theme);\n        if (error) {\n            App.ui.showMessger(Lang.error(error), {type: 'danger'});\n        }\n        this.forceUpdate();\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof AppThemes\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            app,\n        } = this.props;\n\n        const {search} = this.state;\n        const themeExts = (search ? Exts.themes.search(search) : Exts.themes.all).filter(x => !x.disabled);\n        const showDefaultTheme = !search || 'default'.includes(search) || Lang.string('ext.themes.default').includes(search);\n\n        let themesCount = 1;\n        const themeViews = themeExts.map(themeExt => {\n            return (<div key={themeExt.name} className=\"app-themes-list list multi-lines with-avatar\">\n                <div className=\"heading\">\n                    <Avatar style={{color: themeExt.accentColor}} auto={themeExt.icon} className=\"rounded no-margin avatar-sm\" />\n                    <div className=\"title\"><span>{themeExt.displayName}</span> <small className=\"text-gray\">{themeExt.author ? `@${themeExt.authorName}` : ''}</small></div>\n                </div>\n                {\n                    themeExt.themes.map(theme => {\n                        themesCount += 1;\n                        const isCurrentTheme = Exts.themes.isCurrentTheme(theme.id);\n                        const preview = theme.preview;\n                        const themeStyle = Object.assign(Skin.style(theme.color), {\n                            backgroundImage: preview ? `url(${preview})` : null\n                        });\n                        return (<a key={theme.id} className={HTML.classes('item rounded shadow-1', {active: isCurrentTheme})} style={themeStyle} onClick={this.handleThemeClick.bind(this, theme)}>\n                            <div className=\"content\">\n                                <div className=\"title\">{theme.displayName}{isCurrentTheme && <small className=\"label circle white text-black shadow-1\">{Lang.string('ext.themes.current')}</small>}</div>\n                            </div>\n                            <Icon name=\"check active-icon icon-2x text-shadow-white\" />\n                        </a>);\n                    })\n                }\n            </div>);\n        });\n\n        const isCurrentDefault = Exts.themes.isCurrentTheme('default');\n\n        return (<div className={HTML.classes('app-ext-themes dock column single', className)}>\n            <header className=\"app-ext-themes-header app-ext-common-header has-padding heading flex-none divider\">\n                <div className=\"title text-gray small\">{Lang.format('ext.themes.count.format', themesCount)}</div>\n                <div className=\"search-box\">\n                    <SearchControl onSearchChange={this.handleSearchChange} />\n                </div>\n                <nav className=\"toolbar\" />\n            </header>\n            <div className=\"app-themes flex-auto scroll-y content-start has-padding\">\n                {themeViews}\n                {showDefaultTheme && <div className=\"app-themes-list list\">\n                    <div className=\"heading\">\n                        <Avatar style={{color: app.app.accentColor}} auto={app.app.icon} className=\"rounded no-margin avatar-sm\" />\n                        <div className=\"title\">{Lang.string('ext.themes.inside')}</div>\n                    </div>\n                    <a className={HTML.classes('item rounded shadow-1', {active: isCurrentDefault})} style={Skin.style('#3f51b5')} onClick={this.handleThemeClick.bind(this, 'default')}>\n                        <div className=\"content\">\n                            <div className=\"title\">{Lang.string('ext.themes.default')} {isCurrentDefault && <small className=\"label circle white text-black shadow-1\">{Lang.string('ext.themes.current')}</small>}</div>\n                        </div>\n                        <Icon name=\"check active-icon icon-2x text-shadow-white\" />\n                    </a>\n                </div>}\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/exts/app-themes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3135,
    "kind": "class",
    "name": "AppThemes",
    "memberof": "app/views/exts/app-themes.js",
    "static": true,
    "longname": "app/views/exts/app-themes.js~AppThemes",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/exts/app-themes.js",
    "importStyle": "AppThemes",
    "description": "AppThemes 组件 ，显示应用“主题”界面",
    "examples": [
      "import AppThemes from './app-themes';\n<AppThemes />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AppThemes"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 3136,
    "kind": "get",
    "name": "AppThemes",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/exts/app-themes.js~AppThemes.AppThemes",
    "access": "public",
    "description": "获取 AppThemes 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {AppThemes} from './app-themes';\n<AppThemes />"
    ],
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<AppThemes>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3137,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "static": true,
    "longname": "app/views/exts/app-themes.js~AppThemes.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3138,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "static": true,
    "longname": "app/views/exts/app-themes.js~AppThemes.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3139,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-themes.js~AppThemes#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 AppThemes 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3140,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "static": false,
    "longname": "app/views/exts/app-themes.js~AppThemes#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3141,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-themes.js~AppThemes#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 93,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3142,
    "kind": "member",
    "name": "onExtChangeHandler",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "static": false,
    "longname": "app/views/exts/app-themes.js~AppThemes#onExtChangeHandler",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3143,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-themes.js~AppThemes#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 111,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3144,
    "kind": "member",
    "name": "handleSearchChange",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "static": false,
    "longname": "app/views/exts/app-themes.js~AppThemes#handleSearchChange",
    "access": "private",
    "description": "处理搜索文本变更事件",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": "搜索文本"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3145,
    "kind": "member",
    "name": "handleThemeClick",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "static": false,
    "longname": "app/views/exts/app-themes.js~AppThemes#handleThemeClick",
    "access": "private",
    "description": "处理点击主题事件",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "ThemeExtension"
        ],
        "spread": false,
        "optional": false,
        "name": "theme",
        "description": "主题"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3146,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/exts/app-themes.js~AppThemes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/app-themes.js~AppThemes#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 149,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3147,
    "kind": "file",
    "name": "app/views/exts/extension-detail-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport {ExtensionDetail} from './extension-detail';\n\n/**\n * 显示扩展详情对话框\n * @param {Extension} extension 要显示的扩展对象\n * @param {function} callback 对话框显示完成回调函数\n * @return {void}\n */\nexport const showExtensionDetailDialog = (extension, callback) => {\n    const modalId = 'app-ext-detail-dialog';\n    return Modal.show({\n        id: modalId,\n        title: null,\n        className: 'rounded app-ext-detail-dialog',\n        animation: 'enter-from-bottom fade',\n        actions: false,\n        content: <ExtensionDetail extension={extension} onRequestClose={() => (Modal.hide(modalId))} />\n    }, callback);\n};\n\nexport default {\n    show: showExtensionDetailDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/exts/extension-detail-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3148,
    "kind": "function",
    "name": "showExtensionDetailDialog",
    "memberof": "app/views/exts/extension-detail-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/exts/extension-detail-dialog.js~showExtensionDetailDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/exts/extension-detail-dialog.js",
    "importStyle": "{showExtensionDetailDialog}",
    "description": "显示扩展详情对话框",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要显示的扩展对象"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "对话框显示完成回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3149,
    "kind": "file",
    "name": "app/views/exts/extension-detail.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport Skin from '../../utils/skin';\nimport Avatar from '../../components/avatar';\nimport Button from '../../components/button';\nimport Icon from '../../components/icon';\nimport Spinner from '../../components/spinner';\nimport Lang from '../../lang';\nimport Exts from '../../exts';\nimport Markdown from '../../utils/markdown';\nimport Emojione from '../../components/emojione';\nimport replaceViews from '../replace-views';\nimport App from '../../core';\n\n/**\n * ExtensionDetail 组件 ，显示扩展详情界面\n * @class ExtensionDetail\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ExtensionDetail from './extension-detail';\n * <ExtensionDetail />\n */\nexport default class ExtensionDetail extends Component {\n    /**\n     * 获取 ExtensionDetail 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ExtensionDetail>}\n     * @readonly\n     * @static\n     * @memberof ExtensionDetail\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ExtensionDetail} from './extension-detail';\n     * <ExtensionDetail />\n     */\n    static get ExtensionDetail() {\n        return replaceViews('exts/extension-detail', ExtensionDetail);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ExtensionDetail\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        onRequestClose: PropTypes.func,\n        extension: PropTypes.object.isRequired,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ExtensionDetail\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        onRequestClose: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ExtensionDetail 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {loadingReadme: true};\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ExtensionDetail\n     * @return {void}\n     */\n    componentDidMount() {\n        const {extension} = this.props;\n        Exts.manager.loadReadmeMarkdown(extension).then(readme => {\n            readme = Markdown(readme);\n            readme = Emojione.toImage(readme);\n            this.readmeContent = readme;\n            this.setState({loadingReadme: false});\n        }).catch(() => {\n            this.setState({loadingReadme: false});\n        });\n\n        this.onExtChangeHandler = Exts.all.onExtensionChange(changedExtensions => {\n            if (changedExtensions.some(x=> x.name === this.props.extension.name)) {\n                this.forceUpdate();\n            }\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof ExtensionDetail\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.onExtChangeHandler);\n    }\n\n    /**\n     * 请求关闭父级对话框\n     * @private\n     * @return {void}\n     */\n    requestClose() {\n        const {onRequestClose} = this.props;\n        if (onRequestClose) {\n            onRequestClose();\n        }\n    }\n\n    /**\n     * 处理点击卸载按钮事件\n     * @param {Extension} extension 要卸载的按钮\n     * @memberof ExtensionDetail\n     * @private\n     * @return {void}\n     */\n    handleUninstallBtnClick(extension) {\n        Exts.ui.uninstallExtension(extension, this.requestClose.bind(this));\n    }\n\n    /**\n     * 处理点击打开应用扩展按钮事件\n     * @param {AppExtension} extension 要打开的按钮\n     * @memberof ExtensionDetail\n     * @private\n     * @return {void}\n     */\n    handleOpenBtnClick(extension) {\n        Exts.ui.openApp(extension.name);\n        this.requestClose();\n    }\n\n    /**\n     * 处理点击启用按钮事件\n     * @param {Extension} extension 要启用的按钮\n     * @memberof ExtensionDetail\n     * @private\n     * @return {void}\n     */\n    handleEnableBtnClick(extension) {\n        Exts.manager.setExtensionDisabled(extension, false);\n    }\n\n    /**\n     * 处理点击禁用按钮事件\n     * @param {Extension} extension 要禁用的按钮\n     * @memberof ExtensionDetail\n     * @private\n     * @return {void}\n     */\n    handleDisableBtnClick(extension) {\n        Exts.manager.setExtensionDisabled(extension, true);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ExtensionDetail\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            extension,\n            className,\n            onRequestClose,\n            ...other,\n        } = this.props;\n\n        const buttons = [];\n        if (extension.isApp && extension.avaliable) {\n            buttons.push(<Button onClick={this.handleOpenBtnClick.bind(this, extension)} key=\"open\" icon=\"open-in-app\" className=\"rounded green-pale outline hover-solid\" label={Lang.string('ext.openApp')} />);\n        }\n        if (!extension.buildIn && !extension.isRemote) {\n            if (extension.disabled) {\n                buttons.push(<Button onClick={this.handleEnableBtnClick.bind(this, extension)} key=\"enable\" icon=\"play-protected-content\" className=\"rounded green-pale outline hover-solid\" label={Lang.string('ext.enable')} />);\n            } else {\n                buttons.push(<Button onClick={this.handleDisableBtnClick.bind(this, extension)} key=\"disable\" icon=\"cancel\" className=\"rounded danger-pale outline hover-solid\" label={Lang.string('ext.disable')} />);\n            }\n        }\n        if (!extension.buildIn && !extension.isRemote) {\n            buttons.push(<Button onClick={this.handleUninstallBtnClick.bind(this, extension)} key=\"uninstall\" icon=\"delete\" className=\"rounded danger-pale outline hover-solid\" label={Lang.string('ext.uninstall')} />);\n        }\n        if (extension.homepage) {\n            buttons.push(<Button key=\"homepage\" type=\"a\" href={extension.homepage} target=\"_blank\" icon=\"home\" className=\"rounded gray outline hover-solid\" label={Lang.string('ext.homepage')} />);\n        }\n        if (extension.repository) {\n            const repositoryUrl = extension.repository.url || extension.repository;\n            const repositoryIcon = repositoryUrl.includes('github.com') ? 'github-circle' : 'source-fork';\n            buttons.push(<Button key=\"repository\" type=\"a\" href={repositoryUrl} target=\"_blank\" icon={repositoryIcon} className=\"rounded gray outline hover-solid\" label={Lang.string('ext.repository')} />);\n        }\n        if (extension.bugs) {\n            const bugsUrl = extension.bugs.url || extension.bugs;\n            buttons.push(<Button key=\"bugs\" type=\"a\" href={bugsUrl} target=\"_blank\" icon=\"bug\" className=\"rounded gray outline hover-solid\" label={Lang.string('ext.bugs')} />);\n        }\n\n        let loadingView = null;\n        let sectionView = null;\n        if (this.state.loadingReadme) {\n            loadingView = <Spinner className=\"dock dock-bottom\" iconClassName=\"text-white spin inline-block\" />;\n        } else if (this.readmeContent) {\n            sectionView = <section className=\"has-padding-lg\" style={Skin.style({code: extension.accentColor || '#333', textTint: false, pale: true})}><div className=\"markdown-content\" dangerouslySetInnerHTML={{__html: this.readmeContent}} /></section>;\n        }\n\n        const titleViews = [<span className=\"text\" key=\"ext-name\">{extension.displayName}</span>];\n        if (extension.buildIn) {\n            titleViews.push(<span key=\"ext-buildIn-label\" data-hint={Lang.string('ext.buildIn.hint')} className=\"hint--top hint--md\"><Icon name=\"star-circle text-yellow\" /></span>);\n        }\n        if (extension.isRemote) {\n            titleViews.push(<span key=\"ext-remote-label\" data-hint={Lang.string('ext.remote.hint')} className=\"hint--top hint--md app-ext-list-item-remote-label\"> <Icon name=\"verified text-green\" /></span>);\n        }\n        if (extension.needRestart) {\n            titleViews.push(<span key=\"ext-needRestart\" className=\"circle label warning\">{Lang.string('ext.extension.needRestart')}</span>);\n        }\n        titleViews.push(<span key=\"ext-type\" className=\"muted circle label darken-3 code\">#{Lang.string(`ext.type.${extension.type}`)} ∗ {extension.name}</span>);\n\n        const attrViews = [];\n        if (extension.version) {\n            attrViews.push(<span key=\"ext-version\">v{extension.version}</span>);\n        }\n        if (extension.author || extension.publisher) {\n            let authorView = null;\n            if (extension.author && extension.publisher) {\n                authorView = `${Lang.string('ext.author')}: ${extension.authorName} · ${Lang.format('ext.publisher.format', extension.publisher)}`;\n            } else if (extension.author) {\n                authorView = `${Lang.string('ext.author')}: ${extension.authorName}`;\n            } else {\n                authorView = Lang.format('ext.publisher.format', extension.publisher);\n            }\n            attrViews.push(<span key=\"ext-author\">{authorView}</span>);\n        }\n        if (extension.license) {\n            attrViews.push(<span key=\"ext-license\">{`${Lang.string('ext.license')}: ${extension.license}`}</span>);\n        }\n\n        return (<div className={HTML.classes('app-ext-detail', className)} {...other}>\n            <header style={Skin.style({code: extension.accentColor || '#333', textTint: false})}>\n                <div className=\"app-ext-detail-header list-item with-avatar multi-lines relative\">\n                    <Avatar className=\"rounded shadow-1 flex-none\" auto={extension.icon} skin={{code: extension.accentColor}} />\n                    <div className=\"content\">\n                        <div className=\"title space-sm\">{titleViews}</div>\n                        <div className=\"space-sm attrs\">{attrViews}</div>\n                        {extension.description ? <div className=\"space-sm\">{extension.description}</div> : null}\n                        <div className=\"actions\">{buttons}</div>\n                    </div>\n                    {loadingView}\n                </div>\n            </header>\n            {sectionView}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/exts/extension-detail.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3150,
    "kind": "class",
    "name": "ExtensionDetail",
    "memberof": "app/views/exts/extension-detail.js",
    "static": true,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/exts/extension-detail.js",
    "importStyle": "ExtensionDetail",
    "description": "ExtensionDetail 组件 ，显示扩展详情界面",
    "examples": [
      "import ExtensionDetail from './extension-detail';\n<ExtensionDetail />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ExtensionDetail"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3151,
    "kind": "get",
    "name": "ExtensionDetail",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail.ExtensionDetail",
    "access": "public",
    "description": "获取 ExtensionDetail 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ExtensionDetail} from './extension-detail';\n<ExtensionDetail />"
    ],
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ExtensionDetail>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3152,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "static": true,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3153,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "static": true,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3154,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ExtensionDetail 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3155,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3156,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 92,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3157,
    "kind": "member",
    "name": "readmeContent",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#readmeContent",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3158,
    "kind": "member",
    "name": "onExtChangeHandler",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#onExtChangeHandler",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3159,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 120,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3160,
    "kind": "method",
    "name": "requestClose",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#requestClose",
    "access": "private",
    "description": "请求关闭父级对话框",
    "lineNumber": 129,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3161,
    "kind": "method",
    "name": "handleUninstallBtnClick",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#handleUninstallBtnClick",
    "access": "private",
    "description": "处理点击卸载按钮事件",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要卸载的按钮"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3162,
    "kind": "method",
    "name": "handleOpenBtnClick",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#handleOpenBtnClick",
    "access": "private",
    "description": "处理点击打开应用扩展按钮事件",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "AppExtension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要打开的按钮"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3163,
    "kind": "method",
    "name": "handleEnableBtnClick",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#handleEnableBtnClick",
    "access": "private",
    "description": "处理点击启用按钮事件",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要启用的按钮"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3164,
    "kind": "method",
    "name": "handleDisableBtnClick",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#handleDisableBtnClick",
    "access": "private",
    "description": "处理点击禁用按钮事件",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "Extension"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": "要禁用的按钮"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3165,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/exts/extension-detail.js~ExtensionDetail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/extension-detail.js~ExtensionDetail#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 189,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3166,
    "kind": "file",
    "name": "app/views/exts/extension-list-item.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport Avatar from '../../components/avatar';\nimport Button from '../../components/button';\nimport Icon from '../../components/icon';\nimport Lang from '../../lang';\nimport Exts from '../../exts';\nimport App from '../../core';\nimport DateHelper from '../../utils/date-helper';\nimport replaceViews from '../replace-views';\n\nexport default class ExtensionListItem extends Component {\n    static get ExtensionListItem() {\n        return replaceViews('exts/extension-list-item', ExtensionListItem);\n    }\n\n    static propTypes = {\n        className: PropTypes.string,\n        extension: PropTypes.object.isRequired,\n        onSettingBtnClick: PropTypes.func,\n        showType: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        className: null,\n        onSettingBtnClick: null,\n        showType: true,\n    };\n\n    handleReloadBtnClick = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        Exts.manager.reloadDevExtension(this.props.extension);\n        App.ui.showMessger(Lang.string('ext.extensions.reloadFinish'), {type: 'success'});\n    };\n\n    handleShowFolderBtnClick = e => {\n        e.preventDefault();\n        e.stopPropagation();\n        return Exts.ui.showDevFolder(this.props.extension);\n    };\n\n    render() {\n        const {\n            extension,\n            className,\n            onSettingBtnClick,\n            showType,\n            ...other\n        } = this.props;\n\n        const isDev = extension.isDev;\n        const disabled = extension.disabled;\n        const avaliable = extension.avaliable;\n        const isRemote = extension.isRemote;\n        const downloadProgress = extension.downloadProgress;\n\n        let typeLabelView = null;\n        if (showType && (!isRemote || avaliable)) {\n            typeLabelView = <span className=\"app-ext-list-item-type-label\" style={{color: Exts.ui.typeColors[extension.type]}}>#{Lang.string(`ext.type.${extension.type}`)}</span>;\n        }\n\n        let actionsView = null;\n        if (isDev) {\n            actionsView = (<div className=\"toolbar row flex-none\">\n                <div className=\"hint--top\" data-hint={Lang.string('ext.extensions.reload')}><Button onClick={this.handleReloadBtnClick} icon=\"reload\" className=\"iconbutton rounded\" /></div>\n                <div className=\"hint--top\" data-hint={Lang.string('ext.extensions.showFolder')}><Button onClick={this.handleShowFolderBtnClick} icon=\"folder-outline\" className=\"iconbutton rounded\" /></div>\n                <div className=\"hint--top\" data-hint={Lang.string('ext.extensions.moreActions')}><Button onClick={onSettingBtnClick} icon=\"dots-vertical\" className=\"iconbutton rounded\" /></div>\n\n            </div>);\n        } else {\n            actionsView = <Button onClick={onSettingBtnClick} icon=\"dots-vertical\" className=\"iconbutton rounded\" />;\n        }\n\n        return (<a className={classes('app-ext-list-item', className, {'app-ext-list-item-dev': isDev})} {...other}>\n            <Avatar className={classes('rounded shadow-1 flex-none', {'align-self-start': isDev, grayscale: !avaliable})} auto={extension.icon} skin={{code: extension.accentColor}} />\n            <div className=\"content\">\n                <div className=\"title\">\n                    <strong>{extension.displayName}</strong>\n                    {extension.buildIn ? <span data-hint={Lang.string('ext.buildIn.hint')} className=\"hint--top hint--md app-ext-list-item-buildIn-label\"> <Icon name=\"star-circle icon-sm text-yellow\" /></span> : null}\n                    {extension.isRemote ? <span data-hint={Lang.string('ext.remote.hint')} className=\"hint--top hint--md app-ext-list-item-remote-label\"> <Icon name=\"verified icon-sm text-green\" /></span> : null}\n                     &nbsp; <small className=\"text-gray\">{extension.version ? `v${extension.version}` : ''}</small>\n                </div>\n                <div className={classes('small space-xs', {'text-ellipsis': isDev})} title={extension.description || ''}>\n                    {isRemote && downloadProgress && !extension.isRemoteLoaded ? <span><Icon name=\"loading muted spin icon-sm\" /> <span className=\"text-info\">{Lang.format('ext.downloading', Math.floor(downloadProgress * 100))}%</span>&nbsp; </span> : null}\n                    {extension.description}\n                </div>\n                <div className=\"small row flex-middle\">\n                    {disabled ? <span><span className=\"label circle dark\">{Lang.string('ext.disabled')}</span>&nbsp; </span> : null}\n                    {!disabled && !avaliable ? <span><span className=\"label circle dark\">{Lang.string('ext.unavailable')}</span>&nbsp; </span> : null}\n                    {extension.needRestart && <span className=\"hint--top relative\" style={{zIndex: 10}} data-hint={Lang.string('ext.extension.needRestartTip')}><small className=\"label circle warning\">{Lang.string('ext.extension.needRestart')}</small> &nbsp;</span>}\n                    {isDev ? <span><small className=\"label primary circle\">{Lang.string('ext.extensions.developing')}</small> &nbsp;</span> : null}\n                    {typeLabelView}\n                    <span className=\"text-gray\">{extension.author ? `@${extension.authorName}` : ''}</span>\n                </div>\n                {isDev && <div className=\"has-padding small infos\">\n                    <ul className=\"no-margin\">\n                        <li><strong>{Lang.string('ext.extension.loadPath')}</strong>: <span className=\"code\">{extension.localPath}</span></li>\n                        <li><strong>{Lang.string('ext.extension.installTime')}</strong>: <span className=\"code\">{DateHelper.formatDate(extension.installTime, 'yyyy-MM-dd hh:mm:ss')}</span> &nbsp; <strong>{Lang.string('ext.extension.updateTime')}</strong>: <span className=\"code\">{DateHelper.formatDate(extension.updateTime, 'yyyy-MM-dd hh:mm:ss')}</span></li>\n                        {extension.loadTime ? <li><strong>{Lang.string('ext.extension.loadTime')}</strong>: <span className={'code' + (extension.loadTime > 50 ? ' text-red' : '')}>{extension.loadTime}ms</span></li> : null}\n                    </ul>\n                </div>}\n                {(isDev && extension.hasError) && <div className=\"has-padding small errors\">\n                    <div>{Lang.string('ext.extension.pkgHasError')}</div>\n                    <ul className=\"no-margin\">\n                        {\n                            extension.errors.map(error => {\n                                return <li key={error.name}><strong className=\"code\">{error.name}</strong>: {error.error}</li>;\n                            })\n                        }\n                    </ul>\n                </div>}\n            </div>\n            {actionsView}\n        </a>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/exts/extension-list-item.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3167,
    "kind": "class",
    "name": "ExtensionListItem",
    "memberof": "app/views/exts/extension-list-item.js",
    "static": true,
    "longname": "app/views/exts/extension-list-item.js~ExtensionListItem",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/exts/extension-list-item.js",
    "importStyle": "ExtensionListItem",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 3168,
    "kind": "get",
    "name": "ExtensionListItem",
    "memberof": "app/views/exts/extension-list-item.js~ExtensionListItem",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/exts/extension-list-item.js~ExtensionListItem.ExtensionListItem",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3169,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/exts/extension-list-item.js~ExtensionListItem",
    "static": true,
    "longname": "app/views/exts/extension-list-item.js~ExtensionListItem.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3170,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/exts/extension-list-item.js~ExtensionListItem",
    "static": true,
    "longname": "app/views/exts/extension-list-item.js~ExtensionListItem.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3171,
    "kind": "member",
    "name": "handleReloadBtnClick",
    "memberof": "app/views/exts/extension-list-item.js~ExtensionListItem",
    "static": false,
    "longname": "app/views/exts/extension-list-item.js~ExtensionListItem#handleReloadBtnClick",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3172,
    "kind": "member",
    "name": "handleShowFolderBtnClick",
    "memberof": "app/views/exts/extension-list-item.js~ExtensionListItem",
    "static": false,
    "longname": "app/views/exts/extension-list-item.js~ExtensionListItem#handleShowFolderBtnClick",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3173,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/exts/extension-list-item.js~ExtensionListItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/extension-list-item.js~ExtensionListItem#render",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3174,
    "kind": "file",
    "name": "app/views/exts/external.js",
    "content": "import AppExtensions from './app-extensions';\nimport ExtensionListItem from './extension-list-item';\nimport AppFiles from './app-files';\nimport AppHome from './app-home';\nimport Index from './index';\nimport ExtensionDetailDialog from './extension-detail-dialog';\nimport WebApp from './web-app';\nimport ExtensionDetail from './extension-detail';\n\nexport default {\n    AppExtensions,\n    ExtensionListItem,\n    AppFiles,\n    AppHome,\n    Index,\n    ExtensionDetailDialog,\n    WebApp,\n    ExtensionDetail,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/exts/external.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3175,
    "kind": "file",
    "name": "app/views/exts/index.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {classes} from '../../utils/html-helper';\nimport Lang from '../../lang';\nimport ROUTES from '../common/routes';\nimport Icon from '../../components/icon';\nimport Avatar from '../../components/avatar';\nimport Messager from '../../components/messager';\nimport Exts from '../../exts';\nimport {WebApp} from './web-app';\nimport {AppHome} from './app-home';\nimport {AppExtensions} from './app-extensions';\nimport {AppFiles} from './app-files';\nimport {AppThemes} from './app-themes';\nimport replaceViews from '../replace-views';\nimport App from '../../core';\nimport {ifEmptyStringThen} from '../../utils/string-helper';\n\n/**\n * 内置应用视图\n * @type {Map<string, Class<Component>>}\n * @private\n */\nconst buildInView = {\n    home: AppHome,\n    extensions: AppExtensions,\n    files: AppFiles,\n    themes: AppThemes\n};\n\n/**\n * ExtsIndex 组件 ，显示扩展主界面\n * @class ExtsIndex\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import ExtsIndex from './index';\n * <ExtsIndex />\n */\nexport default class ExtsIndex extends Component {\n    /**\n     * 获取 ExtsIndex 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<ExtsIndex>}\n     * @readonly\n     * @static\n     * @memberof ExtsIndex\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {ExtsIndex} from './index';\n     * <ExtsIndex />\n     */\n    static get ExtsIndex() {\n        return replaceViews('exts/index', ExtsIndex);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof ExtsIndex\n     * @type {Object}\n     */\n    static propTypes = {\n        match: PropTypes.object.isRequired,\n        hidden: PropTypes.bool,\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof ExtsIndex\n     * @static\n     */\n    static defaultProps = {\n        hidden: false,\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 ExtsIndex 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            navScrolled: false,\n            loading: {},\n            pageTitles: {}\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof ExtsIndex\n     * @return {void}\n     */\n    componentDidMount() {\n        this.checkAppNotFoundMessage();\n        this.checkScrollToCurrentApp();\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidUpdate`\n     * componentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。\n     *\n     * @param {Object} prevProps 更新前的属性值\n     * @param {Object} prevState 更新前的状态值\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidUpdate\n     * @private\n     * @memberof ExtsIndex\n     * @return {void}\n     */\n    componentDidUpdate() {\n        this.checkAppNotFoundMessage();\n        this.checkScrollToCurrentApp();\n    }\n\n    /**\n     * 如果要打开的应用没有找到显示提示消息\n     *\n     * @memberof ExtsIndex\n     * @return {void}\n     * @private\n     */\n    checkAppNotFoundMessage() {\n        if (this.appNotFound) {\n            Messager.show(Lang.format('exts.appNotFound.format', this.appNotFound), {type: 'warning', position: 'center'});\n            this.appNotFound = null;\n        }\n    }\n\n    /**\n     * 处理鼠标滚轮滚动事件\n     * @param {Event} e 事件对象\n     * @memberof ExtsIndex\n     * @private\n     * @return {void}\n     */\n    handleWheelEvent = e => {\n        e.currentTarget.scrollLeft += e.deltaY;\n    }\n\n    /**\n     * 滚动导航到当前显示的应用条目上\n     *\n     * @return {void}\n     * @memberof ExtsIndex\n     */\n    checkScrollToCurrentApp() {\n        if (!this.appsNav) {\n            return;\n        }\n        const hasScrollbar = this.appsNav.scrollWidth > this.appsNav.clientWidth;\n        if (this.state.navScrolled !== hasScrollbar) {\n            this.setState({navScrolled: hasScrollbar});\n        } else {\n            const currentOpenedApp = Exts.ui.currentOpenedApp;\n            if (currentOpenedApp) {\n                const navEle = document.getElementById(`ext-nav-item-${currentOpenedApp.name}`);\n                if (navEle) {\n                    navEle.scrollIntoViewIfNeeded();\n                }\n            }\n        }\n    }\n\n    /**\n     * 处理点击应用关闭按钮事件\n     * @param {Event} e 事件对象\n     * @memberof ExtsIndex\n     * @private\n     * @return {void}\n     */\n    handleAppCloseBtnClick = e => {\n        const result = Exts.ui.closeApp(e.currentTarget.attributes['data-id'].value);\n        if (result === 'refresh') {\n            this.forceUpdate();\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    /**\n     * 处理点击应用导航左右滚动按钮事件\n     * @param {string} direction 滚动方向，包括 `'left'`，`'right'`\n     * @memberof ExtsIndex\n     * @private\n     * @return {void}\n     */\n    handleNavArrowClick(direction) {\n        this.appsNav.scrollLeft += (direction === 'left' ? -1 : 1) * Math.min(150, Math.floor(this.appsNav.clientWidth / 2));\n    }\n\n    /**\n     * 处理应用加载状态更新事件\n     * @param {OpenedApp} openApp 打开的应用实例\n     * @param {boolean} isLoading 是否正在加载\n     * @memberof ExtsIndex\n     * @private\n     * @return {void}\n     */\n    handleAppLoadingChange(openApp, isLoading) {\n        const {loading} = this.state;\n        loading[openApp.id] = isLoading;\n        this.setState({loading});\n    }\n\n    /**\n     * 处理应用标题更新事件\n     * @param {OpenedApp} openApp 打开的应用实例\n     * @param {string} pageTitle 页面标题\n     * @memberof ExtsIndex\n     * @private\n     * @return {void}\n     */\n    handleAppPageTitleUpadted(openApp, pageTitle) {\n        const {pageTitles} = this.state;\n        pageTitles[openApp.id] = pageTitle;\n        this.setState({pageTitles});\n    }\n\n    /**\n     * 处理应用右键菜单事件\n     * @param {OpenedApp} openedApp 打开的应用实例\n     * @param {Event} e 事件对象\n     * @memberof ExtsIndex\n     * @private\n     * @return {void}\n     */\n    handleOpenedAppContextMenu(openedApp, e) {\n        const menuItems = Exts.ui.createOpenedAppContextMenu(openedApp, () => {\n            this.forceUpdate();\n        });\n        if (menuItems && menuItems.length) {\n            App.ui.showContextMenu({x: e.clientX, y: e.clientY, target: e.target}, menuItems);\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof ExtsIndex\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            hidden,\n            className,\n            match\n        } = this.props;\n\n        if (!App.profile.isUserVertified) {\n            return null;\n        }\n\n        const openedApps = Exts.ui.openedApps;\n\n        let redirectView = null;\n        if (match.url.startsWith(ROUTES.exts._)) {\n            const openedAppName = match.params.id;\n            if (openedAppName) {\n                if (!Exts.ui.openAppById(match.params.id, match.params.params)) {\n                    this.appNotFound = match.params.id;\n                    const defaultAppName = Exts.ui && Exts.ui.defaultApp ? Exts.ui.defaultApp.name : 'home';\n                    redirectView = <Redirect to={ROUTES.exts.app.id(defaultAppName)} />;\n                }\n            } else if (!match.params.filterType) {\n                redirectView = <Redirect to={ROUTES.exts.app.id(Exts.ui.currentOpenedApp.name)} />;\n            }\n        }\n\n        return (<div className={classes('app-exts dock column single', /* 'app-exts-dark', */ `app-exts-current-${Exts.ui.currentOpenedApp.name}`, className, {hidden})}>\n            <nav\n                className={classes('app-exts-nav nav flex-none', {'app-exts-nav-compact': openedApps.length > 7, 'app-exts-nav-scrolled': this.state.navScrolled})}\n                onWheel={this.handleWheelEvent}\n                ref={e => {this.appsNav = e;}}\n            >\n                {\n                    openedApps.map(openedApp => {\n                        const isCurrentApp = Exts.ui.isCurrentOpenedApp(openedApp.id);\n                        const displayName = ifEmptyStringThen(this.state.pageTitles[openedApp.id], openedApp.app.displayName);\n                        return (<NavLink\n                            onContextMenu={this.handleOpenedAppContextMenu.bind(this, openedApp)}\n                            key={openedApp.id}\n                            to={openedApp.routePath}\n                            className={`ext-nav-item-${openedApp.appName}`}\n                            id={`ext-nav-item-${openedApp.name}`}\n                            title={openedApp.app.description ? `【${displayName}】 - ${openedApp.app.description}` : displayName}\n                        >\n                            <Avatar foreColor={isCurrentApp ? openedApp.app.appAccentColor : null} auto={openedApp.app.appIcon} className=\"rounded flex-none\" />\n                            {this.state.loading[openedApp.id] && <Avatar icon=\"loading spin\" className=\"circle loading-icon\" />}\n                            <span className=\"text\">{displayName}</span>\n                            {!openedApp.isFixed && <div title={Lang.string('common.close')} className=\"close rounded\"><Icon data-id={openedApp.id} name=\"close\" onClick={this.handleAppCloseBtnClick} /></div>}\n                        </NavLink>);\n                    })\n                }\n                <div className=\"app-exts-nav-arrows nav\">\n                    <a className=\"app-exts-nav-arrow-left\" onClick={this.handleNavArrowClick.bind(this, 'left')}><Icon name=\"menu-left icon-2x\" /></a>\n                    <a className=\"app-exts-nav-arrow-right\" onClick={this.handleNavArrowClick.bind(this, 'right')}><Icon name=\"menu-right icon-2x\" /></a>\n                </div>\n            </nav>\n            <div className=\"app-exts-apps flex-auto\">\n                {\n                    openedApps.map(openedApp => {\n                        let appView = null;\n                        if (openedApp.app.MainView) {\n                            appView = <openedApp.app.MainView app={openedApp} onLoadingChange={this.handleAppLoadingChange.bind(this, openedApp)} onPageTitleUpdated={this.handleAppPageTitleUpadted.bind(this, openedApp)} />;\n                        } else if (openedApp.app.buildIn && buildInView[openedApp.id]) {\n                            const TheAppView = buildInView[openedApp.id];\n                            appView = TheAppView && <TheAppView app={openedApp} onLoadingChange={this.handleAppLoadingChange.bind(this, openedApp)} onPageTitleUpdated={this.handleAppPageTitleUpadted.bind(this, openedApp)} />;\n                        } else {\n                            const directUrl = openedApp.directUrl;\n                            if (directUrl) {\n                                appView = <WebApp onLoadingChange={this.handleAppLoadingChange.bind(this, openedApp)} onPageTitleUpdated={this.handleAppPageTitleUpadted.bind(this, openedApp)} app={openedApp} />;\n                            }\n                        }\n                        if (!appView) {\n                            appView = <div className=\"box\">{Lang.string('exts.appNoView')}({openedApp.id})</div>;\n                        }\n                        return (<div\n                            key={openedApp.id}\n                            className={classes(`app-exts-app app-exts-app-${openedApp.id} dock scroll-y`, {hidden: !Exts.ui.isCurrentOpenedApp(openedApp.id)})}\n                            style={{backgroundColor: openedApp.app.appBackColor}}\n                        >{appView}</div>);\n                    })\n                }\n            </div>\n            {redirectView}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/exts/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3176,
    "kind": "variable",
    "name": "buildInView",
    "memberof": "app/views/exts/index.js",
    "static": true,
    "longname": "app/views/exts/index.js~buildInView",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/exts/index.js",
    "importStyle": null,
    "description": "内置应用视图",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Map<string, Class<Component>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3177,
    "kind": "class",
    "name": "ExtsIndex",
    "memberof": "app/views/exts/index.js",
    "static": true,
    "longname": "app/views/exts/index.js~ExtsIndex",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/exts/index.js",
    "importStyle": "ExtsIndex",
    "description": "ExtsIndex 组件 ，显示扩展主界面",
    "examples": [
      "import ExtsIndex from './index';\n<ExtsIndex />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ExtsIndex"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3178,
    "kind": "get",
    "name": "ExtsIndex",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/exts/index.js~ExtsIndex.ExtsIndex",
    "access": "public",
    "description": "获取 ExtsIndex 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {ExtsIndex} from './index';\n<ExtsIndex />"
    ],
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<ExtsIndex>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3179,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "static": true,
    "longname": "app/views/exts/index.js~ExtsIndex.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3180,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "static": true,
    "longname": "app/views/exts/index.js~ExtsIndex.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3181,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 ExtsIndex 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3182,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3183,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 112,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3184,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#componentDidUpdate",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidUpdate`\ncomponentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidUpdate"
    ],
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "更新前的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "更新前的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3185,
    "kind": "method",
    "name": "checkAppNotFoundMessage",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#checkAppNotFoundMessage",
    "access": "private",
    "description": "如果要打开的应用没有找到显示提示消息",
    "lineNumber": 140,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3186,
    "kind": "member",
    "name": "appNotFound",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#appNotFound",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3187,
    "kind": "member",
    "name": "handleWheelEvent",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#handleWheelEvent",
    "access": "private",
    "description": "处理鼠标滚轮滚动事件",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3188,
    "kind": "method",
    "name": "checkScrollToCurrentApp",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#checkScrollToCurrentApp",
    "access": "public",
    "description": "滚动导航到当前显示的应用条目上",
    "lineNumber": 164,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3189,
    "kind": "member",
    "name": "handleAppCloseBtnClick",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#handleAppCloseBtnClick",
    "access": "private",
    "description": "处理点击应用关闭按钮事件",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3190,
    "kind": "method",
    "name": "handleNavArrowClick",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#handleNavArrowClick",
    "access": "private",
    "description": "处理点击应用导航左右滚动按钮事件",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "滚动方向，包括 `'left'`，`'right'`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3191,
    "kind": "method",
    "name": "handleAppLoadingChange",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#handleAppLoadingChange",
    "access": "private",
    "description": "处理应用加载状态更新事件",
    "lineNumber": 217,
    "params": [
      {
        "nullable": null,
        "types": [
          "OpenedApp"
        ],
        "spread": false,
        "optional": false,
        "name": "openApp",
        "description": "打开的应用实例"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isLoading",
        "description": "是否正在加载"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3192,
    "kind": "method",
    "name": "handleAppPageTitleUpadted",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#handleAppPageTitleUpadted",
    "access": "private",
    "description": "处理应用标题更新事件",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "OpenedApp"
        ],
        "spread": false,
        "optional": false,
        "name": "openApp",
        "description": "打开的应用实例"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pageTitle",
        "description": "页面标题"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3193,
    "kind": "method",
    "name": "handleOpenedAppContextMenu",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#handleOpenedAppContextMenu",
    "access": "private",
    "description": "处理应用右键菜单事件",
    "lineNumber": 245,
    "params": [
      {
        "nullable": null,
        "types": [
          "OpenedApp"
        ],
        "spread": false,
        "optional": false,
        "name": "openedApp",
        "description": "打开的应用实例"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3194,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 264,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3196,
    "kind": "member",
    "name": "appsNav",
    "memberof": "app/views/exts/index.js~ExtsIndex",
    "static": false,
    "longname": "app/views/exts/index.js~ExtsIndex#appsNav",
    "access": "public",
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3197,
    "kind": "file",
    "name": "app/views/exts/web-app.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {classes} from '../../utils/html-helper';\nimport OpenedApp from '../../exts/opened-app';\nimport replaceViews from '../replace-views';\nimport {WebView} from '../common/webview';\n\n/**\n * WebApp 组件 ，显示内嵌 Web 页面应用界面\n * @class WebApp\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import WebApp from './web-app';\n * <WebApp />\n */\nexport default class WebApp extends Component {\n    /**\n     * 获取 WebApp 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<WebApp>}\n     * @readonly\n     * @static\n     * @memberof WebApp\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {WebApp} from './web-app';\n     * <WebApp />\n     */\n    static get WebApp() {\n        return replaceViews('exts/web-app', WebApp);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof WebApp\n     * @type {Object}\n     */\n    static propTypes = {\n        app: PropTypes.instanceOf(OpenedApp).isRequired,\n        className: PropTypes.string,\n        onLoadingChange: PropTypes.func,\n        onPageTitleUpdated: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof WebApp\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        onLoadingChange: null,\n        onPageTitleUpdated: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 WebApp 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n        const {app} = this.props;\n        const {hasServerEntry} = app.app;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            url: hasServerEntry ? null : (app.directUrl || app.app.webViewUrl),\n            loading: hasServerEntry\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof WebApp\n     * @return {void}\n     */\n    componentDidMount() {\n        const {app} = this.props;\n        if (this.webview) {\n            app.webview = this.webview.webview;\n        }\n        const {loading} = this.state;\n        if (loading) {\n            app.app.getEntryUrl().then(url => {\n                this.setState({url, loading: false});\n            }).catch(_ => {\n                this.setState({loading: false});\n            });\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidUpdate`\n     * componentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。\n     *\n     * @param {Object} prevProps 更新前的属性值\n     * @param {Object} prevState 更新前的状态值\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidUpdate\n     * @private\n     * @memberof WebApp\n     * @return {void}\n     */\n    componentDidUpdate() {\n        if (this.webview) {\n            this.props.app.webview = this.webview.webview;\n        }\n    }\n\n    /**\n     * 处理网页标题更新事件\n     * @param {string} title 网页标题\n     * @param {boolean} explicitSet 是否为以明确设置的网页标题\n     * @memberof WebviewFrame\n     * @private\n     * @return {void}\n     */\n    handleOnPageTitleUpdated = (title, explicitSet) => {\n        const {onPageTitleUpdated, app} = this.props;\n        if (onPageTitleUpdated) {\n            onPageTitleUpdated(explicitSet ? `${app.app.displayName} (${title})` : '');\n        }\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof WebApp\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            app,\n            onLoadingChange,\n        } = this.props;\n\n        const {url, loading} = this.state;\n        let webView = null;\n        if (url) {\n            const nodeintegration = app.app.isLocalWebView;\n            const preload = app.app.webViewPreloadScript;\n            const {injectScript, injectCSS} = app.app;\n            webView = <WebView ref={e => {this.webview = e;}} className=\"dock scroll-none\" src={url} onLoadingChange={onLoadingChange} onPageTitleUpdated={this.handleOnPageTitleUpdated} nodeintegration={nodeintegration} preload={preload} insertCss={injectCSS} executeJavaScript={injectScript} />;\n        }\n\n        return (\n            <div className={classes('app-web-app load-indicator', className, {loading})}>\n                {webView}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/exts/web-app.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3198,
    "kind": "class",
    "name": "WebApp",
    "memberof": "app/views/exts/web-app.js",
    "static": true,
    "longname": "app/views/exts/web-app.js~WebApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/exts/web-app.js",
    "importStyle": "WebApp",
    "description": "WebApp 组件 ，显示内嵌 Web 页面应用界面",
    "examples": [
      "import WebApp from './web-app';\n<WebApp />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "WebApp"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3199,
    "kind": "get",
    "name": "WebApp",
    "memberof": "app/views/exts/web-app.js~WebApp",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/exts/web-app.js~WebApp.WebApp",
    "access": "public",
    "description": "获取 WebApp 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {WebApp} from './web-app';\n<WebApp />"
    ],
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<WebApp>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3200,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/exts/web-app.js~WebApp",
    "static": true,
    "longname": "app/views/exts/web-app.js~WebApp.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3201,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/exts/web-app.js~WebApp",
    "static": true,
    "longname": "app/views/exts/web-app.js~WebApp.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/exts/web-app.js~WebApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/web-app.js~WebApp#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 WebApp 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3203,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/exts/web-app.js~WebApp",
    "static": false,
    "longname": "app/views/exts/web-app.js~WebApp#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3204,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/exts/web-app.js~WebApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/web-app.js~WebApp#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 91,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3205,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "app/views/exts/web-app.js~WebApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/web-app.js~WebApp#componentDidUpdate",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidUpdate`\ncomponentDidUpdate()会在更新发生后立即被调用。该方法并不会在初始化渲染时调用。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidUpdate"
    ],
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "更新前的属性值"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "更新前的状态值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3206,
    "kind": "member",
    "name": "handleOnPageTitleUpdated",
    "memberof": "app/views/exts/web-app.js~WebApp",
    "static": false,
    "longname": "app/views/exts/web-app.js~WebApp#handleOnPageTitleUpdated",
    "access": "private",
    "description": "处理网页标题更新事件",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "网页标题"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "explicitSet",
        "description": "是否为以明确设置的网页标题"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3207,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/exts/web-app.js~WebApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/exts/web-app.js~WebApp#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 146,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3208,
    "kind": "member",
    "name": "webview",
    "memberof": "app/views/exts/web-app.js~WebApp",
    "static": false,
    "longname": "app/views/exts/web-app.js~WebApp#webview",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3209,
    "kind": "file",
    "name": "app/views/index/app-image-cutter.js",
    "content": "import React, {Component} from 'react';\nimport Platform from 'Platform';\nimport ImageCutter from '../../components/image-cutter';\n\n/**\n * AppImageCutter 组件 ，显示图片剪切应用界面（用于在截图窗口中单独显示）\n * @class AppImageCutter\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import AppImageCutter from './app-image-cutter';\n * <AppImageCutter />\n */\nexport default class ImageCutterApp extends Component {\n    /**\n     * 处理图片剪切完成事件\n     * @param {Object} image 剪切的图片信息\n     * @memberof AppImageCutter\n     * @private\n     * @return {void}\n     */\n    onFinishCutImage = (image) => {\n        Platform.remote.sendToMainWindow(Platform.remote.EVENT.capture_screen, image);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof AppImageCutter\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const sourceImageFile = decodeURIComponent(this.props.match.params.file);\n\n        return (<div className=\"affix\">\n            <ImageCutter\n                onFinish={this.onFinishCutImage}\n                sourceImage={sourceImageFile}\n            />\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/index/app-image-cutter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3210,
    "kind": "class",
    "name": "ImageCutterApp",
    "memberof": "app/views/index/app-image-cutter.js",
    "static": true,
    "longname": "app/views/index/app-image-cutter.js~ImageCutterApp",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/index/app-image-cutter.js",
    "importStyle": "ImageCutterApp",
    "description": "AppImageCutter 组件 ，显示图片剪切应用界面（用于在截图窗口中单独显示）",
    "examples": [
      "import AppImageCutter from './app-image-cutter';\n<AppImageCutter />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AppImageCutter"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3211,
    "kind": "member",
    "name": "onFinishCutImage",
    "memberof": "app/views/index/app-image-cutter.js~ImageCutterApp",
    "static": false,
    "longname": "app/views/index/app-image-cutter.js~ImageCutterApp#onFinishCutImage",
    "access": "private",
    "description": "处理图片剪切完成事件",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "剪切的图片信息"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3212,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/index/app-image-cutter.js~ImageCutterApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/index/app-image-cutter.js~ImageCutterApp#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3213,
    "kind": "file",
    "name": "app/views/index/app-view.js",
    "content": "import React, {PureComponent} from 'react';\nimport App from '../../core';\nimport {LoginIndex} from '../login';\nimport {MainIndex} from '../main';\nimport replaceViews from '../replace-views';\n\n/**\n * AppView 组件 ，显示喧喧主应用界面\n * @class AppView\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import AppView from './app-view';\n * <AppView />\n */\nexport default class AppView extends PureComponent {\n    /**\n     * 获取 AppView 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<AppView>}\n     * @readonly\n     * @static\n     * @memberof AppView\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {AppView} from './app-view';\n     * <AppView />\n     */\n    static get AppView() {\n        return replaceViews('index/app-view', AppView);\n    }\n\n    /**\n     * React 组件构造函数，创建一个 AppView 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            userStatus: App.profile.userStatus\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof AppView\n     * @return {void}\n     */\n    componentDidMount() {\n        this.onUserStatusChangeHandler = App.profile.onUserStatusChange(user => {\n            this.setState({userStatus: App.profile.userStatus});\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof AppView\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.onUserStatusChangeHandler);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof AppView\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {isUserVertified} = App.profile;\n        return (\n            <div\n                className=\"affix\"\n                style={{\n                    transition: 'transform .4s',\n                    transform: `translateX(${isUserVertified ? '0' : '100%'})`\n                }}\n            >\n                <LoginIndex\n                    userStatus={this.state.userStatus}\n                    className=\"dock-left\"\n                    style={{\n                        width: '100%',\n                        left: '-100%',\n                    }}\n                />\n                <MainIndex userStatus={this.state.userStatus} className={`dock${isUserVertified ? ' app-user-vertified' : ''}`} />\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/index/app-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3214,
    "kind": "class",
    "name": "AppView",
    "memberof": "app/views/index/app-view.js",
    "static": true,
    "longname": "app/views/index/app-view.js~AppView",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/index/app-view.js",
    "importStyle": "AppView",
    "description": "AppView 组件 ，显示喧喧主应用界面",
    "examples": [
      "import AppView from './app-view';\n<AppView />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AppView"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 3215,
    "kind": "get",
    "name": "AppView",
    "memberof": "app/views/index/app-view.js~AppView",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/index/app-view.js~AppView.AppView",
    "access": "public",
    "description": "获取 AppView 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {AppView} from './app-view';\n<AppView />"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<AppView>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3216,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/index/app-view.js~AppView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/index/app-view.js~AppView#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 AppView 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3217,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/index/app-view.js~AppView",
    "static": false,
    "longname": "app/views/index/app-view.js~AppView#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3218,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/index/app-view.js~AppView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/index/app-view.js~AppView#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 60,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3219,
    "kind": "member",
    "name": "onUserStatusChangeHandler",
    "memberof": "app/views/index/app-view.js~AppView",
    "static": false,
    "longname": "app/views/index/app-view.js~AppView#onUserStatusChangeHandler",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3220,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/index/app-view.js~AppView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/index/app-view.js~AppView#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 76,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3221,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/index/app-view.js~AppView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/index/app-view.js~AppView#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 88,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3222,
    "kind": "file",
    "name": "app/views/index/external.js",
    "content": "import Chats from './app-image-cutter';\nimport AppView from './app-view';\nimport Index from './index';\n\nexport default {\n    Chats,\n    AppView,\n    Index,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/index/external.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3223,
    "kind": "file",
    "name": "app/views/index/index.js",
    "content": "import React, {PureComponent} from 'react';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport ImageCutterApp from './app-image-cutter';\nimport {AppView} from './app-view';\nimport replaceViews from '../replace-views';\n\n/**\n * HomeIndex 组件 ，显示喧喧应用窗口界面\n * @class HomeIndex\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import HomeIndex from './index';\n * <HomeIndex />\n */\nexport default class HomeIndex extends PureComponent {\n    /**\n     * 获取 HomeIndex 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<HomeIndex>}\n     * @readonly\n     * @static\n     * @memberof HomeIndex\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {HomeIndex} from './index';\n     * <HomeIndex />\n     */\n    static get HomeIndex() {\n        return replaceViews('index/index', HomeIndex);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof HomeIndex\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        return (<Router>\n            <Switch>\n                <Route path=\"/image-cutter/:file?\" component={ImageCutterApp} />\n                <Route path=\"/:app?\" component={AppView} />\n            </Switch>\n        </Router>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/index/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3224,
    "kind": "class",
    "name": "HomeIndex",
    "memberof": "app/views/index/index.js",
    "static": true,
    "longname": "app/views/index/index.js~HomeIndex",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/index/index.js",
    "importStyle": "HomeIndex",
    "description": "HomeIndex 组件 ，显示喧喧应用窗口界面",
    "examples": [
      "import HomeIndex from './index';\n<HomeIndex />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "HomeIndex"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 3225,
    "kind": "get",
    "name": "HomeIndex",
    "memberof": "app/views/index/index.js~HomeIndex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/index/index.js~HomeIndex.HomeIndex",
    "access": "public",
    "description": "获取 HomeIndex 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {HomeIndex} from './index';\n<HomeIndex />"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<HomeIndex>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3226,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/index/index.js~HomeIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/index/index.js~HomeIndex#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 39,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3227,
    "kind": "file",
    "name": "app/views/login/external.js",
    "content": "import Form from './form';\nimport SwapUserDialog from './swap-user-dialog';\nimport SwapUser from './swap-user';\nimport Index from './index';\n\nexport default {\n    Form,\n    SwapUserDialog,\n    Index,\n    SwapUser,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/login/external.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3228,
    "kind": "file",
    "name": "app/views/login/form.js",
    "content": "import Platform from 'Platform';\nimport Config from '../../config';\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport InputControl from '../../components/input-control';\nimport Checkbox from '../../components/checkbox';\nimport Modal from '../../components/modal';\nimport Icon from '../../components/icon';\nimport Lang from '../../lang';\nimport HTML from '../../utils/html-helper';\nimport StringHelper from '../../utils/string-helper';\nimport App from '../../core';\nimport User from '../../core/profile/user';\nimport SwapUserDialog from './swap-user-dialog';\nimport replaceViews from '../replace-views';\nimport Button from '../../components/button';\nimport {isPasswordWithMD5Flag} from '../../core/profile/user';\n\n/**\n * 将服务器地址转换为简单形式\n * @param {string} serverUrl 服务器地址\n * @return {string} 服务器地址\n * @private\n */\nconst simpleServerUrl = serverUrl => {\n    if (serverUrl) {\n        if (!serverUrl.startsWith('http://') && !serverUrl.startsWith('https://')) {\n            serverUrl = `https://${serverUrl}`;\n        }\n        try {\n            const simpleServer = new URL(serverUrl);\n            if (simpleServer.port === '11443') {\n                serverUrl = serverUrl.replace(':11443', '');\n            }\n        } catch (e) {\n            if (DEBUG) {\n                console.error('Cannot parse url ', serverUrl, e);\n            }\n        }\n    }\n    return serverUrl;\n};\n\n/**\n * Form 组件 ，显示登录表单界面\n * @class Form\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import Form from './form';\n * <Form />\n */\nexport default class LoginForm extends PureComponent {\n    /**\n     * 获取 Form 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<Form>}\n     * @readonly\n     * @static\n     * @memberof LoginForm\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {Form} from './form';\n     * <Form />\n     */\n    static get LoginForm() {\n        return replaceViews('login/form', LoginForm);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof LoginForm\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof LoginForm\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 Form 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        const lastSavedUser = App.profile.getLastSavedUser();\n        const entryParams = App.ui.entryParams;\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        const state = {\n            serverUrl: Config.ui.serverUrl || '',\n            account: '',\n            password: '',\n            rememberPassword: true,\n            autoLogin: false,\n            message: '',\n            submitable: false,\n            logining: false,\n        };\n\n        if (entryParams && entryParams.server) {\n            state.serverUrl = entryParams.server;\n            state.account = entryParams.account || '';\n            state.password = entryParams.password || '';\n            state.ldap = entryParams.ldap;\n        } else if (lastSavedUser) {\n            if (!Config.ui.serverUrl) {\n                state.serverUrl = lastSavedUser.serverUrl || lastSavedUser.server || '';\n            }\n            state.account = lastSavedUser.account || '';\n            state.password = lastSavedUser.rememberPassword ? lastSavedUser.password : '';\n            state.rememberPassword = lastSavedUser.rememberPassword;\n            state.autoLogin = lastSavedUser.autoLogin;\n            state.ldap = lastSavedUser.ldap;\n        }\n\n        if (state.serverUrl) {\n            state.serverUrl = simpleServerUrl(state.serverUrl);\n        }\n\n        state.submitable = StringHelper.isNotEmpty(state.serverUrl) && StringHelper.isNotEmpty(state.account) && StringHelper.isNotEmpty(state.password);\n\n        if (state.autoLogin && state.submitable) {\n            state.logining = true;\n        }\n\n        this.state = state;\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof LoginForm\n     * @return {void}\n     */\n    componentDidMount() {\n        if (this.state.submitable && (this.state.autoLogin || App.ui.isAutoLoginNextTime())) {\n            this.login();\n        }\n    }\n\n    /**\n     * 登录到服务器\n     *\n     * @return {void}\n     * @memberof LoginForm\n     */\n    login() {\n        App.server.login({\n            server: this.state.serverUrl,\n            account: this.state.account,\n            password: this.state.password,\n            rememberPassword: this.state.rememberPassword,\n            autoLogin: this.state.autoLogin,\n            ldap: this.state.ldap,\n        }).then(() => {\n            this.setState({logining: false});\n        }).catch(error => {\n            if (DEBUG) {\n                console.error('Login failed with error:', error);\n            }\n            this.setState({message: error ? Lang.error(error) : null, logining: false});\n        });\n    }\n\n    /**\n     * 处理输入框变更事件\n     *\n     * @param {string} field 输入框 ID\n     * @param {string} value 输入框值\n     * @memberof LoginForm\n     * @return {void}\n     * @private\n     */\n    handleInputFieldChange(field, value) {\n        const userState = {\n            account: this.state.account,\n            password: this.state.password,\n            serverUrl: this.state.serverUrl,\n            message: ''\n        };\n        userState[field] = value;\n        userState.submitable = StringHelper.isNotEmpty(userState.serverUrl) && StringHelper.isNotEmpty(userState.account) && StringHelper.isNotEmpty(userState.password);\n\n        this.setState(userState);\n    }\n\n    /**\n     * 处理记住密码复选框变更事件\n     * @param {boolean} rememberPassword 是否记住密码\n     * @memberof LoginForm\n     * @private\n     * @return {void}\n     */\n    handleRememberPasswordChanged = rememberPassword => {\n        this.setState({\n            rememberPassword,\n            ldap: rememberPassword ? false : this.state.ldap,\n            autoLogin: !rememberPassword ? false : this.state.autoLogin\n        });\n    }\n\n    /**\n     * 处理自动登录复选框变更事件\n     * @param {boolean} autoLogin 是否自动登录\n     * @memberof LoginForm\n     * @private\n     * @return {void}\n     */\n    handleAutoLoginChanged = autoLogin => {\n        this.setState({\n            autoLogin,\n            ldap: autoLogin ? false : this.state.ldap,\n            rememberPassword: autoLogin ? true : this.state.rememberPassword\n        });\n    }\n\n    /**\n     * 变更 LDAP 设置\n     *\n     * @param {boolean} ldap 是否启用 LDAP\n     * @memberof LoginForm\n     * @return {void}\n     */\n    changeLDAP(ldap) {\n        this.setState({\n            ldap,\n            rememberPassword: ldap ? false : this.state.rememberPassword,\n            autoLogin: ldap ? false : this.state.autoLogin,\n        });\n        if (ldap && isPasswordWithMD5Flag(this.state.password)) {\n            this.handleInputFieldChange('password', '');\n        }\n    }\n\n    /**\n     * 处理 LDAP 复选框变更事件\n     * @param {boolean} ldap 是否启用 LDAP\n     * @memberof LoginForm\n     * @private\n     * @return {void}\n     */\n    handleLDAPChanged = ldap => {\n        if (ldap && !this.hasShowedLDAPConfirm) {\n            Modal.confirm(Lang.string('login.ldap.confirm'), {\n                actions: [\n                    {type: 'cancel'},\n                    {type: 'submit', label: Lang.string('common.continue')},\n                ],\n                style: {maxWidth: 500},\n            }).then(result => {\n                if (result) {\n                    this.changeLDAP(ldap);\n                }\n                this.hasShowedLDAPConfirm = true;\n            }).catch(error => {\n                if (DEBUG) {\n                    console.error('Modal.confirm error', error);\n                }\n            });\n        } else {\n            this.changeLDAP(ldap);\n        }\n    }\n\n    /**\n     * 处理点击登录按钮事件\n     * @memberof LoginForm\n     * @private\n     * @return {void}\n     */\n    handleLoginBtnClick = () => {\n        this.setState({\n            logining: true,\n            message: '',\n        }, () => {\n            const {serverUrl} = this.state;\n            if (serverUrl.toLowerCase().startsWith('http://')) {\n                Modal.confirm((<div>\n                    <h4>{Lang.format('login.nonSecurity.confirm', serverUrl)}</h4>\n                    <div className=\"text-gray\">{Lang.string('login.nonSecurity.detail')}</div>\n                </div>), {\n                    actions: [\n                        {type: 'cancel'},\n                        {type: 'submit', label: Lang.string('login.nonSecurity.btn'), className: 'danger-pale text-danger'},\n                    ],\n                    style: {maxWidth: 500},\n                    className: 'app-login-nonSecurity-dialog',\n                }).then(result => {\n                    if (result) {\n                        this.login();\n                    } else {\n                        this.setState({\n                            logining: false,\n                            message: '',\n                        });\n                    }\n                }).catch(error => {\n                    if (DEBUG) {\n                        console.error('Modal.confirm error', error);\n                    }\n                });\n            } else {\n                this.login();\n            }\n        });\n    };\n\n    /**\n     * 处理点击切换用户按钮事件\n     * @memberof LoginForm\n     * @private\n     * @return {void}\n     */\n    handleSwapUserBtnClick = () => {\n        const {serverUrl, account} = this.state;\n        const identify = (serverUrl && account) ? User.createIdentify(serverUrl, account) : null;\n        SwapUserDialog.show(identify, user => {\n            const newState = {\n                serverUrl: simpleServerUrl(user.serverUrl),\n                account: user.account,\n                password: user.passwordMD5WithFlag,\n                message: ''\n            };\n            newState.submitable = StringHelper.isNotEmpty(newState.serverUrl) && StringHelper.isNotEmpty(newState.account) && StringHelper.isNotEmpty(newState.password);\n            this.setState(newState);\n        });\n    };\n\n    /**\n     * 处理服务器地址变更事件\n     * @param {string} val 服务器地址\n     * @memberof LoginForm\n     * @private\n     * @return {void}\n     */\n    handleServerUrlChange = val => {\n        this.handleInputFieldChange('serverUrl', val);\n    };\n\n    /**\n     * 处理用户名变更事件\n     * @param {string} val 用户名\n     * @memberof LoginForm\n     * @private\n     * @return {void}\n     */\n    handleAccountChange = val => {\n        this.handleInputFieldChange('account', val);\n    };\n\n    /**\n     * 处理密码变更事件\n     * @param {string} val 密码\n     * @memberof LoginForm\n     * @private\n     * @return {void}\n     */\n    handlePasswordChange = val => {\n        this.handleInputFieldChange('password', val);\n    };\n\n    /**\n     * 处理点击更多设置按钮事件\n     * @param {Event} e 事件对象\n     * @memberof LoginForm\n     * @private\n     * @return {void}\n     */\n    handleSettingBtnClick = e => {\n        const isOpenAtLogin = Platform.ui.isOpenAtLogin();\n        App.ui.showContextMenu({x: e.clientX, y: e.clientY}, [{\n            label: Lang.string('login.openAtLogin'),\n            checked: isOpenAtLogin,\n            click: () => {\n                Platform.ui.setOpenAtLogin(!isOpenAtLogin);\n            }\n        }]);\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof LoginForm\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            ...other\n        } = this.props;\n\n        if (!this.serverSwitchBtn) {\n            this.serverSwitchBtn = <div data-hint={Lang.string('login.swapUser')} className=\"hint--top app-login-swap-user-btn dock-right dock-top\"><button onClick={this.handleSwapUserBtnClick} type=\"button\" className=\"btn iconbutton rounded\"><Icon name=\"account-switch\" /></button></div>;\n        }\n\n        return (<div className={HTML.classes('app-login-form', className)} {...other}>\n            {this.state.message && <div className=\"app-login-message danger box\">{this.state.message}</div>}\n            {Config.ui.serverUrl ? null : <InputControl\n                value={this.state.serverUrl}\n                autoFocus\n                disabled={this.state.logining}\n                label={Lang.string('login.serverUrl.label')}\n                placeholder={Lang.string('login.serverUrl.hint')}\n                onChange={this.handleServerUrlChange}\n                className=\"relative app-login-server-control\"\n            >\n                {this.serverSwitchBtn}\n            </InputControl>}\n            <InputControl\n                value={this.state.account}\n                disabled={this.state.logining}\n                label={Lang.string('login.account.label')}\n                placeholder={Lang.string('login.account.hint')}\n                onChange={this.handleAccountChange}\n            />\n            <InputControl\n                value={this.state.password}\n                disabled={this.state.logining}\n                className=\"space\"\n                label={Lang.string('login.password.label')}\n                inputType=\"password\"\n                onChange={this.handlePasswordChange}\n            />\n            <button\n                type=\"button\"\n                disabled={!this.state.submitable || this.state.logining}\n                className={HTML.classes('btn block rounded space-sm', this.state.submitable ? 'primary' : 'gray')}\n                onClick={this.handleLoginBtnClick}\n            >\n                {Lang.string(this.state.logining ? 'login.btn.logining' : 'login.btn.label')}\n            </button>\n            <div className=\"row\">\n                <Checkbox disabled={this.state.logining} checked={this.state.rememberPassword} onChange={this.handleRememberPasswordChanged} className=\"cell\" label={Lang.string('login.rememberPassword')} />\n                <Checkbox disabled={this.state.logining} checked={this.state.autoLogin} onChange={this.handleAutoLoginChanged} className=\"cell\" label={Lang.string('login.autoLogin')} />\n                <Checkbox disabled={this.state.logining} checked={this.state.ldap} onChange={this.handleLDAPChanged} className=\"cell\" label={'LDAP'} />\n                {Platform.ui.isOpenAtLogin ? <div data-hint={Lang.string('login.moreLoginSettings')} className=\"hint--top\"><Button className=\"iconbutton rounded\" icon=\"settings-box\" onClick={this.handleSettingBtnClick} /></div> : null}\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/login/form.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3229,
    "kind": "function",
    "name": "simpleServerUrl",
    "memberof": "app/views/login/form.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/login/form.js~simpleServerUrl",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/login/form.js",
    "importStyle": null,
    "description": "将服务器地址转换为简单形式",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serverUrl",
        "description": "服务器地址"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "服务器地址"
    }
  },
  {
    "__docId__": 3230,
    "kind": "class",
    "name": "LoginForm",
    "memberof": "app/views/login/form.js",
    "static": true,
    "longname": "app/views/login/form.js~LoginForm",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/login/form.js",
    "importStyle": "LoginForm",
    "description": "Form 组件 ，显示登录表单界面",
    "examples": [
      "import Form from './form';\n<Form />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Form"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 3231,
    "kind": "get",
    "name": "LoginForm",
    "memberof": "app/views/login/form.js~LoginForm",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/login/form.js~LoginForm.LoginForm",
    "access": "public",
    "description": "获取 Form 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {Form} from './form';\n<Form />"
    ],
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<Form>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3232,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": true,
    "longname": "app/views/login/form.js~LoginForm.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3233,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": true,
    "longname": "app/views/login/form.js~LoginForm.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3234,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/login/form.js~LoginForm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 Form 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3235,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#state",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3236,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/login/form.js~LoginForm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 157,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3237,
    "kind": "method",
    "name": "login",
    "memberof": "app/views/login/form.js~LoginForm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#login",
    "access": "public",
    "description": "登录到服务器",
    "lineNumber": 169,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3238,
    "kind": "method",
    "name": "handleInputFieldChange",
    "memberof": "app/views/login/form.js~LoginForm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#handleInputFieldChange",
    "access": "private",
    "description": "处理输入框变更事件",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "输入框 ID"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "输入框值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3239,
    "kind": "member",
    "name": "handleRememberPasswordChanged",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#handleRememberPasswordChanged",
    "access": "private",
    "description": "处理记住密码复选框变更事件",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "rememberPassword",
        "description": "是否记住密码"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3240,
    "kind": "member",
    "name": "handleAutoLoginChanged",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#handleAutoLoginChanged",
    "access": "private",
    "description": "处理自动登录复选框变更事件",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "autoLogin",
        "description": "是否自动登录"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3241,
    "kind": "method",
    "name": "changeLDAP",
    "memberof": "app/views/login/form.js~LoginForm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#changeLDAP",
    "access": "public",
    "description": "变更 LDAP 设置",
    "lineNumber": 246,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "ldap",
        "description": "是否启用 LDAP"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3242,
    "kind": "member",
    "name": "handleLDAPChanged",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#handleLDAPChanged",
    "access": "private",
    "description": "处理 LDAP 复选框变更事件",
    "lineNumber": 264,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "ldap",
        "description": "是否启用 LDAP"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3243,
    "kind": "member",
    "name": "hasShowedLDAPConfirm",
    "memberof": "app/views/login/form.js~LoginForm",
    "longname": "app/views/login/form.js~LoginForm#hasShowedLDAPConfirm",
    "access": "public",
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 3244,
    "kind": "member",
    "name": "handleLoginBtnClick",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#handleLoginBtnClick",
    "access": "private",
    "description": "处理点击登录按钮事件",
    "lineNumber": 293,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3245,
    "kind": "member",
    "name": "handleSwapUserBtnClick",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#handleSwapUserBtnClick",
    "access": "private",
    "description": "处理点击切换用户按钮事件",
    "lineNumber": 336,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3246,
    "kind": "member",
    "name": "handleServerUrlChange",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#handleServerUrlChange",
    "access": "private",
    "description": "处理服务器地址变更事件",
    "lineNumber": 358,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "服务器地址"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3247,
    "kind": "member",
    "name": "handleAccountChange",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#handleAccountChange",
    "access": "private",
    "description": "处理用户名变更事件",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "用户名"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3248,
    "kind": "member",
    "name": "handlePasswordChange",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#handlePasswordChange",
    "access": "private",
    "description": "处理密码变更事件",
    "lineNumber": 380,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "密码"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3249,
    "kind": "member",
    "name": "handleSettingBtnClick",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#handleSettingBtnClick",
    "access": "private",
    "description": "处理点击更多设置按钮事件",
    "lineNumber": 391,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3250,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/login/form.js~LoginForm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 410,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3251,
    "kind": "member",
    "name": "serverSwitchBtn",
    "memberof": "app/views/login/form.js~LoginForm",
    "static": false,
    "longname": "app/views/login/form.js~LoginForm#serverSwitchBtn",
    "access": "public",
    "description": null,
    "lineNumber": 417,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3252,
    "kind": "file",
    "name": "app/views/login/index.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport Config from '../../config';\nimport HTML from '../../utils/html-helper';\nimport {LoginForm} from './form';\nimport {BuildInfo} from '../common/build-info';\nimport App from '../../core';\nimport replaceViews from '../replace-views';\n\n/**\n * LoginIndex 组件 ，显示登录界面\n * @class LoginIndex\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import LoginIndex from './index';\n * <LoginIndex />\n */\nexport default class LoginIndex extends PureComponent {\n    /**\n     * 获取 LoginIndex 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<LoginIndex>}\n     * @readonly\n     * @static\n     * @memberof LoginIndex\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {LoginIndex} from './index';\n     * <LoginIndex />\n     */\n    static get LoginIndex() {\n        return replaceViews('login/index', LoginIndex);\n    }\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof LoginIndex\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        userStatus: null,\n        children: null,\n    };\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof LoginIndex\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        userStatus: PropTypes.any,\n        children: PropTypes.any,\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof LoginIndex\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            userStatus,\n            children,\n            ...other\n        } = this.props;\n\n        return (<div className={HTML.classes('app-login center-content', className)} {...other}>\n            <section>\n                <header className=\"text-center space-sm\">\n                    <img src={`${Config.media['image.path']}logo-inverse.png`} alt=\"logo\" />\n                </header>\n                <LoginForm className=\"rounded layer has-padding-xl\" />\n                {App.ui.entryParams.loginTip && <div className=\"app-login-tip small text-center has-padding-v muted text-white\">{App.ui.entryParams.loginTip}</div>}\n                {children}\n            </section>\n            <BuildInfo className=\"dock-right dock-bottom small has-padding text-white muted\" />\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/login/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3253,
    "kind": "class",
    "name": "LoginIndex",
    "memberof": "app/views/login/index.js",
    "static": true,
    "longname": "app/views/login/index.js~LoginIndex",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/login/index.js",
    "importStyle": "LoginIndex",
    "description": "LoginIndex 组件 ，显示登录界面",
    "examples": [
      "import LoginIndex from './index';\n<LoginIndex />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "LoginIndex"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 3254,
    "kind": "get",
    "name": "LoginIndex",
    "memberof": "app/views/login/index.js~LoginIndex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/login/index.js~LoginIndex.LoginIndex",
    "access": "public",
    "description": "获取 LoginIndex 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {LoginIndex} from './index';\n<LoginIndex />"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<LoginIndex>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3255,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/login/index.js~LoginIndex",
    "static": true,
    "longname": "app/views/login/index.js~LoginIndex.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3256,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/login/index.js~LoginIndex",
    "static": true,
    "longname": "app/views/login/index.js~LoginIndex.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3257,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/login/index.js~LoginIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/index.js~LoginIndex#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 68,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3258,
    "kind": "file",
    "name": "app/views/login/swap-user-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport {SwapUser} from './swap-user';\nimport Lang from '../../lang';\n\n/**\n * 显示切换用户对话框\n * @param {string} identify 当前用户标识字符串\n * @param {function(user: Object)} onSelectUser 当切换用户时的回调函数\n * @param {function} callback 对话框显示完成的回调函数\n * @return {void}\n */\nexport const showSwapUserDialog = (identify, onSelectUser, callback) => {\n    const modalId = 'app-login-swap-user';\n    return Modal.show({\n        title: Lang.string('login.swapUser'),\n        actions: false,\n        id: modalId,\n        style: {width: 400},\n        content: <SwapUser\n            identify={identify}\n            onSelectUser={user => {\n                Modal.hide(modalId);\n                if (onSelectUser) {\n                    onSelectUser(user);\n                }\n            }}\n        />\n    }, callback);\n};\n\nexport default {\n    show: showSwapUserDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/login/swap-user-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3259,
    "kind": "function",
    "name": "showSwapUserDialog",
    "memberof": "app/views/login/swap-user-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/login/swap-user-dialog.js~showSwapUserDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/login/swap-user-dialog.js",
    "importStyle": "{showSwapUserDialog}",
    "description": "显示切换用户对话框",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "identify",
        "description": "当前用户标识字符串"
      },
      {
        "nullable": null,
        "types": [
          "function(user: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "onSelectUser",
        "description": "当切换用户时的回调函数"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "对话框显示完成的回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3260,
    "kind": "file",
    "name": "app/views/login/swap-user.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Platform from 'Platform';\nimport HTML from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport Lang from '../../lang';\nimport User from '../../core/profile/user';\nimport {UserListItem} from '../common/user-list-item';\nimport replaceViews from '../replace-views';\n\n/**\n * SwapUser 组件 ，显示切换用户界面\n * @class SwapUser\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import SwapUser from './swap-user';\n * <SwapUser />\n */\nexport default class SwapUser extends Component {\n    /**\n     * 获取 SwapUser 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<SwapUser>}\n     * @readonly\n     * @static\n     * @memberof SwapUser\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {SwapUser} from './swap-user';\n     * <SwapUser />\n     */\n    static get SwapUser() {\n        return replaceViews('login/swap-user', SwapUser);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof SwapUser\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        identify: PropTypes.string,\n        onSelectUser: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof SwapUser\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        identify: null,\n        onSelectUser: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 SwapUser 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            hover: ''\n        };\n    }\n\n    /**\n     * 处理鼠标进入事件\n     * @param {string} identify 用户标识\n     * @memberof SwapUser\n     * @private\n     * @return {void}\n     */\n    handleMouseEnter(identify) {\n        this.setState({hover: identify});\n    }\n\n    /**\n     * 处理鼠标离开事件\n     * @memberof SwapUser\n     * @private\n     * @return {void}\n     */\n    handleMouseLeave = () => {\n        this.setState({hover: ''});\n    }\n\n    /**\n     * 处理点击删除按钮事件\n     * @param {Object} user 删除的用户\n     * @param {Event} e 事件对象\n     * @memberof SwapUser\n     * @private\n     * @return {void}\n     */\n    handleDeleteBtnClick(user, e) {\n        Platform.config.removeUser(user);\n        this.forceUpdate();\n        e.stopPropagation();\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof SwapUser\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            identify,\n            className,\n            onSelectUser,\n            ...other\n        } = this.props;\n\n        const userList = Platform.config.userList();\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-swap-user list has-padding-v', className)}\n        >\n            {\n                userList.map(user => {\n                    user = User.create(user);\n                    const userIdentify = user.identify;\n                    const isHover = this.state.hover === userIdentify;\n                    const isActive = userIdentify === identify;\n                    return (<UserListItem\n                        key={user.identify}\n                        user={user}\n                        onMouseEnter={this.handleMouseEnter.bind(this, userIdentify)}\n                        onMouseLeave={this.handleMouseLeave}\n                        className={isActive ? 'primary-pale' : ''}\n                        onClick={onSelectUser.bind(null, user)}\n                    >\n                        {\n                            isHover ? <div style={{zIndex: 10}} className=\"hint--top\" data-hint={Lang.string('common.remove')}><button onClick={this.handleDeleteBtnClick.bind(this, user)} type=\"button\" className=\"btn iconbutton rounded\"><Icon name=\"delete text-danger\" /></button></div> : isActive ? <Icon name=\"check text-success\" /> : null\n                        }\n                    </UserListItem>);\n                })\n            }\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/login/swap-user.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3261,
    "kind": "class",
    "name": "SwapUser",
    "memberof": "app/views/login/swap-user.js",
    "static": true,
    "longname": "app/views/login/swap-user.js~SwapUser",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/login/swap-user.js",
    "importStyle": "SwapUser",
    "description": "SwapUser 组件 ，显示切换用户界面",
    "examples": [
      "import SwapUser from './swap-user';\n<SwapUser />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "SwapUser"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3262,
    "kind": "get",
    "name": "SwapUser",
    "memberof": "app/views/login/swap-user.js~SwapUser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/login/swap-user.js~SwapUser.SwapUser",
    "access": "public",
    "description": "获取 SwapUser 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {SwapUser} from './swap-user';\n<SwapUser />"
    ],
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<SwapUser>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3263,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/login/swap-user.js~SwapUser",
    "static": true,
    "longname": "app/views/login/swap-user.js~SwapUser.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3264,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/login/swap-user.js~SwapUser",
    "static": true,
    "longname": "app/views/login/swap-user.js~SwapUser.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3265,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/login/swap-user.js~SwapUser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/swap-user.js~SwapUser#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 SwapUser 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3266,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/login/swap-user.js~SwapUser",
    "static": false,
    "longname": "app/views/login/swap-user.js~SwapUser#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3267,
    "kind": "method",
    "name": "handleMouseEnter",
    "memberof": "app/views/login/swap-user.js~SwapUser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/swap-user.js~SwapUser#handleMouseEnter",
    "access": "private",
    "description": "处理鼠标进入事件",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "identify",
        "description": "用户标识"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3268,
    "kind": "member",
    "name": "handleMouseLeave",
    "memberof": "app/views/login/swap-user.js~SwapUser",
    "static": false,
    "longname": "app/views/login/swap-user.js~SwapUser#handleMouseLeave",
    "access": "private",
    "description": "处理鼠标离开事件",
    "lineNumber": 97,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3269,
    "kind": "method",
    "name": "handleDeleteBtnClick",
    "memberof": "app/views/login/swap-user.js~SwapUser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/swap-user.js~SwapUser#handleDeleteBtnClick",
    "access": "private",
    "description": "处理点击删除按钮事件",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "删除的用户"
      },
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "事件对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3270,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/login/swap-user.js~SwapUser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/login/swap-user.js~SwapUser#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 123,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3271,
    "kind": "file",
    "name": "app/views/main/cache-container.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport ExtsView from 'ExtsView';\nimport ROUTES from '../common/routes';\nimport {ChatsIndex} from '../chats';\nimport replaceViews from '../replace-views';\n\n/**\n * 主界面视图路由清单\n * @type {{path: string, view: Class<Component>}\n * @private\n */\nconst mainViews = [\n    {path: ROUTES.chats._, view: ChatsIndex},\n];\n\n// 如果扩展视图可用，将扩展视图加入主界面视图清单\nif (ExtsView) {\n    mainViews.push({path: ROUTES.exts._, view: ExtsView});\n}\n\n/**\n * CacheContainer 组件 ，显示主界面视图缓存容器界面\n * @class CacheContainer\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import CacheContainer from './cache-container';\n * <CacheContainer />\n */\nexport default class CacheContainer extends Component {\n    /**\n     * 获取 CacheContainer 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<CacheContainer>}\n     * @readonly\n     * @static\n     * @memberof CacheContainer\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {CacheContainer} from './cache-container';\n     * <CacheContainer />\n     */\n    static get CacheContainer() {\n        return replaceViews('main/cache-container', CacheContainer);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof CacheContainer\n     * @type {Object}\n     */\n    static propTypes = {\n        match: PropTypes.any,\n        location: PropTypes.any,\n        history: PropTypes.any,\n        staticContext: PropTypes.any\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof CacheContainer\n     * @static\n     */\n    static defaultProps = {\n        match: null,\n        location: null,\n        history: PropTypes.any,\n        staticContext: PropTypes.any\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof CacheContainer\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            match,\n            location,\n            history,\n            staticContext,\n            ...other\n        } = this.props;\n\n        return (<div className=\"app-main-container dock\" {...other}>\n            {\n                mainViews.map(item => {\n                    const isMatch = match.url.startsWith(item.path);\n                    if (isMatch) {\n                        item.active = true;\n                        return <item.view key={item.path} match={match} />;\n                    } else if (item.active) {\n                        return <item.view key={item.path} match={match} hidden />;\n                    }\n                    return null;\n                })\n            }\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/main/cache-container.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3272,
    "kind": "variable",
    "name": "mainViews",
    "memberof": "app/views/main/cache-container.js",
    "static": true,
    "longname": "app/views/main/cache-container.js~mainViews",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/main/cache-container.js",
    "importStyle": null,
    "description": "主界面视图路由清单",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "{path: string, view: Class<Component>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3273,
    "kind": "class",
    "name": "CacheContainer",
    "memberof": "app/views/main/cache-container.js",
    "static": true,
    "longname": "app/views/main/cache-container.js~CacheContainer",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/main/cache-container.js",
    "importStyle": "CacheContainer",
    "description": "CacheContainer 组件 ，显示主界面视图缓存容器界面",
    "examples": [
      "import CacheContainer from './cache-container';\n<CacheContainer />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CacheContainer"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3274,
    "kind": "get",
    "name": "CacheContainer",
    "memberof": "app/views/main/cache-container.js~CacheContainer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/main/cache-container.js~CacheContainer.CacheContainer",
    "access": "public",
    "description": "获取 CacheContainer 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {CacheContainer} from './cache-container';\n<CacheContainer />"
    ],
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<CacheContainer>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3275,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/main/cache-container.js~CacheContainer",
    "static": true,
    "longname": "app/views/main/cache-container.js~CacheContainer.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3276,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/main/cache-container.js~CacheContainer",
    "static": true,
    "longname": "app/views/main/cache-container.js~CacheContainer.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3277,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/main/cache-container.js~CacheContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/cache-container.js~CacheContainer#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3278,
    "kind": "file",
    "name": "app/views/main/external.js",
    "content": "import Navbar from './navbar';\nimport CacheContainer from './cache-container';\nimport GlobalMessage from './global-message';\nimport Index from './index';\nimport UserMenu from './user-menu';\n\nexport default {\n    Navbar,\n    CacheContainer,\n    Index,\n    GlobalMessage,\n    UserMenu,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/main/external.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3279,
    "kind": "file",
    "name": "app/views/main/global-message.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport App from '../../core';\nimport Lang from '../../lang';\nimport Member from '../../core/models/member';\nimport Avatar from '../../components/avatar';\nimport replaceViews from '../replace-views';\n\n/**\n * 自动连接登录最短时间计数\n * @type {number}\n * @private\n */\nconst CONNECT_TIME_TICK = 5;\n\n/**\n * GlobalMessage 组件 ，显示全局提示消息界面（在主界面顶部显示）\n * @class GlobalMessage\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import GlobalMessage from './global-message';\n * <GlobalMessage />\n */\nexport default class GlobalMessage extends PureComponent {\n    /**\n     * 获取 GlobalMessage 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<GlobalMessage>}\n     * @readonly\n     * @static\n     * @memberof GlobalMessage\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {GlobalMessage} from './global-message';\n     * <GlobalMessage />\n     */\n    static get GlobalMessage() {\n        return replaceViews('main/global-message', GlobalMessage);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof GlobalMessage\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof GlobalMessage\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 GlobalMessage 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            userStatus: '',\n            tick: 0,\n            connecting: false,\n            disconnect: false,\n            failMessage: ''\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof GlobalMessage\n     * @return {void}\n     */\n    componentDidMount() {\n        this.onUserStatusChangeHandler = App.profile.onUserStatusChange(user => {\n            const userStatus = App.profile.userStatus;\n            if (this.state.userStatus !== userStatus) {\n                this.setState({userStatus});\n                if (Member.STATUS.isSame(userStatus, Member.STATUS.disconnect)) {\n                    this.startConnect();\n                } else {\n                    this.stopConnect();\n                }\n            }\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof GlobalMessage\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.onUserStatusChangeHandler);\n        clearInterval(this.countTimer);\n    }\n\n    /**\n     * 重新尝试连接到服务器\n     * @return {void}\n     * @memberof GlobalMessage\n     */\n    connect() {\n        this.setState({\n            connecting: true,\n            failMessage: ''\n        });\n        App.server.login(App.profile.user).catch(error => {\n            if (DEBUG) {\n                console.error('Login failed with error:', error);\n            }\n            this.connectTimes += 1;\n            this.setState({\n                failMessage: Lang.error(error),\n                connecting: false,\n                tick: this.connectTimes * CONNECT_TIME_TICK\n            });\n        });\n    }\n\n    /**\n     * 开始自动重连\n     * @return {void}\n     * @memberof GlobalMessage\n     */\n    startConnect() {\n        this.connectTimes = 0;\n        this.setState({\n            connecting: false,\n            disconnect: true,\n            tick: 0,\n        });\n        this.countTimer = setInterval(() => {\n            const {\n                connecting,\n                tick,\n            } = this.state;\n            if (!connecting) {\n                if (tick < 1) {\n                    this.connect();\n                } else {\n                    this.setState({tick: tick - 1});\n                }\n            }\n        }, 1000);\n    }\n\n    /**\n     * 停止自动重连\n     * @return {void}\n     * @memberof GlobalMessage\n     */\n    stopConnect() {\n        this.setState({\n            connecting: false,\n            disconnect: false\n        });\n        clearInterval(this.countTimer);\n    }\n\n    /**\n     * ；立即自动重连\n     * @return {void}\n     * @memberof GlobalMessage\n     */\n    reconnectNow() {\n        if (!this.state.connecting) {\n            this.connectTimes = Math.min(1, Math.floor(this.connectTimes / 2));\n            this.connect();\n        }\n    }\n\n    /**\n     * 取消连接并退出\n     * @return {void}\n     * @memberof GlobalMessage\n     */\n    logout() {\n        this.stopConnect();\n        App.server.logout();\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof GlobalMessage\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            ...other\n        } = this.props;\n\n        const {\n            connecting,\n            disconnect,\n            tick,\n        } = this.state;\n\n        let contentView = null;\n        if (disconnect) {\n            if (connecting) {\n                contentView = (<div className=\"heading\">\n                    <Avatar icon=\"loading spin\" />\n                    <div className=\"title\">{Lang.string('login.autoConnet.connecting')}</div>\n                    <nav className=\"nav\">\n                        <a onClick={this.logout.bind(this)}>{Lang.string('login.autoConnet.logout')}</a>\n                    </nav>\n                </div>);\n            } else {\n                contentView = (<div className=\"heading\">\n                    <Avatar icon={tick % 2 === 0 ? 'lan-disconnect' : 'lan-connect'} />\n                    <div className=\"title\">\n                        {Lang.format(this.connectTimes ? 'login.autoConnet.faildAndWait' : 'login.autoConnet.wait', Math.max(0, tick))}\n                        {this.state.failMessage ? <span data-hint={this.state.failMessage} className=\"hint--bottom\">{Lang.string('login.autoConnet.errorDetail')}</span> : null}\n                    </div>\n                    <nav className=\"nav\">\n                        <a onClick={this.reconnectNow.bind(this)}>{Lang.string('login.autoConnet.conectIM')}</a>\n                        <a onClick={this.logout.bind(this)}>{Lang.string('login.autoConnet.logout')}</a>\n                    </nav>\n                </div>);\n            }\n        }\n\n        return (<div\n            className={HTML.classes('app-global-message center-content', className, {\n                'app-user-disconnet yellow': disconnect,\n            })}\n            {...other}\n        >\n            {contentView}\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/main/global-message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3280,
    "kind": "variable",
    "name": "CONNECT_TIME_TICK",
    "memberof": "app/views/main/global-message.js",
    "static": true,
    "longname": "app/views/main/global-message.js~CONNECT_TIME_TICK",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/main/global-message.js",
    "importStyle": null,
    "description": "自动连接登录最短时间计数",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3281,
    "kind": "class",
    "name": "GlobalMessage",
    "memberof": "app/views/main/global-message.js",
    "static": true,
    "longname": "app/views/main/global-message.js~GlobalMessage",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/main/global-message.js",
    "importStyle": "GlobalMessage",
    "description": "GlobalMessage 组件 ，显示全局提示消息界面（在主界面顶部显示）",
    "examples": [
      "import GlobalMessage from './global-message';\n<GlobalMessage />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "GlobalMessage"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 3282,
    "kind": "get",
    "name": "GlobalMessage",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/main/global-message.js~GlobalMessage.GlobalMessage",
    "access": "public",
    "description": "获取 GlobalMessage 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {GlobalMessage} from './global-message';\n<GlobalMessage />"
    ],
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<GlobalMessage>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3283,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "static": true,
    "longname": "app/views/main/global-message.js~GlobalMessage.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3284,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "static": true,
    "longname": "app/views/main/global-message.js~GlobalMessage.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3285,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 GlobalMessage 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3286,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3287,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 96,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3288,
    "kind": "member",
    "name": "onUserStatusChangeHandler",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#onUserStatusChangeHandler",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3289,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 120,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3290,
    "kind": "method",
    "name": "connect",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#connect",
    "access": "public",
    "description": "重新尝试连接到服务器",
    "lineNumber": 130,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3291,
    "kind": "member",
    "name": "connectTimes",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#connectTimes",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 3292,
    "kind": "method",
    "name": "startConnect",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#startConnect",
    "access": "public",
    "description": "开始自动重连",
    "lineNumber": 153,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3294,
    "kind": "member",
    "name": "countTimer",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#countTimer",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3295,
    "kind": "method",
    "name": "stopConnect",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#stopConnect",
    "access": "public",
    "description": "停止自动重连",
    "lineNumber": 180,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3296,
    "kind": "method",
    "name": "reconnectNow",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#reconnectNow",
    "access": "public",
    "description": "；立即自动重连",
    "lineNumber": 193,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3298,
    "kind": "method",
    "name": "logout",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#logout",
    "access": "public",
    "description": "取消连接并退出",
    "lineNumber": 205,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3299,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/main/global-message.js~GlobalMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/global-message.js~GlobalMessage#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 218,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3300,
    "kind": "file",
    "name": "app/views/main/index.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Route, Redirect} from 'react-router-dom';\nimport {classes} from '../../utils/html-helper';\nimport ROUTES from '../common/routes';\nimport App from '../../core';\nimport {Navbar} from './navbar';\nimport {GlobalMessage} from './global-message';\nimport {CacheContainer} from './cache-container';\nimport replaceViews from '../replace-views';\n\n/**\n * Index 组件 ，显示主界面\n * @class Index\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import Index from './index';\n * <Index />\n */\nexport default class MainIndex extends Component {\n    /**\n     * 获取 Index 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<Index>}\n     * @readonly\n     * @static\n     * @memberof Index\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {Index} from './index';\n     * <Index />\n     */\n    static get MainIndex() {\n        return replaceViews('main/index', MainIndex);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Index\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        userStatus: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Index\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        userStatus: null,\n    };\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof Index\n     * @return {void}\n     */\n    componentDidMount() {\n        this.onUserConfigChange = App.profile.onUserConfigChange(() => {\n            this.forceUpdate();\n        });\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof Index\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.onUserConfigChange);\n    }\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Index\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            userStatus,\n            ...other\n        } = this.props;\n\n        return (<div className={classes('app-main', className)} {...other}>\n            <GlobalMessage className=\"dock-top\" />\n            <Navbar userStatus={userStatus} className=\"dock-left primary shadow-2\" />\n            <Route path={ROUTES.apps.__} exact component={CacheContainer} />\n            <Route\n                path=\"/:app?\"\n                exact\n                render={(props) => {\n                    if (props.match.url === '/' || props.match.url === '/index' || props.match.url === '/chats') {\n                        const activeChatId = App.im.ui.currentActiveChatId;\n                        if (activeChatId) {\n                            return <Redirect to={`/chats/recents/${activeChatId}`} />;\n                        }\n                        return <Redirect to=\"/chats/recents\" />;\n                    }\n                    return null;\n                }}\n            />\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/main/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3301,
    "kind": "class",
    "name": "MainIndex",
    "memberof": "app/views/main/index.js",
    "static": true,
    "longname": "app/views/main/index.js~MainIndex",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/main/index.js",
    "importStyle": "MainIndex",
    "description": "Index 组件 ，显示主界面",
    "examples": [
      "import Index from './index';\n<Index />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Index"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3302,
    "kind": "get",
    "name": "MainIndex",
    "memberof": "app/views/main/index.js~MainIndex",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/main/index.js~MainIndex.MainIndex",
    "access": "public",
    "description": "获取 Index 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {Index} from './index';\n<Index />"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<Index>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3303,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/main/index.js~MainIndex",
    "static": true,
    "longname": "app/views/main/index.js~MainIndex.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3304,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/main/index.js~MainIndex",
    "static": true,
    "longname": "app/views/main/index.js~MainIndex.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3305,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/main/index.js~MainIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/index.js~MainIndex#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 70,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3306,
    "kind": "member",
    "name": "onUserConfigChange",
    "memberof": "app/views/main/index.js~MainIndex",
    "static": false,
    "longname": "app/views/main/index.js~MainIndex#onUserConfigChange",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3307,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/main/index.js~MainIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/index.js~MainIndex#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 86,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3308,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/main/index.js~MainIndex",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/index.js~MainIndex#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 98,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3309,
    "kind": "file",
    "name": "app/views/main/navbar.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Route, Link} from 'react-router-dom';\nimport Config from '../../config';\nimport ExtsRuntime from 'ExtsRuntime';\nimport {rem, classes} from '../../utils/html-helper';\nimport Lang from '../../lang';\nimport Avatar from '../../components/avatar';\nimport App from '../../core';\nimport ROUTES from '../common/routes';\nimport UserSettingDialog from '../common/user-setting-dialog';\nimport {UserAvatar} from '../common/user-avatar';\nimport {StatusDot} from '../common/status-dot';\nimport {UserMenu} from './user-menu';\nimport replaceViews from '../replace-views';\n\n/**\n * 导航项目列表\n * @type {{to: string, label: string, icon: string, activeIcon: string}[]}\n * @private\n */\nconst navbarItems = [\n    {\n        to: ROUTES.chats.recents.__, label: Lang.string('navbar.chats.label'), icon: 'comment-outline', activeIcon: 'comment-processing'\n    }, {\n        to: ROUTES.chats.groups.__, label: Lang.string('navbar.groups.label'), icon: 'pound', activeIcon: 'pound-box'\n    }, {\n        to: ROUTES.chats.contacts.__, label: Lang.string('navbar.contacts.label'), icon: 'account-multiple-outline', activeIcon: 'account-multiple'\n    },\n];\n\n// 如果扩展可用，在主导航上显示扩展条目\nif (ExtsRuntime) {\n    navbarItems.push({to: ROUTES.exts._, label: Lang.string('navbar.exts.label'), icon: 'apps', activeIcon: 'apps'});\n}\n\n/**\n * 渲染导航条目\n * @param {{item: {to: string, label: string, icon: string, activeIcon: string}}} param0 React 属性对象\n * @return {ReactNode|string|number|null|boolean} React 渲染内容\n */\nconst NavLink = ({item}) => (\n    <Route\n        path={item.to}\n        children={({match}) => (\n            <Link className={'block' + (match ? ' active' : '')} to={item.to}>\n                <Avatar size={Config.ui['navbar.width']} icon={match ? item.activeIcon : item.icon} />\n            </Link>\n        )}\n    />\n);\n\n/**\n * Navbar 组件 ，显示主导航界面\n * @class Navbar\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {Component}\n * @example\n * import Navbar from './navbar';\n * <Navbar />\n */\nexport default class Navbar extends Component {\n    /**\n     * 获取 Navbar 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<Navbar>}\n     * @readonly\n     * @static\n     * @memberof Navbar\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {Navbar} from './navbar';\n     * <Navbar />\n     */\n    static get Navbar() {\n        return replaceViews('main/navbar', Navbar);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof Navbar\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        userStatus: PropTypes.any,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof Navbar\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        userStatus: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 Navbar 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            showUserMenu: false,\n            noticeBadge: 0,\n        };\n    }\n\n    /**\n     * React 组件生命周期函数：`componentDidMount`\n     * 在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n    求的地方。在该方法里设置状态将会触发重渲。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentDidMount\n     * @private\n     * @memberof Navbar\n     * @return {void}\n     */\n    componentDidMount() {\n        this.noticeUpdateHandler = App.notice.onNoticeUpdate(notice => {\n            this.setState({noticeBadge: notice.total});\n        });\n\n        this.dataChangeEventHandler = App.events.onDataChange(data => {\n            if (data && data.members && data.members[App.profile.userId]) {\n                this.forceUpdate();\n            }\n        });\n\n        const hashFilters = window.location.hash.split('/');\n        if (hashFilters[0] === '#') {\n            this.lastFilterType = hashFilters[1];\n        }\n    }\n\n    /**\n     * React 组件生命周期函数：`componentWillUnmount`\n     * 在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n    任何在componentDidMount环节创建的DOM元素。\n     *\n     * @see https://doc.react-china.org/docs/react-component.html#componentwillunmount\n     * @private\n     * @memberof Navbar\n     * @return {void}\n     */\n    componentWillUnmount() {\n        App.events.off(this.noticeUpdateHandler, this.dataChangeEventHandler);\n    }\n\n    /**\n     * 处理点击个人头像事件\n     * @memberof Navbar\n     * @private\n     * @return {void}\n     */\n    handleProfileAvatarClick = () => {\n        this.setState({showUserMenu: true});\n    };\n\n    /**\n     * 处理用户个人菜单面板请求关闭事件\n     * @memberof Navbar\n     * @private\n     * @return {void}\n     */\n    handleUserMenuRequestClose = () => {\n        this.setState({showUserMenu: false});\n    };\n\n    /**\n     * 处理点击设置按钮像事件\n     * @memberof Navbar\n     * @private\n     * @return {void}\n     */\n    handleSettingBtnClick = () => {\n        UserSettingDialog.show();\n    };\n\n    /**\n     * 处理导航条目点击事件\n     * 这个点击的作用主要是判断如果是小屏幕显示模式则将聊天列表以抽屉的形式显示出来，点击主导航界面切换是由内部的 NavLink 路由实现，为防止界面还没切换无法正确显示抽屉形式列表，所以会延迟一定时间登录路由切换完成。\n     *\n     * @memberof Navbar\n     * @private\n     * @return {void}\n     */\n    handleMainNavItemClick = () => {\n        setTimeout(() => {\n            const hashFilters = window.location.hash.split('/');\n            if (hashFilters[0] !== '#') {\n                return;\n            }\n            const currentFilterType = hashFilters[1];\n            if (this.lastFilterType && this.lastFilterType === currentFilterType) {\n                App.ui.showMobileChatsMenu(true);\n            }\n            this.lastFilterType = currentFilterType;\n        }, 200);\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof Navbar\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            userStatus,\n            ...other\n        } = this.props;\n\n        const navbarWidth = Config.ui['navbar.width'];\n        const userConfig = App.profile.userConfig;\n        const isAvatarOnTop = userConfig && userConfig.avatarPosition === 'top';\n\n        return (<div\n            className={classes('app-navbar', className, {\n                'with-avatar-on-top': isAvatarOnTop\n            })}\n            {...other}\n        >\n            <nav className={`dock-${isAvatarOnTop ? 'top' : 'bottom'} app-nav-profile`}>\n                <div className=\"hint--right\" data-hint={App.profile.summaryText}>\n                    <a className=\"block relative app-profile-avatar\" onClick={this.handleProfileAvatarClick}>\n                        <UserAvatar className=\"avatar-lg relative\" style={{margin: rem((navbarWidth - 36) / 2)}} size={36} user={App.profile.user} />\n                        <StatusDot status={App.profile.userStatus} />\n                    </a>\n                </div>\n                {this.state.showUserMenu && <UserMenu className={`dock-left dock-${isAvatarOnTop ? 'top' : 'bottom'}`} style={{left: rem(navbarWidth)}} onRequestClose={this.handleUserMenuRequestClose} />}\n            </nav>\n            <nav className=\"dock-top app-nav-main\">\n                {\n                    navbarItems.map(item => {\n                        return (<div key={item.to} className=\"hint--right nav-item\" data-hint={item.label} onClick={this.handleMainNavItemClick}>\n                            <NavLink item={item} />\n                            {\n                                (this.state.noticeBadge && item.to === ROUTES.chats.recents.__) ? <div className=\"label label-sm dock-right dock-top circle red badge\">{this.state.noticeBadge}</div> : null\n                            }\n                        </div>);\n                    })\n                }\n            </nav>\n            {\n                isAvatarOnTop && <nav className=\"dock-bottom\">\n                    <div className=\"hint--right\" data-hint={Lang.string('common.settings')}>\n                        <a className=\"block\" onClick={this.handleSettingBtnClick}><Avatar size={navbarWidth} icon=\"settings\" /></a>\n                    </div>\n                </nav>\n            }\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/main/navbar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3310,
    "kind": "variable",
    "name": "navbarItems",
    "memberof": "app/views/main/navbar.js",
    "static": true,
    "longname": "app/views/main/navbar.js~navbarItems",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/main/navbar.js",
    "importStyle": null,
    "description": "导航项目列表",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "{to: string, label: string, icon: string, activeIcon: string}[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3311,
    "kind": "function",
    "name": "NavLink",
    "memberof": "app/views/main/navbar.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/main/navbar.js~NavLink",
    "access": "public",
    "export": false,
    "importPath": "xuanxuan/app/views/main/navbar.js",
    "importStyle": null,
    "description": "渲染导航条目",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "{item: {to: string, label: string, icon: string, activeIcon: string}}"
        ],
        "spread": false,
        "optional": false,
        "name": "param0",
        "description": "React 属性对象"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    }
  },
  {
    "__docId__": 3312,
    "kind": "class",
    "name": "Navbar",
    "memberof": "app/views/main/navbar.js",
    "static": true,
    "longname": "app/views/main/navbar.js~Navbar",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/main/navbar.js",
    "importStyle": "Navbar",
    "description": "Navbar 组件 ，显示主导航界面",
    "examples": [
      "import Navbar from './navbar';\n<Navbar />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Navbar"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 3313,
    "kind": "get",
    "name": "Navbar",
    "memberof": "app/views/main/navbar.js~Navbar",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/main/navbar.js~Navbar.Navbar",
    "access": "public",
    "description": "获取 Navbar 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {Navbar} from './navbar';\n<Navbar />"
    ],
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<Navbar>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3314,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/main/navbar.js~Navbar",
    "static": true,
    "longname": "app/views/main/navbar.js~Navbar.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3315,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/main/navbar.js~Navbar",
    "static": true,
    "longname": "app/views/main/navbar.js~Navbar.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3316,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/main/navbar.js~Navbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 Navbar 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3317,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/main/navbar.js~Navbar",
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3318,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "app/views/main/navbar.js~Navbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#componentDidMount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentDidMount`\n在组件被装配后立即调用。初始化使得DOM节点应该进行到这里。若你需要从远端加载数据，这是一个适合实现网络请\n求的地方。在该方法里设置状态将会触发重渲。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentDidMount"
    ],
    "lineNumber": 131,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3319,
    "kind": "member",
    "name": "noticeUpdateHandler",
    "memberof": "app/views/main/navbar.js~Navbar",
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#noticeUpdateHandler",
    "access": "public",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3320,
    "kind": "member",
    "name": "dataChangeEventHandler",
    "memberof": "app/views/main/navbar.js~Navbar",
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#dataChangeEventHandler",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3321,
    "kind": "member",
    "name": "lastFilterType",
    "memberof": "app/views/main/navbar.js~Navbar",
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#lastFilterType",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3322,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "app/views/main/navbar.js~Navbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#componentWillUnmount",
    "access": "private",
    "description": "React 组件生命周期函数：`componentWillUnmount`\n在组件被卸载和销毁之前立刻调用。可以在该方法里处理任何必要的清理工作，例如解绑定时器，取消网络请求，清理\n任何在componentDidMount环节创建的DOM元素。",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#componentwillunmount"
    ],
    "lineNumber": 158,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3323,
    "kind": "member",
    "name": "handleProfileAvatarClick",
    "memberof": "app/views/main/navbar.js~Navbar",
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#handleProfileAvatarClick",
    "access": "private",
    "description": "处理点击个人头像事件",
    "lineNumber": 168,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3324,
    "kind": "member",
    "name": "handleUserMenuRequestClose",
    "memberof": "app/views/main/navbar.js~Navbar",
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#handleUserMenuRequestClose",
    "access": "private",
    "description": "处理用户个人菜单面板请求关闭事件",
    "lineNumber": 178,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3325,
    "kind": "member",
    "name": "handleSettingBtnClick",
    "memberof": "app/views/main/navbar.js~Navbar",
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#handleSettingBtnClick",
    "access": "private",
    "description": "处理点击设置按钮像事件",
    "lineNumber": 188,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3326,
    "kind": "member",
    "name": "handleMainNavItemClick",
    "memberof": "app/views/main/navbar.js~Navbar",
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#handleMainNavItemClick",
    "access": "private",
    "description": "处理导航条目点击事件\n这个点击的作用主要是判断如果是小屏幕显示模式则将聊天列表以抽屉的形式显示出来，点击主导航界面切换是由内部的 NavLink 路由实现，为防止界面还没切换无法正确显示抽屉形式列表，所以会延迟一定时间登录路由切换完成。",
    "lineNumber": 200,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3328,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/main/navbar.js~Navbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/navbar.js~Navbar#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 222,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3329,
    "kind": "file",
    "name": "app/views/main/user-menu.js",
    "content": "import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Platform from 'Platform';\nimport HTML from '../../utils/html-helper';\nimport Icon from '../../components/icon';\nimport ClickOutsideWrapper from '../../components/click-outside-wrapper';\nimport Lang from '../../lang';\nimport App from '../../core';\nimport {StatusDot} from '../common/status-dot';\nimport User from '../../core/profile/user';\nimport UserProfileDialog from '../common/user-profile-dialog';\nimport AboutDialog from '../common/about-dialog';\nimport UserSettingDialog from '../common/user-setting-dialog';\nimport UserChangePasswordDialog from '../common/user-change-password-dialog';\nimport replaceViews from '../replace-views';\n\n/**\n * 用户状态名称清单\n * @type {string[]}\n * @private\n */\nconst allStatus = [\n    User.STATUS.getName(User.STATUS.online),\n    User.STATUS.getName(User.STATUS.busy),\n    User.STATUS.getName(User.STATUS.away),\n];\n\n/**\n * 当前系统平台是否为浏览器\n * @type {boolean}\n * @private\n */\nconst isBrowser = Platform.type === 'browser';\n\nexport default class UserMenu extends Component {\n    /**\n     * 获取 UserMenu 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<UserMenu>}\n     * @readonly\n     * @static\n     * @memberof UserMenu\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {UserMenu} from './user-menu';\n     * <UserMenu />\n     */\n    static get UserMenu() {\n        return replaceViews('main/user-menu', UserMenu);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof UserMenu\n     * @type {Object}\n     */\n    static propTypes = {\n        onRequestClose: PropTypes.func,\n        children: PropTypes.any,\n        className: PropTypes.string\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof UserMenu\n     * @static\n     */\n    static defaultProps = {\n        onRequestClose: null,\n        children: null,\n        className: null,\n    };\n\n    /**\n     * 处理点击切换状态事件\n     * @param {string} status 要切换的状态名称\n     * @memberof UserMenu\n     * @private\n     * @return {void}\n     */\n    handleStatusClick(status) {\n        App.server.changeUserStatus(status);\n        this.requestClose();\n    }\n\n    /**\n     * 处理点击退出登录（注销）条目事件\n     * @memberof UserMenu\n     * @private\n     * @return {void}\n     */\n    handleLogoutClick = () => {\n        App.server.logout();\n        this.requestClose();\n    }\n\n    /**\n     * 处理点击退出条目事件\n     * @memberof UserMenu\n     * @private\n     * @return {void}\n     */\n    handleExitClick = () => {\n        App.ui.quit();\n    }\n\n    /**\n     * 处理请求关闭个人菜单事件\n     * @memberof UserMenu\n     * @private\n     * @return {void}\n     */\n    requestClose = () => {\n        if (this.props.onRequestClose) {\n            this.props.onRequestClose();\n        }\n    }\n\n    /**\n     * 处理点击个人资料条目事件\n     * @memberof UserMenu\n     * @private\n     * @return {void}\n     */\n    handleUserProfileItemClick = () => {\n        UserProfileDialog.show();\n        this.requestClose();\n    };\n\n    /**\n     * 处理点击关于条目事件\n     * @memberof UserMenu\n     * @private\n     * @return {void}\n     */\n    handleAboutItemClick = () => {\n        AboutDialog.show();\n        this.requestClose();\n    };\n\n    /**\n     * 处理点击设置条目事件\n     * @memberof UserMenu\n     * @private\n     * @return {void}\n     */\n    handleSettingItemClick = () => {\n        UserSettingDialog.show();\n        this.requestClose();\n    };\n\n    /**\n     * 处理点击修改密码条目事件\n     * @memberof UserMenu\n     * @private\n     * @return {void}\n     */\n    handleChangePasswordClick = () => {\n        UserChangePasswordDialog.show();\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof UserMenu\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            onRequestClose,\n            className,\n            children,\n            ...other\n        } = this.props;\n\n        const {user} = App.profile;\n        const userStatus = user && user.status;\n        const userStatusName = userStatus && User.STATUS.getName(userStatus);\n        const isSupportChangePassword = !user.ldap;\n\n        return (<ClickOutsideWrapper\n            {...other}\n            onClickOutside={onRequestClose}\n            className={HTML.classes('app-usermenu layer text-dark list', className)}\n        >\n            {\n                allStatus.map(statusName => {\n                    return (<a key={statusName} onClick={this.handleStatusClick.bind(this, statusName)} className=\"item flex-middle\">\n                        <StatusDot status={statusName} />\n                        <div className=\"title\">{Lang.string(`member.status.${statusName}`)}</div>\n                        {userStatusName === statusName && <Icon name=\"check\" className=\"text-green\" />}\n                    </a>);\n                })\n            }\n            <div className=\"divider\" />\n            <a className=\"item\" onClick={this.handleUserProfileItemClick}><div className=\"title\">{Lang.string('usermenu.openProfile')}</div></a>\n            {isSupportChangePassword ? <a className=\"item\" onClick={this.handleChangePasswordClick}><div className=\"title\">{Lang.string('usermenu.changePassword')}</div></a> : null}\n            <div className=\"divider\" />\n            <a className=\"item\" onClick={this.handleAboutItemClick}><div className=\"title\">{Lang.string('usermenu.about')}</div></a>\n            <a className=\"item\" onClick={this.handleSettingItemClick}><div className=\"title\">{Lang.string('usermenu.setting')}</div></a>\n            {isBrowser ? null : <a className=\"item\" href=\"#/exts/app/themes\" onClick={this.requestClose}><div className=\"title\">{Lang.string('exts.themes.label')}</div></a>}\n            <a className=\"item\" onClick={this.handleLogoutClick}><div className=\"title\">{Lang.string('usermenu.logout')}</div></a>\n            {App.ui.canQuit && <a className=\"item\" onClick={this.handleExitClick}><div className=\"title\">{Lang.string('usermenu.exit')}</div></a>}\n            {children}\n        </ClickOutsideWrapper>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/main/user-menu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3330,
    "kind": "variable",
    "name": "allStatus",
    "memberof": "app/views/main/user-menu.js",
    "static": true,
    "longname": "app/views/main/user-menu.js~allStatus",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/main/user-menu.js",
    "importStyle": null,
    "description": "用户状态名称清单",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3331,
    "kind": "variable",
    "name": "isBrowser",
    "memberof": "app/views/main/user-menu.js",
    "static": true,
    "longname": "app/views/main/user-menu.js~isBrowser",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/main/user-menu.js",
    "importStyle": null,
    "description": "当前系统平台是否为浏览器",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3332,
    "kind": "class",
    "name": "UserMenu",
    "memberof": "app/views/main/user-menu.js",
    "static": true,
    "longname": "app/views/main/user-menu.js~UserMenu",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/main/user-menu.js",
    "importStyle": "UserMenu",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 3333,
    "kind": "get",
    "name": "UserMenu",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/main/user-menu.js~UserMenu.UserMenu",
    "access": "public",
    "description": "获取 UserMenu 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {UserMenu} from './user-menu';\n<UserMenu />"
    ],
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<UserMenu>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3334,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "static": true,
    "longname": "app/views/main/user-menu.js~UserMenu.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3335,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "static": true,
    "longname": "app/views/main/user-menu.js~UserMenu.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3336,
    "kind": "method",
    "name": "handleStatusClick",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/user-menu.js~UserMenu#handleStatusClick",
    "access": "private",
    "description": "处理点击切换状态事件",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "要切换的状态名称"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3337,
    "kind": "member",
    "name": "handleLogoutClick",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "static": false,
    "longname": "app/views/main/user-menu.js~UserMenu#handleLogoutClick",
    "access": "private",
    "description": "处理点击退出登录（注销）条目事件",
    "lineNumber": 94,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3338,
    "kind": "member",
    "name": "handleExitClick",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "static": false,
    "longname": "app/views/main/user-menu.js~UserMenu#handleExitClick",
    "access": "private",
    "description": "处理点击退出条目事件",
    "lineNumber": 105,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3339,
    "kind": "member",
    "name": "requestClose",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "static": false,
    "longname": "app/views/main/user-menu.js~UserMenu#requestClose",
    "access": "private",
    "description": "处理请求关闭个人菜单事件",
    "lineNumber": 115,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3340,
    "kind": "member",
    "name": "handleUserProfileItemClick",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "static": false,
    "longname": "app/views/main/user-menu.js~UserMenu#handleUserProfileItemClick",
    "access": "private",
    "description": "处理点击个人资料条目事件",
    "lineNumber": 127,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3341,
    "kind": "member",
    "name": "handleAboutItemClick",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "static": false,
    "longname": "app/views/main/user-menu.js~UserMenu#handleAboutItemClick",
    "access": "private",
    "description": "处理点击关于条目事件",
    "lineNumber": 138,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3342,
    "kind": "member",
    "name": "handleSettingItemClick",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "static": false,
    "longname": "app/views/main/user-menu.js~UserMenu#handleSettingItemClick",
    "access": "private",
    "description": "处理点击设置条目事件",
    "lineNumber": 149,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3343,
    "kind": "member",
    "name": "handleChangePasswordClick",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "static": false,
    "longname": "app/views/main/user-menu.js~UserMenu#handleChangePasswordClick",
    "access": "private",
    "description": "处理点击修改密码条目事件",
    "lineNumber": 160,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3344,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/main/user-menu.js~UserMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/main/user-menu.js~UserMenu#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 172,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3345,
    "kind": "file",
    "name": "app/views/replace-views.js",
    "content": "/**\n * 获取组件的可替换类，如果找不到可替换类，则返回原始类\n * @param {string} path 组件路径\n * @param {Class<Component>} originView 组件原始类\n * @return {Class<Component>} 组件的可替换类\n */\nexport default (path, originView) => {\n    if (!originView) {\n        console.error('Origin view must be set for ', path, originView);\n    }\n    return (global.replaceViews && global.replaceViews[path]) || originView;\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/replace-views.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3346,
    "kind": "function",
    "name": "replaceviews",
    "memberof": "app/views/replace-views.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/replace-views.js~replaceviews",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/replace-views.js",
    "importStyle": "replaceviews",
    "description": "获取组件的可替换类，如果找不到可替换类，则返回原始类",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "组件路径"
      },
      {
        "nullable": null,
        "types": [
          "Class<Component>"
        ],
        "spread": false,
        "optional": false,
        "name": "originView",
        "description": "组件原始类"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Class<Component>"
      ],
      "spread": false,
      "description": "组件的可替换类"
    }
  },
  {
    "__docId__": 3347,
    "kind": "file",
    "name": "app/views/todo/todo-editer.js",
    "content": "import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport HTML from '../../utils/html-helper';\nimport StringHelper from '../../utils/string-helper';\nimport DateHelper from '../../utils/date-helper';\nimport Lang from '../../lang';\nimport replaceViews from '../replace-views';\nimport InputControl from '../../components/input-control';\nimport SelectBox from '../../components/select-box';\nimport Button from '../../components/button';\nimport App from '../../core';\n\n/**\n * 将时间字符串转换为秒数\n * @param {string} time 时间字符串，例如 `'12:00'`\n * @return {number} 秒数\n * @private\n */\nconst timeToInt = time => {\n    if (time) {\n        const timeNums = time.split(':').map(x => {\n            return Number.parseInt(x, 10);\n        });\n        return (timeNums[0] * 60) + timeNums[1];\n    }\n    return 0;\n};\n\n/**\n * TodoEditer 组件 ，显示待办编辑界面\n * @class TodoEditer\n * @see https://react.docschina.org/docs/components-and-props.html\n * @extends {PureComponent}\n * @example\n * import TodoEditer from './todo-editer';\n * <TodoEditer />\n */\nexport default class TodoEditor extends PureComponent {\n    /**\n     * 获取 TodoEditer 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）\n     * @type {Class<TodoEditer>}\n     * @readonly\n     * @static\n     * @memberof TodoEditer\n     * @example <caption>可替换组件类调用方式</caption>\n     * import {TodoEditer} from './todo-editer';\n     * <TodoEditer />\n     */\n    static get TodoEditor() {\n        return replaceViews('todo/todo-editor', TodoEditor);\n    }\n\n    /**\n     * React 组件属性类型检查\n     * @see https://react.docschina.org/docs/typechecking-with-proptypes.html\n     * @static\n     * @memberof TodoEditer\n     * @type {Object}\n     */\n    static propTypes = {\n        className: PropTypes.string,\n        defaultTodo: PropTypes.object,\n        onRequestClose: PropTypes.func,\n    };\n\n    /**\n     * React 组件默认属性\n     * @see https://react.docschina.org/docs/react-component.html#defaultprops\n     * @type {object}\n     * @memberof TodoEditer\n     * @static\n     */\n    static defaultProps = {\n        className: null,\n        defaultTodo: null,\n        onRequestClose: null,\n    };\n\n    /**\n     * React 组件构造函数，创建一个 TodoEditer 组件实例，会在装配之前被调用。\n     * @see https://react.docschina.org/docs/react-component.html#constructor\n     * @param {Object?} props 组件属性对象\n     * @constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * React 组件状态对象\n         * @see https://react.docschina.org/docs/state-and-lifecycle.html\n         * @type {object}\n         */\n        this.state = {\n            todo: props.defaultTodo || {},\n            loading: false,\n            errorMessage: '',\n            errorControl: ''\n        };\n\n        if (!this.state.todo.date) {\n            this.state.todo.date = DateHelper.formatDate(new Date(), 'yyyy-MM-dd');\n        }\n    }\n\n    /**\n     * 处理待办属性变更事件\n     * @param {string} name 属性名称\n     * @param {string} val 属性值\n     * @memberof TodoEditer\n     * @private\n     * @return {void}\n     */\n    handleTodoChange(name, val) {\n        const {todo, errorControl} = this.state;\n        todo[name] = val;\n        const newState = {todo: Object.assign({}, todo), errorMessage: ''};\n        if (name === errorControl) {\n            newState.errorControl = '';\n        }\n        this.setState(newState);\n    }\n\n    /**\n     * 检查待办属性\n     * @memberof TodoEditer\n     * @private\n     * @return {void}\n     */\n    checkTodo() {\n        const {todo} = this.state;\n        if (StringHelper.isEmpty(todo.name)) {\n            this.setState({errorControl: 'name', errorMessage: Lang.format('common.requiredField.format', Lang.string('todo.label.name'))});\n            return false;\n        }\n        if (StringHelper.isEmpty(todo.date)) {\n            this.setState({errorControl: 'date', errorMessage: Lang.format('common.requiredField.format', Lang.string('todo.label.date'))});\n            return false;\n        }\n        const isBeginEmpty = StringHelper.isEmpty(todo.begin);\n        const isEndEmpty = StringHelper.isEmpty(todo.end);\n        if (isBeginEmpty !== isEndEmpty) {\n            this.setState({errorControl: isBeginEmpty ? 'begin' : 'end', errorMessage: Lang.string('todo.beginAndEndBothRequired')});\n            return false;\n        }\n        if (!isBeginEmpty && !isEndEmpty) {\n            const beginVal = timeToInt(todo.begin);\n            const endVal = timeToInt(todo.end);\n            console.log('>', beginVal, todo.begin, endVal, todo.end, endVal < beginVal);\n            if (endVal < beginVal) {\n                this.setState({errorControl: 'end', errorMessage: Lang.string('todo.beginMustBeforeEnd')});\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 处理提交代码按钮点击事件\n     * @memberof TodoEditer\n     * @private\n     * @return {void}\n     */\n    handleSubmitBtnClick = () => {\n        if (this.checkTodo()) {\n            this.setState({loading: true}, () => {\n                const {todo} = this.state;\n                App.todo.createTodo(todo).then(newTodo => {\n                    const state = {loading: false};\n                    if (newTodo && newTodo.id) {\n                        App.ui.showMessger(Lang.string('todo.createSuccess'), {type: 'success'});\n                        if (this.props.onRequestClose) {\n                            this.props.onRequestClose();\n                        }\n                    } else {\n                        state.errorMessage = Lang.error('COMMON_ERROR');\n                    }\n                    this.setState(state);\n                });\n            });\n        }\n    };\n\n    /**\n     * React 组件生命周期函数：Render\n     * @private\n     * @see https://doc.react-china.org/docs/react-component.html#render\n     * @see https://doc.react-china.org/docs/rendering-elements.html\n     * @memberof TodoEditer\n     * @return {ReactNode|string|number|null|boolean} React 渲染内容\n     */\n    render() {\n        const {\n            className,\n            defaultTodo,\n            onRequestClose,\n            ...other\n        } = this.props;\n\n        const {todo, loading, errorMessage, errorControl} = this.state;\n\n        return (<div\n            {...other}\n            className={HTML.classes('app-todo-editor relative load-indicator has-padding-v', className, {loading, disabled: loading})}\n        >\n            {errorMessage ? <div className=\"box red rounded space-sm\">{errorMessage}</div> : null}\n            <InputControl\n                className={errorControl === 'name' ? 'has-error' : ''}\n                value={todo.name}\n                label={Lang.string('todo.label.name')}\n                autoFocus\n                placeholder={Lang.string('common.required')}\n                onChange={this.handleTodoChange.bind(this, 'name')}\n            />\n            <div className={`control${errorControl === 'desc' ? ' has-error' : ''}`}>\n                <label>{Lang.string('todo.label.desc')}</label>\n                <textarea\n                    className=\"textarea rounded\"\n                    rows=\"10\"\n                    value={todo.desc}\n                    placeholder={`${Lang.string('todo.label.desc')} (${Lang.string('todo.input.desc.hint')})`}\n                    onChange={e => this.handleTodoChange('desc', e.target.value)}\n                />\n            </div>\n            <div className=\"row gutter-sm\">\n                <div className=\"cell\">\n                    <div className=\"control\">\n                        <label>{Lang.string('todo.label.pri')}</label>\n                        <SelectBox value={todo.pri} options={[1, 2, 3, 4, '']} onChange={this.handleTodoChange.bind(this, 'pri')} />\n                    </div>\n                </div>\n                <div className=\"cell\">\n                    <InputControl\n                        className={errorControl === 'date' ? 'has-error' : ''}\n                        inputType=\"date\"\n                        value={todo.date}\n                        label={Lang.string('todo.label.date')}\n                        placeholder={Lang.string('todo.label.date') + Lang.string('common.required')}\n                        onChange={this.handleTodoChange.bind(this, 'date')}\n                    />\n                </div>\n                <div className=\"cell\">\n                    <div className=\"row\">\n                        <div className=\"cell\">\n                            <InputControl\n                                className={errorControl === 'begin' ? 'has-error' : ''}\n                                inputType=\"time\"\n                                value={todo.begin}\n                                label={Lang.string('todo.label.begin')}\n                                onChange={this.handleTodoChange.bind(this, 'begin')}\n                            />\n                        </div>\n                        <div className=\"cell\">\n                            <InputControl\n                                className={errorControl === 'end' ? 'has-error' : ''}\n                                inputType=\"time\"\n                                value={todo.end}\n                                label={Lang.string('todo.label.end')}\n                                onChange={this.handleTodoChange.bind(this, 'end')}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"has-padding-v toolbar\">\n                <Button className=\"primary btn-wide\" label={Lang.string('common.confirm')} onClick={this.handleSubmitBtnClick} /> &nbsp;\n                <Button className=\"primary-pale text-primary btn-wide\" label={Lang.string('common.cancel')} onClick={onRequestClose} />\n            </div>\n        </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/todo/todo-editer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3348,
    "kind": "function",
    "name": "timeToInt",
    "memberof": "app/views/todo/todo-editer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/todo/todo-editer.js~timeToInt",
    "access": "private",
    "export": false,
    "importPath": "xuanxuan/app/views/todo/todo-editer.js",
    "importStyle": null,
    "description": "将时间字符串转换为秒数",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "时间字符串，例如 `'12:00'`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "秒数"
    }
  },
  {
    "__docId__": 3349,
    "kind": "class",
    "name": "TodoEditor",
    "memberof": "app/views/todo/todo-editer.js",
    "static": true,
    "longname": "app/views/todo/todo-editer.js~TodoEditor",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/todo/todo-editer.js",
    "importStyle": "TodoEditor",
    "description": "TodoEditer 组件 ，显示待办编辑界面",
    "examples": [
      "import TodoEditer from './todo-editer';\n<TodoEditer />"
    ],
    "see": [
      "https://react.docschina.org/docs/components-and-props.html"
    ],
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "TodoEditer"
      }
    ],
    "interface": false,
    "extends": [
      "PureComponent"
    ]
  },
  {
    "__docId__": 3350,
    "kind": "get",
    "name": "TodoEditor",
    "memberof": "app/views/todo/todo-editer.js~TodoEditor",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/todo/todo-editer.js~TodoEditor.TodoEditor",
    "access": "public",
    "description": "获取 TodoEditer 组件的可替换类（使用可替换组件类使得扩展中的视图替换功能生效）",
    "examples": [
      "<caption>可替换组件类调用方式</caption>\nimport {TodoEditer} from './todo-editer';\n<TodoEditer />"
    ],
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Class<TodoEditer>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3351,
    "kind": "member",
    "name": "propTypes",
    "memberof": "app/views/todo/todo-editer.js~TodoEditor",
    "static": true,
    "longname": "app/views/todo/todo-editer.js~TodoEditor.propTypes",
    "access": "public",
    "description": "React 组件属性类型检查",
    "see": [
      "https://react.docschina.org/docs/typechecking-with-proptypes.html"
    ],
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3352,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "app/views/todo/todo-editer.js~TodoEditor",
    "static": true,
    "longname": "app/views/todo/todo-editer.js~TodoEditor.defaultProps",
    "access": "public",
    "description": "React 组件默认属性",
    "see": [
      "https://react.docschina.org/docs/react-component.html#defaultprops"
    ],
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "app/views/todo/todo-editer.js~TodoEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/todo/todo-editer.js~TodoEditor#constructor",
    "access": "public",
    "description": "React 组件构造函数，创建一个 TodoEditer 组件实例，会在装配之前被调用。",
    "see": [
      "https://react.docschina.org/docs/react-component.html#constructor"
    ],
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object?"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "组件属性对象"
      }
    ]
  },
  {
    "__docId__": 3354,
    "kind": "member",
    "name": "state",
    "memberof": "app/views/todo/todo-editer.js~TodoEditor",
    "static": false,
    "longname": "app/views/todo/todo-editer.js~TodoEditor#state",
    "access": "public",
    "description": "React 组件状态对象",
    "see": [
      "https://react.docschina.org/docs/state-and-lifecycle.html"
    ],
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3355,
    "kind": "method",
    "name": "handleTodoChange",
    "memberof": "app/views/todo/todo-editer.js~TodoEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/todo/todo-editer.js~TodoEditor#handleTodoChange",
    "access": "private",
    "description": "处理待办属性变更事件",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "属性名称"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "属性值"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3356,
    "kind": "method",
    "name": "checkTodo",
    "memberof": "app/views/todo/todo-editer.js~TodoEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/todo/todo-editer.js~TodoEditor#checkTodo",
    "access": "private",
    "description": "检查待办属性",
    "lineNumber": 129,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 3357,
    "kind": "member",
    "name": "handleSubmitBtnClick",
    "memberof": "app/views/todo/todo-editer.js~TodoEditor",
    "static": false,
    "longname": "app/views/todo/todo-editer.js~TodoEditor#handleSubmitBtnClick",
    "access": "private",
    "description": "处理提交代码按钮点击事件",
    "lineNumber": 163,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3358,
    "kind": "method",
    "name": "render",
    "memberof": "app/views/todo/todo-editer.js~TodoEditor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "app/views/todo/todo-editer.js~TodoEditor#render",
    "access": "private",
    "description": "React 组件生命周期函数：Render",
    "see": [
      "https://doc.react-china.org/docs/react-component.html#render",
      "https://doc.react-china.org/docs/rendering-elements.html"
    ],
    "lineNumber": 191,
    "return": {
      "nullable": null,
      "types": [
        "ReactNode",
        "string",
        "number",
        "null",
        "boolean"
      ],
      "spread": false,
      "description": "React 渲染内容"
    },
    "params": []
  },
  {
    "__docId__": 3359,
    "kind": "file",
    "name": "app/views/todo/todo-editor-dialog.js",
    "content": "import React from 'react';\nimport Modal from '../../components/modal';\nimport TodoEditor from './todo-editer';\nimport Lang from '../../lang';\n\n/**\n * 显示待办编辑对话框\n * @param {Object} todo 待办对象\n * @param {function} callback 回调函数\n * @return {void}\n */\nexport const showTodoEditDialog = (todo, callback) => {\n    const modalId = 'app-todo-editor-dialog';\n    return Modal.show({\n        title: Lang.string(todo.id ? 'todo.edit' : 'todo.create'),\n        id: modalId,\n        actions: false,\n        style: {width: 600},\n        content: <TodoEditor defaultTodo={todo} onRequestClose={() => (Modal.hide(modalId))} />\n    }, callback);\n};\n\nexport default {\n    show: showTodoEditDialog,\n};\n",
    "static": true,
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/app/views/todo/todo-editor-dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3360,
    "kind": "function",
    "name": "showTodoEditDialog",
    "memberof": "app/views/todo/todo-editor-dialog.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "app/views/todo/todo-editor-dialog.js~showTodoEditDialog",
    "access": "public",
    "export": true,
    "importPath": "xuanxuan/app/views/todo/todo-editor-dialog.js",
    "importStyle": "{showTodoEditDialog}",
    "description": "显示待办编辑对话框",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "todo",
        "description": "待办对象"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "回调函数"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "# API 概览\n\n## 源码结构\n\n喧喧客户端源码全部在 [`xxc/app/`](https://github.com/easysoft/xuanxuan/tree/master/xxc/app) 文件夹下。\n\n\n### 源码模块结构\n\n* `components/`：包含喧喧用到的通用 React 组件；\n* `config/`：包含运行时配置项；\n* `core/`：喧喧核心功能模块，包含事件机制、界面管理、网络、用户资料、数据库、聊天功能等子模块；\n* `lang/`：管理界面上的语言文本；\n* `exts/`：实现扩展机制模块；\n* `utils/`：工具模块；\n* `platform/`：平台相关模块，目前包含浏览器平台和 Electron 平台；\n* `views/`：界面模块，大部分为 React 组件形式。\n\n### 入口文件包括\n\n* `main.development.js`：Electron 主进程入口文件；\n* `index.html`：Electron 渲染进程加载的 HTML 文件；\n* `index.js`：Electron 渲染进程加载 JS 文件；\n* `package.json`：Electron 加载的 package.json 文件。\n\n### 其他资源文件\n\n* `assets/`：包含界面上用到的静态第三方资源；\n* `build-in/`：内置的扩展配置和扩展包；\n* `meida/`：界面上使用到的媒体资源，包括图片、音频和表情资源；\n* `style/`：界面上用到的 CSS 样式，大部分为 Less 格式。\n\n## API 文档\n\n### 介绍\n\nAPI 文档使用 [esdoc](https://esdoc.org/) 工具根据源码内的 [jsdoc 格式注释](http://usejsdoc.org/) 自动生成。最终文档为一组基于 HTML 文件的静态站点。通常需要一个静态 Web 服务器来访问文档目录下的 `index.html` 文件，也使用浏览器在本地打开 `index.html` 来浏览文档。\n\n文档包含源码目录内的所有类、公共变量、公共函数，并提供全局 API 搜索功能。\n\n### 文档生成\n\n进入 `xxc/` 目录执行：\n\n```bash\n$ npm run docs\n```\n\n静待几分钟，等待命令执行完成之后就可以在 `docs/client/api/` 文件夹下找到文档相关文件。\n\n### 文档修改\n\n直接修改对应 JS 文件内的 [jsdoc 格式注释](http://usejsdoc.org/)，然后使用上述方法重新生成文档即可。\n\n## 参考\n\n* [React 中文网址](https://react.docschina.org/)\n* [Electron 官方网址](https://electronjs.org/)",
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"xuanxuan\",\n  \"productName\": \"喧喧\",\n  \"version\": \"2.1.0\",\n  \"description\": \"企业即时通讯平台\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"hot-server\": \"cross-env NODE_ENV=development node --max_old_space_size=2096 -r babel-register ./build/server.js\",\n    \"build-main\": \"cross-env NODE_ENV=production node -r babel-register ./node_modules/webpack/bin/webpack --config ./build/webpack.config.electron.js --progress --profile --colors\",\n    \"build-renderer\": \"cross-env NODE_ENV=production node -r babel-register ./node_modules/webpack/bin/webpack --config ./build/webpack.config.production.js --progress --profile --colors\",\n    \"build-renderer-debug\": \"cross-env NODE_ENV=debug node -r babel-register ./node_modules/webpack/bin/webpack --config ./build/webpack.config.debug.js --progress --profile --colors\",\n    \"build-main-debug\": \"cross-env NODE_ENV=debug node -r babel-register ./node_modules/webpack/bin/webpack --config ./build/webpack.config.electron.js --progress --profile --colors\",\n    \"build\": \"npm run build-main && npm run build-renderer\",\n    \"build-debug\": \"npm run build-main-debug && npm run build-renderer-debug\",\n    \"build-browser\": \"cross-env NODE_ENV=production node -r babel-register ./node_modules/webpack/bin/webpack --config ./build/webpack.config.browser.js --progress --profile --colors\",\n    \"start\": \"cross-env NODE_ENV=production electron ./app/\",\n    \"start-hot\": \"cross-env HOT=1 NODE_ENV=development electron -r babel-register -r babel-polyfill ./app/main.development\",\n    \"start-hot-fast\": \"cross-env HOT=1 NODE_ENV=development SKIP_INSTALL_EXTENSIONS=1 electron -r babel-register -r babel-polyfill ./app/main.development\",\n    \"postinstall\": \"npm run package -- --skipbuild && concurrently \\\"electron-builder install-app-deps\\\" \\\"node node_modules/fbjs-scripts/node/check-dev-engines.js package.json\\\"\",\n    \"copy-browser-files\": \"cross-env NODE_ENV=development node --max_old_space_size=2096 -r babel-register ./build/package-browser.js\",\n    \"package\": \"node --max_old_space_size=2096 -r babel-register ./build/package.js\",\n    \"package-beta\": \"npm run package -- --beta\",\n    \"package-debug\": \"npm run package -- --debug\",\n    \"package-mac\": \"npm run package -- --platform=mac --arch=x64\",\n    \"package-mac-debug\": \"npm run package -- --platform=mac --arch=x64 --debug\",\n    \"package-win\": \"npm run package -- --platform=win --arch=x64\",\n    \"package-win-32\": \"npm run package -- --platform=win --arch=x32\",\n    \"package-win-all\": \"npm run package -- --platform=win --arch=all\",\n    \"package-linux\": \"npm run package -- --platform=linux --arch=x64\",\n    \"package-linux-32\": \"npm run package -- --platform=linux --arch=x32\",\n    \"package-win-debug\": \"npm run package -- --platform=win --arch=x64 --debug\",\n    \"package-all\": \"npm run package -- --platform=all --arch=all --clean && npm run package -- --platform=mac,win --arch=x64 --debug\",\n    \"package-all-beta\": \"npm run package -- --platform=all --arch=x64 --beta --clean && npm run package -- --platform=mac,win --arch=x64 --debug --beta\",\n    \"package-browser\": \"npm run package -- --platform=browser\",\n    \"hot-server-browser\": \"npm run hot-server -- --target=browser\",\n    \"docs\": \"./node_modules/.bin/esdoc\"\n  },\n  \"build\": {\n    \"extends\": \"./build/electron-builder.json\"\n  },\n  \"bin\": {\n    \"electron\": \"./node_modules/.bin/electron\",\n    \"xxbuild\": \"./build/build.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/easysoft/xuanxuan.git\"\n  },\n  \"author\": {\n    \"name\": \"青岛易软天创网络科技有限公司\",\n    \"email\": \"sunhao@cnezsoft.com\"\n  },\n  \"license\": \"ZPL 1.2\",\n  \"bugs\": {\n    \"url\": \"https://github.com/easysoft/xuanxuan/issues\"\n  },\n  \"keywords\": [\n    \"im\",\n    \"message\",\n    \"electron\",\n    \"react\",\n    \"webpack\",\n    \"react-hot\"\n  ],\n  \"homepage\": \"http://xuan.im\",\n  \"company\": \"青岛易软天创网络科技有限公司\",\n  \"devDependencies\": {\n    \"archiver\": \"^3.0.0\",\n    \"asar\": \"^0.14.3\",\n    \"babel-core\": \"^6.26.3\",\n    \"babel-eslint\": \"^8.2.6\",\n    \"babel-loader\": \"^7.1.5\",\n    \"babel-plugin-add-module-exports\": \"^0.2.1\",\n    \"babel-plugin-dev-expression\": \"^0.2.1\",\n    \"babel-plugin-module-resolver\": \"^3.1.1\",\n    \"babel-plugin-tcomb\": \"^0.3.24\",\n    \"babel-plugin-transform-class-properties\": \"^6.22.0\",\n    \"babel-plugin-transform-es2015-classes\": \"^6.23.0\",\n    \"babel-plugin-webpack-loaders\": \"^0.9.0\",\n    \"babel-polyfill\": \"^6.20.0\",\n    \"babel-preset-env\": \"^1.1.4\",\n    \"babel-preset-react\": \"^6.16.0\",\n    \"babel-preset-react-hmre\": \"^1.1.1\",\n    \"babel-preset-react-optimize\": \"^1.0.1\",\n    \"babel-preset-stage-0\": \"^6.16.0\",\n    \"babel-register\": \"^6.18.0\",\n    \"babel-traverse\": \"^6.22.1\",\n    \"babili-webpack-plugin\": \"^0.1.2\",\n    \"boiler-room-custodian\": \"^0.6.1\",\n    \"chalk\": \"^2.4.1\",\n    \"commander\": \"^2.19.0\",\n    \"concurrently\": \"^3.1.0\",\n    \"cpx\": \"^1.5.0\",\n    \"cross-env\": \"^5.2.0\",\n    \"css-loader\": \"^1.0.0\",\n    \"devtron\": \"^1.4.0\",\n    \"dmd-plugin-zh-cn\": \"0.0.7\",\n    \"electron\": \"^2.0.5\",\n    \"electron-builder\": \"20.24.4\",\n    \"electron-devtools-installer\": \"^2.2.4\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-inject-script-plugin\": \"^1.0.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\n    \"esdoc-react-plugin\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.2.0\",\n    \"eslint-config-airbnb\": \"^17.0.0\",\n    \"eslint-formatter-pretty\": \"^1.1.0\",\n    \"eslint-import-resolver-babel-module\": \"^4.0.0-beta.3\",\n    \"eslint-import-resolver-webpack\": \"^0.10.1\",\n    \"eslint-plugin-compat\": \"^2.5.1\",\n    \"eslint-plugin-import\": \"^2.13.0\",\n    \"eslint-plugin-jest\": \"^21.18.0\",\n    \"eslint-plugin-jsx-a11y\": \"6.1.1\",\n    \"eslint-plugin-promise\": \"^3.8.0\",\n    \"eslint-plugin-react\": \"^7.10.0\",\n    \"express\": \"^4.14.0\",\n    \"extract-text-webpack-plugin\": \"^4.0.0-beta.0\",\n    \"fbjs-scripts\": \"^0.8.3\",\n    \"file-loader\": \"^1.1.11\",\n    \"gh-pages\": \"^1.0.0\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"json-loader\": \"^0.5.7\",\n    \"less\": \"^3.7.1\",\n    \"less-loader\": \"^4.1.0\",\n    \"minimist\": \"^1.2.0\",\n    \"opn\": \"^5.4.0\",\n    \"style-loader\": \"^0.21.0\",\n    \"tcomb\": \"^3.2.27\",\n    \"uglifyjs-webpack-plugin\": \"^1.2.7\",\n    \"url-loader\": \"^1.0.1\",\n    \"webpack\": \"^4.16.1\",\n    \"webpack-cli\": \"^3.1.0\",\n    \"webpack-dev-middleware\": \"^3.1.3\",\n    \"webpack-hot-middleware\": \"^2.22.3\",\n    \"webpack-merge\": \"^4.1.3\",\n    \"why-did-you-update\": \"^0.1.1\"\n  },\n  \"dependencies\": {\n    \"aes-js\": \"^3.1.0\",\n    \"cheerio\": \"^1.0.0-rc.2\",\n    \"clipboard-js\": \"^0.3.5\",\n    \"color-thief-browser\": \"^2.0.2\",\n    \"compare-versions\": \"^3.1.0\",\n    \"dexie\": \"^2.0.4\",\n    \"draft-js\": \"^0.10.5\",\n    \"electron-debug\": \"^2.0.0\",\n    \"emojione\": \"^3.1.7\",\n    \"emojione-picker\": \"^2.1.2\",\n    \"extract-zip\": \"^1.6.6\",\n    \"fs-extra\": \"^7.0.0\",\n    \"highlight.js\": \"^9.9.0\",\n    \"hotkeys-js\": \"^3.3.5\",\n    \"htmlparser\": \"^1.7.7\",\n    \"immutable\": \"^3.7.6\",\n    \"ion-sound\": \"^3.0.7\",\n    \"marked\": \"^0.4.0\",\n    \"md5\": \"^2.2.1\",\n    \"pinyin\": \"^2.8.3\",\n    \"prop-types\": \"^15.6.2\",\n    \"react\": \"^16.4.1\",\n    \"react-dom\": \"^16.4.1\",\n    \"react-router-dom\": \"^4.2.2\",\n    \"react-split-pane\": \"^0.1.66\",\n    \"recordrtc\": \"^5.4.0\",\n    \"remove-markdown\": \"^0.3.0\",\n    \"source-map-support\": \"^0.5.6\",\n    \"uuid\": \"^3.1.0\",\n    \"wolfy87-eventemitter\": \"^5.2.2\",\n    \"ws\": \"^2.2.3\"\n  },\n  \"devEngines\": {\n    \"node\": \">=8.x\",\n    \"npm\": \">=5.x\"\n  },\n  \"optionalDependencies\": {\n    \"bufferutil\": \"^4.0.0\",\n    \"utf-8-validate\": \"^5.0.1\"\n  }\n}\n",
    "longname": "/Users/catouse/Projects/xuanxuan/xxc/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]